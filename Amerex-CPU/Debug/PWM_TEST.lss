
PWM_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b2c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00400b2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e8  20000434  00400f60  00020434  2**2
                  ALLOC
  3 .stack        00003004  2000051c  00401048  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000ed23  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fc5  00000000  00000000  0002f1de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003320  00000000  00000000  000311a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000708  00000000  00000000  000344c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000678  00000000  00000000  00034bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000145f1  00000000  00000000  00035243  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007d72  00000000  00000000  00049834  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005b6ff  00000000  00000000  000515a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000102c  00000000  00000000  000acca8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	20 35 00 20 19 06 40 00 15 06 40 00 15 06 40 00      5. ..@...@...@.
  400010:	15 06 40 00 15 06 40 00 15 06 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	15 06 40 00 15 06 40 00 00 00 00 00 15 06 40 00     ..@...@.......@.
  40003c:	15 06 40 00 15 06 40 00 15 06 40 00 15 06 40 00     ..@...@...@...@.
  40004c:	15 06 40 00 15 06 40 00 15 06 40 00 15 06 40 00     ..@...@...@...@.
  40005c:	15 06 40 00 15 06 40 00 d9 01 40 00 ed 01 40 00     ..@...@...@...@.
  40006c:	15 06 40 00 01 02 40 00 15 06 40 00 15 06 40 00     ..@...@...@...@.
  40007c:	15 06 40 00 15 06 40 00 15 06 40 00 15 06 40 00     ..@...@...@...@.
  40008c:	15 06 40 00 15 06 40 00 15 06 40 00 15 06 40 00     ..@...@...@...@.
  40009c:	15 06 40 00 15 06 40 00 15 06 40 00 15 06 40 00     ..@...@...@...@.
  4000ac:	15 06 40 00 15 06 40 00 15 06 40 00 15 06 40 00     ..@...@...@...@.
  4000bc:	15 06 40 00 15 06 40 00 15 06 40 00 15 06 40 00     ..@...@...@...@.
  4000cc:	15 06 40 00 15 06 40 00 15 06 40 00 15 06 40 00     ..@...@...@...@.
  4000dc:	15 06 40 00 15 06 40 00 15 06 40 00 15 06 40 00     ..@...@...@...@.
  4000ec:	15 06 40 00 15 06 40 00 15 06 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000434 	.word	0x20000434
  400114:	00000000 	.word	0x00000000
  400118:	00400b2c 	.word	0x00400b2c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00400b2c 	.word	0x00400b2c
  400158:	20000438 	.word	0x20000438
  40015c:	00400b2c 	.word	0x00400b2c
  400160:	00000000 	.word	0x00000000

00400164 <matrix_set_system_io>:
	p_matrix->CCFG_SYSIO &= 0xFFFF0000;
	p_matrix->CCFG_SYSIO |= (ul_io & 0xFFFF);

#else

	p_matrix->CCFG_SYSIO = ul_io;
  400164:	4b01      	ldr	r3, [pc, #4]	; (40016c <matrix_set_system_io+0x8>)
  400166:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  40016a:	4770      	bx	lr
  40016c:	400e0200 	.word	0x400e0200

00400170 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400174:	4681      	mov	r9, r0
  400176:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400178:	4b12      	ldr	r3, [pc, #72]	; (4001c4 <pio_handler_process+0x54>)
  40017a:	4798      	blx	r3
  40017c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40017e:	4648      	mov	r0, r9
  400180:	4b11      	ldr	r3, [pc, #68]	; (4001c8 <pio_handler_process+0x58>)
  400182:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400184:	4005      	ands	r5, r0
  400186:	d013      	beq.n	4001b0 <pio_handler_process+0x40>
  400188:	4c10      	ldr	r4, [pc, #64]	; (4001cc <pio_handler_process+0x5c>)
  40018a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40018e:	e003      	b.n	400198 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400190:	42b4      	cmp	r4, r6
  400192:	d00d      	beq.n	4001b0 <pio_handler_process+0x40>
  400194:	3410      	adds	r4, #16
		while (status != 0) {
  400196:	b15d      	cbz	r5, 4001b0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400198:	6820      	ldr	r0, [r4, #0]
  40019a:	42b8      	cmp	r0, r7
  40019c:	d1f8      	bne.n	400190 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40019e:	6861      	ldr	r1, [r4, #4]
  4001a0:	4229      	tst	r1, r5
  4001a2:	d0f5      	beq.n	400190 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4001a4:	68e3      	ldr	r3, [r4, #12]
  4001a6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4001a8:	6863      	ldr	r3, [r4, #4]
  4001aa:	ea25 0503 	bic.w	r5, r5, r3
  4001ae:	e7ef      	b.n	400190 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001b0:	4b07      	ldr	r3, [pc, #28]	; (4001d0 <pio_handler_process+0x60>)
  4001b2:	681b      	ldr	r3, [r3, #0]
  4001b4:	b123      	cbz	r3, 4001c0 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4001b6:	4b07      	ldr	r3, [pc, #28]	; (4001d4 <pio_handler_process+0x64>)
  4001b8:	681b      	ldr	r3, [r3, #0]
  4001ba:	b10b      	cbz	r3, 4001c0 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4001bc:	4648      	mov	r0, r9
  4001be:	4798      	blx	r3
  4001c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4001c4:	0040027d 	.word	0x0040027d
  4001c8:	00400281 	.word	0x00400281
  4001cc:	20000450 	.word	0x20000450
  4001d0:	200004c4 	.word	0x200004c4
  4001d4:	200004c0 	.word	0x200004c0

004001d8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4001d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4001da:	2109      	movs	r1, #9
  4001dc:	4801      	ldr	r0, [pc, #4]	; (4001e4 <PIOA_Handler+0xc>)
  4001de:	4b02      	ldr	r3, [pc, #8]	; (4001e8 <PIOA_Handler+0x10>)
  4001e0:	4798      	blx	r3
  4001e2:	bd08      	pop	{r3, pc}
  4001e4:	400e0e00 	.word	0x400e0e00
  4001e8:	00400171 	.word	0x00400171

004001ec <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4001ec:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4001ee:	210a      	movs	r1, #10
  4001f0:	4801      	ldr	r0, [pc, #4]	; (4001f8 <PIOB_Handler+0xc>)
  4001f2:	4b02      	ldr	r3, [pc, #8]	; (4001fc <PIOB_Handler+0x10>)
  4001f4:	4798      	blx	r3
  4001f6:	bd08      	pop	{r3, pc}
  4001f8:	400e1000 	.word	0x400e1000
  4001fc:	00400171 	.word	0x00400171

00400200 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400200:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400202:	210c      	movs	r1, #12
  400204:	4801      	ldr	r0, [pc, #4]	; (40020c <PIOD_Handler+0xc>)
  400206:	4b02      	ldr	r3, [pc, #8]	; (400210 <PIOD_Handler+0x10>)
  400208:	4798      	blx	r3
  40020a:	bd08      	pop	{r3, pc}
  40020c:	400e1400 	.word	0x400e1400
  400210:	00400171 	.word	0x00400171

00400214 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400214:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400216:	480e      	ldr	r0, [pc, #56]	; (400250 <sysclk_init+0x3c>)
  400218:	4b0e      	ldr	r3, [pc, #56]	; (400254 <sysclk_init+0x40>)
  40021a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40021c:	213e      	movs	r1, #62	; 0x3e
  40021e:	2000      	movs	r0, #0
  400220:	4b0d      	ldr	r3, [pc, #52]	; (400258 <sysclk_init+0x44>)
  400222:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400224:	4c0d      	ldr	r4, [pc, #52]	; (40025c <sysclk_init+0x48>)
  400226:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400228:	2800      	cmp	r0, #0
  40022a:	d0fc      	beq.n	400226 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40022c:	4b0c      	ldr	r3, [pc, #48]	; (400260 <sysclk_init+0x4c>)
  40022e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400230:	4a0c      	ldr	r2, [pc, #48]	; (400264 <sysclk_init+0x50>)
  400232:	4b0d      	ldr	r3, [pc, #52]	; (400268 <sysclk_init+0x54>)
  400234:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400236:	4c0d      	ldr	r4, [pc, #52]	; (40026c <sysclk_init+0x58>)
  400238:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40023a:	2800      	cmp	r0, #0
  40023c:	d0fc      	beq.n	400238 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40023e:	2010      	movs	r0, #16
  400240:	4b0b      	ldr	r3, [pc, #44]	; (400270 <sysclk_init+0x5c>)
  400242:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400244:	4b0b      	ldr	r3, [pc, #44]	; (400274 <sysclk_init+0x60>)
  400246:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400248:	480b      	ldr	r0, [pc, #44]	; (400278 <sysclk_init+0x64>)
  40024a:	4b02      	ldr	r3, [pc, #8]	; (400254 <sysclk_init+0x40>)
  40024c:	4798      	blx	r3
  40024e:	bd10      	pop	{r4, pc}
  400250:	07270e00 	.word	0x07270e00
  400254:	004007ed 	.word	0x004007ed
  400258:	004002e9 	.word	0x004002e9
  40025c:	0040033d 	.word	0x0040033d
  400260:	0040034d 	.word	0x0040034d
  400264:	200f3f01 	.word	0x200f3f01
  400268:	400e0400 	.word	0x400e0400
  40026c:	0040035d 	.word	0x0040035d
  400270:	00400285 	.word	0x00400285
  400274:	004006e1 	.word	0x004006e1
  400278:	05b8d800 	.word	0x05b8d800

0040027c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40027c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40027e:	4770      	bx	lr

00400280 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400280:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400282:	4770      	bx	lr

00400284 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400284:	4a17      	ldr	r2, [pc, #92]	; (4002e4 <pmc_switch_mck_to_pllack+0x60>)
  400286:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40028c:	4318      	orrs	r0, r3
  40028e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400290:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400292:	f013 0f08 	tst.w	r3, #8
  400296:	d10a      	bne.n	4002ae <pmc_switch_mck_to_pllack+0x2a>
  400298:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40029c:	4911      	ldr	r1, [pc, #68]	; (4002e4 <pmc_switch_mck_to_pllack+0x60>)
  40029e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4002a0:	f012 0f08 	tst.w	r2, #8
  4002a4:	d103      	bne.n	4002ae <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4002a6:	3b01      	subs	r3, #1
  4002a8:	d1f9      	bne.n	40029e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4002aa:	2001      	movs	r0, #1
  4002ac:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4002ae:	4a0d      	ldr	r2, [pc, #52]	; (4002e4 <pmc_switch_mck_to_pllack+0x60>)
  4002b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4002b2:	f023 0303 	bic.w	r3, r3, #3
  4002b6:	f043 0302 	orr.w	r3, r3, #2
  4002ba:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4002bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4002be:	f013 0f08 	tst.w	r3, #8
  4002c2:	d10a      	bne.n	4002da <pmc_switch_mck_to_pllack+0x56>
  4002c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4002c8:	4906      	ldr	r1, [pc, #24]	; (4002e4 <pmc_switch_mck_to_pllack+0x60>)
  4002ca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4002cc:	f012 0f08 	tst.w	r2, #8
  4002d0:	d105      	bne.n	4002de <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4002d2:	3b01      	subs	r3, #1
  4002d4:	d1f9      	bne.n	4002ca <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4002d6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4002d8:	4770      	bx	lr
	return 0;
  4002da:	2000      	movs	r0, #0
  4002dc:	4770      	bx	lr
  4002de:	2000      	movs	r0, #0
  4002e0:	4770      	bx	lr
  4002e2:	bf00      	nop
  4002e4:	400e0400 	.word	0x400e0400

004002e8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4002e8:	b9c8      	cbnz	r0, 40031e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4002ea:	4a11      	ldr	r2, [pc, #68]	; (400330 <pmc_switch_mainck_to_xtal+0x48>)
  4002ec:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4002ee:	0209      	lsls	r1, r1, #8
  4002f0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4002f2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4002f6:	f023 0303 	bic.w	r3, r3, #3
  4002fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4002fe:	f043 0301 	orr.w	r3, r3, #1
  400302:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400304:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400306:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400308:	f013 0f01 	tst.w	r3, #1
  40030c:	d0fb      	beq.n	400306 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40030e:	4a08      	ldr	r2, [pc, #32]	; (400330 <pmc_switch_mainck_to_xtal+0x48>)
  400310:	6a13      	ldr	r3, [r2, #32]
  400312:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40031a:	6213      	str	r3, [r2, #32]
  40031c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40031e:	4904      	ldr	r1, [pc, #16]	; (400330 <pmc_switch_mainck_to_xtal+0x48>)
  400320:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400322:	4a04      	ldr	r2, [pc, #16]	; (400334 <pmc_switch_mainck_to_xtal+0x4c>)
  400324:	401a      	ands	r2, r3
  400326:	4b04      	ldr	r3, [pc, #16]	; (400338 <pmc_switch_mainck_to_xtal+0x50>)
  400328:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40032a:	620b      	str	r3, [r1, #32]
  40032c:	4770      	bx	lr
  40032e:	bf00      	nop
  400330:	400e0400 	.word	0x400e0400
  400334:	fec8fffc 	.word	0xfec8fffc
  400338:	01370002 	.word	0x01370002

0040033c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40033c:	4b02      	ldr	r3, [pc, #8]	; (400348 <pmc_osc_is_ready_mainck+0xc>)
  40033e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400340:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400344:	4770      	bx	lr
  400346:	bf00      	nop
  400348:	400e0400 	.word	0x400e0400

0040034c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40034c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400350:	4b01      	ldr	r3, [pc, #4]	; (400358 <pmc_disable_pllack+0xc>)
  400352:	629a      	str	r2, [r3, #40]	; 0x28
  400354:	4770      	bx	lr
  400356:	bf00      	nop
  400358:	400e0400 	.word	0x400e0400

0040035c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40035c:	4b02      	ldr	r3, [pc, #8]	; (400368 <pmc_is_locked_pllack+0xc>)
  40035e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400360:	f000 0002 	and.w	r0, r0, #2
  400364:	4770      	bx	lr
  400366:	bf00      	nop
  400368:	400e0400 	.word	0x400e0400

0040036c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40036c:	282f      	cmp	r0, #47	; 0x2f
  40036e:	d81e      	bhi.n	4003ae <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400370:	281f      	cmp	r0, #31
  400372:	d80c      	bhi.n	40038e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400374:	4b11      	ldr	r3, [pc, #68]	; (4003bc <pmc_enable_periph_clk+0x50>)
  400376:	699a      	ldr	r2, [r3, #24]
  400378:	2301      	movs	r3, #1
  40037a:	4083      	lsls	r3, r0
  40037c:	4393      	bics	r3, r2
  40037e:	d018      	beq.n	4003b2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400380:	2301      	movs	r3, #1
  400382:	fa03 f000 	lsl.w	r0, r3, r0
  400386:	4b0d      	ldr	r3, [pc, #52]	; (4003bc <pmc_enable_periph_clk+0x50>)
  400388:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40038a:	2000      	movs	r0, #0
  40038c:	4770      	bx	lr
		ul_id -= 32;
  40038e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400390:	4b0a      	ldr	r3, [pc, #40]	; (4003bc <pmc_enable_periph_clk+0x50>)
  400392:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400396:	2301      	movs	r3, #1
  400398:	4083      	lsls	r3, r0
  40039a:	4393      	bics	r3, r2
  40039c:	d00b      	beq.n	4003b6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40039e:	2301      	movs	r3, #1
  4003a0:	fa03 f000 	lsl.w	r0, r3, r0
  4003a4:	4b05      	ldr	r3, [pc, #20]	; (4003bc <pmc_enable_periph_clk+0x50>)
  4003a6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4003aa:	2000      	movs	r0, #0
  4003ac:	4770      	bx	lr
		return 1;
  4003ae:	2001      	movs	r0, #1
  4003b0:	4770      	bx	lr
	return 0;
  4003b2:	2000      	movs	r0, #0
  4003b4:	4770      	bx	lr
  4003b6:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop
  4003bc:	400e0400 	.word	0x400e0400

004003c0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4003c0:	b4f0      	push	{r4, r5, r6, r7}
  4003c2:	b08c      	sub	sp, #48	; 0x30
  4003c4:	4607      	mov	r7, r0
  4003c6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4003c8:	ac01      	add	r4, sp, #4
  4003ca:	4d11      	ldr	r5, [pc, #68]	; (400410 <pwm_clocks_generate+0x50>)
  4003cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4003ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4003d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4003d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4003d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4003d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4003dc:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4003de:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4003e0:	f852 0b04 	ldr.w	r0, [r2], #4
  4003e4:	fbb6 f0f0 	udiv	r0, r6, r0
  4003e8:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4003ec:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4003f0:	d907      	bls.n	400402 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  4003f2:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4003f4:	2b0b      	cmp	r3, #11
  4003f6:	d1f3      	bne.n	4003e0 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4003f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  4003fc:	b00c      	add	sp, #48	; 0x30
  4003fe:	bcf0      	pop	{r4, r5, r6, r7}
  400400:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  400402:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  400404:	bf94      	ite	ls
  400406:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  40040a:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  40040e:	e7f5      	b.n	4003fc <pwm_clocks_generate+0x3c>
  400410:	00400ad8 	.word	0x00400ad8

00400414 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  400414:	b570      	push	{r4, r5, r6, lr}
  400416:	4606      	mov	r6, r0
  400418:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40041a:	680c      	ldr	r4, [r1, #0]
  40041c:	b144      	cbz	r4, 400430 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40041e:	6889      	ldr	r1, [r1, #8]
  400420:	4620      	mov	r0, r4
  400422:	4b0c      	ldr	r3, [pc, #48]	; (400454 <pwm_init+0x40>)
  400424:	4798      	blx	r3
  400426:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  400428:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40042c:	4298      	cmp	r0, r3
  40042e:	d00c      	beq.n	40044a <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  400430:	6868      	ldr	r0, [r5, #4]
  400432:	b140      	cbz	r0, 400446 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  400434:	68a9      	ldr	r1, [r5, #8]
  400436:	4b07      	ldr	r3, [pc, #28]	; (400454 <pwm_init+0x40>)
  400438:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  40043a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40043e:	4298      	cmp	r0, r3
  400440:	d005      	beq.n	40044e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  400442:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  400446:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  400448:	2400      	movs	r4, #0
}
  40044a:	4620      	mov	r0, r4
  40044c:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  40044e:	4604      	mov	r4, r0
  400450:	e7fb      	b.n	40044a <pwm_init+0x36>
  400452:	bf00      	nop
  400454:	004003c1 	.word	0x004003c1

00400458 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  400458:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40045a:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40045c:	684b      	ldr	r3, [r1, #4]
  40045e:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  400462:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400464:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  400466:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400468:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  40046a:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40046c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  400470:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400472:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  400476:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400478:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  40047c:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40047e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  400482:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  400486:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  40048a:	68cb      	ldr	r3, [r1, #12]
  40048c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  400490:	690b      	ldr	r3, [r1, #16]
  400492:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  400496:	7d8b      	ldrb	r3, [r1, #22]
  400498:	b13b      	cbz	r3, 4004aa <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  40049a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  40049c:	8b4b      	ldrh	r3, [r1, #26]
  40049e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4004a2:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  4004a6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4004aa:	6c85      	ldr	r5, [r0, #72]	; 0x48
  4004ac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  4004b0:	4093      	lsls	r3, r2
  4004b2:	43db      	mvns	r3, r3
  4004b4:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  4004b6:	7fcc      	ldrb	r4, [r1, #31]
  4004b8:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4004bc:	7f8c      	ldrb	r4, [r1, #30]
  4004be:	4094      	lsls	r4, r2
  4004c0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4004c4:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4004c6:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4004c8:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4004ca:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  4004cc:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4004d0:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4004d4:	f891 4020 	ldrb.w	r4, [r1, #32]
  4004d8:	4094      	lsls	r4, r2
  4004da:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4004de:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4004e0:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4004e2:	2301      	movs	r3, #1
  4004e4:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  4004e6:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4004ea:	2c00      	cmp	r4, #0
  4004ec:	d043      	beq.n	400576 <pwm_channel_init+0x11e>
		p_pwm->PWM_SCM |= channel;
  4004ee:	6a04      	ldr	r4, [r0, #32]
  4004f0:	431c      	orrs	r4, r3
  4004f2:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  4004f4:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4004f8:	2c02      	cmp	r4, #2
  4004fa:	d041      	beq.n	400580 <pwm_channel_init+0x128>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  4004fc:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  400500:	43dc      	mvns	r4, r3
  400502:	4025      	ands	r5, r4
  400504:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  400508:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
  40050c:	2d01      	cmp	r5, #1
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  40050e:	bf07      	ittee	eq
  400510:	6e84      	ldreq	r4, [r0, #104]	; 0x68
  400512:	431c      	orreq	r4, r3
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  400514:	6e85      	ldrne	r5, [r0, #104]	; 0x68
  400516:	402c      	andne	r4, r5
  400518:	6684      	str	r4, [r0, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  40051a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  40051e:	2c02      	cmp	r4, #2
  400520:	d034      	beq.n	40058c <pwm_channel_init+0x134>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  400522:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  400526:	041b      	lsls	r3, r3, #16
  400528:	43dc      	mvns	r4, r3
  40052a:	4025      	ands	r5, r4
  40052c:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  400530:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
  400534:	2d01      	cmp	r5, #1
  400536:	d030      	beq.n	40059a <pwm_channel_init+0x142>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  400538:	6e83      	ldr	r3, [r0, #104]	; 0x68
  40053a:	401c      	ands	r4, r3
  40053c:	6684      	str	r4, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  40053e:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  400540:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  400542:	23ff      	movs	r3, #255	; 0xff
  400544:	4093      	lsls	r3, r2
  400546:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  40054a:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  40054e:	fa03 f202 	lsl.w	r2, r3, r2
  400552:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  400554:	66c2      	str	r2, [r0, #108]	; 0x6c
#endif

	ch_num = p_channel->channel;

#if SAM4E
	if (!ch_num) {
  400556:	680b      	ldr	r3, [r1, #0]
  400558:	b953      	cbnz	r3, 400570 <pwm_channel_init+0x118>
		if (p_channel->spread_spectrum_mode ==
  40055a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
  40055e:	2b01      	cmp	r3, #1
				PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  400560:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  400562:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400566:	bf08      	it	eq
  400568:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
					PWM_SSPR_SPRDM;
		} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  40056c:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  400570:	2000      	movs	r0, #0
  400572:	bc70      	pop	{r4, r5, r6}
  400574:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  400576:	6a04      	ldr	r4, [r0, #32]
  400578:	ea24 0403 	bic.w	r4, r4, r3
  40057c:	6204      	str	r4, [r0, #32]
  40057e:	e7b9      	b.n	4004f4 <pwm_channel_init+0x9c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  400580:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  400584:	431c      	orrs	r4, r3
  400586:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  40058a:	e7c6      	b.n	40051a <pwm_channel_init+0xc2>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  40058c:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  400590:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
  400594:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  400598:	e7d1      	b.n	40053e <pwm_channel_init+0xe6>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  40059a:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40059c:	4323      	orrs	r3, r4
  40059e:	6683      	str	r3, [r0, #104]	; 0x68
  4005a0:	e7cd      	b.n	40053e <pwm_channel_init+0xe6>

004005a2 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  4005a2:	690b      	ldr	r3, [r1, #16]
  4005a4:	4293      	cmp	r3, r2
  4005a6:	d202      	bcs.n	4005ae <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
  4005a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  4005ac:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
  4005ae:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
  4005b0:	60ca      	str	r2, [r1, #12]
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  4005b2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4005b6:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
	return 0;
  4005ba:	2000      	movs	r0, #0
  4005bc:	4770      	bx	lr

004005be <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4005be:	2301      	movs	r3, #1
  4005c0:	fa03 f101 	lsl.w	r1, r3, r1
  4005c4:	6041      	str	r1, [r0, #4]
  4005c6:	4770      	bx	lr

004005c8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4005c8:	2301      	movs	r3, #1
  4005ca:	fa03 f101 	lsl.w	r1, r3, r1
  4005ce:	6081      	str	r1, [r0, #8]
  4005d0:	4770      	bx	lr
	...

004005d4 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4005d4:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4005d6:	2009      	movs	r0, #9
  4005d8:	4c0c      	ldr	r4, [pc, #48]	; (40060c <board_init+0x38>)
  4005da:	47a0      	blx	r4
  4005dc:	200a      	movs	r0, #10
  4005de:	47a0      	blx	r4
  4005e0:	200c      	movs	r0, #12
  4005e2:	47a0      	blx	r4
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4005e4:	4b0a      	ldr	r3, [pc, #40]	; (400610 <board_init+0x3c>)
  4005e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4005ea:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4005ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4005f0:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4005f2:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4005f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4005f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4005fa:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4005fe:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400600:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400602:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400606:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400608:	605a      	str	r2, [r3, #4]
  40060a:	bd10      	pop	{r4, pc}
  40060c:	0040036d 	.word	0x0040036d
  400610:	400e1400 	.word	0x400e1400

00400614 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400614:	e7fe      	b.n	400614 <Dummy_Handler>
	...

00400618 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400618:	b500      	push	{lr}
  40061a:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40061c:	4b25      	ldr	r3, [pc, #148]	; (4006b4 <Reset_Handler+0x9c>)
  40061e:	4a26      	ldr	r2, [pc, #152]	; (4006b8 <Reset_Handler+0xa0>)
  400620:	429a      	cmp	r2, r3
  400622:	d010      	beq.n	400646 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400624:	4b25      	ldr	r3, [pc, #148]	; (4006bc <Reset_Handler+0xa4>)
  400626:	4a23      	ldr	r2, [pc, #140]	; (4006b4 <Reset_Handler+0x9c>)
  400628:	429a      	cmp	r2, r3
  40062a:	d20c      	bcs.n	400646 <Reset_Handler+0x2e>
  40062c:	3b01      	subs	r3, #1
  40062e:	1a9b      	subs	r3, r3, r2
  400630:	f023 0303 	bic.w	r3, r3, #3
  400634:	3304      	adds	r3, #4
  400636:	4413      	add	r3, r2
  400638:	491f      	ldr	r1, [pc, #124]	; (4006b8 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40063a:	f851 0b04 	ldr.w	r0, [r1], #4
  40063e:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400642:	429a      	cmp	r2, r3
  400644:	d1f9      	bne.n	40063a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400646:	4b1e      	ldr	r3, [pc, #120]	; (4006c0 <Reset_Handler+0xa8>)
  400648:	4a1e      	ldr	r2, [pc, #120]	; (4006c4 <Reset_Handler+0xac>)
  40064a:	429a      	cmp	r2, r3
  40064c:	d20a      	bcs.n	400664 <Reset_Handler+0x4c>
  40064e:	3b01      	subs	r3, #1
  400650:	1a9b      	subs	r3, r3, r2
  400652:	f023 0303 	bic.w	r3, r3, #3
  400656:	3304      	adds	r3, #4
  400658:	4413      	add	r3, r2
		*pDest++ = 0;
  40065a:	2100      	movs	r1, #0
  40065c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400660:	4293      	cmp	r3, r2
  400662:	d1fb      	bne.n	40065c <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400664:	4a18      	ldr	r2, [pc, #96]	; (4006c8 <Reset_Handler+0xb0>)
  400666:	4b19      	ldr	r3, [pc, #100]	; (4006cc <Reset_Handler+0xb4>)
  400668:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40066c:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40066e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400672:	fab3 f383 	clz	r3, r3
  400676:	095b      	lsrs	r3, r3, #5
  400678:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40067a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40067c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400680:	2200      	movs	r2, #0
  400682:	4b13      	ldr	r3, [pc, #76]	; (4006d0 <Reset_Handler+0xb8>)
  400684:	701a      	strb	r2, [r3, #0]
	return flags;
  400686:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400688:	4a12      	ldr	r2, [pc, #72]	; (4006d4 <Reset_Handler+0xbc>)
  40068a:	6813      	ldr	r3, [r2, #0]
  40068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400690:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400692:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400696:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40069a:	b129      	cbz	r1, 4006a8 <Reset_Handler+0x90>
		cpu_irq_enable();
  40069c:	2201      	movs	r2, #1
  40069e:	4b0c      	ldr	r3, [pc, #48]	; (4006d0 <Reset_Handler+0xb8>)
  4006a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4006a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4006a6:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4006a8:	4b0b      	ldr	r3, [pc, #44]	; (4006d8 <Reset_Handler+0xc0>)
  4006aa:	4798      	blx	r3

	/* Branch to main function */
	main();
  4006ac:	4b0b      	ldr	r3, [pc, #44]	; (4006dc <Reset_Handler+0xc4>)
  4006ae:	4798      	blx	r3
  4006b0:	e7fe      	b.n	4006b0 <Reset_Handler+0x98>
  4006b2:	bf00      	nop
  4006b4:	20000000 	.word	0x20000000
  4006b8:	00400b2c 	.word	0x00400b2c
  4006bc:	20000434 	.word	0x20000434
  4006c0:	2000051c 	.word	0x2000051c
  4006c4:	20000434 	.word	0x20000434
  4006c8:	e000ed00 	.word	0xe000ed00
  4006cc:	00400000 	.word	0x00400000
  4006d0:	20000000 	.word	0x20000000
  4006d4:	e000ed88 	.word	0xe000ed88
  4006d8:	00400969 	.word	0x00400969
  4006dc:	004008bd 	.word	0x004008bd

004006e0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4006e0:	4b3b      	ldr	r3, [pc, #236]	; (4007d0 <SystemCoreClockUpdate+0xf0>)
  4006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006e4:	f003 0303 	and.w	r3, r3, #3
  4006e8:	2b01      	cmp	r3, #1
  4006ea:	d01d      	beq.n	400728 <SystemCoreClockUpdate+0x48>
  4006ec:	b183      	cbz	r3, 400710 <SystemCoreClockUpdate+0x30>
  4006ee:	2b02      	cmp	r3, #2
  4006f0:	d036      	beq.n	400760 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4006f2:	4b37      	ldr	r3, [pc, #220]	; (4007d0 <SystemCoreClockUpdate+0xf0>)
  4006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006fa:	2b70      	cmp	r3, #112	; 0x70
  4006fc:	d05f      	beq.n	4007be <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4006fe:	4b34      	ldr	r3, [pc, #208]	; (4007d0 <SystemCoreClockUpdate+0xf0>)
  400700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400702:	4934      	ldr	r1, [pc, #208]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  400704:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400708:	680b      	ldr	r3, [r1, #0]
  40070a:	40d3      	lsrs	r3, r2
  40070c:	600b      	str	r3, [r1, #0]
  40070e:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400710:	4b31      	ldr	r3, [pc, #196]	; (4007d8 <SystemCoreClockUpdate+0xf8>)
  400712:	695b      	ldr	r3, [r3, #20]
  400714:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400718:	bf14      	ite	ne
  40071a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40071e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400722:	4b2c      	ldr	r3, [pc, #176]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  400724:	601a      	str	r2, [r3, #0]
  400726:	e7e4      	b.n	4006f2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400728:	4b29      	ldr	r3, [pc, #164]	; (4007d0 <SystemCoreClockUpdate+0xf0>)
  40072a:	6a1b      	ldr	r3, [r3, #32]
  40072c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400730:	d003      	beq.n	40073a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400732:	4a2a      	ldr	r2, [pc, #168]	; (4007dc <SystemCoreClockUpdate+0xfc>)
  400734:	4b27      	ldr	r3, [pc, #156]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  400736:	601a      	str	r2, [r3, #0]
  400738:	e7db      	b.n	4006f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40073a:	4a29      	ldr	r2, [pc, #164]	; (4007e0 <SystemCoreClockUpdate+0x100>)
  40073c:	4b25      	ldr	r3, [pc, #148]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  40073e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400740:	4b23      	ldr	r3, [pc, #140]	; (4007d0 <SystemCoreClockUpdate+0xf0>)
  400742:	6a1b      	ldr	r3, [r3, #32]
  400744:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400748:	2b10      	cmp	r3, #16
  40074a:	d005      	beq.n	400758 <SystemCoreClockUpdate+0x78>
  40074c:	2b20      	cmp	r3, #32
  40074e:	d1d0      	bne.n	4006f2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400750:	4a22      	ldr	r2, [pc, #136]	; (4007dc <SystemCoreClockUpdate+0xfc>)
  400752:	4b20      	ldr	r3, [pc, #128]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  400754:	601a      	str	r2, [r3, #0]
				break;
  400756:	e7cc      	b.n	4006f2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400758:	4a22      	ldr	r2, [pc, #136]	; (4007e4 <SystemCoreClockUpdate+0x104>)
  40075a:	4b1e      	ldr	r3, [pc, #120]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  40075c:	601a      	str	r2, [r3, #0]
				break;
  40075e:	e7c8      	b.n	4006f2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400760:	4b1b      	ldr	r3, [pc, #108]	; (4007d0 <SystemCoreClockUpdate+0xf0>)
  400762:	6a1b      	ldr	r3, [r3, #32]
  400764:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400768:	d016      	beq.n	400798 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40076a:	4a1c      	ldr	r2, [pc, #112]	; (4007dc <SystemCoreClockUpdate+0xfc>)
  40076c:	4b19      	ldr	r3, [pc, #100]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  40076e:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400770:	4b17      	ldr	r3, [pc, #92]	; (4007d0 <SystemCoreClockUpdate+0xf0>)
  400772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400774:	f003 0303 	and.w	r3, r3, #3
  400778:	2b02      	cmp	r3, #2
  40077a:	d1ba      	bne.n	4006f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40077c:	4a14      	ldr	r2, [pc, #80]	; (4007d0 <SystemCoreClockUpdate+0xf0>)
  40077e:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400780:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400782:	4814      	ldr	r0, [pc, #80]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400784:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400788:	6803      	ldr	r3, [r0, #0]
  40078a:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40078e:	b2d2      	uxtb	r2, r2
  400790:	fbb3 f3f2 	udiv	r3, r3, r2
  400794:	6003      	str	r3, [r0, #0]
  400796:	e7ac      	b.n	4006f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400798:	4a11      	ldr	r2, [pc, #68]	; (4007e0 <SystemCoreClockUpdate+0x100>)
  40079a:	4b0e      	ldr	r3, [pc, #56]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  40079c:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40079e:	4b0c      	ldr	r3, [pc, #48]	; (4007d0 <SystemCoreClockUpdate+0xf0>)
  4007a0:	6a1b      	ldr	r3, [r3, #32]
  4007a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4007a6:	2b10      	cmp	r3, #16
  4007a8:	d005      	beq.n	4007b6 <SystemCoreClockUpdate+0xd6>
  4007aa:	2b20      	cmp	r3, #32
  4007ac:	d1e0      	bne.n	400770 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4007ae:	4a0b      	ldr	r2, [pc, #44]	; (4007dc <SystemCoreClockUpdate+0xfc>)
  4007b0:	4b08      	ldr	r3, [pc, #32]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  4007b2:	601a      	str	r2, [r3, #0]
				break;
  4007b4:	e7dc      	b.n	400770 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4007b6:	4a0b      	ldr	r2, [pc, #44]	; (4007e4 <SystemCoreClockUpdate+0x104>)
  4007b8:	4b06      	ldr	r3, [pc, #24]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  4007ba:	601a      	str	r2, [r3, #0]
				break;
  4007bc:	e7d8      	b.n	400770 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4007be:	4a05      	ldr	r2, [pc, #20]	; (4007d4 <SystemCoreClockUpdate+0xf4>)
  4007c0:	6813      	ldr	r3, [r2, #0]
  4007c2:	4909      	ldr	r1, [pc, #36]	; (4007e8 <SystemCoreClockUpdate+0x108>)
  4007c4:	fba1 1303 	umull	r1, r3, r1, r3
  4007c8:	085b      	lsrs	r3, r3, #1
  4007ca:	6013      	str	r3, [r2, #0]
  4007cc:	4770      	bx	lr
  4007ce:	bf00      	nop
  4007d0:	400e0400 	.word	0x400e0400
  4007d4:	20000004 	.word	0x20000004
  4007d8:	400e1810 	.word	0x400e1810
  4007dc:	00b71b00 	.word	0x00b71b00
  4007e0:	003d0900 	.word	0x003d0900
  4007e4:	007a1200 	.word	0x007a1200
  4007e8:	aaaaaaab 	.word	0xaaaaaaab

004007ec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4007ec:	4b12      	ldr	r3, [pc, #72]	; (400838 <system_init_flash+0x4c>)
  4007ee:	4298      	cmp	r0, r3
  4007f0:	d911      	bls.n	400816 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4007f2:	4b12      	ldr	r3, [pc, #72]	; (40083c <system_init_flash+0x50>)
  4007f4:	4298      	cmp	r0, r3
  4007f6:	d913      	bls.n	400820 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4007f8:	4b11      	ldr	r3, [pc, #68]	; (400840 <system_init_flash+0x54>)
  4007fa:	4298      	cmp	r0, r3
  4007fc:	d914      	bls.n	400828 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4007fe:	4b11      	ldr	r3, [pc, #68]	; (400844 <system_init_flash+0x58>)
  400800:	4298      	cmp	r0, r3
  400802:	d915      	bls.n	400830 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400804:	4b10      	ldr	r3, [pc, #64]	; (400848 <system_init_flash+0x5c>)
  400806:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400808:	bf94      	ite	ls
  40080a:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40080e:	4a0f      	ldrhi	r2, [pc, #60]	; (40084c <system_init_flash+0x60>)
  400810:	4b0f      	ldr	r3, [pc, #60]	; (400850 <system_init_flash+0x64>)
  400812:	601a      	str	r2, [r3, #0]
  400814:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400816:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40081a:	4b0d      	ldr	r3, [pc, #52]	; (400850 <system_init_flash+0x64>)
  40081c:	601a      	str	r2, [r3, #0]
  40081e:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400820:	4a0c      	ldr	r2, [pc, #48]	; (400854 <system_init_flash+0x68>)
  400822:	4b0b      	ldr	r3, [pc, #44]	; (400850 <system_init_flash+0x64>)
  400824:	601a      	str	r2, [r3, #0]
  400826:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400828:	4a0b      	ldr	r2, [pc, #44]	; (400858 <system_init_flash+0x6c>)
  40082a:	4b09      	ldr	r3, [pc, #36]	; (400850 <system_init_flash+0x64>)
  40082c:	601a      	str	r2, [r3, #0]
  40082e:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400830:	4a0a      	ldr	r2, [pc, #40]	; (40085c <system_init_flash+0x70>)
  400832:	4b07      	ldr	r3, [pc, #28]	; (400850 <system_init_flash+0x64>)
  400834:	601a      	str	r2, [r3, #0]
  400836:	4770      	bx	lr
  400838:	01312cff 	.word	0x01312cff
  40083c:	026259ff 	.word	0x026259ff
  400840:	039386ff 	.word	0x039386ff
  400844:	04c4b3ff 	.word	0x04c4b3ff
  400848:	05f5e0ff 	.word	0x05f5e0ff
  40084c:	04000500 	.word	0x04000500
  400850:	400e0a00 	.word	0x400e0a00
  400854:	04000100 	.word	0x04000100
  400858:	04000200 	.word	0x04000200
  40085c:	04000300 	.word	0x04000300

00400860 <GPIO_Input_output>:
	/* Insert application code here, after the board has been initialized. */
}


void GPIO_Input_output()
{
  400860:	b4f0      	push	{r4, r5, r6, r7}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400862:	4b14      	ldr	r3, [pc, #80]	; (4008b4 <GPIO_Input_output+0x54>)
  400864:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  400868:	611f      	str	r7, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40086a:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40086e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  400872:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400874:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400878:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40087c:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40087e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400882:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  400886:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400888:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40088c:	4a0a      	ldr	r2, [pc, #40]	; (4008b8 <GPIO_Input_output+0x58>)
  40088e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  400892:	6116      	str	r6, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400894:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400898:	f44f 6500 	mov.w	r5, #2048	; 0x800
  40089c:	6115      	str	r5, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40089e:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4008a2:	631f      	str	r7, [r3, #48]	; 0x30
  4008a4:	6316      	str	r6, [r2, #48]	; 0x30
  4008a6:	6315      	str	r5, [r2, #48]	; 0x30
  4008a8:	631c      	str	r4, [r3, #48]	; 0x30
  4008aa:	6318      	str	r0, [r3, #48]	; 0x30
  4008ac:	6319      	str	r1, [r3, #48]	; 0x30
	   ioport_set_pin_level(SYS_RST_LED,1);
	   ioport_set_pin_level(PWMH0, 1);
	   ioport_set_pin_level(PWMH1, 1);
	   ioport_set_pin_level(PWMH2, 1);
	
  4008ae:	bcf0      	pop	{r4, r5, r6, r7}
  4008b0:	4770      	bx	lr
  4008b2:	bf00      	nop
  4008b4:	400e1400 	.word	0x400e1400
  4008b8:	400e1000 	.word	0x400e1000

004008bc <main>:
{
  4008bc:	b530      	push	{r4, r5, lr}
  4008be:	b085      	sub	sp, #20
   sysclk_init();
  4008c0:	4b1d      	ldr	r3, [pc, #116]	; (400938 <main+0x7c>)
  4008c2:	4798      	blx	r3
   board_init();
  4008c4:	4b1d      	ldr	r3, [pc, #116]	; (40093c <main+0x80>)
  4008c6:	4798      	blx	r3
	matrix_set_system_io(0xC00);
  4008c8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  4008cc:	4b1c      	ldr	r3, [pc, #112]	; (400940 <main+0x84>)
  4008ce:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PWM);
  4008d0:	2024      	movs	r0, #36	; 0x24
  4008d2:	4b1c      	ldr	r3, [pc, #112]	; (400944 <main+0x88>)
  4008d4:	4798      	blx	r3
	pwm_channel_disable(PWM, PIN_PWM_LED0_CHANNEL);
  4008d6:	2100      	movs	r1, #0
  4008d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4008dc:	4b1a      	ldr	r3, [pc, #104]	; (400948 <main+0x8c>)
  4008de:	4798      	blx	r3
	pwm_clock_t clock_setting = {
  4008e0:	f640 13c4 	movw	r3, #2500	; 0x9c4
  4008e4:	9301      	str	r3, [sp, #4]
  4008e6:	2500      	movs	r5, #0
  4008e8:	9502      	str	r5, [sp, #8]
  4008ea:	4b18      	ldr	r3, [pc, #96]	; (40094c <main+0x90>)
  4008ec:	9303      	str	r3, [sp, #12]
	pwm_init(PWM, &clock_setting);
  4008ee:	a901      	add	r1, sp, #4
  4008f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4008f4:	4b16      	ldr	r3, [pc, #88]	; (400950 <main+0x94>)
  4008f6:	4798      	blx	r3
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  4008f8:	4c16      	ldr	r4, [pc, #88]	; (400954 <main+0x98>)
  4008fa:	8125      	strh	r5, [r4, #8]
	g_pwm_channel_led.polarity = PWM_LOW;
  4008fc:	72a5      	strb	r5, [r4, #10]
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  4008fe:	230b      	movs	r3, #11
  400900:	6063      	str	r3, [r4, #4]
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  400902:	2332      	movs	r3, #50	; 0x32
  400904:	6123      	str	r3, [r4, #16]
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  400906:	60e5      	str	r5, [r4, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  400908:	6025      	str	r5, [r4, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led);
  40090a:	4621      	mov	r1, r4
  40090c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400910:	4b11      	ldr	r3, [pc, #68]	; (400958 <main+0x9c>)
  400912:	4798      	blx	r3
	GPIO_Input_output();
  400914:	4b11      	ldr	r3, [pc, #68]	; (40095c <main+0xa0>)
  400916:	4798      	blx	r3
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  400918:	6025      	str	r5, [r4, #0]
	pwm_channel_update_duty(PWM, &g_pwm_channel_led, 10);
  40091a:	220a      	movs	r2, #10
  40091c:	4621      	mov	r1, r4
  40091e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400922:	4b0f      	ldr	r3, [pc, #60]	; (400960 <main+0xa4>)
  400924:	4798      	blx	r3
		pwm_channel_enable(PWM, PIN_PWM_LED0_CHANNEL);
  400926:	4629      	mov	r1, r5
  400928:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40092c:	4b0d      	ldr	r3, [pc, #52]	; (400964 <main+0xa8>)
  40092e:	4798      	blx	r3
}
  400930:	4628      	mov	r0, r5
  400932:	b005      	add	sp, #20
  400934:	bd30      	pop	{r4, r5, pc}
  400936:	bf00      	nop
  400938:	00400215 	.word	0x00400215
  40093c:	004005d5 	.word	0x004005d5
  400940:	00400165 	.word	0x00400165
  400944:	0040036d 	.word	0x0040036d
  400948:	004005c9 	.word	0x004005c9
  40094c:	05b8d800 	.word	0x05b8d800
  400950:	00400415 	.word	0x00400415
  400954:	200004c8 	.word	0x200004c8
  400958:	00400459 	.word	0x00400459
  40095c:	00400861 	.word	0x00400861
  400960:	004005a3 	.word	0x004005a3
  400964:	004005bf 	.word	0x004005bf

00400968 <__libc_init_array>:
  400968:	b570      	push	{r4, r5, r6, lr}
  40096a:	4e0f      	ldr	r6, [pc, #60]	; (4009a8 <__libc_init_array+0x40>)
  40096c:	4d0f      	ldr	r5, [pc, #60]	; (4009ac <__libc_init_array+0x44>)
  40096e:	1b76      	subs	r6, r6, r5
  400970:	10b6      	asrs	r6, r6, #2
  400972:	bf18      	it	ne
  400974:	2400      	movne	r4, #0
  400976:	d005      	beq.n	400984 <__libc_init_array+0x1c>
  400978:	3401      	adds	r4, #1
  40097a:	f855 3b04 	ldr.w	r3, [r5], #4
  40097e:	4798      	blx	r3
  400980:	42a6      	cmp	r6, r4
  400982:	d1f9      	bne.n	400978 <__libc_init_array+0x10>
  400984:	4e0a      	ldr	r6, [pc, #40]	; (4009b0 <__libc_init_array+0x48>)
  400986:	4d0b      	ldr	r5, [pc, #44]	; (4009b4 <__libc_init_array+0x4c>)
  400988:	1b76      	subs	r6, r6, r5
  40098a:	f000 f8bd 	bl	400b08 <_init>
  40098e:	10b6      	asrs	r6, r6, #2
  400990:	bf18      	it	ne
  400992:	2400      	movne	r4, #0
  400994:	d006      	beq.n	4009a4 <__libc_init_array+0x3c>
  400996:	3401      	adds	r4, #1
  400998:	f855 3b04 	ldr.w	r3, [r5], #4
  40099c:	4798      	blx	r3
  40099e:	42a6      	cmp	r6, r4
  4009a0:	d1f9      	bne.n	400996 <__libc_init_array+0x2e>
  4009a2:	bd70      	pop	{r4, r5, r6, pc}
  4009a4:	bd70      	pop	{r4, r5, r6, pc}
  4009a6:	bf00      	nop
  4009a8:	00400b14 	.word	0x00400b14
  4009ac:	00400b14 	.word	0x00400b14
  4009b0:	00400b1c 	.word	0x00400b1c
  4009b4:	00400b14 	.word	0x00400b14

004009b8 <register_fini>:
  4009b8:	4b02      	ldr	r3, [pc, #8]	; (4009c4 <register_fini+0xc>)
  4009ba:	b113      	cbz	r3, 4009c2 <register_fini+0xa>
  4009bc:	4802      	ldr	r0, [pc, #8]	; (4009c8 <register_fini+0x10>)
  4009be:	f000 b805 	b.w	4009cc <atexit>
  4009c2:	4770      	bx	lr
  4009c4:	00000000 	.word	0x00000000
  4009c8:	004009d9 	.word	0x004009d9

004009cc <atexit>:
  4009cc:	2300      	movs	r3, #0
  4009ce:	4601      	mov	r1, r0
  4009d0:	461a      	mov	r2, r3
  4009d2:	4618      	mov	r0, r3
  4009d4:	f000 b81e 	b.w	400a14 <__register_exitproc>

004009d8 <__libc_fini_array>:
  4009d8:	b538      	push	{r3, r4, r5, lr}
  4009da:	4c0a      	ldr	r4, [pc, #40]	; (400a04 <__libc_fini_array+0x2c>)
  4009dc:	4d0a      	ldr	r5, [pc, #40]	; (400a08 <__libc_fini_array+0x30>)
  4009de:	1b64      	subs	r4, r4, r5
  4009e0:	10a4      	asrs	r4, r4, #2
  4009e2:	d00a      	beq.n	4009fa <__libc_fini_array+0x22>
  4009e4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4009e8:	3b01      	subs	r3, #1
  4009ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4009ee:	3c01      	subs	r4, #1
  4009f0:	f855 3904 	ldr.w	r3, [r5], #-4
  4009f4:	4798      	blx	r3
  4009f6:	2c00      	cmp	r4, #0
  4009f8:	d1f9      	bne.n	4009ee <__libc_fini_array+0x16>
  4009fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4009fe:	f000 b88d 	b.w	400b1c <_fini>
  400a02:	bf00      	nop
  400a04:	00400b2c 	.word	0x00400b2c
  400a08:	00400b28 	.word	0x00400b28

00400a0c <__retarget_lock_acquire_recursive>:
  400a0c:	4770      	bx	lr
  400a0e:	bf00      	nop

00400a10 <__retarget_lock_release_recursive>:
  400a10:	4770      	bx	lr
  400a12:	bf00      	nop

00400a14 <__register_exitproc>:
  400a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400a18:	4d2c      	ldr	r5, [pc, #176]	; (400acc <__register_exitproc+0xb8>)
  400a1a:	4606      	mov	r6, r0
  400a1c:	6828      	ldr	r0, [r5, #0]
  400a1e:	4698      	mov	r8, r3
  400a20:	460f      	mov	r7, r1
  400a22:	4691      	mov	r9, r2
  400a24:	f7ff fff2 	bl	400a0c <__retarget_lock_acquire_recursive>
  400a28:	4b29      	ldr	r3, [pc, #164]	; (400ad0 <__register_exitproc+0xbc>)
  400a2a:	681c      	ldr	r4, [r3, #0]
  400a2c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400a30:	2b00      	cmp	r3, #0
  400a32:	d03e      	beq.n	400ab2 <__register_exitproc+0x9e>
  400a34:	685a      	ldr	r2, [r3, #4]
  400a36:	2a1f      	cmp	r2, #31
  400a38:	dc1c      	bgt.n	400a74 <__register_exitproc+0x60>
  400a3a:	f102 0e01 	add.w	lr, r2, #1
  400a3e:	b176      	cbz	r6, 400a5e <__register_exitproc+0x4a>
  400a40:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400a44:	2401      	movs	r4, #1
  400a46:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400a4a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400a4e:	4094      	lsls	r4, r2
  400a50:	4320      	orrs	r0, r4
  400a52:	2e02      	cmp	r6, #2
  400a54:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400a58:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400a5c:	d023      	beq.n	400aa6 <__register_exitproc+0x92>
  400a5e:	3202      	adds	r2, #2
  400a60:	f8c3 e004 	str.w	lr, [r3, #4]
  400a64:	6828      	ldr	r0, [r5, #0]
  400a66:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400a6a:	f7ff ffd1 	bl	400a10 <__retarget_lock_release_recursive>
  400a6e:	2000      	movs	r0, #0
  400a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400a74:	4b17      	ldr	r3, [pc, #92]	; (400ad4 <__register_exitproc+0xc0>)
  400a76:	b30b      	cbz	r3, 400abc <__register_exitproc+0xa8>
  400a78:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400a7c:	f3af 8000 	nop.w
  400a80:	4603      	mov	r3, r0
  400a82:	b1d8      	cbz	r0, 400abc <__register_exitproc+0xa8>
  400a84:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400a88:	6002      	str	r2, [r0, #0]
  400a8a:	2100      	movs	r1, #0
  400a8c:	6041      	str	r1, [r0, #4]
  400a8e:	460a      	mov	r2, r1
  400a90:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400a94:	f04f 0e01 	mov.w	lr, #1
  400a98:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400a9c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400aa0:	2e00      	cmp	r6, #0
  400aa2:	d0dc      	beq.n	400a5e <__register_exitproc+0x4a>
  400aa4:	e7cc      	b.n	400a40 <__register_exitproc+0x2c>
  400aa6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400aaa:	430c      	orrs	r4, r1
  400aac:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400ab0:	e7d5      	b.n	400a5e <__register_exitproc+0x4a>
  400ab2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400ab6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400aba:	e7bb      	b.n	400a34 <__register_exitproc+0x20>
  400abc:	6828      	ldr	r0, [r5, #0]
  400abe:	f7ff ffa7 	bl	400a10 <__retarget_lock_release_recursive>
  400ac2:	f04f 30ff 	mov.w	r0, #4294967295
  400ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400aca:	bf00      	nop
  400acc:	20000430 	.word	0x20000430
  400ad0:	00400b04 	.word	0x00400b04
  400ad4:	00000000 	.word	0x00000000
  400ad8:	00000001 	.word	0x00000001
  400adc:	00000002 	.word	0x00000002
  400ae0:	00000004 	.word	0x00000004
  400ae4:	00000008 	.word	0x00000008
  400ae8:	00000010 	.word	0x00000010
  400aec:	00000020 	.word	0x00000020
  400af0:	00000040 	.word	0x00000040
  400af4:	00000080 	.word	0x00000080
  400af8:	00000100 	.word	0x00000100
  400afc:	00000200 	.word	0x00000200
  400b00:	00000400 	.word	0x00000400

00400b04 <_global_impure_ptr>:
  400b04:	20000008                                ... 

00400b08 <_init>:
  400b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b0a:	bf00      	nop
  400b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400b0e:	bc08      	pop	{r3}
  400b10:	469e      	mov	lr, r3
  400b12:	4770      	bx	lr

00400b14 <__init_array_start>:
  400b14:	004009b9 	.word	0x004009b9

00400b18 <__frame_dummy_init_array_entry>:
  400b18:	0040011d                                ..@.

00400b1c <_fini>:
  400b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b1e:	bf00      	nop
  400b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400b22:	bc08      	pop	{r3}
  400b24:	469e      	mov	lr, r3
  400b26:	4770      	bx	lr

00400b28 <__fini_array_start>:
  400b28:	004000f9 	.word	0x004000f9
