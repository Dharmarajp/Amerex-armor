
Amerex_GE_Ver_1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fa38  00420000  00420000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0042fa38  0042fa38  0001fa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ac4  20000000  0042fa40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000c78  20000ac4  00430504  00020ac4  2**2
                  ALLOC
  4 .stack        00003004  2000173c  0043117c  00020ac4  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020ac4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020af2  2**0
                  CONTENTS, READONLY
  7 .debug_info   00051f5e  00000000  00000000  00020b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000959d  00000000  00000000  00072aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00010ab2  00000000  00000000  0007c046  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000018e8  00000000  00000000  0008caf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001968  00000000  00000000  0008e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000252b0  00000000  00000000  0008fd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026a89  00000000  00000000  000b4ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000653da  00000000  00000000  000dba81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005410  00000000  00000000  00140e5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00420000 <exception_table>:
  420000:	40 47 00 20 4d 5f 42 00 49 5f 42 00 49 5f 42 00     @G. M_B.I_B.I_B.
  420010:	49 5f 42 00 49 5f 42 00 49 5f 42 00 00 00 00 00     I_B.I_B.I_B.....
	...
  42002c:	49 5f 42 00 49 5f 42 00 00 00 00 00 49 5f 42 00     I_B.I_B.....I_B.
  42003c:	a5 3c 42 00 49 5f 42 00 49 5f 42 00 49 5f 42 00     .<B.I_B.I_B.I_B.
  42004c:	49 5f 42 00 49 5f 42 00 49 5f 42 00 49 5f 42 00     I_B.I_B.I_B.I_B.
  42005c:	49 5f 42 00 49 5f 42 00 35 56 42 00 49 56 42 00     I_B.I_B.5VB.IVB.
  42006c:	49 5f 42 00 5d 56 42 00 49 5f 42 00 49 5f 42 00     I_B.]VB.I_B.I_B.
  42007c:	49 5f 42 00 49 5f 42 00 49 5f 42 00 49 5f 42 00     I_B.I_B.I_B.I_B.
  42008c:	49 5f 42 00 49 5f 42 00 b5 3c 42 00 49 5f 42 00     I_B.I_B..<B.I_B.
  42009c:	49 5f 42 00 49 5f 42 00 49 5f 42 00 49 5f 42 00     I_B.I_B.I_B.I_B.
  4200ac:	49 5f 42 00 49 5f 42 00 49 5f 42 00 dd 15 42 00     I_B.I_B.I_B...B.
  4200bc:	f1 15 42 00 49 5f 42 00 49 5f 42 00 49 5f 42 00     ..B.I_B.I_B.I_B.
  4200cc:	49 5f 42 00 49 5f 42 00 71 36 42 00 49 5f 42 00     I_B.I_B.q6B.I_B.
  4200dc:	49 5f 42 00 49 5f 42 00 49 5f 42 00 49 5f 42 00     I_B.I_B.I_B.I_B.
  4200ec:	49 5f 42 00 49 5f 42 00 49 5f 42 00                 I_B.I_B.I_B.

004200f8 <__do_global_dtors_aux>:
  4200f8:	b510      	push	{r4, lr}
  4200fa:	4c05      	ldr	r4, [pc, #20]	; (420110 <__do_global_dtors_aux+0x18>)
  4200fc:	7823      	ldrb	r3, [r4, #0]
  4200fe:	b933      	cbnz	r3, 42010e <__do_global_dtors_aux+0x16>
  420100:	4b04      	ldr	r3, [pc, #16]	; (420114 <__do_global_dtors_aux+0x1c>)
  420102:	b113      	cbz	r3, 42010a <__do_global_dtors_aux+0x12>
  420104:	4804      	ldr	r0, [pc, #16]	; (420118 <__do_global_dtors_aux+0x20>)
  420106:	f3af 8000 	nop.w
  42010a:	2301      	movs	r3, #1
  42010c:	7023      	strb	r3, [r4, #0]
  42010e:	bd10      	pop	{r4, pc}
  420110:	20000ac4 	.word	0x20000ac4
  420114:	00000000 	.word	0x00000000
  420118:	0042fa40 	.word	0x0042fa40

0042011c <frame_dummy>:
  42011c:	4b0c      	ldr	r3, [pc, #48]	; (420150 <frame_dummy+0x34>)
  42011e:	b143      	cbz	r3, 420132 <frame_dummy+0x16>
  420120:	480c      	ldr	r0, [pc, #48]	; (420154 <frame_dummy+0x38>)
  420122:	490d      	ldr	r1, [pc, #52]	; (420158 <frame_dummy+0x3c>)
  420124:	b510      	push	{r4, lr}
  420126:	f3af 8000 	nop.w
  42012a:	480c      	ldr	r0, [pc, #48]	; (42015c <frame_dummy+0x40>)
  42012c:	6803      	ldr	r3, [r0, #0]
  42012e:	b923      	cbnz	r3, 42013a <frame_dummy+0x1e>
  420130:	bd10      	pop	{r4, pc}
  420132:	480a      	ldr	r0, [pc, #40]	; (42015c <frame_dummy+0x40>)
  420134:	6803      	ldr	r3, [r0, #0]
  420136:	b933      	cbnz	r3, 420146 <frame_dummy+0x2a>
  420138:	4770      	bx	lr
  42013a:	4b09      	ldr	r3, [pc, #36]	; (420160 <frame_dummy+0x44>)
  42013c:	2b00      	cmp	r3, #0
  42013e:	d0f7      	beq.n	420130 <frame_dummy+0x14>
  420140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  420144:	4718      	bx	r3
  420146:	4b06      	ldr	r3, [pc, #24]	; (420160 <frame_dummy+0x44>)
  420148:	2b00      	cmp	r3, #0
  42014a:	d0f5      	beq.n	420138 <frame_dummy+0x1c>
  42014c:	4718      	bx	r3
  42014e:	bf00      	nop
  420150:	00000000 	.word	0x00000000
  420154:	0042fa40 	.word	0x0042fa40
  420158:	20000ac8 	.word	0x20000ac8
  42015c:	0042fa40 	.word	0x0042fa40
  420160:	00000000 	.word	0x00000000

00420164 <afec1_channel_2_ready>:
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  420164:	4b03      	ldr	r3, [pc, #12]	; (420174 <afec1_channel_2_ready+0x10>)
  420166:	2202      	movs	r2, #2
  420168:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  42016a:	6e9a      	ldr	r2, [r3, #104]	; 0x68



void afec1_channel_2_ready()
{
	Mux_A_value[0] = afec_channel_get_value(AFEC1, AFEC_CHANNEL_2);
  42016c:	4b02      	ldr	r3, [pc, #8]	; (420178 <afec1_channel_2_ready+0x14>)
  42016e:	601a      	str	r2, [r3, #0]
  420170:	4770      	bx	lr
  420172:	bf00      	nop
  420174:	400b4000 	.word	0x400b4000
  420178:	20001518 	.word	0x20001518

0042017c <afec1_channel_3_ready>:
	afec->AFEC_CSELR = afec_ch;
  42017c:	4b03      	ldr	r3, [pc, #12]	; (42018c <afec1_channel_3_ready+0x10>)
  42017e:	2203      	movs	r2, #3
  420180:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  420182:	6e9a      	ldr	r2, [r3, #104]	; 0x68

}

void afec1_channel_3_ready()
{
	Mux_B_value[0] = afec_channel_get_value(AFEC1, AFEC_CHANNEL_3);
  420184:	4b02      	ldr	r3, [pc, #8]	; (420190 <afec1_channel_3_ready+0x14>)
  420186:	601a      	str	r2, [r3, #0]
  420188:	4770      	bx	lr
  42018a:	bf00      	nop
  42018c:	400b4000 	.word	0x400b4000
  420190:	20001558 	.word	0x20001558

00420194 <afec0_diff_data_ready>:
{
  420194:	b508      	push	{r3, lr}
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  420196:	4b0d      	ldr	r3, [pc, #52]	; (4201cc <afec0_diff_data_ready+0x38>)
  420198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				if ((afec_get_interrupt_status(AFEC0) & AFEC_ISR_ENDRX) == AFEC_ISR_ENDRX) {
  42019a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  42019e:	d014      	beq.n	4201ca <afec0_diff_data_ready+0x36>
  4201a0:	2300      	movs	r3, #0
						us_value[i]&= AFEC_LCDR_LDATA_Msk;
  4201a2:	490b      	ldr	r1, [pc, #44]	; (4201d0 <afec0_diff_data_ready+0x3c>)
  4201a4:	e002      	b.n	4201ac <afec0_diff_data_ready+0x18>
  4201a6:	3301      	adds	r3, #1
					for (i = 0; i <NUM_CHANNELS; i++) {
  4201a8:	2b0c      	cmp	r3, #12
  4201aa:	d008      	beq.n	4201be <afec0_diff_data_ready+0x2a>
						if(i%2==0)
  4201ac:	f013 0f01 	tst.w	r3, #1
  4201b0:	d1f9      	bne.n	4201a6 <afec0_diff_data_ready+0x12>
						us_value[i]&= AFEC_LCDR_LDATA_Msk;
  4201b2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
  4201b6:	b292      	uxth	r2, r2
  4201b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  4201bc:	e7f3      	b.n	4201a6 <afec0_diff_data_ready+0x12>
					 	pdc_rx_init(PDC_ptr_to_AFEC, &g_pdc_rx_packet, 0);
  4201be:	2200      	movs	r2, #0
  4201c0:	4904      	ldr	r1, [pc, #16]	; (4201d4 <afec0_diff_data_ready+0x40>)
  4201c2:	4b05      	ldr	r3, [pc, #20]	; (4201d8 <afec0_diff_data_ready+0x44>)
  4201c4:	6818      	ldr	r0, [r3, #0]
  4201c6:	4b05      	ldr	r3, [pc, #20]	; (4201dc <afec0_diff_data_ready+0x48>)
  4201c8:	4798      	blx	r3
  4201ca:	bd08      	pop	{r3, pc}
  4201cc:	400b0000 	.word	0x400b0000
  4201d0:	200016fc 	.word	0x200016fc
  4201d4:	20001484 	.word	0x20001484
  4201d8:	200014c8 	.word	0x200014c8
  4201dc:	0042199d 	.word	0x0042199d

004201e0 <adc_init>:
//	printf("channel_2 Mux_B_value %d\r\n",Mux_B_value[0]);
}

  void adc_init(void)
 {
  4201e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	afec_enable(AFEC0);
  4201e4:	4c47      	ldr	r4, [pc, #284]	; (420304 <adc_init+0x124>)
  4201e6:	4620      	mov	r0, r4
  4201e8:	4e47      	ldr	r6, [pc, #284]	; (420308 <adc_init+0x128>)
  4201ea:	47b0      	blx	r6
	afec_enable(AFEC1);
  4201ec:	4d47      	ldr	r5, [pc, #284]	; (42030c <adc_init+0x12c>)
  4201ee:	4628      	mov	r0, r5
  4201f0:	47b0      	blx	r6


	afec_get_config_defaults(&afec_cfg,Freq_selec_bit);
  4201f2:	4b47      	ldr	r3, [pc, #284]	; (420310 <adc_init+0x130>)
  4201f4:	7819      	ldrb	r1, [r3, #0]
  4201f6:	4e47      	ldr	r6, [pc, #284]	; (420314 <adc_init+0x134>)
  4201f8:	4630      	mov	r0, r6
  4201fa:	4b47      	ldr	r3, [pc, #284]	; (420318 <adc_init+0x138>)
  4201fc:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  4201fe:	4631      	mov	r1, r6
  420200:	4620      	mov	r0, r4
  420202:	4f46      	ldr	r7, [pc, #280]	; (42031c <adc_init+0x13c>)
  420204:	47b8      	blx	r7
    afec_init(AFEC1, &afec_cfg);
  420206:	4631      	mov	r1, r6
  420208:	4628      	mov	r0, r5
  42020a:	47b8      	blx	r7

	afec_ch_get_config_defaults(&afec_ch_cfg);
  42020c:	4e44      	ldr	r6, [pc, #272]	; (420320 <adc_init+0x140>)
  42020e:	4630      	mov	r0, r6
  420210:	4b44      	ldr	r3, [pc, #272]	; (420324 <adc_init+0x144>)
  420212:	4798      	blx	r3
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_0, &afec_ch_cfg);
  420214:	4632      	mov	r2, r6
  420216:	2100      	movs	r1, #0
  420218:	4620      	mov	r0, r4
  42021a:	4f43      	ldr	r7, [pc, #268]	; (420328 <adc_init+0x148>)
  42021c:	47b8      	blx	r7
 	afec_ch_set_config(AFEC0, AFEC_CHANNEL_1, &afec_ch_cfg);
  42021e:	4632      	mov	r2, r6
  420220:	2101      	movs	r1, #1
  420222:	4620      	mov	r0, r4
  420224:	47b8      	blx	r7
 	afec_ch_set_config(AFEC0, AFEC_CHANNEL_2, &afec_ch_cfg);
  420226:	4632      	mov	r2, r6
  420228:	2102      	movs	r1, #2
  42022a:	4620      	mov	r0, r4
  42022c:	47b8      	blx	r7
 	afec_ch_set_config(AFEC0, AFEC_CHANNEL_3, &afec_ch_cfg);
  42022e:	4632      	mov	r2, r6
  420230:	2103      	movs	r1, #3
  420232:	4620      	mov	r0, r4
  420234:	47b8      	blx	r7
 	afec_ch_set_config(AFEC0, AFEC_CHANNEL_4, &afec_ch_cfg);
  420236:	4632      	mov	r2, r6
  420238:	2104      	movs	r1, #4
  42023a:	4620      	mov	r0, r4
  42023c:	47b8      	blx	r7
 	afec_ch_set_config(AFEC0, AFEC_CHANNEL_5, &afec_ch_cfg);
  42023e:	4632      	mov	r2, r6
  420240:	2105      	movs	r1, #5
  420242:	4620      	mov	r0, r4
  420244:	47b8      	blx	r7

 	afec_ch_set_config(AFEC1, AFEC_CHANNEL_2, &afec_ch_cfg);
  420246:	4632      	mov	r2, r6
  420248:	2102      	movs	r1, #2
  42024a:	4628      	mov	r0, r5
  42024c:	47b8      	blx	r7
 	afec_ch_set_config(AFEC1, AFEC_CHANNEL_3, &afec_ch_cfg);
  42024e:	4632      	mov	r2, r6
  420250:	2103      	movs	r1, #3
  420252:	4628      	mov	r0, r5
  420254:	47b8      	blx	r7
	afec->AFEC_CSELR = afec_ch;
  420256:	f04f 0800 	mov.w	r8, #0
  42025a:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  42025e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  420262:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  420264:	2701      	movs	r7, #1
  420266:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  420268:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  42026a:	2602      	movs	r6, #2
  42026c:	6666      	str	r6, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  42026e:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  420270:	f04f 0903 	mov.w	r9, #3
  420274:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  420278:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  42027a:	2204      	movs	r2, #4
  42027c:	6662      	str	r2, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  42027e:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  420280:	2105      	movs	r1, #5
  420282:	6661      	str	r1, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  420284:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  420286:	666e      	str	r6, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  420288:	66eb      	str	r3, [r5, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  42028a:	f8c5 9064 	str.w	r9, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  42028e:	66eb      	str	r3, [r5, #108]	; 0x6c
	reg = afec->AFEC_MR;
  420290:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  420292:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  420296:	6063      	str	r3, [r4, #4]
	reg = afec->AFEC_MR;
  420298:	686b      	ldr	r3, [r5, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  42029a:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  42029e:	606b      	str	r3, [r5, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4202a0:	6167      	str	r7, [r4, #20]
  4202a2:	6166      	str	r6, [r4, #20]
  4202a4:	6162      	str	r2, [r4, #20]
  4202a6:	2308      	movs	r3, #8
  4202a8:	6163      	str	r3, [r4, #20]
  4202aa:	2110      	movs	r1, #16
  4202ac:	6161      	str	r1, [r4, #20]
  4202ae:	2120      	movs	r1, #32
  4202b0:	6161      	str	r1, [r4, #20]
  4202b2:	616a      	str	r2, [r5, #20]
  4202b4:	616b      	str	r3, [r5, #20]
 	afec_channel_enable(AFEC0, AFEC_CHANNEL_5);

	afec_channel_enable(AFEC1, AFEC_CHANNEL_2);
	afec_channel_enable(AFEC1, AFEC_CHANNEL_3);

PDC_ptr_to_AFEC=afec_get_pdc_base(AFEC0);
  4202b6:	f8df a094 	ldr.w	sl, [pc, #148]	; 42034c <adc_init+0x16c>
  4202ba:	481c      	ldr	r0, [pc, #112]	; (42032c <adc_init+0x14c>)
  4202bc:	f8ca 0000 	str.w	r0, [sl]


g_pdc_rx_packet.ul_addr = (uint32_t) (&us_value);		//g_pdc_rx_1_packet	raw_adc_values
  4202c0:	491b      	ldr	r1, [pc, #108]	; (420330 <adc_init+0x150>)
  4202c2:	4b1c      	ldr	r3, [pc, #112]	; (420334 <adc_init+0x154>)
  4202c4:	600b      	str	r3, [r1, #0]
g_pdc_rx_packet.ul_size = BUFFER_SIZE;
  4202c6:	230c      	movs	r3, #12
  4202c8:	604b      	str	r3, [r1, #4]



pdc_rx_init(PDC_ptr_to_AFEC, &g_pdc_rx_packet,0);
  4202ca:	4642      	mov	r2, r8
  4202cc:	4b1a      	ldr	r3, [pc, #104]	; (420338 <adc_init+0x158>)
  4202ce:	4798      	blx	r3
pdc_enable_transfer(PDC_ptr_to_AFEC, PERIPH_PTCR_RXTEN);
  4202d0:	4639      	mov	r1, r7
  4202d2:	f8da 0000 	ldr.w	r0, [sl]
  4202d6:	4b19      	ldr	r3, [pc, #100]	; (42033c <adc_init+0x15c>)
  4202d8:	4798      	blx	r3



afec_set_callback(AFEC0, AFEC_INTERRUPT_END_RXBUF, afec0_diff_data_ready, 0);		// AFEC_INTERUPT_END_RXBUF
  4202da:	4643      	mov	r3, r8
  4202dc:	4a18      	ldr	r2, [pc, #96]	; (420340 <adc_init+0x160>)
  4202de:	210a      	movs	r1, #10
  4202e0:	4620      	mov	r0, r4
  4202e2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 420350 <adc_init+0x170>
  4202e6:	47c0      	blx	r8


afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_2, afec1_channel_2_ready, 1);
  4202e8:	463b      	mov	r3, r7
  4202ea:	4a16      	ldr	r2, [pc, #88]	; (420344 <adc_init+0x164>)
  4202ec:	4631      	mov	r1, r6
  4202ee:	4628      	mov	r0, r5
  4202f0:	47c0      	blx	r8
afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_3, afec1_channel_3_ready, 1);
  4202f2:	463b      	mov	r3, r7
  4202f4:	4a14      	ldr	r2, [pc, #80]	; (420348 <adc_init+0x168>)
  4202f6:	4649      	mov	r1, r9
  4202f8:	4628      	mov	r0, r5
  4202fa:	47c0      	blx	r8
	afec->AFEC_CR = AFEC_CR_START;
  4202fc:	6026      	str	r6, [r4, #0]
  4202fe:	602e      	str	r6, [r5, #0]
  420300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  420304:	400b0000 	.word	0x400b0000
  420308:	00421605 	.word	0x00421605
  42030c:	400b4000 	.word	0x400b4000
  420310:	20001359 	.word	0x20001359
  420314:	200014cc 	.word	0x200014cc
  420318:	0042142d 	.word	0x0042142d
  42031c:	00421479 	.word	0x00421479
  420320:	20001474 	.word	0x20001474
  420324:	0042146d 	.word	0x0042146d
  420328:	004213fd 	.word	0x004213fd
  42032c:	400b0100 	.word	0x400b0100
  420330:	20001484 	.word	0x20001484
  420334:	200016fc 	.word	0x200016fc
  420338:	0042199d 	.word	0x0042199d
  42033c:	004219b5 	.word	0x004219b5
  420340:	00420195 	.word	0x00420195
  420344:	00420165 	.word	0x00420165
  420348:	0042017d 	.word	0x0042017d
  42034c:	200014c8 	.word	0x200014c8
  420350:	00421585 	.word	0x00421585

00420354 <LPF_HD2>:
 * Parameter : ADC value
 * return    : Low pass filter ADC value
 * Note      : after controller reset if no of samples > 65 after that only filter array values updated
 */
uint32_t LPF_HD2(uint32_t x)
{
  420354:	b430      	push	{r4, r5}
	   static uint32_t samples[64];
	   static uint8_t i = 0;
	   static uint32_t total = 0;

	   total -= samples[i] -  x;
  420356:	4b0b      	ldr	r3, [pc, #44]	; (420384 <LPF_HD2+0x30>)
  420358:	781b      	ldrb	r3, [r3, #0]
  42035a:	4c0b      	ldr	r4, [pc, #44]	; (420388 <LPF_HD2+0x34>)
  42035c:	6822      	ldr	r2, [r4, #0]
  42035e:	4402      	add	r2, r0
  420360:	490a      	ldr	r1, [pc, #40]	; (42038c <LPF_HD2+0x38>)
  420362:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  420366:	1b52      	subs	r2, r2, r5
  420368:	6022      	str	r2, [r4, #0]
	   samples[i] = x;
  42036a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	   i = (i==63? 0 : i+1);
  42036e:	2b3f      	cmp	r3, #63	; 0x3f
  420370:	bf1a      	itte	ne
  420372:	3301      	addne	r3, #1
  420374:	b2db      	uxtbne	r3, r3
  420376:	2300      	moveq	r3, #0
  420378:	4902      	ldr	r1, [pc, #8]	; (420384 <LPF_HD2+0x30>)
  42037a:	700b      	strb	r3, [r1, #0]

   return total/64;
}
  42037c:	0990      	lsrs	r0, r2, #6
  42037e:	bc30      	pop	{r4, r5}
  420380:	4770      	bx	lr
  420382:	bf00      	nop
  420384:	20000b44 	.word	0x20000b44
  420388:	20001070 	.word	0x20001070
  42038c:	20000b5c 	.word	0x20000b5c

00420390 <LPF_HD1>:
 * Parameter : ADC value
 * return    : Low pass filter ADC value
 * Note      : after controller reset if no of samples > 65 after that only filter array values updated
 */
uint32_t LPF_HD1(uint32_t x)
{
  420390:	b430      	push	{r4, r5}
	   static uint32_t samples[64];
	   static uint8_t i = 0;
	   static uint32_t total = 0;

	   total -= samples[i] -  x;
  420392:	4b0b      	ldr	r3, [pc, #44]	; (4203c0 <LPF_HD1+0x30>)
  420394:	781b      	ldrb	r3, [r3, #0]
  420396:	4c0b      	ldr	r4, [pc, #44]	; (4203c4 <LPF_HD1+0x34>)
  420398:	6822      	ldr	r2, [r4, #0]
  42039a:	4402      	add	r2, r0
  42039c:	490a      	ldr	r1, [pc, #40]	; (4203c8 <LPF_HD1+0x38>)
  42039e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  4203a2:	1b52      	subs	r2, r2, r5
  4203a4:	6022      	str	r2, [r4, #0]
	   samples[i] = x;
  4203a6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	   i = (i==63? 0 : i+1);
  4203aa:	2b3f      	cmp	r3, #63	; 0x3f
  4203ac:	bf1a      	itte	ne
  4203ae:	3301      	addne	r3, #1
  4203b0:	b2db      	uxtbne	r3, r3
  4203b2:	2300      	moveq	r3, #0
  4203b4:	4902      	ldr	r1, [pc, #8]	; (4203c0 <LPF_HD1+0x30>)
  4203b6:	700b      	strb	r3, [r1, #0]

      return total/64;
}
  4203b8:	0990      	lsrs	r0, r2, #6
  4203ba:	bc30      	pop	{r4, r5}
  4203bc:	4770      	bx	lr
  4203be:	bf00      	nop
  4203c0:	20000b45 	.word	0x20000b45
  4203c4:	20001074 	.word	0x20001074
  4203c8:	20000c5c 	.word	0x20000c5c

004203cc <LPF_Secondary_Voltage>:
 * Parameter : ADC value
 * return    : Low pass filter ADC value
 * Note      : after controller reset if no of samples > 65 after that only filter array values updated
 */
uint32_t LPF_Secondary_Voltage(uint32_t x)
{
  4203cc:	b430      	push	{r4, r5}
	   static uint32_t samples[64];
	   static uint8_t i = 0;
	   static uint32_t total = 0;

	   total -= samples[i] -  x;
  4203ce:	4b0b      	ldr	r3, [pc, #44]	; (4203fc <LPF_Secondary_Voltage+0x30>)
  4203d0:	781b      	ldrb	r3, [r3, #0]
  4203d2:	4c0b      	ldr	r4, [pc, #44]	; (420400 <LPF_Secondary_Voltage+0x34>)
  4203d4:	6822      	ldr	r2, [r4, #0]
  4203d6:	4402      	add	r2, r0
  4203d8:	490a      	ldr	r1, [pc, #40]	; (420404 <LPF_Secondary_Voltage+0x38>)
  4203da:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  4203de:	1b52      	subs	r2, r2, r5
  4203e0:	6022      	str	r2, [r4, #0]
	   samples[i] = x;
  4203e2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	   i = (i==63? 0 : i+1);
  4203e6:	2b3f      	cmp	r3, #63	; 0x3f
  4203e8:	bf1a      	itte	ne
  4203ea:	3301      	addne	r3, #1
  4203ec:	b2db      	uxtbne	r3, r3
  4203ee:	2300      	moveq	r3, #0
  4203f0:	4902      	ldr	r1, [pc, #8]	; (4203fc <LPF_Secondary_Voltage+0x30>)
  4203f2:	700b      	strb	r3, [r1, #0]

      return total/64;
}
  4203f4:	0990      	lsrs	r0, r2, #6
  4203f6:	bc30      	pop	{r4, r5}
  4203f8:	4770      	bx	lr
  4203fa:	bf00      	nop
  4203fc:	20000b46 	.word	0x20000b46
  420400:	20001078 	.word	0x20001078
  420404:	20000d5c 	.word	0x20000d5c

00420408 <LPF_Primary_Voltage>:
 * Parameter : ADC value
 * return    : Low pass filter ADC value
 * Note      : after controller reset if no of samples > 65 after that only filter array values updated
 */
uint32_t LPF_Primary_Voltage(uint32_t x)
{
  420408:	b430      	push	{r4, r5}
	   static uint32_t samples[64];
	   static uint8_t i = 0;
	   static uint32_t total = 0;

	   total -= samples[i] -  x;
  42040a:	4b0b      	ldr	r3, [pc, #44]	; (420438 <LPF_Primary_Voltage+0x30>)
  42040c:	781b      	ldrb	r3, [r3, #0]
  42040e:	4c0b      	ldr	r4, [pc, #44]	; (42043c <LPF_Primary_Voltage+0x34>)
  420410:	6822      	ldr	r2, [r4, #0]
  420412:	4402      	add	r2, r0
  420414:	490a      	ldr	r1, [pc, #40]	; (420440 <LPF_Primary_Voltage+0x38>)
  420416:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  42041a:	1b52      	subs	r2, r2, r5
  42041c:	6022      	str	r2, [r4, #0]
	   samples[i] = x;
  42041e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	   i = (i==63? 0 : i+1);
  420422:	2b3f      	cmp	r3, #63	; 0x3f
  420424:	bf1a      	itte	ne
  420426:	3301      	addne	r3, #1
  420428:	b2db      	uxtbne	r3, r3
  42042a:	2300      	moveq	r3, #0
  42042c:	4902      	ldr	r1, [pc, #8]	; (420438 <LPF_Primary_Voltage+0x30>)
  42042e:	700b      	strb	r3, [r1, #0]

       return total/64;
}
  420430:	0990      	lsrs	r0, r2, #6
  420432:	bc30      	pop	{r4, r5}
  420434:	4770      	bx	lr
  420436:	bf00      	nop
  420438:	20000b47 	.word	0x20000b47
  42043c:	2000107c 	.word	0x2000107c
  420440:	20000e5c 	.word	0x20000e5c

00420444 <LPF_Super_cap_Voltage>:
/* Super cap ADC to Voltage conversion */

 uint32_t LPF_Super_cap_Voltage(uint32_t x)
 {
  420444:	b430      	push	{r4, r5}
	 static uint32_t samples[64];
	 static uint8_t i = 0;
	 static uint32_t total = 0;

	 total -= samples[i] -  x;
  420446:	4b0b      	ldr	r3, [pc, #44]	; (420474 <LPF_Super_cap_Voltage+0x30>)
  420448:	781b      	ldrb	r3, [r3, #0]
  42044a:	4c0b      	ldr	r4, [pc, #44]	; (420478 <LPF_Super_cap_Voltage+0x34>)
  42044c:	6822      	ldr	r2, [r4, #0]
  42044e:	4402      	add	r2, r0
  420450:	490a      	ldr	r1, [pc, #40]	; (42047c <LPF_Super_cap_Voltage+0x38>)
  420452:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  420456:	1b52      	subs	r2, r2, r5
  420458:	6022      	str	r2, [r4, #0]
	 samples[i] = x;
  42045a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	 i = (i==63? 0 : i+1);
  42045e:	2b3f      	cmp	r3, #63	; 0x3f
  420460:	bf1a      	itte	ne
  420462:	3301      	addne	r3, #1
  420464:	b2db      	uxtbne	r3, r3
  420466:	2300      	moveq	r3, #0
  420468:	4902      	ldr	r1, [pc, #8]	; (420474 <LPF_Super_cap_Voltage+0x30>)
  42046a:	700b      	strb	r3, [r1, #0]

	 return total/64;
 }
  42046c:	0990      	lsrs	r0, r2, #6
  42046e:	bc30      	pop	{r4, r5}
  420470:	4770      	bx	lr
  420472:	bf00      	nop
  420474:	20000b48 	.word	0x20000b48
  420478:	20001080 	.word	0x20001080
  42047c:	20000f5c 	.word	0x20000f5c

00420480 <HD2_volt>:



uint32_t HD2_volt(void)
{
  420480:	b508      	push	{r3, lr}
	uint32_t tmp_HD2 = 0;
	tmp_HD2 = (((us_value[2] * vref) / 4095)) * 1000; //Heat detector zone 1 ADC in rawValue1[1]
  420482:	4b0f      	ldr	r3, [pc, #60]	; (4204c0 <HD2_volt+0x40>)
  420484:	889b      	ldrh	r3, [r3, #4]
  420486:	b29b      	uxth	r3, r3
  420488:	ee07 3a90 	vmov	s15, r3
  42048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  420490:	4b0c      	ldr	r3, [pc, #48]	; (4204c4 <HD2_volt+0x44>)
  420492:	ed93 7a00 	vldr	s14, [r3]
  420496:	ee67 7a87 	vmul.f32	s15, s15, s14
  42049a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 4204c8 <HD2_volt+0x48>
  42049e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4204a2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 4204cc <HD2_volt+0x4c>
  4204a6:	ee67 7a27 	vmul.f32	s15, s14, s15
  4204aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4204ae:	ee17 0a90 	vmov	r0, s15
	Raw_value_HD2  = tmp_HD2;
  4204b2:	4b07      	ldr	r3, [pc, #28]	; (4204d0 <HD2_volt+0x50>)
  4204b4:	edc3 7a00 	vstr	s15, [r3]
	tmp_HD2 = LPF_HD2(tmp_HD2);
  4204b8:	4b06      	ldr	r3, [pc, #24]	; (4204d4 <HD2_volt+0x54>)
  4204ba:	4798      	blx	r3
	return tmp_HD2;
}
  4204bc:	bd08      	pop	{r3, pc}
  4204be:	bf00      	nop
  4204c0:	200016fc 	.word	0x200016fc
  4204c4:	2000008c 	.word	0x2000008c
  4204c8:	457ff000 	.word	0x457ff000
  4204cc:	447a0000 	.word	0x447a0000
  4204d0:	20000ae4 	.word	0x20000ae4
  4204d4:	00420355 	.word	0x00420355

004204d8 <HD1_volt>:

/* Heat detector zone 1 ADC to Voltage conversion */

uint32_t HD1_volt(void)
{
  4204d8:	b508      	push	{r3, lr}
	uint32_t tmp_HD1 = 0;
	tmp_HD1 = (((us_value[0] * vref) / 4095)) * 1000;
  4204da:	4b0f      	ldr	r3, [pc, #60]	; (420518 <HD1_volt+0x40>)
  4204dc:	881b      	ldrh	r3, [r3, #0]
  4204de:	b29b      	uxth	r3, r3
  4204e0:	ee07 3a90 	vmov	s15, r3
  4204e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4204e8:	4b0c      	ldr	r3, [pc, #48]	; (42051c <HD1_volt+0x44>)
  4204ea:	ed93 7a00 	vldr	s14, [r3]
  4204ee:	ee67 7a87 	vmul.f32	s15, s15, s14
  4204f2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 420520 <HD1_volt+0x48>
  4204f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4204fa:	eddf 7a0a 	vldr	s15, [pc, #40]	; 420524 <HD1_volt+0x4c>
  4204fe:	ee67 7a27 	vmul.f32	s15, s14, s15
  420502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  420506:	ee17 0a90 	vmov	r0, s15
	Raw_value_HD1 = tmp_HD1;
  42050a:	4b07      	ldr	r3, [pc, #28]	; (420528 <HD1_volt+0x50>)
  42050c:	edc3 7a00 	vstr	s15, [r3]
	tmp_HD1 = LPF_HD1(tmp_HD1);
  420510:	4b06      	ldr	r3, [pc, #24]	; (42052c <HD1_volt+0x54>)
  420512:	4798      	blx	r3

	return tmp_HD1;
}
  420514:	bd08      	pop	{r3, pc}
  420516:	bf00      	nop
  420518:	200016fc 	.word	0x200016fc
  42051c:	2000008c 	.word	0x2000008c
  420520:	457ff000 	.word	0x457ff000
  420524:	447a0000 	.word	0x447a0000
  420528:	20000ae0 	.word	0x20000ae0
  42052c:	00420391 	.word	0x00420391

00420530 <SEC_volt>:
  */
/*-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-*/
/* Secondary voltage read ADC to Voltage conversion */

uint32_t SEC_volt(void)
{
  420530:	b508      	push	{r3, lr}

    	uint32_t Sec_raw = (((us_value[4] * vref) / 4095)) * 2511; //Secondary voltage read ADC in rawValue1[3]  2000
  420532:	4b0f      	ldr	r3, [pc, #60]	; (420570 <SEC_volt+0x40>)
  420534:	891b      	ldrh	r3, [r3, #8]
  420536:	b29b      	uxth	r3, r3
  420538:	ee07 3a90 	vmov	s15, r3
  42053c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  420540:	4b0c      	ldr	r3, [pc, #48]	; (420574 <SEC_volt+0x44>)
  420542:	ed93 7a00 	vldr	s14, [r3]
  420546:	ee67 7a87 	vmul.f32	s15, s15, s14
  42054a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 420578 <SEC_volt+0x48>
  42054e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  420552:	eddf 7a0a 	vldr	s15, [pc, #40]	; 42057c <SEC_volt+0x4c>
  420556:	ee67 7a27 	vmul.f32	s15, s14, s15
  42055a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  42055e:	ee17 0a90 	vmov	r0, s15
		sec_rawvolt =Sec_raw;
  420562:	4b07      	ldr	r3, [pc, #28]	; (420580 <SEC_volt+0x50>)
  420564:	edc3 7a00 	vstr	s15, [r3]
	return LPF_Secondary_Voltage(Sec_raw);
  420568:	4b06      	ldr	r3, [pc, #24]	; (420584 <SEC_volt+0x54>)
  42056a:	4798      	blx	r3
}
  42056c:	bd08      	pop	{r3, pc}
  42056e:	bf00      	nop
  420570:	200016fc 	.word	0x200016fc
  420574:	2000008c 	.word	0x2000008c
  420578:	457ff000 	.word	0x457ff000
  42057c:	451cf000 	.word	0x451cf000
  420580:	20001598 	.word	0x20001598
  420584:	004203cd 	.word	0x004203cd

00420588 <PRI_volt>:
/* Primary voltage read ADC to Voltage conversion */

uint32_t PRI_volt(void)
{
  420588:	b508      	push	{r3, lr}
	uint32_t  Pri_raw = (((us_value[10] * vref) / 4095)) *14695;//* 14325 //Primary voltage read ADC in rawValue1[2]  16830
  42058a:	4b0d      	ldr	r3, [pc, #52]	; (4205c0 <PRI_volt+0x38>)
  42058c:	8a9b      	ldrh	r3, [r3, #20]
  42058e:	b29b      	uxth	r3, r3
  420590:	ee07 3a90 	vmov	s15, r3
  420594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  420598:	4b0a      	ldr	r3, [pc, #40]	; (4205c4 <PRI_volt+0x3c>)
  42059a:	ed93 7a00 	vldr	s14, [r3]
  42059e:	ee67 7a87 	vmul.f32	s15, s15, s14
  4205a2:	eddf 6a09 	vldr	s13, [pc, #36]	; 4205c8 <PRI_volt+0x40>
  4205a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4205aa:	eddf 7a08 	vldr	s15, [pc, #32]	; 4205cc <PRI_volt+0x44>
  4205ae:	ee67 7a27 	vmul.f32	s15, s14, s15
	return LPF_Primary_Voltage(Pri_raw);
  4205b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4205b6:	ee17 0a90 	vmov	r0, s15
  4205ba:	4b05      	ldr	r3, [pc, #20]	; (4205d0 <PRI_volt+0x48>)
  4205bc:	4798      	blx	r3
}
  4205be:	bd08      	pop	{r3, pc}
  4205c0:	200016fc 	.word	0x200016fc
  4205c4:	2000008c 	.word	0x2000008c
  4205c8:	457ff000 	.word	0x457ff000
  4205cc:	46659c00 	.word	0x46659c00
  4205d0:	00420409 	.word	0x00420409

004205d4 <ACT_Mux_B_volt>:

/* Actuator health monitor read ADC to Voltage conversion */

uint32_t ACT_Mux_B_volt(uint32_t hm_gf_value)
{
	return (((Mux_B_value[0] * vref) / 4095)) * 1000; //Actuator health monitor read ADC in rawValue2[0]
  4205d4:	4b0b      	ldr	r3, [pc, #44]	; (420604 <ACT_Mux_B_volt+0x30>)
  4205d6:	edd3 7a00 	vldr	s15, [r3]
  4205da:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4205de:	4b0a      	ldr	r3, [pc, #40]	; (420608 <ACT_Mux_B_volt+0x34>)
  4205e0:	ed93 7a00 	vldr	s14, [r3]
  4205e4:	ee67 7a87 	vmul.f32	s15, s15, s14
  4205e8:	eddf 6a08 	vldr	s13, [pc, #32]	; 42060c <ACT_Mux_B_volt+0x38>
  4205ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4205f0:	eddf 7a07 	vldr	s15, [pc, #28]	; 420610 <ACT_Mux_B_volt+0x3c>
  4205f4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
  4205f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4205fc:	ee17 0a90 	vmov	r0, s15
  420600:	4770      	bx	lr
  420602:	bf00      	nop
  420604:	20001558 	.word	0x20001558
  420608:	2000008c 	.word	0x2000008c
  42060c:	457ff000 	.word	0x457ff000
  420610:	447a0000 	.word	0x447a0000

00420614 <ACT_Mux_A_volt>:

uint32_t ACT_Mux_A_volt(uint32_t hm_gf_value)
{
	return (((Mux_A_value[0] * vref) / 4095)) * 1000; //Actuator health monitor read ADC in rawValue2[0]
  420614:	4b0b      	ldr	r3, [pc, #44]	; (420644 <ACT_Mux_A_volt+0x30>)
  420616:	edd3 7a00 	vldr	s15, [r3]
  42061a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  42061e:	4b0a      	ldr	r3, [pc, #40]	; (420648 <ACT_Mux_A_volt+0x34>)
  420620:	ed93 7a00 	vldr	s14, [r3]
  420624:	ee67 7a87 	vmul.f32	s15, s15, s14
  420628:	eddf 6a08 	vldr	s13, [pc, #32]	; 42064c <ACT_Mux_A_volt+0x38>
  42062c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  420630:	eddf 7a07 	vldr	s15, [pc, #28]	; 420650 <ACT_Mux_A_volt+0x3c>
  420634:	ee67 7a27 	vmul.f32	s15, s14, s15
}
  420638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  42063c:	ee17 0a90 	vmov	r0, s15
  420640:	4770      	bx	lr
  420642:	bf00      	nop
  420644:	20001518 	.word	0x20001518
  420648:	2000008c 	.word	0x2000008c
  42064c:	457ff000 	.word	0x457ff000
  420650:	447a0000 	.word	0x447a0000

00420654 <SUPER_CAP_Volt>:

uint32_t SUPER_CAP_Volt(void)
{
  420654:	b508      	push	{r3, lr}
	uint32_t Super_cap_raw = (((us_value[6] * vref) / 4095)) * 5334; //SuperCap voltage read ADC in rawValue1[6]  2000
  420656:	4b0d      	ldr	r3, [pc, #52]	; (42068c <SUPER_CAP_Volt+0x38>)
  420658:	899b      	ldrh	r3, [r3, #12]
  42065a:	b29b      	uxth	r3, r3
  42065c:	ee07 3a90 	vmov	s15, r3
  420660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  420664:	4b0a      	ldr	r3, [pc, #40]	; (420690 <SUPER_CAP_Volt+0x3c>)
  420666:	ed93 7a00 	vldr	s14, [r3]
  42066a:	ee67 7a87 	vmul.f32	s15, s15, s14
  42066e:	eddf 6a09 	vldr	s13, [pc, #36]	; 420694 <SUPER_CAP_Volt+0x40>
  420672:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  420676:	eddf 7a08 	vldr	s15, [pc, #32]	; 420698 <SUPER_CAP_Volt+0x44>
  42067a:	ee67 7a27 	vmul.f32	s15, s14, s15
	return LPF_Super_cap_Voltage(Super_cap_raw);
  42067e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  420682:	ee17 0a90 	vmov	r0, s15
  420686:	4b05      	ldr	r3, [pc, #20]	; (42069c <SUPER_CAP_Volt+0x48>)
  420688:	4798      	blx	r3

}
  42068a:	bd08      	pop	{r3, pc}
  42068c:	200016fc 	.word	0x200016fc
  420690:	2000008c 	.word	0x2000008c
  420694:	457ff000 	.word	0x457ff000
  420698:	45a6b000 	.word	0x45a6b000
  42069c:	00420445 	.word	0x00420445

004206a0 <LPF_buffer_load>:



void LPF_buffer_load(void)
{
  4206a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4206a2:	2482      	movs	r4, #130	; 0x82
	   uint8_t adc_count = 0;
	   for(adc_count = 0;adc_count<130;adc_count++) //load ADC values into the low pass filter array buffer
	   {
		   	wdt_restart(WDT);
  4206a4:	4f0f      	ldr	r7, [pc, #60]	; (4206e4 <LPF_buffer_load+0x44>)
  4206a6:	4e10      	ldr	r6, [pc, #64]	; (4206e8 <LPF_buffer_load+0x48>)
			 primary_pwr_vol_g_u16 =PRI_volt();
  4206a8:	4d10      	ldr	r5, [pc, #64]	; (4206ec <LPF_buffer_load+0x4c>)
		   	wdt_restart(WDT);
  4206aa:	4638      	mov	r0, r7
  4206ac:	47b0      	blx	r6
			 primary_pwr_vol_g_u16 =PRI_volt();
  4206ae:	47a8      	blx	r5
  4206b0:	4b0f      	ldr	r3, [pc, #60]	; (4206f0 <LPF_buffer_load+0x50>)
  4206b2:	6018      	str	r0, [r3, #0]
			 sec_pwr_vol_g_u16= SEC_volt();
  4206b4:	4b0f      	ldr	r3, [pc, #60]	; (4206f4 <LPF_buffer_load+0x54>)
  4206b6:	4798      	blx	r3
  4206b8:	4b0f      	ldr	r3, [pc, #60]	; (4206f8 <LPF_buffer_load+0x58>)
  4206ba:	8018      	strh	r0, [r3, #0]
			 hd1_measured_g_u16=HD1_volt();
  4206bc:	4b0f      	ldr	r3, [pc, #60]	; (4206fc <LPF_buffer_load+0x5c>)
  4206be:	4798      	blx	r3
  4206c0:	4b0f      	ldr	r3, [pc, #60]	; (420700 <LPF_buffer_load+0x60>)
  4206c2:	8018      	strh	r0, [r3, #0]
			//  Check_G_Fault();
			 hd2_measured_g_u16=HD2_volt();
  4206c4:	4b0f      	ldr	r3, [pc, #60]	; (420704 <LPF_buffer_load+0x64>)
  4206c6:	4798      	blx	r3
  4206c8:	4b0f      	ldr	r3, [pc, #60]	; (420708 <LPF_buffer_load+0x68>)
  4206ca:	8018      	strh	r0, [r3, #0]
			//  Manual_Act_Sw();
			super_capVolt_g_u16= SUPER_CAP_Volt();
  4206cc:	4b0f      	ldr	r3, [pc, #60]	; (42070c <LPF_buffer_load+0x6c>)
  4206ce:	4798      	blx	r3
  4206d0:	4b0f      	ldr	r3, [pc, #60]	; (420710 <LPF_buffer_load+0x70>)
  4206d2:	8018      	strh	r0, [r3, #0]
			  Delay(2u);
  4206d4:	2002      	movs	r0, #2
  4206d6:	4b0f      	ldr	r3, [pc, #60]	; (420714 <LPF_buffer_load+0x74>)
  4206d8:	4798      	blx	r3
  4206da:	1e63      	subs	r3, r4, #1
	   for(adc_count = 0;adc_count<130;adc_count++) //load ADC values into the low pass filter array buffer
  4206dc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4206e0:	d1e3      	bne.n	4206aa <LPF_buffer_load+0xa>
	   }
}
  4206e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4206e4:	400e1850 	.word	0x400e1850
  4206e8:	00421da5 	.word	0x00421da5
  4206ec:	00420589 	.word	0x00420589
  4206f0:	20000b54 	.word	0x20000b54
  4206f4:	00420531 	.word	0x00420531
  4206f8:	2000106a 	.word	0x2000106a
  4206fc:	004204d9 	.word	0x004204d9
  420700:	20000b0a 	.word	0x20000b0a
  420704:	00420481 	.word	0x00420481
  420708:	20000b0e 	.word	0x20000b0e
  42070c:	00420655 	.word	0x00420655
  420710:	2000106c 	.word	0x2000106c
  420714:	0042527d 	.word	0x0042527d

00420718 <Actuator_HM>:
/* Function  : Actuator health monitor
* Parameter : None
* return    : None
*/
void Actuator_HM(void)
{
  420718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     static bool one_cycle_complete_sl_b = 0u;
	 static uint8_t actuator_prev_state_sl_u8 = 0u;
 if(!fire_happen_g_b)
  42071a:	4b94      	ldr	r3, [pc, #592]	; (42096c <Actuator_HM+0x254>)
  42071c:	781b      	ldrb	r3, [r3, #0]
  42071e:	2b00      	cmp	r3, #0
  420720:	f040 817c 	bne.w	420a1c <Actuator_HM+0x304>
 {

						if((count_1ms - delay_prev_tick_sl_b) >= 250u)
  420724:	4b92      	ldr	r3, [pc, #584]	; (420970 <Actuator_HM+0x258>)
  420726:	681b      	ldr	r3, [r3, #0]
  420728:	4a92      	ldr	r2, [pc, #584]	; (420974 <Actuator_HM+0x25c>)
  42072a:	6812      	ldr	r2, [r2, #0]
  42072c:	1a9b      	subs	r3, r3, r2
  42072e:	2bf9      	cmp	r3, #249	; 0xf9
  420730:	d910      	bls.n	420754 <Actuator_HM+0x3c>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  420732:	4b91      	ldr	r3, [pc, #580]	; (420978 <Actuator_HM+0x260>)
  420734:	2208      	movs	r2, #8
  420736:	631a      	str	r2, [r3, #48]	; 0x30
  420738:	2201      	movs	r2, #1
  42073a:	631a      	str	r2, [r3, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  42073c:	2204      	movs	r2, #4
  42073e:	635a      	str	r2, [r3, #52]	; 0x34
  420740:	2202      	movs	r2, #2
  420742:	635a      	str	r2, [r3, #52]	; 0x34
						{
									ioport_set_pin_level(ACTA_P,1);
									ioport_set_pin_level(ACTB_P,1);
									ioport_set_pin_level(ACTA_N,0);
									ioport_set_pin_level(ACTB_N,0);
						delay_prev_tick_sl_b = count_1ms;
  420744:	4b8a      	ldr	r3, [pc, #552]	; (420970 <Actuator_HM+0x258>)
  420746:	681a      	ldr	r2, [r3, #0]
  420748:	4b8a      	ldr	r3, [pc, #552]	; (420974 <Actuator_HM+0x25c>)
  42074a:	601a      	str	r2, [r3, #0]
						read_count++;
  42074c:	4a8b      	ldr	r2, [pc, #556]	; (42097c <Actuator_HM+0x264>)
  42074e:	7813      	ldrb	r3, [r2, #0]
  420750:	3301      	adds	r3, #1
  420752:	7013      	strb	r3, [r2, #0]
						}

						switch(read_count)
  420754:	4b89      	ldr	r3, [pc, #548]	; (42097c <Actuator_HM+0x264>)
  420756:	781b      	ldrb	r3, [r3, #0]
  420758:	3b01      	subs	r3, #1
  42075a:	2b03      	cmp	r3, #3
  42075c:	f200 80cc 	bhi.w	4208f8 <Actuator_HM+0x1e0>
  420760:	e8df f013 	tbh	[pc, r3, lsl #1]
  420764:	00510004 	.word	0x00510004
  420768:	00a10079 	.word	0x00a10079
						{
						case 1u:

									if(!ac_act_delay)
  42076c:	4b84      	ldr	r3, [pc, #528]	; (420980 <Actuator_HM+0x268>)
  42076e:	781b      	ldrb	r3, [r3, #0]
  420770:	2b00      	cmp	r3, #0
  420772:	d133      	bne.n	4207dc <Actuator_HM+0xc4>
									{
									ac_act_delay = 1u;
  420774:	2201      	movs	r2, #1
  420776:	4b82      	ldr	r3, [pc, #520]	; (420980 <Actuator_HM+0x268>)
  420778:	701a      	strb	r2, [r3, #0]
									delay_prev_tick_sl_b = count_1ms;
  42077a:	4b7d      	ldr	r3, [pc, #500]	; (420970 <Actuator_HM+0x258>)
  42077c:	6819      	ldr	r1, [r3, #0]
  42077e:	4b7d      	ldr	r3, [pc, #500]	; (420974 <Actuator_HM+0x25c>)
  420780:	6019      	str	r1, [r3, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  420782:	4b7d      	ldr	r3, [pc, #500]	; (420978 <Actuator_HM+0x260>)
  420784:	631a      	str	r2, [r3, #48]	; 0x30
  420786:	2202      	movs	r2, #2
  420788:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  42078a:	2208      	movs	r2, #8
  42078c:	635a      	str	r2, [r3, #52]	; 0x34
  42078e:	2204      	movs	r2, #4
  420790:	635a      	str	r2, [r3, #52]	; 0x34
							//	memset(ACT_HMON,0,sizeof(ACT_HMON));
					break;

			}

				if(!one_cycle_complete_sl_b)
  420792:	4b7c      	ldr	r3, [pc, #496]	; (420984 <Actuator_HM+0x26c>)
  420794:	781b      	ldrb	r3, [r3, #0]
  420796:	2b00      	cmp	r3, #0
  420798:	f000 8140 	beq.w	420a1c <Actuator_HM+0x304>
				{
				return; /* if system restarted and should not show the trouble up to one cycle completion of health monitor
				Note : if we return the function here itself below condition never executed*/
				}

				    if((hmon_1A_2B_val_g_u16  < HMON_OPEN_FLT_RANGE)   &&  (hmon_1B_2A_val_g_u16 < HMON_OPEN_FLT_RANGE)
  42079c:	4b7a      	ldr	r3, [pc, #488]	; (420988 <Actuator_HM+0x270>)
  42079e:	881a      	ldrh	r2, [r3, #0]
  4207a0:	f640 03e7 	movw	r3, #2279	; 0x8e7
  4207a4:	429a      	cmp	r2, r3
  4207a6:	f200 8113 	bhi.w	4209d0 <Actuator_HM+0x2b8>
  4207aa:	4b78      	ldr	r3, [pc, #480]	; (42098c <Actuator_HM+0x274>)
  4207ac:	881a      	ldrh	r2, [r3, #0]
  4207ae:	f640 03e7 	movw	r3, #2279	; 0x8e7
  4207b2:	429a      	cmp	r2, r3
  4207b4:	f200 810c 	bhi.w	4209d0 <Actuator_HM+0x2b8>
				    && (hmon_1A_gnd_flt_val_g_u16 > HMON_GND_FLT_RANGE) && (hmon_2A_gnd_flt_val_g_u16 > HMON_GND_FLT_RANGE))
  4207b8:	4b75      	ldr	r3, [pc, #468]	; (420990 <Actuator_HM+0x278>)
  4207ba:	881a      	ldrh	r2, [r3, #0]
  4207bc:	f640 03fc 	movw	r3, #2300	; 0x8fc
  4207c0:	429a      	cmp	r2, r3
  4207c2:	f240 8127 	bls.w	420a14 <Actuator_HM+0x2fc>
  4207c6:	4b73      	ldr	r3, [pc, #460]	; (420994 <Actuator_HM+0x27c>)
  4207c8:	881a      	ldrh	r2, [r3, #0]
  4207ca:	f640 03fc 	movw	r3, #2300	; 0x8fc
  4207ce:	429a      	cmp	r2, r3
  4207d0:	f240 8120 	bls.w	420a14 <Actuator_HM+0x2fc>
				    {
					    actuator_trbl_g_u8 = 0u;
  4207d4:	2200      	movs	r2, #0
  4207d6:	4b70      	ldr	r3, [pc, #448]	; (420998 <Actuator_HM+0x280>)
  4207d8:	701a      	strb	r2, [r3, #0]
  4207da:	e0fc      	b.n	4209d6 <Actuator_HM+0x2be>
									else if((count_1ms - delay_prev_tick_sl_b) >=20u) /* after turn ON the FET take sample after 20 ms*/
  4207dc:	4b64      	ldr	r3, [pc, #400]	; (420970 <Actuator_HM+0x258>)
  4207de:	681b      	ldr	r3, [r3, #0]
  4207e0:	4a64      	ldr	r2, [pc, #400]	; (420974 <Actuator_HM+0x25c>)
  4207e2:	6812      	ldr	r2, [r2, #0]
  4207e4:	1a9b      	subs	r3, r3, r2
  4207e6:	2b13      	cmp	r3, #19
  4207e8:	d9d3      	bls.n	420792 <Actuator_HM+0x7a>
										ac_adc_count++;
  4207ea:	4a6c      	ldr	r2, [pc, #432]	; (42099c <Actuator_HM+0x284>)
  4207ec:	8813      	ldrh	r3, [r2, #0]
  4207ee:	3301      	adds	r3, #1
  4207f0:	b29b      	uxth	r3, r3
  4207f2:	8013      	strh	r3, [r2, #0]
										health_mon[0] += ACT_Mux_B_volt(Mux_B_value[0]);
  4207f4:	4b6a      	ldr	r3, [pc, #424]	; (4209a0 <Actuator_HM+0x288>)
  4207f6:	6818      	ldr	r0, [r3, #0]
  4207f8:	4b6a      	ldr	r3, [pc, #424]	; (4209a4 <Actuator_HM+0x28c>)
  4207fa:	4798      	blx	r3
  4207fc:	4a6a      	ldr	r2, [pc, #424]	; (4209a8 <Actuator_HM+0x290>)
  4207fe:	6813      	ldr	r3, [r2, #0]
  420800:	4418      	add	r0, r3
  420802:	6010      	str	r0, [r2, #0]
  420804:	e7c5      	b.n	420792 <Actuator_HM+0x7a>
									if(!bd_act_delay)
  420806:	4b69      	ldr	r3, [pc, #420]	; (4209ac <Actuator_HM+0x294>)
  420808:	781b      	ldrb	r3, [r3, #0]
  42080a:	b97b      	cbnz	r3, 42082c <Actuator_HM+0x114>
										bd_act_delay = 1u;
  42080c:	2201      	movs	r2, #1
  42080e:	4b67      	ldr	r3, [pc, #412]	; (4209ac <Actuator_HM+0x294>)
  420810:	701a      	strb	r2, [r3, #0]
										delay_prev_tick_sl_b = count_1ms;
  420812:	4b57      	ldr	r3, [pc, #348]	; (420970 <Actuator_HM+0x258>)
  420814:	6819      	ldr	r1, [r3, #0]
  420816:	4b57      	ldr	r3, [pc, #348]	; (420974 <Actuator_HM+0x25c>)
  420818:	6019      	str	r1, [r3, #0]
  42081a:	4b57      	ldr	r3, [pc, #348]	; (420978 <Actuator_HM+0x260>)
  42081c:	635a      	str	r2, [r3, #52]	; 0x34
  42081e:	2202      	movs	r2, #2
  420820:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  420822:	2208      	movs	r2, #8
  420824:	631a      	str	r2, [r3, #48]	; 0x30
  420826:	2204      	movs	r2, #4
  420828:	631a      	str	r2, [r3, #48]	; 0x30
  42082a:	e7b2      	b.n	420792 <Actuator_HM+0x7a>
									else if((count_1ms - delay_prev_tick_sl_b) > 20u) /* after turn ON the FET take sample after 20 ms*/
  42082c:	4b50      	ldr	r3, [pc, #320]	; (420970 <Actuator_HM+0x258>)
  42082e:	681b      	ldr	r3, [r3, #0]
  420830:	4a50      	ldr	r2, [pc, #320]	; (420974 <Actuator_HM+0x25c>)
  420832:	6812      	ldr	r2, [r2, #0]
  420834:	1a9b      	subs	r3, r3, r2
  420836:	2b14      	cmp	r3, #20
  420838:	d9ab      	bls.n	420792 <Actuator_HM+0x7a>
										bd_adc_count++;
  42083a:	4a5d      	ldr	r2, [pc, #372]	; (4209b0 <Actuator_HM+0x298>)
  42083c:	8813      	ldrh	r3, [r2, #0]
  42083e:	3301      	adds	r3, #1
  420840:	b29b      	uxth	r3, r3
  420842:	8013      	strh	r3, [r2, #0]
										health_mon[1] += ACT_Mux_A_volt(Mux_A_value[0]);
  420844:	4b5b      	ldr	r3, [pc, #364]	; (4209b4 <Actuator_HM+0x29c>)
  420846:	6818      	ldr	r0, [r3, #0]
  420848:	4b5b      	ldr	r3, [pc, #364]	; (4209b8 <Actuator_HM+0x2a0>)
  42084a:	4798      	blx	r3
  42084c:	4a56      	ldr	r2, [pc, #344]	; (4209a8 <Actuator_HM+0x290>)
  42084e:	6853      	ldr	r3, [r2, #4]
  420850:	4418      	add	r0, r3
  420852:	6050      	str	r0, [r2, #4]
  420854:	e79d      	b.n	420792 <Actuator_HM+0x7a>
									if(!ac_act_delay_1)
  420856:	4b59      	ldr	r3, [pc, #356]	; (4209bc <Actuator_HM+0x2a4>)
  420858:	781b      	ldrb	r3, [r3, #0]
  42085a:	b97b      	cbnz	r3, 42087c <Actuator_HM+0x164>
									ac_act_delay_1 = 1u;
  42085c:	2201      	movs	r2, #1
  42085e:	4b57      	ldr	r3, [pc, #348]	; (4209bc <Actuator_HM+0x2a4>)
  420860:	701a      	strb	r2, [r3, #0]
									delay_prev_tick_sl_b = count_1ms;
  420862:	4b43      	ldr	r3, [pc, #268]	; (420970 <Actuator_HM+0x258>)
  420864:	6819      	ldr	r1, [r3, #0]
  420866:	4b43      	ldr	r3, [pc, #268]	; (420974 <Actuator_HM+0x25c>)
  420868:	6019      	str	r1, [r3, #0]
  42086a:	4b43      	ldr	r3, [pc, #268]	; (420978 <Actuator_HM+0x260>)
  42086c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  42086e:	2202      	movs	r2, #2
  420870:	635a      	str	r2, [r3, #52]	; 0x34
  420872:	2208      	movs	r2, #8
  420874:	635a      	str	r2, [r3, #52]	; 0x34
  420876:	2204      	movs	r2, #4
  420878:	635a      	str	r2, [r3, #52]	; 0x34
  42087a:	e78a      	b.n	420792 <Actuator_HM+0x7a>
									else if((count_1ms - delay_prev_tick_sl_b) > 20u) /* after turn ON the FET take sample after 20 ms*/
  42087c:	4b3c      	ldr	r3, [pc, #240]	; (420970 <Actuator_HM+0x258>)
  42087e:	681b      	ldr	r3, [r3, #0]
  420880:	4a3c      	ldr	r2, [pc, #240]	; (420974 <Actuator_HM+0x25c>)
  420882:	6812      	ldr	r2, [r2, #0]
  420884:	1a9b      	subs	r3, r3, r2
  420886:	2b14      	cmp	r3, #20
  420888:	d983      	bls.n	420792 <Actuator_HM+0x7a>
										 ac_adc_count_1++;
  42088a:	4a4d      	ldr	r2, [pc, #308]	; (4209c0 <Actuator_HM+0x2a8>)
  42088c:	8813      	ldrh	r3, [r2, #0]
  42088e:	3301      	adds	r3, #1
  420890:	b29b      	uxth	r3, r3
  420892:	8013      	strh	r3, [r2, #0]
										 health_mon[2] += ACT_Mux_B_volt(Mux_B_value[0]);
  420894:	4b42      	ldr	r3, [pc, #264]	; (4209a0 <Actuator_HM+0x288>)
  420896:	6818      	ldr	r0, [r3, #0]
  420898:	4b42      	ldr	r3, [pc, #264]	; (4209a4 <Actuator_HM+0x28c>)
  42089a:	4798      	blx	r3
  42089c:	4a42      	ldr	r2, [pc, #264]	; (4209a8 <Actuator_HM+0x290>)
  42089e:	6893      	ldr	r3, [r2, #8]
  4208a0:	4418      	add	r0, r3
  4208a2:	6090      	str	r0, [r2, #8]
  4208a4:	e775      	b.n	420792 <Actuator_HM+0x7a>
									if(!bd_act_delay_1)
  4208a6:	4b47      	ldr	r3, [pc, #284]	; (4209c4 <Actuator_HM+0x2ac>)
  4208a8:	781b      	ldrb	r3, [r3, #0]
  4208aa:	b97b      	cbnz	r3, 4208cc <Actuator_HM+0x1b4>
									bd_act_delay_1 = 1u;
  4208ac:	2201      	movs	r2, #1
  4208ae:	4b45      	ldr	r3, [pc, #276]	; (4209c4 <Actuator_HM+0x2ac>)
  4208b0:	701a      	strb	r2, [r3, #0]
									delay_prev_tick_sl_b = count_1ms;
  4208b2:	4b2f      	ldr	r3, [pc, #188]	; (420970 <Actuator_HM+0x258>)
  4208b4:	6819      	ldr	r1, [r3, #0]
  4208b6:	4b2f      	ldr	r3, [pc, #188]	; (420974 <Actuator_HM+0x25c>)
  4208b8:	6019      	str	r1, [r3, #0]
  4208ba:	4b2f      	ldr	r3, [pc, #188]	; (420978 <Actuator_HM+0x260>)
  4208bc:	635a      	str	r2, [r3, #52]	; 0x34
  4208be:	2202      	movs	r2, #2
  4208c0:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4208c2:	2208      	movs	r2, #8
  4208c4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4208c6:	2204      	movs	r2, #4
  4208c8:	635a      	str	r2, [r3, #52]	; 0x34
  4208ca:	e762      	b.n	420792 <Actuator_HM+0x7a>
									else if((count_1ms - delay_prev_tick_sl_b) > 20u) /* after turn ON the FET take sample after 20 ms*/
  4208cc:	4b28      	ldr	r3, [pc, #160]	; (420970 <Actuator_HM+0x258>)
  4208ce:	681b      	ldr	r3, [r3, #0]
  4208d0:	4a28      	ldr	r2, [pc, #160]	; (420974 <Actuator_HM+0x25c>)
  4208d2:	6812      	ldr	r2, [r2, #0]
  4208d4:	1a9b      	subs	r3, r3, r2
  4208d6:	2b14      	cmp	r3, #20
  4208d8:	f67f af5b 	bls.w	420792 <Actuator_HM+0x7a>
									bd_adc_count_1++;
  4208dc:	4a3a      	ldr	r2, [pc, #232]	; (4209c8 <Actuator_HM+0x2b0>)
  4208de:	8813      	ldrh	r3, [r2, #0]
  4208e0:	3301      	adds	r3, #1
  4208e2:	b29b      	uxth	r3, r3
  4208e4:	8013      	strh	r3, [r2, #0]
									health_mon[3] += ACT_Mux_A_volt(Mux_A_value[0]);
  4208e6:	4b33      	ldr	r3, [pc, #204]	; (4209b4 <Actuator_HM+0x29c>)
  4208e8:	6818      	ldr	r0, [r3, #0]
  4208ea:	4b33      	ldr	r3, [pc, #204]	; (4209b8 <Actuator_HM+0x2a0>)
  4208ec:	4798      	blx	r3
  4208ee:	4a2e      	ldr	r2, [pc, #184]	; (4209a8 <Actuator_HM+0x290>)
  4208f0:	68d3      	ldr	r3, [r2, #12]
  4208f2:	4418      	add	r0, r3
  4208f4:	60d0      	str	r0, [r2, #12]
  4208f6:	e74c      	b.n	420792 <Actuator_HM+0x7a>
					          read_count=1;
  4208f8:	2401      	movs	r4, #1
  4208fa:	4b20      	ldr	r3, [pc, #128]	; (42097c <Actuator_HM+0x264>)
  4208fc:	701c      	strb	r4, [r3, #0]
 							  hmon_1A_2B_val_g_u16 =  (health_mon[0] / ((uint32_t)ac_adc_count));
  4208fe:	482a      	ldr	r0, [pc, #168]	; (4209a8 <Actuator_HM+0x290>)
  420900:	6803      	ldr	r3, [r0, #0]
  420902:	4d26      	ldr	r5, [pc, #152]	; (42099c <Actuator_HM+0x284>)
  420904:	882a      	ldrh	r2, [r5, #0]
  420906:	b292      	uxth	r2, r2
  420908:	fbb3 f3f2 	udiv	r3, r3, r2
  42090c:	4a1e      	ldr	r2, [pc, #120]	; (420988 <Actuator_HM+0x270>)
  42090e:	8013      	strh	r3, [r2, #0]
 							  hmon_1B_2A_val_g_u16 =  (health_mon[1] / ((uint32_t)bd_adc_count));
  420910:	6843      	ldr	r3, [r0, #4]
  420912:	4e27      	ldr	r6, [pc, #156]	; (4209b0 <Actuator_HM+0x298>)
  420914:	8832      	ldrh	r2, [r6, #0]
  420916:	b292      	uxth	r2, r2
  420918:	fbb3 f3f2 	udiv	r3, r3, r2
  42091c:	4a1b      	ldr	r2, [pc, #108]	; (42098c <Actuator_HM+0x274>)
  42091e:	8013      	strh	r3, [r2, #0]
 							  hmon_1A_gnd_flt_val_g_u16 =  (health_mon[2] / ((uint32_t)ac_adc_count_1));
  420920:	6883      	ldr	r3, [r0, #8]
  420922:	4f27      	ldr	r7, [pc, #156]	; (4209c0 <Actuator_HM+0x2a8>)
  420924:	883a      	ldrh	r2, [r7, #0]
  420926:	b292      	uxth	r2, r2
  420928:	fbb3 f3f2 	udiv	r3, r3, r2
  42092c:	4a18      	ldr	r2, [pc, #96]	; (420990 <Actuator_HM+0x278>)
  42092e:	8013      	strh	r3, [r2, #0]
 							  hmon_2A_gnd_flt_val_g_u16 =  (health_mon[3] / ((uint32_t)bd_adc_count_1));
  420930:	68c3      	ldr	r3, [r0, #12]
  420932:	f8df e094 	ldr.w	lr, [pc, #148]	; 4209c8 <Actuator_HM+0x2b0>
  420936:	f8be 2000 	ldrh.w	r2, [lr]
  42093a:	b292      	uxth	r2, r2
  42093c:	fbb3 f3f2 	udiv	r3, r3, r2
  420940:	4a14      	ldr	r2, [pc, #80]	; (420994 <Actuator_HM+0x27c>)
  420942:	8013      	strh	r3, [r2, #0]
							  bd_adc_count_1=0;
  420944:	2100      	movs	r1, #0
  420946:	f8ae 1000 	strh.w	r1, [lr]
							 ac_adc_count_1=0;
  42094a:	8039      	strh	r1, [r7, #0]
							 bd_adc_count=0;
  42094c:	8031      	strh	r1, [r6, #0]
							 ac_adc_count=0;
  42094e:	8029      	strh	r1, [r5, #0]
							ac_act_delay = 0;
  420950:	4b0b      	ldr	r3, [pc, #44]	; (420980 <Actuator_HM+0x268>)
  420952:	7019      	strb	r1, [r3, #0]
							bd_act_delay = 0;
  420954:	4b15      	ldr	r3, [pc, #84]	; (4209ac <Actuator_HM+0x294>)
  420956:	7019      	strb	r1, [r3, #0]
							ac_act_delay_1 = 0;
  420958:	4b18      	ldr	r3, [pc, #96]	; (4209bc <Actuator_HM+0x2a4>)
  42095a:	7019      	strb	r1, [r3, #0]
							bd_act_delay_1 = 0;
  42095c:	4b19      	ldr	r3, [pc, #100]	; (4209c4 <Actuator_HM+0x2ac>)
  42095e:	7019      	strb	r1, [r3, #0]
							one_cycle_complete_sl_b=1;
  420960:	4b08      	ldr	r3, [pc, #32]	; (420984 <Actuator_HM+0x26c>)
  420962:	701c      	strb	r4, [r3, #0]
								memset((void *)health_mon,0,sizeof(health_mon));
  420964:	2228      	movs	r2, #40	; 0x28
  420966:	4b19      	ldr	r3, [pc, #100]	; (4209cc <Actuator_HM+0x2b4>)
  420968:	4798      	blx	r3
  42096a:	e717      	b.n	42079c <Actuator_HM+0x84>
  42096c:	20000b08 	.word	0x20000b08
  420970:	200012f8 	.word	0x200012f8
  420974:	20000b04 	.word	0x20000b04
  420978:	400e1400 	.word	0x400e1400
  42097c:	20000b58 	.word	0x20000b58
  420980:	20000ae9 	.word	0x20000ae9
  420984:	20000b49 	.word	0x20000b49
  420988:	20000b3c 	.word	0x20000b3c
  42098c:	20000b40 	.word	0x20000b40
  420990:	20000b3e 	.word	0x20000b3e
  420994:	20000b42 	.word	0x20000b42
  420998:	20000af1 	.word	0x20000af1
  42099c:	20000aec 	.word	0x20000aec
  4209a0:	20001558 	.word	0x20001558
  4209a4:	004205d5 	.word	0x004205d5
  4209a8:	20000b14 	.word	0x20000b14
  4209ac:	20000af8 	.word	0x20000af8
  4209b0:	20000afa 	.word	0x20000afa
  4209b4:	20001518 	.word	0x20001518
  4209b8:	00420615 	.word	0x00420615
  4209bc:	20000aea 	.word	0x20000aea
  4209c0:	20000aee 	.word	0x20000aee
  4209c4:	20000af9 	.word	0x20000af9
  4209c8:	20000afc 	.word	0x20000afc
  4209cc:	00426bf5 	.word	0x00426bf5
				    }
				    else if((hmon_1A_2B_val_g_u16  >= HMON_OPEN_FLT_RANGE)   ||  (hmon_1B_2A_val_g_u16 >= HMON_OPEN_FLT_RANGE))
				    {
					    actuator_trbl_g_u8 = 1u; /*1 indicating open fault trouble*/
  4209d0:	2201      	movs	r2, #1
  4209d2:	4b13      	ldr	r3, [pc, #76]	; (420a20 <Actuator_HM+0x308>)
  4209d4:	701a      	strb	r2, [r3, #0]
				    else
				    {
					    actuator_trbl_g_u8 = 2u; /*2 indicating ground fault trouble*/
				    }

				    if(actuator_prev_state_sl_u8 != actuator_trbl_g_u8)
  4209d6:	4b12      	ldr	r3, [pc, #72]	; (420a20 <Actuator_HM+0x308>)
  4209d8:	781b      	ldrb	r3, [r3, #0]
  4209da:	4a12      	ldr	r2, [pc, #72]	; (420a24 <Actuator_HM+0x30c>)
  4209dc:	7812      	ldrb	r2, [r2, #0]
  4209de:	429a      	cmp	r2, r3
  4209e0:	d01c      	beq.n	420a1c <Actuator_HM+0x304>
				    {
					    //LOG
					    actuator_prev_state_sl_u8 = actuator_trbl_g_u8; /*Update the value*/
  4209e2:	4a10      	ldr	r2, [pc, #64]	; (420a24 <Actuator_HM+0x30c>)
  4209e4:	7013      	strb	r3, [r2, #0]

					    /* Log the actuator trouble start/stop event */

					    Reset_Values();
  4209e6:	4b10      	ldr	r3, [pc, #64]	; (420a28 <Actuator_HM+0x310>)
  4209e8:	4798      	blx	r3

					    log_data.log_code = 4u; /*Indicating actuator trouble code*/
  4209ea:	2204      	movs	r2, #4
  4209ec:	4b0f      	ldr	r3, [pc, #60]	; (420a2c <Actuator_HM+0x314>)
  4209ee:	711a      	strb	r2, [r3, #4]

					    if(!actuator_trbl_g_u8)
  4209f0:	4b0b      	ldr	r3, [pc, #44]	; (420a20 <Actuator_HM+0x308>)
  4209f2:	781b      	ldrb	r3, [r3, #0]
  4209f4:	b953      	cbnz	r3, 420a0c <Actuator_HM+0x2f4>
					    {
						    log_data.start_stop = 0u; /*indicating actuator trouble cleared*/
  4209f6:	2100      	movs	r1, #0
  4209f8:	4a0c      	ldr	r2, [pc, #48]	; (420a2c <Actuator_HM+0x314>)
  4209fa:	7191      	strb	r1, [r2, #6]
					    }
					    else
					    {
						    log_data.start_stop = 1u; /*indicating actuator trouble occurred*/
					    }
					    log_data.trouble_fire = actuator_trbl_g_u8;
  4209fc:	480b      	ldr	r0, [pc, #44]	; (420a2c <Actuator_HM+0x314>)
  4209fe:	7143      	strb	r3, [r0, #5]

					    NOR_Flash_Log_Data(&log_data);
  420a00:	4b0b      	ldr	r3, [pc, #44]	; (420a30 <Actuator_HM+0x318>)
  420a02:	4798      	blx	r3
						Get_New_trouble = ACT_TRBL_4_FLASH;
  420a04:	2204      	movs	r2, #4
  420a06:	4b0b      	ldr	r3, [pc, #44]	; (420a34 <Actuator_HM+0x31c>)
  420a08:	701a      	strb	r2, [r3, #0]
  420a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						    log_data.start_stop = 1u; /*indicating actuator trouble occurred*/
  420a0c:	2101      	movs	r1, #1
  420a0e:	4a07      	ldr	r2, [pc, #28]	; (420a2c <Actuator_HM+0x314>)
  420a10:	7191      	strb	r1, [r2, #6]
  420a12:	e7f3      	b.n	4209fc <Actuator_HM+0x2e4>
					    actuator_trbl_g_u8 = 2u; /*2 indicating ground fault trouble*/
  420a14:	2202      	movs	r2, #2
  420a16:	4b02      	ldr	r3, [pc, #8]	; (420a20 <Actuator_HM+0x308>)
  420a18:	701a      	strb	r2, [r3, #0]
  420a1a:	e7dc      	b.n	4209d6 <Actuator_HM+0x2be>
  420a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  420a1e:	bf00      	nop
  420a20:	20000af1 	.word	0x20000af1
  420a24:	20000af0 	.word	0x20000af0
  420a28:	004249a5 	.word	0x004249a5
  420a2c:	20000098 	.word	0x20000098
  420a30:	00424729 	.word	0x00424729
  420a34:	20001088 	.word	0x20001088

00420a38 <Check_Power_Trbl>:
/* Function  : Check Primary and secondary Power trouble
 * Parameter : None
 * return    : None
 */
void Check_Power_Trbl(void)
{
  420a38:	b510      	push	{r4, lr}
static bool pri_pwr_prev_state_sl_b = 0u;
static bool sec_pwr_prev_state_sl_b = 0u;

    /***********************For Secondary power check*************************/

    if(sec_pwr_vol_g_u16 > SEC_PWR_MIN_VOL && sec_rawvolt >SEC_PWR_MIN_VOL)
  420a3a:	4b57      	ldr	r3, [pc, #348]	; (420b98 <Check_Power_Trbl+0x160>)
  420a3c:	881b      	ldrh	r3, [r3, #0]
  420a3e:	f241 32ec 	movw	r2, #5100	; 0x13ec
  420a42:	4293      	cmp	r3, r2
  420a44:	d910      	bls.n	420a68 <Check_Power_Trbl+0x30>
  420a46:	4a55      	ldr	r2, [pc, #340]	; (420b9c <Check_Power_Trbl+0x164>)
  420a48:	6811      	ldr	r1, [r2, #0]
  420a4a:	f241 32ec 	movw	r2, #5100	; 0x13ec
  420a4e:	4291      	cmp	r1, r2
  420a50:	d90a      	bls.n	420a68 <Check_Power_Trbl+0x30>
    {
        sec_pwr_prev_tick_g_u32 = count_1ms;
  420a52:	4b53      	ldr	r3, [pc, #332]	; (420ba0 <Check_Power_Trbl+0x168>)
  420a54:	6819      	ldr	r1, [r3, #0]
  420a56:	4a53      	ldr	r2, [pc, #332]	; (420ba4 <Check_Power_Trbl+0x16c>)
  420a58:	6011      	str	r1, [r2, #0]
		sec_pwr_cutoff_tick_g_u32 = count_1ms;
  420a5a:	681a      	ldr	r2, [r3, #0]
  420a5c:	4b52      	ldr	r3, [pc, #328]	; (420ba8 <Check_Power_Trbl+0x170>)
  420a5e:	601a      	str	r2, [r3, #0]
        sec_pwr_trouble_g_b = NO_TROUBLE;
  420a60:	2200      	movs	r2, #0
  420a62:	4b52      	ldr	r3, [pc, #328]	; (420bac <Check_Power_Trbl+0x174>)
  420a64:	701a      	strb	r2, [r3, #0]
  420a66:	e03e      	b.n	420ae6 <Check_Power_Trbl+0xae>
    }
	else if( sec_rawvolt < SEC_PWR_CUTOFF_VOL && sec_pwr_vol_g_u16 < SEC_PWR_CUTOFF_VOL && pri_pwr_trouble_g_b == TROUBLE) //sec_pwr_trouble_g_b == TROUBLE &&
  420a68:	4a4c      	ldr	r2, [pc, #304]	; (420b9c <Check_Power_Trbl+0x164>)
  420a6a:	6811      	ldr	r1, [r2, #0]
  420a6c:	f241 3287 	movw	r2, #4999	; 0x1387
  420a70:	4291      	cmp	r1, r2
  420a72:	d822      	bhi.n	420aba <Check_Power_Trbl+0x82>
  420a74:	4293      	cmp	r3, r2
  420a76:	d820      	bhi.n	420aba <Check_Power_Trbl+0x82>
  420a78:	4b4d      	ldr	r3, [pc, #308]	; (420bb0 <Check_Power_Trbl+0x178>)
  420a7a:	781b      	ldrb	r3, [r3, #0]
  420a7c:	b1eb      	cbz	r3, 420aba <Check_Power_Trbl+0x82>
	{
		if((count_1ms - sec_pwr_cutoff_tick_g_u32) >= 2000u)	//SEC_2
  420a7e:	4b48      	ldr	r3, [pc, #288]	; (420ba0 <Check_Power_Trbl+0x168>)
  420a80:	681b      	ldr	r3, [r3, #0]
  420a82:	4a49      	ldr	r2, [pc, #292]	; (420ba8 <Check_Power_Trbl+0x170>)
  420a84:	6812      	ldr	r2, [r2, #0]
  420a86:	1a9b      	subs	r3, r3, r2
  420a88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  420a8c:	d32b      	bcc.n	420ae6 <Check_Power_Trbl+0xae>
		{
			/* Log the secondary power event*/
			//LOG
			Reset_Values();
  420a8e:	4b49      	ldr	r3, [pc, #292]	; (420bb4 <Check_Power_Trbl+0x17c>)
  420a90:	4798      	blx	r3
			log_data.log_code = 16u; /*Indicating secondary power log code*/
  420a92:	4849      	ldr	r0, [pc, #292]	; (420bb8 <Check_Power_Trbl+0x180>)
  420a94:	2310      	movs	r3, #16
  420a96:	7103      	strb	r3, [r0, #4]
			//log_data.start_stop = 3; /*log start and stop event*/
			log_data.value = sec_pwr_vol_g_u16 / 50u;
  420a98:	4b3f      	ldr	r3, [pc, #252]	; (420b98 <Check_Power_Trbl+0x160>)
  420a9a:	881b      	ldrh	r3, [r3, #0]
  420a9c:	4a47      	ldr	r2, [pc, #284]	; (420bbc <Check_Power_Trbl+0x184>)
  420a9e:	fba2 2303 	umull	r2, r3, r2, r3
  420aa2:	091b      	lsrs	r3, r3, #4
  420aa4:	71c3      	strb	r3, [r0, #7]
			NOR_Flash_Log_Data(&log_data);
  420aa6:	4b46      	ldr	r3, [pc, #280]	; (420bc0 <Check_Power_Trbl+0x188>)
  420aa8:	4798      	blx	r3
			printf("software Windup\r\n");
  420aaa:	4846      	ldr	r0, [pc, #280]	; (420bc4 <Check_Power_Trbl+0x18c>)
  420aac:	4b46      	ldr	r3, [pc, #280]	; (420bc8 <Check_Power_Trbl+0x190>)
  420aae:	4798      	blx	r3
			windup_Music();
  420ab0:	4b46      	ldr	r3, [pc, #280]	; (420bcc <Check_Power_Trbl+0x194>)
  420ab2:	4798      	blx	r3
			freq_test_backup_mode();
  420ab4:	4b46      	ldr	r3, [pc, #280]	; (420bd0 <Check_Power_Trbl+0x198>)
  420ab6:	4798      	blx	r3
  420ab8:	e015      	b.n	420ae6 <Check_Power_Trbl+0xae>

	}

    else
    {
        if((count_1ms - sec_pwr_prev_tick_g_u32) > 50000u)//__700ms /*check for 500ms and decide */
  420aba:	4b39      	ldr	r3, [pc, #228]	; (420ba0 <Check_Power_Trbl+0x168>)
  420abc:	681b      	ldr	r3, [r3, #0]
  420abe:	4a39      	ldr	r2, [pc, #228]	; (420ba4 <Check_Power_Trbl+0x16c>)
  420ac0:	6812      	ldr	r2, [r2, #0]
  420ac2:	1a9b      	subs	r3, r3, r2
  420ac4:	f24c 3250 	movw	r2, #50000	; 0xc350
  420ac8:	4293      	cmp	r3, r2
  420aca:	d90c      	bls.n	420ae6 <Check_Power_Trbl+0xae>
        {
            sec_pwr_trouble_g_b = TROUBLE;
  420acc:	2201      	movs	r2, #1
  420ace:	4b37      	ldr	r3, [pc, #220]	; (420bac <Check_Power_Trbl+0x174>)
  420ad0:	701a      	strb	r2, [r3, #0]
			sec_pwr_cutoff_tick_g_u32 = count_1ms;
  420ad2:	4b33      	ldr	r3, [pc, #204]	; (420ba0 <Check_Power_Trbl+0x168>)
  420ad4:	6819      	ldr	r1, [r3, #0]
  420ad6:	4a34      	ldr	r2, [pc, #208]	; (420ba8 <Check_Power_Trbl+0x170>)
  420ad8:	6011      	str	r1, [r2, #0]
			sec_pwr_prev_tick_g_u32 = count_1ms;
  420ada:	681a      	ldr	r2, [r3, #0]
  420adc:	4b31      	ldr	r3, [pc, #196]	; (420ba4 <Check_Power_Trbl+0x16c>)
  420ade:	601a      	str	r2, [r3, #0]
			Get_New_trouble = SEC_PWR_6_FLASH;
  420ae0:	2206      	movs	r2, #6
  420ae2:	4b3c      	ldr	r3, [pc, #240]	; (420bd4 <Check_Power_Trbl+0x19c>)
  420ae4:	701a      	strb	r2, [r3, #0]
        }
    }

    if(sec_pwr_prev_state_sl_b != sec_pwr_trouble_g_b)
  420ae6:	4b3c      	ldr	r3, [pc, #240]	; (420bd8 <Check_Power_Trbl+0x1a0>)
  420ae8:	781a      	ldrb	r2, [r3, #0]
  420aea:	4b30      	ldr	r3, [pc, #192]	; (420bac <Check_Power_Trbl+0x174>)
  420aec:	781b      	ldrb	r3, [r3, #0]
  420aee:	429a      	cmp	r2, r3
  420af0:	d013      	beq.n	420b1a <Check_Power_Trbl+0xe2>
    {
        /* Log the secondary power event*/
        //LOG
        Reset_Values();
  420af2:	4b30      	ldr	r3, [pc, #192]	; (420bb4 <Check_Power_Trbl+0x17c>)
  420af4:	4798      	blx	r3
        log_data.log_code = 6u; /*Indicating secondary power log code*/
  420af6:	4830      	ldr	r0, [pc, #192]	; (420bb8 <Check_Power_Trbl+0x180>)
  420af8:	2306      	movs	r3, #6
  420afa:	7103      	strb	r3, [r0, #4]
        log_data.start_stop = sec_pwr_trouble_g_b; /*log start and stop event*/
  420afc:	4c2b      	ldr	r4, [pc, #172]	; (420bac <Check_Power_Trbl+0x174>)
  420afe:	7823      	ldrb	r3, [r4, #0]
  420b00:	7183      	strb	r3, [r0, #6]
        log_data.value = sec_pwr_vol_g_u16 / 50u;
  420b02:	4b25      	ldr	r3, [pc, #148]	; (420b98 <Check_Power_Trbl+0x160>)
  420b04:	881b      	ldrh	r3, [r3, #0]
  420b06:	4a2d      	ldr	r2, [pc, #180]	; (420bbc <Check_Power_Trbl+0x184>)
  420b08:	fba2 2303 	umull	r2, r3, r2, r3
  420b0c:	091b      	lsrs	r3, r3, #4
  420b0e:	71c3      	strb	r3, [r0, #7]
        NOR_Flash_Log_Data(&log_data);
  420b10:	4b2b      	ldr	r3, [pc, #172]	; (420bc0 <Check_Power_Trbl+0x188>)
  420b12:	4798      	blx	r3
        sec_pwr_prev_state_sl_b = sec_pwr_trouble_g_b;
  420b14:	7822      	ldrb	r2, [r4, #0]
  420b16:	4b30      	ldr	r3, [pc, #192]	; (420bd8 <Check_Power_Trbl+0x1a0>)
  420b18:	701a      	strb	r2, [r3, #0]
		//printf("sec_pwr_prev_state_sl_b %d",sec_pwr_prev_state_sl_b);
    }

/***********************For primary power check*************************/

    if(primary_pwr_vol_g_u16 >  PRI_PWR_MIN_VOL)
  420b1a:	4b30      	ldr	r3, [pc, #192]	; (420bdc <Check_Power_Trbl+0x1a4>)
  420b1c:	681a      	ldr	r2, [r3, #0]
  420b1e:	f242 13fc 	movw	r3, #8700	; 0x21fc
  420b22:	429a      	cmp	r2, r3
  420b24:	d925      	bls.n	420b72 <Check_Power_Trbl+0x13a>
    {
        pri_pwr_prev_tick_g_u32 = count_1ms;
  420b26:	4b1e      	ldr	r3, [pc, #120]	; (420ba0 <Check_Power_Trbl+0x168>)
  420b28:	681a      	ldr	r2, [r3, #0]
  420b2a:	4b2d      	ldr	r3, [pc, #180]	; (420be0 <Check_Power_Trbl+0x1a8>)
  420b2c:	601a      	str	r2, [r3, #0]
        pri_pwr_trouble_g_b = NO_TROUBLE;
  420b2e:	2200      	movs	r2, #0
  420b30:	4b1f      	ldr	r3, [pc, #124]	; (420bb0 <Check_Power_Trbl+0x178>)
  420b32:	701a      	strb	r2, [r3, #0]
        }
    }



    if(pri_pwr_prev_state_sl_b != pri_pwr_trouble_g_b)
  420b34:	4b2b      	ldr	r3, [pc, #172]	; (420be4 <Check_Power_Trbl+0x1ac>)
  420b36:	781a      	ldrb	r2, [r3, #0]
  420b38:	4b1d      	ldr	r3, [pc, #116]	; (420bb0 <Check_Power_Trbl+0x178>)
  420b3a:	781b      	ldrb	r3, [r3, #0]
  420b3c:	429a      	cmp	r2, r3
  420b3e:	d017      	beq.n	420b70 <Check_Power_Trbl+0x138>
    {
        /* Log the secondary power event*/
        //LOG
        Reset_Values();
  420b40:	4b1c      	ldr	r3, [pc, #112]	; (420bb4 <Check_Power_Trbl+0x17c>)
  420b42:	4798      	blx	r3
        log_data.log_code = 5u; /*Indicating primary power log code*/
  420b44:	481c      	ldr	r0, [pc, #112]	; (420bb8 <Check_Power_Trbl+0x180>)
  420b46:	2305      	movs	r3, #5
  420b48:	7103      	strb	r3, [r0, #4]
        log_data.start_stop = pri_pwr_trouble_g_b; /*log start and stop event*/
  420b4a:	4c19      	ldr	r4, [pc, #100]	; (420bb0 <Check_Power_Trbl+0x178>)
  420b4c:	7823      	ldrb	r3, [r4, #0]
  420b4e:	7183      	strb	r3, [r0, #6]
        log_data.value = primary_pwr_vol_g_u16 / 50u;
  420b50:	4b22      	ldr	r3, [pc, #136]	; (420bdc <Check_Power_Trbl+0x1a4>)
  420b52:	681b      	ldr	r3, [r3, #0]
  420b54:	4a19      	ldr	r2, [pc, #100]	; (420bbc <Check_Power_Trbl+0x184>)
  420b56:	fba2 2303 	umull	r2, r3, r2, r3
  420b5a:	091b      	lsrs	r3, r3, #4
  420b5c:	71c3      	strb	r3, [r0, #7]
        NOR_Flash_Log_Data(&log_data);
  420b5e:	4b18      	ldr	r3, [pc, #96]	; (420bc0 <Check_Power_Trbl+0x188>)
  420b60:	4798      	blx	r3
        pri_pwr_prev_state_sl_b = pri_pwr_trouble_g_b;
  420b62:	7822      	ldrb	r2, [r4, #0]
  420b64:	4b1f      	ldr	r3, [pc, #124]	; (420be4 <Check_Power_Trbl+0x1ac>)
  420b66:	701a      	strb	r2, [r3, #0]
  420b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  420b6c:	4b1e      	ldr	r3, [pc, #120]	; (420be8 <Check_Power_Trbl+0x1b0>)
  420b6e:	635a      	str	r2, [r3, #52]	; 0x34
  420b70:	bd10      	pop	{r4, pc}
        if((count_1ms - pri_pwr_prev_tick_g_u32) > __700ms) /*check for 500ms and decide */
  420b72:	4b0b      	ldr	r3, [pc, #44]	; (420ba0 <Check_Power_Trbl+0x168>)
  420b74:	681b      	ldr	r3, [r3, #0]
  420b76:	4a1a      	ldr	r2, [pc, #104]	; (420be0 <Check_Power_Trbl+0x1a8>)
  420b78:	6812      	ldr	r2, [r2, #0]
  420b7a:	1a9b      	subs	r3, r3, r2
  420b7c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
  420b80:	d9d8      	bls.n	420b34 <Check_Power_Trbl+0xfc>
		    pri_pwr_prev_tick_g_u32 = count_1ms;
  420b82:	4b07      	ldr	r3, [pc, #28]	; (420ba0 <Check_Power_Trbl+0x168>)
  420b84:	681a      	ldr	r2, [r3, #0]
  420b86:	4b16      	ldr	r3, [pc, #88]	; (420be0 <Check_Power_Trbl+0x1a8>)
  420b88:	601a      	str	r2, [r3, #0]
            pri_pwr_trouble_g_b = TROUBLE;
  420b8a:	2201      	movs	r2, #1
  420b8c:	4b08      	ldr	r3, [pc, #32]	; (420bb0 <Check_Power_Trbl+0x178>)
  420b8e:	701a      	strb	r2, [r3, #0]
			Get_New_trouble = PRI_PWR_5_FLASH;
  420b90:	2205      	movs	r2, #5
  420b92:	4b10      	ldr	r3, [pc, #64]	; (420bd4 <Check_Power_Trbl+0x19c>)
  420b94:	701a      	strb	r2, [r3, #0]
  420b96:	e7cd      	b.n	420b34 <Check_Power_Trbl+0xfc>
  420b98:	2000106a 	.word	0x2000106a
  420b9c:	20001598 	.word	0x20001598
  420ba0:	200012f8 	.word	0x200012f8
  420ba4:	20001064 	.word	0x20001064
  420ba8:	2000105c 	.word	0x2000105c
  420bac:	20001068 	.word	0x20001068
  420bb0:	20000b50 	.word	0x20000b50
  420bb4:	004249a5 	.word	0x004249a5
  420bb8:	20000098 	.word	0x20000098
  420bbc:	51eb851f 	.word	0x51eb851f
  420bc0:	00424729 	.word	0x00424729
  420bc4:	0042f384 	.word	0x0042f384
  420bc8:	00426851 	.word	0x00426851
  420bcc:	00421f4d 	.word	0x00421f4d
  420bd0:	004262ed 	.word	0x004262ed
  420bd4:	20001088 	.word	0x20001088
  420bd8:	20001060 	.word	0x20001060
  420bdc:	20000b54 	.word	0x20000b54
  420be0:	20000b4c 	.word	0x20000b4c
  420be4:	20000b4a 	.word	0x20000b4a
  420be8:	400e1400 	.word	0x400e1400

00420bec <Super_CAP_Charge_enable_disable>:
void Super_CAP_Charge_enable_disable(void)
{
	static  uint8_t SCAP_ReadCnt=30;
	static bool Super_CAP_Charg_prev_state = 0u;

	if((count_1ms - delay_Cap_Bank) > 1000u) /*check for 500ms and decide */	//__500ms
  420bec:	4b2d      	ldr	r3, [pc, #180]	; (420ca4 <Super_CAP_Charge_enable_disable+0xb8>)
  420bee:	681b      	ldr	r3, [r3, #0]
  420bf0:	4a2d      	ldr	r2, [pc, #180]	; (420ca8 <Super_CAP_Charge_enable_disable+0xbc>)
  420bf2:	6812      	ldr	r2, [r2, #0]
  420bf4:	1a9b      	subs	r3, r3, r2
  420bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  420bfa:	d952      	bls.n	420ca2 <Super_CAP_Charge_enable_disable+0xb6>
{
  420bfc:	b510      	push	{r4, lr}
	{

		 if(super_capVolt_g_u16 > supercap_highcuttoff)
  420bfe:	4b2b      	ldr	r3, [pc, #172]	; (420cac <Super_CAP_Charge_enable_disable+0xc0>)
  420c00:	881b      	ldrh	r3, [r3, #0]
  420c02:	f643 126c 	movw	r2, #14700	; 0x396c
  420c06:	4293      	cmp	r3, r2
  420c08:	d933      	bls.n	420c72 <Super_CAP_Charge_enable_disable+0x86>
		 {
			 if((SCAP_ReadCnt--)<=1u)
  420c0a:	4a29      	ldr	r2, [pc, #164]	; (420cb0 <Super_CAP_Charge_enable_disable+0xc4>)
  420c0c:	7813      	ldrb	r3, [r2, #0]
  420c0e:	1e59      	subs	r1, r3, #1
  420c10:	7011      	strb	r1, [r2, #0]
  420c12:	2b01      	cmp	r3, #1
  420c14:	d923      	bls.n	420c5e <Super_CAP_Charge_enable_disable+0x72>
		 else
		 {
			 SCAP_ReadCnt =180;
		 }

		     if(super_cap_state_g_b != Super_CAP_Charg_prev_state)
  420c16:	4b27      	ldr	r3, [pc, #156]	; (420cb4 <Super_CAP_Charge_enable_disable+0xc8>)
  420c18:	781a      	ldrb	r2, [r3, #0]
  420c1a:	4b27      	ldr	r3, [pc, #156]	; (420cb8 <Super_CAP_Charge_enable_disable+0xcc>)
  420c1c:	781b      	ldrb	r3, [r3, #0]
  420c1e:	429a      	cmp	r2, r3
  420c20:	d018      	beq.n	420c54 <Super_CAP_Charge_enable_disable+0x68>
		     {
			     /* Log the SuperCAP  event*/
			     //LOG
			     Reset_Values();
  420c22:	4b26      	ldr	r3, [pc, #152]	; (420cbc <Super_CAP_Charge_enable_disable+0xd0>)
  420c24:	4798      	blx	r3
			     log_data.log_code = 14u; /*Indicating SuperCap log code*/
  420c26:	4826      	ldr	r0, [pc, #152]	; (420cc0 <Super_CAP_Charge_enable_disable+0xd4>)
  420c28:	230e      	movs	r3, #14
  420c2a:	7103      	strb	r3, [r0, #4]
			     log_data.start_stop = super_cap_state_g_b; /*log start and stop event*/
  420c2c:	4c21      	ldr	r4, [pc, #132]	; (420cb4 <Super_CAP_Charge_enable_disable+0xc8>)
  420c2e:	7823      	ldrb	r3, [r4, #0]
  420c30:	7183      	strb	r3, [r0, #6]
			     log_data.value = super_capVolt_g_u16 / 10u;
  420c32:	4b1e      	ldr	r3, [pc, #120]	; (420cac <Super_CAP_Charge_enable_disable+0xc0>)
  420c34:	881b      	ldrh	r3, [r3, #0]
  420c36:	4a23      	ldr	r2, [pc, #140]	; (420cc4 <Super_CAP_Charge_enable_disable+0xd8>)
  420c38:	fba2 2303 	umull	r2, r3, r2, r3
				 log_data.value /=50u;
  420c3c:	f3c3 03c7 	ubfx	r3, r3, #3, #8
  420c40:	4a21      	ldr	r2, [pc, #132]	; (420cc8 <Super_CAP_Charge_enable_disable+0xdc>)
  420c42:	fba2 2303 	umull	r2, r3, r2, r3
  420c46:	091b      	lsrs	r3, r3, #4
  420c48:	71c3      	strb	r3, [r0, #7]
			     NOR_Flash_Log_Data(&log_data);
  420c4a:	4b20      	ldr	r3, [pc, #128]	; (420ccc <Super_CAP_Charge_enable_disable+0xe0>)
  420c4c:	4798      	blx	r3
			     Super_CAP_Charg_prev_state = super_cap_state_g_b;
  420c4e:	7822      	ldrb	r2, [r4, #0]
  420c50:	4b19      	ldr	r3, [pc, #100]	; (420cb8 <Super_CAP_Charge_enable_disable+0xcc>)
  420c52:	701a      	strb	r2, [r3, #0]
		     }

		delay_Cap_Bank = count_1ms;
  420c54:	4b13      	ldr	r3, [pc, #76]	; (420ca4 <Super_CAP_Charge_enable_disable+0xb8>)
  420c56:	681a      	ldr	r2, [r3, #0]
  420c58:	4b13      	ldr	r3, [pc, #76]	; (420ca8 <Super_CAP_Charge_enable_disable+0xbc>)
  420c5a:	601a      	str	r2, [r3, #0]
  420c5c:	bd10      	pop	{r4, pc}
				 Capacitor_Bank_Charge_disable(&Activate_PIN);
  420c5e:	481c      	ldr	r0, [pc, #112]	; (420cd0 <Super_CAP_Charge_enable_disable+0xe4>)
  420c60:	4b1c      	ldr	r3, [pc, #112]	; (420cd4 <Super_CAP_Charge_enable_disable+0xe8>)
  420c62:	4798      	blx	r3
				 SCAP_ReadCnt =180u;
  420c64:	22b4      	movs	r2, #180	; 0xb4
  420c66:	4b12      	ldr	r3, [pc, #72]	; (420cb0 <Super_CAP_Charge_enable_disable+0xc4>)
  420c68:	701a      	strb	r2, [r3, #0]
				 super_cap_state_g_b =0;
  420c6a:	2200      	movs	r2, #0
  420c6c:	4b11      	ldr	r3, [pc, #68]	; (420cb4 <Super_CAP_Charge_enable_disable+0xc8>)
  420c6e:	701a      	strb	r2, [r3, #0]
  420c70:	e7d1      	b.n	420c16 <Super_CAP_Charge_enable_disable+0x2a>
		 else if(super_capVolt_g_u16 < supercap_lowcuttoff)
  420c72:	f243 42bb 	movw	r2, #13499	; 0x34bb
  420c76:	4293      	cmp	r3, r2
  420c78:	d80f      	bhi.n	420c9a <Super_CAP_Charge_enable_disable+0xae>
			  if((SCAP_ReadCnt--)<=1u)
  420c7a:	4a0d      	ldr	r2, [pc, #52]	; (420cb0 <Super_CAP_Charge_enable_disable+0xc4>)
  420c7c:	7813      	ldrb	r3, [r2, #0]
  420c7e:	1e59      	subs	r1, r3, #1
  420c80:	7011      	strb	r1, [r2, #0]
  420c82:	2b01      	cmp	r3, #1
  420c84:	d8c7      	bhi.n	420c16 <Super_CAP_Charge_enable_disable+0x2a>
				 Capacitor_Bank_Charge_enable(&Activate_PIN);
  420c86:	4812      	ldr	r0, [pc, #72]	; (420cd0 <Super_CAP_Charge_enable_disable+0xe4>)
  420c88:	4b13      	ldr	r3, [pc, #76]	; (420cd8 <Super_CAP_Charge_enable_disable+0xec>)
  420c8a:	4798      	blx	r3
 				 SCAP_ReadCnt =180u;
  420c8c:	22b4      	movs	r2, #180	; 0xb4
  420c8e:	4b08      	ldr	r3, [pc, #32]	; (420cb0 <Super_CAP_Charge_enable_disable+0xc4>)
  420c90:	701a      	strb	r2, [r3, #0]
				   super_cap_state_g_b =1u;
  420c92:	2201      	movs	r2, #1
  420c94:	4b07      	ldr	r3, [pc, #28]	; (420cb4 <Super_CAP_Charge_enable_disable+0xc8>)
  420c96:	701a      	strb	r2, [r3, #0]
  420c98:	e7bd      	b.n	420c16 <Super_CAP_Charge_enable_disable+0x2a>
			 SCAP_ReadCnt =180;
  420c9a:	22b4      	movs	r2, #180	; 0xb4
  420c9c:	4b04      	ldr	r3, [pc, #16]	; (420cb0 <Super_CAP_Charge_enable_disable+0xc4>)
  420c9e:	701a      	strb	r2, [r3, #0]
  420ca0:	e7b9      	b.n	420c16 <Super_CAP_Charge_enable_disable+0x2a>
  420ca2:	4770      	bx	lr
  420ca4:	200012f8 	.word	0x200012f8
  420ca8:	20000b00 	.word	0x20000b00
  420cac:	2000106c 	.word	0x2000106c
  420cb0:	20000088 	.word	0x20000088
  420cb4:	2000106e 	.word	0x2000106e
  420cb8:	20000ae8 	.word	0x20000ae8
  420cbc:	004249a5 	.word	0x004249a5
  420cc0:	20000098 	.word	0x20000098
  420cc4:	cccccccd 	.word	0xcccccccd
  420cc8:	51eb851f 	.word	0x51eb851f
  420ccc:	00424729 	.word	0x00424729
  420cd0:	20001478 	.word	0x20001478
  420cd4:	004252d5 	.word	0x004252d5
  420cd8:	004252b9 	.word	0x004252b9

00420cdc <at25dfx_send_command>:
 *
 * \return AT25_SUCCESS if the transfer has been started successfully; otherwise return
 * AT25_ERROR_SPI if the driver is in use.
 */
static at25_status_t at25dfx_send_command(at25_cmd_t *at25cmd)
{
  420cdc:	b510      	push	{r4, lr}
  420cde:	b082      	sub	sp, #8
  420ce0:	4604      	mov	r4, r0
	uint32_t cmd_buffer[2];
	status_code_t spi_stat;

	/* Enable Chip select corresponding to the SerialFlash */
	at25dfx_spi_select_device(active_sf_cs);
  420ce2:	4b16      	ldr	r3, [pc, #88]	; (420d3c <at25dfx_send_command+0x60>)
  420ce4:	7818      	ldrb	r0, [r3, #0]
  420ce6:	4b16      	ldr	r3, [pc, #88]	; (420d40 <at25dfx_send_command+0x64>)
  420ce8:	4798      	blx	r3

	/* Store command and address in command buffer */
	cmd_buffer[0] = (at25cmd->cmd & 0x000000FF)
			| ((at25cmd->address & 0x0000FF) << 24)
  420cea:	6862      	ldr	r2, [r4, #4]
	cmd_buffer[0] = (at25cmd->cmd & 0x000000FF)
  420cec:	7aa3      	ldrb	r3, [r4, #10]
			| ((at25cmd->address & 0x0000FF) << 24)
  420cee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| ((at25cmd->address & 0x00FF00) << 8)
  420cf2:	0211      	lsls	r1, r2, #8
  420cf4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
  420cf8:	430b      	orrs	r3, r1
			| ((at25cmd->address & 0xFF0000) >> 8);
  420cfa:	0a12      	lsrs	r2, r2, #8
  420cfc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  420d00:	4313      	orrs	r3, r2
	cmd_buffer[0] = (at25cmd->cmd & 0x000000FF)
  420d02:	a802      	add	r0, sp, #8
  420d04:	f840 3d08 	str.w	r3, [r0, #-8]!

	/* Send the Status Register Read command followed by a dummy data */
	spi_stat = at25dfx_spi_write_packet((uint16_t *) cmd_buffer,
  420d08:	7ae1      	ldrb	r1, [r4, #11]
  420d0a:	4b0e      	ldr	r3, [pc, #56]	; (420d44 <at25dfx_send_command+0x68>)
  420d0c:	4798      	blx	r3
			at25cmd->cmd_size);

	if (spi_stat != STATUS_OK) {
  420d0e:	b110      	cbz	r0, 420d16 <at25dfx_send_command+0x3a>
		return AT25_ERROR_SPI;
  420d10:	2008      	movs	r0, #8

	/* Disable chip select */
	at25dfx_spi_deselect_device(active_sf_cs);

	return (AT25_SUCCESS);
}
  420d12:	b002      	add	sp, #8
  420d14:	bd10      	pop	{r4, pc}
			|| (at25cmd->cmd == AT25_WRITE_STATUS)) {
  420d16:	7aa3      	ldrb	r3, [r4, #10]
  420d18:	3b01      	subs	r3, #1
	if ((at25cmd->cmd == AT25_BYTE_PAGE_PROGRAM)
  420d1a:	b2db      	uxtb	r3, r3
  420d1c:	2b01      	cmp	r3, #1
		spi_stat = at25dfx_spi_write_packet(at25cmd->data, 
  420d1e:	8921      	ldrh	r1, [r4, #8]
  420d20:	6820      	ldr	r0, [r4, #0]
  420d22:	bf94      	ite	ls
  420d24:	4b07      	ldrls	r3, [pc, #28]	; (420d44 <at25dfx_send_command+0x68>)
		spi_stat = at25dfx_spi_read_packet(at25cmd->data, 
  420d26:	4b08      	ldrhi	r3, [pc, #32]	; (420d48 <at25dfx_send_command+0x6c>)
  420d28:	4798      	blx	r3
	if (spi_stat != STATUS_OK) {
  420d2a:	b108      	cbz	r0, 420d30 <at25dfx_send_command+0x54>
		return AT25_ERROR_SPI;
  420d2c:	2008      	movs	r0, #8
  420d2e:	e7f0      	b.n	420d12 <at25dfx_send_command+0x36>
	at25dfx_spi_deselect_device(active_sf_cs);
  420d30:	4b02      	ldr	r3, [pc, #8]	; (420d3c <at25dfx_send_command+0x60>)
  420d32:	7818      	ldrb	r0, [r3, #0]
  420d34:	4b05      	ldr	r3, [pc, #20]	; (420d4c <at25dfx_send_command+0x70>)
  420d36:	4798      	blx	r3
	return (AT25_SUCCESS);
  420d38:	2000      	movs	r0, #0
  420d3a:	e7ea      	b.n	420d12 <at25dfx_send_command+0x36>
  420d3c:	20000090 	.word	0x20000090
  420d40:	004210b1 	.word	0x004210b1
  420d44:	004210f9 	.word	0x004210f9
  420d48:	004210e1 	.word	0x004210e1
  420d4c:	004210c9 	.word	0x004210c9

00420d50 <at25dfx_enable_write>:
 *
 * \return AT25_SUCCESS if the device has been unprotected; otherwise return
 * AT25_ERROR_PROTECTED.
 */
static at25_status_t at25dfx_enable_write(void)
{
  420d50:	b500      	push	{lr}
  420d52:	b085      	sub	sp, #20
	at25_status_t op_stat;
	at25_cmd_t at25cmd;

	/* Issue a write enable command */
	at25cmd.cmd = AT25_WRITE_ENABLE;
  420d54:	2306      	movs	r3, #6
  420d56:	f88d 300e 	strb.w	r3, [sp, #14]
	at25cmd.cmd_size = 1;
  420d5a:	2301      	movs	r3, #1
  420d5c:	f88d 300f 	strb.w	r3, [sp, #15]
	at25cmd.data = NULL;
  420d60:	2300      	movs	r3, #0
  420d62:	9301      	str	r3, [sp, #4]
	at25cmd.data_size = 0;
  420d64:	f8ad 300c 	strh.w	r3, [sp, #12]
	at25cmd.address = 0;
  420d68:	9302      	str	r3, [sp, #8]
	op_stat = at25dfx_send_command(&at25cmd);
  420d6a:	a801      	add	r0, sp, #4
  420d6c:	4b02      	ldr	r3, [pc, #8]	; (420d78 <at25dfx_enable_write+0x28>)
  420d6e:	4798      	blx	r3

	return op_stat;
}
  420d70:	b005      	add	sp, #20
  420d72:	f85d fb04 	ldr.w	pc, [sp], #4
  420d76:	bf00      	nop
  420d78:	00420cdd 	.word	0x00420cdd

00420d7c <at25dfx_initialize>:
 * \brief Initialize the SerialFlash.
 *
 * \return AT25_SUCCESS for success, AT25_ERROR_INIT for error.
 */
at25_status_t at25dfx_initialize(void)
{
  420d7c:	b508      	push	{r3, lr}
	at25dfx_spi_init();
  420d7e:	4b02      	ldr	r3, [pc, #8]	; (420d88 <at25dfx_initialize+0xc>)
  420d80:	4798      	blx	r3

	return AT25_SUCCESS;
}
  420d82:	2000      	movs	r0, #0
  420d84:	bd08      	pop	{r3, pc}
  420d86:	bf00      	nop
  420d88:	00421079 	.word	0x00421079

00420d8c <at25dfx_set_mem_active>:
 *
 * \param cs  SerialFlash chip select.
 */
void at25dfx_set_mem_active(uint8_t cs)
{
	active_sf_cs = cs;
  420d8c:	4b01      	ldr	r3, [pc, #4]	; (420d94 <at25dfx_set_mem_active+0x8>)
  420d8e:	7018      	strb	r0, [r3, #0]
  420d90:	4770      	bx	lr
  420d92:	bf00      	nop
  420d94:	20000090 	.word	0x20000090

00420d98 <at25dfx_mem_check>:
 * value set in the configuration file.
 *
 * \return AT25_SUCCESS for success, AT25_ERROR_NOT_FOUND for error.
 */
at25_status_t at25dfx_mem_check(void)
{
  420d98:	b500      	push	{lr}
  420d9a:	b085      	sub	sp, #20
	uint32_t dev_id = 0x0;
  420d9c:	2300      	movs	r3, #0
  420d9e:	9303      	str	r3, [sp, #12]
	at25cmd.cmd = AT25_READ_JEDEC_ID;
  420da0:	229f      	movs	r2, #159	; 0x9f
  420da2:	f88d 200a 	strb.w	r2, [sp, #10]
	at25cmd.cmd_size = 1;
  420da6:	2201      	movs	r2, #1
  420da8:	f88d 200b 	strb.w	r2, [sp, #11]
	at25cmd.data = (uint8_t *) dev_id;
  420dac:	aa03      	add	r2, sp, #12
  420dae:	9200      	str	r2, [sp, #0]
	at25cmd.data_size = 3;
  420db0:	2203      	movs	r2, #3
  420db2:	f8ad 2008 	strh.w	r2, [sp, #8]
	at25cmd.address = 0;
  420db6:	9301      	str	r3, [sp, #4]
	op_stat = at25dfx_send_command(&at25cmd);
  420db8:	4668      	mov	r0, sp
  420dba:	4b06      	ldr	r3, [pc, #24]	; (420dd4 <at25dfx_mem_check+0x3c>)
  420dbc:	4798      	blx	r3
	*dev_id &= 0x00FFFFFF;
  420dbe:	9803      	ldr	r0, [sp, #12]
  420dc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	
	else
	 {
		return AT25_ERROR_NOT_FOUND;
	}
}
  420dc4:	4b04      	ldr	r3, [pc, #16]	; (420dd8 <at25dfx_mem_check+0x40>)
  420dc6:	4298      	cmp	r0, r3
  420dc8:	bf14      	ite	ne
  420dca:	2004      	movne	r0, #4
  420dcc:	2000      	moveq	r0, #0
  420dce:	b005      	add	sp, #20
  420dd0:	f85d fb04 	ldr.w	pc, [sp], #4
  420dd4:	00420cdd 	.word	0x00420cdd
  420dd8:	001323c2 	.word	0x001323c2

00420ddc <at25dfx_read_status>:
 * \param status  Pointer to an AT25 device status.
 *
 * \return AT25_SUCCESS for success, otherwise for error.
 */
at25_status_t at25dfx_read_status(uint8_t *status)
{
  420ddc:	b500      	push	{lr}
  420dde:	b085      	sub	sp, #20
	at25_status_t op_stat;
	at25_cmd_t at25cmd;

	/* Issue a read status command */
	at25cmd.cmd = AT25_READ_STATUS;
  420de0:	2305      	movs	r3, #5
  420de2:	f88d 300e 	strb.w	r3, [sp, #14]
	at25cmd.cmd_size = 1;
  420de6:	2301      	movs	r3, #1
  420de8:	f88d 300f 	strb.w	r3, [sp, #15]
	at25cmd.data = status;
  420dec:	9001      	str	r0, [sp, #4]
	at25cmd.data_size = 1;
  420dee:	f8ad 300c 	strh.w	r3, [sp, #12]
	at25cmd.address = 0;
  420df2:	2300      	movs	r3, #0
  420df4:	9302      	str	r3, [sp, #8]
	op_stat = at25dfx_send_command(&at25cmd);
  420df6:	a801      	add	r0, sp, #4
  420df8:	4b02      	ldr	r3, [pc, #8]	; (420e04 <at25dfx_read_status+0x28>)
  420dfa:	4798      	blx	r3

	return op_stat;
}
  420dfc:	b005      	add	sp, #20
  420dfe:	f85d fb04 	ldr.w	pc, [sp], #4
  420e02:	bf00      	nop
  420e04:	00420cdd 	.word	0x00420cdd

00420e08 <at25dfx_wait_ready>:
{
  420e08:	b510      	push	{r4, lr}
  420e0a:	b082      	sub	sp, #8
		op_stat = at25dfx_read_status(&at25_stat);
  420e0c:	4c06      	ldr	r4, [pc, #24]	; (420e28 <at25dfx_wait_ready+0x20>)
  420e0e:	f10d 0007 	add.w	r0, sp, #7
  420e12:	47a0      	blx	r4
		if (op_stat != AT25_SUCCESS) {
  420e14:	4602      	mov	r2, r0
  420e16:	b920      	cbnz	r0, 420e22 <at25dfx_wait_ready+0x1a>
		if ((at25_stat & AT25_STATUS_RDYBSY) == AT25_STATUS_RDYBSY_READY) {
  420e18:	f89d 3007 	ldrb.w	r3, [sp, #7]
  420e1c:	f013 0f01 	tst.w	r3, #1
  420e20:	d1f5      	bne.n	420e0e <at25dfx_wait_ready+0x6>
}
  420e22:	4610      	mov	r0, r2
  420e24:	b002      	add	sp, #8
  420e26:	bd10      	pop	{r4, pc}
  420e28:	00420ddd 	.word	0x00420ddd

00420e2c <at25dfx_erase_block_OTA>:
	 uint32_t i, numsectors;
	 numsectors = 3;
	 for (i = 0; i < numsectors; i++) {

		 /* Check if beyond the memory size */
		 if (address > AT25DFX_SIZE) {
  420e2c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
  420e30:	d834      	bhi.n	420e9c <at25dfx_erase_block_OTA+0x70>
 {
  420e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  420e36:	b084      	sub	sp, #16
  420e38:	4604      	mov	r4, r0
  420e3a:	f500 3800 	add.w	r8, r0, #131072	; 0x20000
			 return AT25_ERROR;
		 }

		 /* Check if the flash is ready and unprotected */
		 op_stat = at25dfx_read_status(&at25_stat);
  420e3e:	4d1c      	ldr	r5, [pc, #112]	; (420eb0 <at25dfx_erase_block_OTA+0x84>)
		 AT25_STATUS_SWP_PROTNONE) {
			 return AT25_ERROR_PROTECTED;
		 }

		 /* Enable critical write operation */
		 op_stat = at25dfx_enable_write();
  420e40:	4e1c      	ldr	r6, [pc, #112]	; (420eb4 <at25dfx_erase_block_OTA+0x88>)
		 at25cmd.cmd = AT25DFX_BLOCK_ERASE_CMD;
		 at25cmd.cmd_size = 4;
		 at25cmd.data = NULL;
		 at25cmd.data_size = 0;
		 at25cmd.address = address;
		 op_stat = at25dfx_send_command(&at25cmd);
  420e42:	4f1d      	ldr	r7, [pc, #116]	; (420eb8 <at25dfx_erase_block_OTA+0x8c>)
		 op_stat = at25dfx_read_status(&at25_stat);
  420e44:	f10d 000f 	add.w	r0, sp, #15
  420e48:	47a8      	blx	r5
		 if (op_stat != AT25_SUCCESS) {
  420e4a:	4603      	mov	r3, r0
  420e4c:	bb50      	cbnz	r0, 420ea4 <at25dfx_erase_block_OTA+0x78>
		 if ((at25_stat & AT25_STATUS_RDYBSY) != AT25_STATUS_RDYBSY_READY) {
  420e4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
  420e52:	f013 0f01 	tst.w	r3, #1
  420e56:	d124      	bne.n	420ea2 <at25dfx_erase_block_OTA+0x76>
		 } else if ((at25_stat & AT25_STATUS_SWP) !=
  420e58:	f013 0f0c 	tst.w	r3, #12
  420e5c:	d126      	bne.n	420eac <at25dfx_erase_block_OTA+0x80>
		 op_stat = at25dfx_enable_write();
  420e5e:	47b0      	blx	r6
		 if (op_stat != AT25_SUCCESS) {
  420e60:	4603      	mov	r3, r0
  420e62:	b9f8      	cbnz	r0, 420ea4 <at25dfx_erase_block_OTA+0x78>
		 at25cmd.cmd = AT25DFX_BLOCK_ERASE_CMD;
  420e64:	23d8      	movs	r3, #216	; 0xd8
  420e66:	f88d 300a 	strb.w	r3, [sp, #10]
		 at25cmd.cmd_size = 4;
  420e6a:	2304      	movs	r3, #4
  420e6c:	f88d 300b 	strb.w	r3, [sp, #11]
		 at25cmd.data = NULL;
  420e70:	2300      	movs	r3, #0
  420e72:	9300      	str	r3, [sp, #0]
		 at25cmd.data_size = 0;
  420e74:	f8ad 3008 	strh.w	r3, [sp, #8]
		 at25cmd.address = address;
  420e78:	9401      	str	r4, [sp, #4]
		 op_stat = at25dfx_send_command(&at25cmd);
  420e7a:	4668      	mov	r0, sp
  420e7c:	47b8      	blx	r7

		 if (op_stat != AT25_SUCCESS) {
  420e7e:	4603      	mov	r3, r0
  420e80:	b980      	cbnz	r0, 420ea4 <at25dfx_erase_block_OTA+0x78>
			 return op_stat;
		 }

		 /* Wait for transfer to finish */
		 op_stat = at25dfx_wait_ready();
  420e82:	4b0e      	ldr	r3, [pc, #56]	; (420ebc <at25dfx_erase_block_OTA+0x90>)
  420e84:	4798      	blx	r3
		 if (op_stat != AT25_SUCCESS) {
  420e86:	4603      	mov	r3, r0
  420e88:	b960      	cbnz	r0, 420ea4 <at25dfx_erase_block_OTA+0x78>
	 for (i = 0; i < numsectors; i++) {
  420e8a:	4544      	cmp	r4, r8
  420e8c:	d00a      	beq.n	420ea4 <at25dfx_erase_block_OTA+0x78>
			 return op_stat;
		 }
		 
		 address += 65536;
  420e8e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
		 if (address > AT25DFX_SIZE) {
  420e92:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
  420e96:	d9d5      	bls.n	420e44 <at25dfx_erase_block_OTA+0x18>
			 return AT25_ERROR;
  420e98:	2309      	movs	r3, #9
  420e9a:	e003      	b.n	420ea4 <at25dfx_erase_block_OTA+0x78>
  420e9c:	2309      	movs	r3, #9
	 }

	 return AT25_SUCCESS;
 }
  420e9e:	4618      	mov	r0, r3
  420ea0:	4770      	bx	lr
			 return AT25_ERROR_BUSY;
  420ea2:	2306      	movs	r3, #6
 }
  420ea4:	4618      	mov	r0, r3
  420ea6:	b004      	add	sp, #16
  420ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 return AT25_ERROR_PROTECTED;
  420eac:	2307      	movs	r3, #7
  420eae:	e7f9      	b.n	420ea4 <at25dfx_erase_block_OTA+0x78>
  420eb0:	00420ddd 	.word	0x00420ddd
  420eb4:	00420d51 	.word	0x00420d51
  420eb8:	00420cdd 	.word	0x00420cdd
  420ebc:	00420e09 	.word	0x00420e09

00420ec0 <flash_erase>:




	/* Check if beyond the memory size */
	if (address > AT25DFX_SIZE) {
  420ec0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
  420ec4:	d902      	bls.n	420ecc <flash_erase+0xc>
		return AT25_ERROR;
  420ec6:	2309      	movs	r3, #9
	if (op_stat != AT25_SUCCESS) {
		return op_stat;
	}

	return AT25_SUCCESS;
}
  420ec8:	4618      	mov	r0, r3
  420eca:	4770      	bx	lr
{
  420ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  420ed0:	b084      	sub	sp, #16
  420ed2:	4604      	mov	r4, r0
	op_stat = at25dfx_read_status(&at25_stat);
  420ed4:	f10d 000f 	add.w	r0, sp, #15
  420ed8:	4b28      	ldr	r3, [pc, #160]	; (420f7c <flash_erase+0xbc>)
  420eda:	4798      	blx	r3
	if (op_stat != AT25_SUCCESS) {
  420edc:	4603      	mov	r3, r0
  420ede:	b928      	cbnz	r0, 420eec <flash_erase+0x2c>
	if ((at25_stat & AT25_STATUS_RDYBSY) != AT25_STATUS_RDYBSY_READY) {
  420ee0:	f89d 300f 	ldrb.w	r3, [sp, #15]
  420ee4:	f013 0f01 	tst.w	r3, #1
  420ee8:	d004      	beq.n	420ef4 <flash_erase+0x34>
		return AT25_ERROR_BUSY;
  420eea:	2306      	movs	r3, #6
}
  420eec:	4618      	mov	r0, r3
  420eee:	b004      	add	sp, #16
  420ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if ((at25_stat & AT25_STATUS_SWP) !=
  420ef4:	f013 0f0c 	tst.w	r3, #12
  420ef8:	d001      	beq.n	420efe <flash_erase+0x3e>
		return AT25_ERROR_PROTECTED;
  420efa:	2307      	movs	r3, #7
  420efc:	e7f6      	b.n	420eec <flash_erase+0x2c>
	op_stat = at25dfx_enable_write();
  420efe:	4b20      	ldr	r3, [pc, #128]	; (420f80 <flash_erase+0xc0>)
  420f00:	4798      	blx	r3
	if (op_stat != AT25_SUCCESS) {
  420f02:	4603      	mov	r3, r0
  420f04:	2800      	cmp	r0, #0
  420f06:	d1f1      	bne.n	420eec <flash_erase+0x2c>
	at25cmd->address = (at25cmd->address / EXT_FLASH_ERASE_SECTOR_SIZE)	* EXT_FLASH_ERASE_SECTOR_SIZE;
  420f08:	f424 657f 	bic.w	r5, r4, #4080	; 0xff0
  420f0c:	f025 050f 	bic.w	r5, r5, #15
	numsectors = (endoffset - at25cmd->address + EXT_FLASH_ERASE_SECTOR_SIZE - 1) / EXT_FLASH_ERASE_SECTOR_SIZE;
  420f10:	f504 50ff 	add.w	r0, r4, #8160	; 0x1fe0
  420f14:	301e      	adds	r0, #30
  420f16:	1b44      	subs	r4, r0, r5
	for (i = 0; i < numsectors; i++)
  420f18:	0b24      	lsrs	r4, r4, #12
  420f1a:	d028      	beq.n	420f6e <flash_erase+0xae>
  420f1c:	022e      	lsls	r6, r5, #8
  420f1e:	2700      	movs	r7, #0
		at25dfx_spi_select_device(active_sf_cs);
  420f20:	f8df 806c 	ldr.w	r8, [pc, #108]	; 420f90 <flash_erase+0xd0>
  420f24:	f8df a06c 	ldr.w	sl, [pc, #108]	; 420f94 <flash_erase+0xd4>
		spi_stat = at25dfx_spi_write_packet((uint16_t *) cmd_buffer,at25cmd->cmd_size);
  420f28:	f8df 906c 	ldr.w	r9, [pc, #108]	; 420f98 <flash_erase+0xd8>
		at25dfx_spi_select_device(active_sf_cs);
  420f2c:	f898 0000 	ldrb.w	r0, [r8]
  420f30:	47d0      	blx	sl
		| ((at25cmd->address & 0x00FF00) << 8)
  420f32:	f406 037f 	and.w	r3, r6, #16711680	; 0xff0000
  420f36:	f043 0320 	orr.w	r3, r3, #32
		| ((at25cmd->address & 0xFF0000) >> 8);
  420f3a:	0a2a      	lsrs	r2, r5, #8
  420f3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  420f40:	4313      	orrs	r3, r2
		cmd_buffer[0] = (at25cmd->cmd & 0x000000FF)
  420f42:	a804      	add	r0, sp, #16
  420f44:	f840 3d0c 	str.w	r3, [r0, #-12]!
		spi_stat = at25dfx_spi_write_packet((uint16_t *) cmd_buffer,at25cmd->cmd_size);
  420f48:	2104      	movs	r1, #4
  420f4a:	47c8      	blx	r9
		if (spi_stat != STATUS_OK) {
  420f4c:	b998      	cbnz	r0, 420f76 <flash_erase+0xb6>
			spi_stat = at25dfx_spi_read_packet(at25cmd->data,
  420f4e:	2100      	movs	r1, #0
  420f50:	4608      	mov	r0, r1
  420f52:	4b0c      	ldr	r3, [pc, #48]	; (420f84 <flash_erase+0xc4>)
  420f54:	4798      	blx	r3
		if (spi_stat != STATUS_OK) {
  420f56:	b970      	cbnz	r0, 420f76 <flash_erase+0xb6>
		at25dfx_spi_deselect_device(active_sf_cs);
  420f58:	f898 0000 	ldrb.w	r0, [r8]
  420f5c:	4b0a      	ldr	r3, [pc, #40]	; (420f88 <flash_erase+0xc8>)
  420f5e:	4798      	blx	r3
	for (i = 0; i < numsectors; i++)
  420f60:	3701      	adds	r7, #1
  420f62:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
  420f66:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
  420f6a:	42bc      	cmp	r4, r7
  420f6c:	d1de      	bne.n	420f2c <flash_erase+0x6c>
	op_stat = at25dfx_wait_ready();
  420f6e:	4b07      	ldr	r3, [pc, #28]	; (420f8c <flash_erase+0xcc>)
  420f70:	4798      	blx	r3
  420f72:	4603      	mov	r3, r0
  420f74:	e7ba      	b.n	420eec <flash_erase+0x2c>
  420f76:	2308      	movs	r3, #8
  420f78:	e7b8      	b.n	420eec <flash_erase+0x2c>
  420f7a:	bf00      	nop
  420f7c:	00420ddd 	.word	0x00420ddd
  420f80:	00420d51 	.word	0x00420d51
  420f84:	004210e1 	.word	0x004210e1
  420f88:	004210c9 	.word	0x004210c9
  420f8c:	00420e09 	.word	0x00420e09
  420f90:	20000090 	.word	0x20000090
  420f94:	004210b1 	.word	0x004210b1
  420f98:	004210f9 	.word	0x004210f9

00420f9c <at25dfx_write>:
	at25_status_t op_stat;
	uint8_t at25_stat;
	at25_cmd_t at25cmd;

	/* Check if beyond the memory size */
	if ((size + address) > AT25DFX_SIZE) {
  420f9c:	188b      	adds	r3, r1, r2
  420f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
  420fa2:	d902      	bls.n	420faa <at25dfx_write+0xe>
		return AT25_ERROR;
  420fa4:	2309      	movs	r3, #9
		size -= write_size;
		address += write_size;
	}

	return AT25_SUCCESS;
}
  420fa6:	4618      	mov	r0, r3
  420fa8:	4770      	bx	lr
{
  420faa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  420fae:	b085      	sub	sp, #20
  420fb0:	4607      	mov	r7, r0
  420fb2:	468b      	mov	fp, r1
  420fb4:	4616      	mov	r6, r2
	while (size > 0) {
  420fb6:	b399      	cbz	r1, 421020 <at25dfx_write+0x84>
		at25dfx_enable_write();
  420fb8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 421034 <at25dfx_write+0x98>
		op_stat = at25dfx_send_command(&at25cmd);
  420fbc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 421038 <at25dfx_write+0x9c>
		op_stat = at25dfx_wait_ready();
  420fc0:	f8df a078 	ldr.w	sl, [pc, #120]	; 42103c <at25dfx_write+0xa0>
		write_size = Min(size,AT25DFX_PAGE_SIZE -
  420fc4:	b2f4      	uxtb	r4, r6
  420fc6:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
  420fca:	455c      	cmp	r4, fp
  420fcc:	bf28      	it	cs
  420fce:	465c      	movcs	r4, fp
		at25dfx_enable_write();
  420fd0:	47c8      	blx	r9
		at25cmd.cmd = AT25_BYTE_PAGE_PROGRAM;
  420fd2:	2302      	movs	r3, #2
  420fd4:	f88d 300a 	strb.w	r3, [sp, #10]
		at25cmd.cmd_size = 4;
  420fd8:	2304      	movs	r3, #4
  420fda:	f88d 300b 	strb.w	r3, [sp, #11]
		at25cmd.data = data;
  420fde:	9700      	str	r7, [sp, #0]
		at25cmd.data_size = write_size;
  420fe0:	b2a5      	uxth	r5, r4
  420fe2:	f8ad 5008 	strh.w	r5, [sp, #8]
		at25cmd.address = address;
  420fe6:	9601      	str	r6, [sp, #4]
		op_stat = at25dfx_send_command(&at25cmd);
  420fe8:	4668      	mov	r0, sp
  420fea:	47c0      	blx	r8
		if (op_stat != AT25_SUCCESS) {
  420fec:	4603      	mov	r3, r0
  420fee:	b9d0      	cbnz	r0, 421026 <at25dfx_write+0x8a>
		op_stat = at25dfx_wait_ready();
  420ff0:	47d0      	blx	sl
		if (op_stat != AT25_SUCCESS) {
  420ff2:	4603      	mov	r3, r0
  420ff4:	b9b8      	cbnz	r0, 421026 <at25dfx_write+0x8a>
		op_stat = at25dfx_read_status(&at25_stat);
  420ff6:	f10d 000f 	add.w	r0, sp, #15
  420ffa:	4b0d      	ldr	r3, [pc, #52]	; (421030 <at25dfx_write+0x94>)
  420ffc:	4798      	blx	r3
		if (op_stat != AT25_SUCCESS) {
  420ffe:	4603      	mov	r3, r0
  421000:	b988      	cbnz	r0, 421026 <at25dfx_write+0x8a>
		if ((at25_stat & AT25_STATUS_EPE) == AT25_STATUS_EPE_ERROR) {
  421002:	f89d 200f 	ldrb.w	r2, [sp, #15]
  421006:	f012 0f20 	tst.w	r2, #32
  42100a:	d10b      	bne.n	421024 <at25dfx_write+0x88>
		data += write_size;
  42100c:	4427      	add	r7, r4
		size -= write_size;
  42100e:	ebab 0505 	sub.w	r5, fp, r5
  421012:	fa1f fb85 	uxth.w	fp, r5
		address += write_size;
  421016:	4426      	add	r6, r4
	while (size > 0) {
  421018:	f1bb 0f00 	cmp.w	fp, #0
  42101c:	d1d2      	bne.n	420fc4 <at25dfx_write+0x28>
  42101e:	e002      	b.n	421026 <at25dfx_write+0x8a>
	return AT25_SUCCESS;
  421020:	2300      	movs	r3, #0
  421022:	e000      	b.n	421026 <at25dfx_write+0x8a>
			return AT25_ERROR_WRITE;
  421024:	2305      	movs	r3, #5
}
  421026:	4618      	mov	r0, r3
  421028:	b005      	add	sp, #20
  42102a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42102e:	bf00      	nop
  421030:	00420ddd 	.word	0x00420ddd
  421034:	00420d51 	.word	0x00420d51
  421038:	00420cdd 	.word	0x00420cdd
  42103c:	00420e09 	.word	0x00420e09

00421040 <at25dfx_read>:
{
	at25_status_t op_stat;
	at25_cmd_t at25cmd;

	/* Check if beyond the memory size */
	if ((size + address) > AT25DFX_SIZE) {
  421040:	188b      	adds	r3, r1, r2
  421042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
  421046:	d901      	bls.n	42104c <at25dfx_read+0xc>
		return AT25_ERROR;
  421048:	2009      	movs	r0, #9
  42104a:	4770      	bx	lr
{
  42104c:	b500      	push	{lr}
  42104e:	b085      	sub	sp, #20
	}

	/* Initialize a Read command to be sent through SPI */
	at25cmd.cmd = AT25_READ_ARRAY_LF;
  421050:	2303      	movs	r3, #3
  421052:	f88d 300e 	strb.w	r3, [sp, #14]
	at25cmd.cmd_size = 4;
  421056:	2304      	movs	r3, #4
  421058:	f88d 300f 	strb.w	r3, [sp, #15]
	at25cmd.data = data;
  42105c:	9001      	str	r0, [sp, #4]
	at25cmd.data_size = size;
  42105e:	f8ad 100c 	strh.w	r1, [sp, #12]
	at25cmd.address = address;
  421062:	9202      	str	r2, [sp, #8]

	/* Start a read operation */
	op_stat = at25dfx_send_command(&at25cmd);
  421064:	eb0d 0003 	add.w	r0, sp, r3
  421068:	4b02      	ldr	r3, [pc, #8]	; (421074 <at25dfx_read+0x34>)
  42106a:	4798      	blx	r3

	return op_stat;
}
  42106c:	b005      	add	sp, #20
  42106e:	f85d fb04 	ldr.w	pc, [sp], #4
  421072:	bf00      	nop
  421074:	00420cdd 	.word	0x00420cdd

00421078 <at25dfx_spi_init>:
 *  - AT25DFX_MEM_CNT: The number of SerialFlash components (number of chipselect).
 *  - AT25DFX_SPI_MODULE:  The name of the SPI module used by the SerialFlash driver.
 *  - AT25DFX_SPI_MASTER_SPEED: The SPI bus speed.
 */
void at25dfx_spi_init(void)
{
  421078:	b530      	push	{r4, r5, lr}
  42107a:	b083      	sub	sp, #12
#if defined( AT25DFX_USES_SPI_MASTER_SERVICE)
	spi_master_init(AT25DFX_SPI_MODULE);
  42107c:	4c07      	ldr	r4, [pc, #28]	; (42109c <at25dfx_spi_init+0x24>)
  42107e:	4620      	mov	r0, r4
  421080:	4b07      	ldr	r3, [pc, #28]	; (4210a0 <at25dfx_spi_init+0x28>)
  421082:	4798      	blx	r3
	#if (AT25DFX_MEM_CNT==1)
		spi_master_setup_device(AT25DFX_SPI_MODULE,&AT25DFX_DEVICE1,SPI_MODE_0,AT25DFX_SPI_MASTER_SPEED,0);
  421084:	2200      	movs	r2, #0
  421086:	9200      	str	r2, [sp, #0]
  421088:	4b06      	ldr	r3, [pc, #24]	; (4210a4 <at25dfx_spi_init+0x2c>)
  42108a:	4907      	ldr	r1, [pc, #28]	; (4210a8 <at25dfx_spi_init+0x30>)
  42108c:	4620      	mov	r0, r4
  42108e:	4d07      	ldr	r5, [pc, #28]	; (4210ac <at25dfx_spi_init+0x34>)
  421090:	47a8      	blx	r5
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  421092:	2301      	movs	r3, #1
  421094:	6023      	str	r3, [r4, #0]
	#endif
	#if (AT25DFX_MEM_CNT>3)
		usart_spi_setup_device(AT25DFX_SPI_MODULE,&AT25DFX_DEVICE4,SPI_MODE_0,AT25DFX_SPI_MASTER_SPEED,0);
	#endif
#endif
}
  421096:	b003      	add	sp, #12
  421098:	bd30      	pop	{r4, r5, pc}
  42109a:	bf00      	nop
  42109c:	40088000 	.word	0x40088000
  4210a0:	00421111 	.word	0x00421111
  4210a4:	00b71b00 	.word	0x00b71b00
  4210a8:	20001084 	.word	0x20001084
  4210ac:	00421165 	.word	0x00421165

004210b0 <at25dfx_spi_select_device>:
 * \brief Select one external SerialFlash component.
 *
 * \param mem_id  The SerialFlash index number.
 */
void at25dfx_spi_select_device(uint8_t mem_id)
{
  4210b0:	b508      	push	{r3, lr}
	UNUSED(mem_id);
#if defined( AT25DFX_USES_SPI_MASTER_SERVICE)
#if (AT25DFX_MEM_CNT==1)
		spi_select_device(AT25DFX_SPI_MODULE, &AT25DFX_DEVICE1);
  4210b2:	4902      	ldr	r1, [pc, #8]	; (4210bc <at25dfx_spi_select_device+0xc>)
  4210b4:	4802      	ldr	r0, [pc, #8]	; (4210c0 <at25dfx_spi_select_device+0x10>)
  4210b6:	4b03      	ldr	r3, [pc, #12]	; (4210c4 <at25dfx_spi_select_device+0x14>)
  4210b8:	4798      	blx	r3
  4210ba:	bd08      	pop	{r3, pc}
  4210bc:	20001084 	.word	0x20001084
  4210c0:	40088000 	.word	0x40088000
  4210c4:	004211e5 	.word	0x004211e5

004210c8 <at25dfx_spi_deselect_device>:
 * \brief Deselect one external SerialFlash component.
 *
 * \param mem_id  The SerialFlash index number.
 */
void at25dfx_spi_deselect_device(uint8_t mem_id)
{
  4210c8:	b508      	push	{r3, lr}
	UNUSED(mem_id);
#if defined( AT25DFX_USES_SPI_MASTER_SERVICE)
	#if (AT25DFX_MEM_CNT==1)
	spi_deselect_device(AT25DFX_SPI_MODULE, &AT25DFX_DEVICE1);
  4210ca:	4902      	ldr	r1, [pc, #8]	; (4210d4 <at25dfx_spi_deselect_device+0xc>)
  4210cc:	4802      	ldr	r0, [pc, #8]	; (4210d8 <at25dfx_spi_deselect_device+0x10>)
  4210ce:	4b03      	ldr	r3, [pc, #12]	; (4210dc <at25dfx_spi_deselect_device+0x14>)
  4210d0:	4798      	blx	r3
  4210d2:	bd08      	pop	{r3, pc}
  4210d4:	20001084 	.word	0x20001084
  4210d8:	40088000 	.word	0x40088000
  4210dc:	00421215 	.word	0x00421215

004210e0 <at25dfx_spi_read_packet>:
 * \param data   Data buffer to read
 * \param len    Length of data
 * \pre The SerialFlash should be selected first using at25dfx_spi_select_device
 */
status_code_t at25dfx_spi_read_packet(void const *data, size_t len)
{
  4210e0:	b508      	push	{r3, lr}
#if defined( AT25DFX_USES_SPI_MASTER_SERVICE)
	return spi_read_packet(AT25DFX_SPI_MODULE, (uint8_t*)data, len);
  4210e2:	460a      	mov	r2, r1
  4210e4:	4601      	mov	r1, r0
  4210e6:	4802      	ldr	r0, [pc, #8]	; (4210f0 <at25dfx_spi_read_packet+0x10>)
  4210e8:	4b02      	ldr	r3, [pc, #8]	; (4210f4 <at25dfx_spi_read_packet+0x14>)
  4210ea:	4798      	blx	r3

/* Implementation with USART in SPI mode service */
#elif defined(AT25DFX_USES_USART_SPI_SERVICE)
	return usart_spi_read_packet(AT25DFX_SPI_MODULE, (uint8_t*)data, len);
#endif
}
  4210ec:	bd08      	pop	{r3, pc}
  4210ee:	bf00      	nop
  4210f0:	40088000 	.word	0x40088000
  4210f4:	0042126b 	.word	0x0042126b

004210f8 <at25dfx_spi_write_packet>:
 * \param len    Length of data
 * \pre The SerialFlash should be selected first using at25dfx_spi_select_device
 *
 */
status_code_t at25dfx_spi_write_packet(void const *data, size_t len)
{
  4210f8:	b508      	push	{r3, lr}
#if defined( AT25DFX_USES_SPI_MASTER_SERVICE)
	return spi_write_packet(AT25DFX_SPI_MODULE, (uint8_t*)data, len);
  4210fa:	460a      	mov	r2, r1
  4210fc:	4601      	mov	r1, r0
  4210fe:	4802      	ldr	r0, [pc, #8]	; (421108 <at25dfx_spi_write_packet+0x10>)
  421100:	4b02      	ldr	r3, [pc, #8]	; (42110c <at25dfx_spi_write_packet+0x14>)
  421102:	4798      	blx	r3

/* Implementation with USART in SPI mode service */
#elif defined(AT25DFX_USES_USART_SPI_SERVICE)
	return usart_spi_write_packet(AT25DFX_SPI_MODULE, (uint8_t*)data, len);
#endif
	}
  421104:	bd08      	pop	{r3, pc}
  421106:	bf00      	nop
  421108:	40088000 	.word	0x40088000
  42110c:	00421235 	.word	0x00421235

00421110 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  421110:	b510      	push	{r4, lr}
  421112:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  421114:	4b10      	ldr	r3, [pc, #64]	; (421158 <spi_master_init+0x48>)
  421116:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  421118:	2380      	movs	r3, #128	; 0x80
  42111a:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  42111c:	6863      	ldr	r3, [r4, #4]
  42111e:	f043 0301 	orr.w	r3, r3, #1
  421122:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  421124:	6863      	ldr	r3, [r4, #4]
  421126:	f043 0310 	orr.w	r3, r3, #16
  42112a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  42112c:	6863      	ldr	r3, [r4, #4]
  42112e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  421132:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  421134:	2100      	movs	r1, #0
  421136:	4620      	mov	r0, r4
  421138:	4b08      	ldr	r3, [pc, #32]	; (42115c <spi_master_init+0x4c>)
  42113a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  42113c:	6863      	ldr	r3, [r4, #4]
  42113e:	f023 0302 	bic.w	r3, r3, #2
  421142:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  421144:	6863      	ldr	r3, [r4, #4]
  421146:	f023 0304 	bic.w	r3, r3, #4
  42114a:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  42114c:	2100      	movs	r1, #0
  42114e:	4620      	mov	r0, r4
  421150:	4b03      	ldr	r3, [pc, #12]	; (421160 <spi_master_init+0x50>)
  421152:	4798      	blx	r3
  421154:	bd10      	pop	{r4, pc}
  421156:	bf00      	nop
  421158:	004219cd 	.word	0x004219cd
  42115c:	004219dd 	.word	0x004219dd
  421160:	004219f3 	.word	0x004219f3

00421164 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  421164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  421168:	4604      	mov	r4, r0
  42116a:	460d      	mov	r5, r1
  42116c:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  42116e:	4915      	ldr	r1, [pc, #84]	; (4211c4 <spi_master_setup_device+0x60>)
  421170:	4618      	mov	r0, r3
  421172:	4b15      	ldr	r3, [pc, #84]	; (4211c8 <spi_master_setup_device+0x64>)
  421174:	4798      	blx	r3
  421176:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  421178:	2300      	movs	r3, #0
  42117a:	461a      	mov	r2, r3
  42117c:	6829      	ldr	r1, [r5, #0]
  42117e:	4620      	mov	r0, r4
  421180:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4211e0 <spi_master_setup_device+0x7c>
  421184:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  421186:	2200      	movs	r2, #0
  421188:	6829      	ldr	r1, [r5, #0]
  42118a:	4620      	mov	r0, r4
  42118c:	4b0f      	ldr	r3, [pc, #60]	; (4211cc <spi_master_setup_device+0x68>)
  42118e:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  421190:	b2fa      	uxtb	r2, r7
  421192:	6829      	ldr	r1, [r5, #0]
  421194:	4620      	mov	r0, r4
  421196:	4b0e      	ldr	r3, [pc, #56]	; (4211d0 <spi_master_setup_device+0x6c>)
  421198:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  42119a:	2208      	movs	r2, #8
  42119c:	6829      	ldr	r1, [r5, #0]
  42119e:	4620      	mov	r0, r4
  4211a0:	4b0c      	ldr	r3, [pc, #48]	; (4211d4 <spi_master_setup_device+0x70>)
  4211a2:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4211a4:	0872      	lsrs	r2, r6, #1
  4211a6:	6829      	ldr	r1, [r5, #0]
  4211a8:	4620      	mov	r0, r4
  4211aa:	4b0b      	ldr	r3, [pc, #44]	; (4211d8 <spi_master_setup_device+0x74>)
  4211ac:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  4211ae:	f086 0201 	eor.w	r2, r6, #1
  4211b2:	f002 0201 	and.w	r2, r2, #1
  4211b6:	6829      	ldr	r1, [r5, #0]
  4211b8:	4620      	mov	r0, r4
  4211ba:	4b08      	ldr	r3, [pc, #32]	; (4211dc <spi_master_setup_device+0x78>)
  4211bc:	4798      	blx	r3
  4211be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4211c2:	bf00      	nop
  4211c4:	03938700 	.word	0x03938700
  4211c8:	00421a9b 	.word	0x00421a9b
  4211cc:	00421a87 	.word	0x00421a87
  4211d0:	00421ab1 	.word	0x00421ab1
  4211d4:	00421a41 	.word	0x00421a41
  4211d8:	00421a05 	.word	0x00421a05
  4211dc:	00421a23 	.word	0x00421a23
  4211e0:	00421ad9 	.word	0x00421ad9

004211e4 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4211e4:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4211e6:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4211e8:	f013 0f04 	tst.w	r3, #4
  4211ec:	d006      	beq.n	4211fc <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4211ee:	6809      	ldr	r1, [r1, #0]
  4211f0:	290f      	cmp	r1, #15
  4211f2:	d900      	bls.n	4211f6 <spi_select_device+0x12>
  4211f4:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4211f6:	4b06      	ldr	r3, [pc, #24]	; (421210 <spi_select_device+0x2c>)
  4211f8:	4798      	blx	r3
  4211fa:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4211fc:	6809      	ldr	r1, [r1, #0]
  4211fe:	2903      	cmp	r1, #3
  421200:	d8f8      	bhi.n	4211f4 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  421202:	2301      	movs	r3, #1
  421204:	fa03 f101 	lsl.w	r1, r3, r1
  421208:	43c9      	mvns	r1, r1
  42120a:	4b01      	ldr	r3, [pc, #4]	; (421210 <spi_select_device+0x2c>)
  42120c:	4798      	blx	r3
		}
	}
}
  42120e:	e7f1      	b.n	4211f4 <spi_select_device+0x10>
  421210:	004219dd 	.word	0x004219dd

00421214 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  421214:	b510      	push	{r4, lr}
  421216:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  421218:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  42121a:	f413 7f00 	tst.w	r3, #512	; 0x200
  42121e:	d0fb      	beq.n	421218 <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  421220:	210f      	movs	r1, #15
  421222:	4620      	mov	r0, r4
  421224:	4b02      	ldr	r3, [pc, #8]	; (421230 <spi_deselect_device+0x1c>)
  421226:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  421228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  42122c:	6023      	str	r3, [r4, #0]
  42122e:	bd10      	pop	{r4, pc}
  421230:	004219dd 	.word	0x004219dd

00421234 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  421234:	b11a      	cbz	r2, 42123e <spi_write_packet+0xa>
{
  421236:	b410      	push	{r4}
  421238:	460c      	mov	r4, r1
  42123a:	4411      	add	r1, r2
  42123c:	e006      	b.n	42124c <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  42123e:	2000      	movs	r0, #0
  421240:	4770      	bx	lr
		val = data[i];
  421242:	f814 3b01 	ldrb.w	r3, [r4], #1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  421246:	60c3      	str	r3, [r0, #12]
	while (len) {
  421248:	42a1      	cmp	r1, r4
  42124a:	d00c      	beq.n	421266 <spi_write_packet+0x32>
{
  42124c:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  421250:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  421252:	f012 0f02 	tst.w	r2, #2
  421256:	d1f4      	bne.n	421242 <spi_write_packet+0xe>
			if (!timeout--) {
  421258:	3b01      	subs	r3, #1
  42125a:	d1f9      	bne.n	421250 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  42125c:	f06f 0002 	mvn.w	r0, #2
}
  421260:	f85d 4b04 	ldr.w	r4, [sp], #4
  421264:	4770      	bx	lr
	return STATUS_OK;
  421266:	2000      	movs	r0, #0
  421268:	e7fa      	b.n	421260 <spi_write_packet+0x2c>

0042126a <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  42126a:	b13a      	cbz	r2, 42127c <spi_read_packet+0x12>
{
  42126c:	b470      	push	{r4, r5, r6}
  42126e:	4615      	mov	r5, r2
  421270:	460c      	mov	r4, r1
  421272:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  421274:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  421276:	f240 2101 	movw	r1, #513	; 0x201
  42127a:	e012      	b.n	4212a2 <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  42127c:	2000      	movs	r0, #0
  42127e:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  421280:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  421282:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  421286:	6902      	ldr	r2, [r0, #16]
  421288:	ea31 0202 	bics.w	r2, r1, r2
  42128c:	d004      	beq.n	421298 <spi_read_packet+0x2e>
			if (!timeout--) {
  42128e:	3b01      	subs	r3, #1
  421290:	d1f9      	bne.n	421286 <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  421292:	f06f 0002 	mvn.w	r0, #2
  421296:	e00e      	b.n	4212b6 <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  421298:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  42129a:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  42129e:	42a5      	cmp	r5, r4
  4212a0:	d00b      	beq.n	4212ba <spi_read_packet+0x50>
{
  4212a2:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4212a6:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4212a8:	f012 0f02 	tst.w	r2, #2
  4212ac:	d1e8      	bne.n	421280 <spi_read_packet+0x16>
			if (!timeout--) {
  4212ae:	3b01      	subs	r3, #1
  4212b0:	d1f9      	bne.n	4212a6 <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  4212b2:	f06f 0002 	mvn.w	r0, #2
}
  4212b6:	bc70      	pop	{r4, r5, r6}
  4212b8:	4770      	bx	lr
	return STATUS_OK;
  4212ba:	2000      	movs	r0, #0
  4212bc:	e7fb      	b.n	4212b6 <spi_read_packet+0x4c>
	...

004212c0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4212c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4212c4:	b980      	cbnz	r0, 4212e8 <_read+0x28>
  4212c6:	460c      	mov	r4, r1
  4212c8:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4212ca:	2a00      	cmp	r2, #0
  4212cc:	dd0f      	ble.n	4212ee <_read+0x2e>
  4212ce:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4212d0:	4e08      	ldr	r6, [pc, #32]	; (4212f4 <_read+0x34>)
  4212d2:	4d09      	ldr	r5, [pc, #36]	; (4212f8 <_read+0x38>)
  4212d4:	6830      	ldr	r0, [r6, #0]
  4212d6:	4621      	mov	r1, r4
  4212d8:	682b      	ldr	r3, [r5, #0]
  4212da:	4798      	blx	r3
		ptr++;
  4212dc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4212de:	42bc      	cmp	r4, r7
  4212e0:	d1f8      	bne.n	4212d4 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4212e2:	4640      	mov	r0, r8
  4212e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4212e8:	f04f 38ff 	mov.w	r8, #4294967295
  4212ec:	e7f9      	b.n	4212e2 <_read+0x22>
	for (; len > 0; --len) {
  4212ee:	4680      	mov	r8, r0
  4212f0:	e7f7      	b.n	4212e2 <_read+0x22>
  4212f2:	bf00      	nop
  4212f4:	200015b0 	.word	0x200015b0
  4212f8:	200015a8 	.word	0x200015a8

004212fc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4212fc:	3801      	subs	r0, #1
  4212fe:	2802      	cmp	r0, #2
  421300:	d815      	bhi.n	42132e <_write+0x32>
{
  421302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  421306:	460e      	mov	r6, r1
  421308:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  42130a:	b19a      	cbz	r2, 421334 <_write+0x38>
  42130c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  42130e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 421348 <_write+0x4c>
  421312:	4f0c      	ldr	r7, [pc, #48]	; (421344 <_write+0x48>)
  421314:	f8d8 0000 	ldr.w	r0, [r8]
  421318:	f815 1b01 	ldrb.w	r1, [r5], #1
  42131c:	683b      	ldr	r3, [r7, #0]
  42131e:	4798      	blx	r3
  421320:	2800      	cmp	r0, #0
  421322:	db0a      	blt.n	42133a <_write+0x3e>
  421324:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  421326:	3c01      	subs	r4, #1
  421328:	d1f4      	bne.n	421314 <_write+0x18>
  42132a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  42132e:	f04f 30ff 	mov.w	r0, #4294967295
  421332:	4770      	bx	lr
	for (; len != 0; --len) {
  421334:	4610      	mov	r0, r2
  421336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  42133a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  42133e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  421342:	bf00      	nop
  421344:	200015ac 	.word	0x200015ac
  421348:	200015b0 	.word	0x200015b0

0042134c <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  42134c:	b508      	push	{r3, lr}
	if (afec_callback_pointer[inst_num][source]) {
  42134e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  421352:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  421356:	4b03      	ldr	r3, [pc, #12]	; (421364 <afec_interrupt+0x18>)
  421358:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  42135c:	b103      	cbz	r3, 421360 <afec_interrupt+0x14>
		afec_callback_pointer[inst_num][source]();
  42135e:	4798      	blx	r3
  421360:	bd08      	pop	{r3, pc}
  421362:	bf00      	nop
  421364:	200015b4 	.word	0x200015b4

00421368 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
   *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  421368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  42136c:	b083      	sub	sp, #12
	return afec->AFEC_ISR;
  42136e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  421370:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  421372:	4013      	ands	r3, r2
  421374:	9301      	str	r3, [sp, #4]
	if (afec == AFEC1) {
  421376:	4f1f      	ldr	r7, [pc, #124]	; (4213f4 <afec_process_callback+0x8c>)
  421378:	42b8      	cmp	r0, r7
  42137a:	bf14      	ite	ne
  42137c:	2700      	movne	r7, #0
  42137e:	2701      	moveq	r7, #1
  421380:	2501      	movs	r5, #1
  421382:	2400      	movs	r4, #0
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  421384:	462e      	mov	r6, r5
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  421386:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4213f8 <afec_process_callback+0x90>
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  42138a:	f04f 0906 	mov.w	r9, #6
  42138e:	e014      	b.n	4213ba <afec_process_callback+0x52>
				if (status & (1 << AFEC_TEMP_INT_SOURCE_NUM)) {
  421390:	9b01      	ldr	r3, [sp, #4]
  421392:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  421396:	d00e      	beq.n	4213b6 <afec_process_callback+0x4e>
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  421398:	4649      	mov	r1, r9
  42139a:	4638      	mov	r0, r7
  42139c:	47c0      	blx	r8
  42139e:	e00a      	b.n	4213b6 <afec_process_callback+0x4e>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4213a0:	2c0b      	cmp	r4, #11
  4213a2:	d819      	bhi.n	4213d8 <afec_process_callback+0x70>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4213a4:	9a01      	ldr	r2, [sp, #4]
  4213a6:	f104 0311 	add.w	r3, r4, #17
  4213aa:	fa06 f303 	lsl.w	r3, r6, r3
  4213ae:	4213      	tst	r3, r2
  4213b0:	d10f      	bne.n	4213d2 <afec_process_callback+0x6a>
	 for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4213b2:	2d0d      	cmp	r5, #13
  4213b4:	d81a      	bhi.n	4213ec <afec_process_callback+0x84>
  4213b6:	3401      	adds	r4, #1
  4213b8:	3501      	adds	r5, #1
  4213ba:	4621      	mov	r1, r4
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4213bc:	2c06      	cmp	r4, #6
  4213be:	d8ef      	bhi.n	4213a0 <afec_process_callback+0x38>
			if(cnt == AFEC_INTERRUPT_EOC_15) {
  4213c0:	d0e6      	beq.n	421390 <afec_process_callback+0x28>
				if (status & (1 << cnt)) {
  4213c2:	9b01      	ldr	r3, [sp, #4]
  4213c4:	fa06 f204 	lsl.w	r2, r6, r4
  4213c8:	421a      	tst	r2, r3
  4213ca:	d0f2      	beq.n	4213b2 <afec_process_callback+0x4a>
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4213cc:	4638      	mov	r0, r7
  4213ce:	47c0      	blx	r8
  4213d0:	e7ef      	b.n	4213b2 <afec_process_callback+0x4a>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4213d2:	4638      	mov	r0, r7
  4213d4:	47c0      	blx	r8
  4213d6:	e7ec      	b.n	4213b2 <afec_process_callback+0x4a>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4213d8:	9a01      	ldr	r2, [sp, #4]
  4213da:	f104 0312 	add.w	r3, r4, #18
  4213de:	fa06 f303 	lsl.w	r3, r6, r3
  4213e2:	4213      	tst	r3, r2
  4213e4:	d0e5      	beq.n	4213b2 <afec_process_callback+0x4a>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4213e6:	4638      	mov	r0, r7
  4213e8:	47c0      	blx	r8
  4213ea:	e7e2      	b.n	4213b2 <afec_process_callback+0x4a>
			}
		}
	}
}
  4213ec:	b003      	add	sp, #12
  4213ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4213f2:	bf00      	nop
  4213f4:	400b4000 	.word	0x400b4000
  4213f8:	0042134d 	.word	0x0042134d

004213fc <afec_ch_set_config>:
{
  4213fc:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4213fe:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  421400:	2301      	movs	r3, #1
  421402:	408b      	lsls	r3, r1
  421404:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  421408:	7815      	ldrb	r5, [r2, #0]
  42140a:	2d00      	cmp	r5, #0
  42140c:	bf08      	it	eq
  42140e:	2300      	moveq	r3, #0
  421410:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  421412:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  421414:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  421416:	004b      	lsls	r3, r1, #1
  421418:	2103      	movs	r1, #3
  42141a:	4099      	lsls	r1, r3
  42141c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  421420:	7851      	ldrb	r1, [r2, #1]
  421422:	4099      	lsls	r1, r3
  421424:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  421426:	6541      	str	r1, [r0, #84]	; 0x54
}
  421428:	bc30      	pop	{r4, r5}
  42142a:	4770      	bx	lr

0042142c <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  42142c:	2300      	movs	r3, #0
  42142e:	6003      	str	r3, [r0, #0]
	cfg->mck = (change_freq == 0) ?  sysclk_get_cpu_hz() : 4000000u ;//sysclk_get_cpu_hz();
  421430:	4a0b      	ldr	r2, [pc, #44]	; (421460 <afec_get_config_defaults+0x34>)
  421432:	4b0c      	ldr	r3, [pc, #48]	; (421464 <afec_get_config_defaults+0x38>)
  421434:	2900      	cmp	r1, #0
  421436:	bf0c      	ite	eq
  421438:	4619      	moveq	r1, r3
  42143a:	4611      	movne	r1, r2
  42143c:	6041      	str	r1, [r0, #4]
		cfg->afec_clock = 1000000UL;
  42143e:	4b0a      	ldr	r3, [pc, #40]	; (421468 <afec_get_config_defaults+0x3c>)
  421440:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_1;//AFEC_STARTUP_TIME_4;
  421442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  421446:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  421448:	2200      	movs	r2, #0
  42144a:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  42144c:	2302      	movs	r3, #2
  42144e:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  421450:	2301      	movs	r3, #1
  421452:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  421454:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  421456:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  421458:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  42145a:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  42145c:	7683      	strb	r3, [r0, #26]
  42145e:	4770      	bx	lr
  421460:	003d0900 	.word	0x003d0900
  421464:	03938700 	.word	0x03938700
  421468:	000f4240 	.word	0x000f4240

0042146c <afec_ch_get_config_defaults>:
	cfg->diff = false;
  42146c:	2300      	movs	r3, #0
  42146e:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  421470:	2301      	movs	r3, #1
  421472:	7043      	strb	r3, [r0, #1]
  421474:	4770      	bx	lr
	...

00421478 <afec_init>:
	return afec->AFEC_ISR;
  421478:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  42147a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  42147e:	d001      	beq.n	421484 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  421480:	2019      	movs	r0, #25
  421482:	4770      	bx	lr
{
  421484:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  421486:	2301      	movs	r3, #1
  421488:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  42148a:	7dcb      	ldrb	r3, [r1, #23]
  42148c:	2b00      	cmp	r3, #0
  42148e:	bf14      	ite	ne
  421490:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  421494:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  421496:	7d8b      	ldrb	r3, [r1, #22]
  421498:	2b00      	cmp	r3, #0
  42149a:	bf14      	ite	ne
  42149c:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  4214a0:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  4214a2:	7d0b      	ldrb	r3, [r1, #20]
  4214a4:	061b      	lsls	r3, r3, #24
  4214a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4214aa:	690a      	ldr	r2, [r1, #16]
  4214ac:	68ce      	ldr	r6, [r1, #12]
  4214ae:	4332      	orrs	r2, r6
  4214b0:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4214b2:	7d4a      	ldrb	r2, [r1, #21]
  4214b4:	0712      	lsls	r2, r2, #28
  4214b6:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4214ba:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  4214bc:	688a      	ldr	r2, [r1, #8]
  4214be:	0056      	lsls	r6, r2, #1
  4214c0:	684a      	ldr	r2, [r1, #4]
  4214c2:	fbb2 f2f6 	udiv	r2, r2, r6
  4214c6:	3a01      	subs	r2, #1
  4214c8:	0212      	lsls	r2, r2, #8
  4214ca:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4214cc:	4313      	orrs	r3, r2
  4214ce:	432b      	orrs	r3, r5
  4214d0:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  4214d2:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4214d4:	7e0b      	ldrb	r3, [r1, #24]
  4214d6:	2b00      	cmp	r3, #0
  4214d8:	bf14      	ite	ne
  4214da:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4214de:	2300      	moveq	r3, #0
  4214e0:	680a      	ldr	r2, [r1, #0]
  4214e2:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4214e4:	7e4a      	ldrb	r2, [r1, #25]
  4214e6:	2a00      	cmp	r2, #0
  4214e8:	bf14      	ite	ne
  4214ea:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4214ee:	2200      	moveq	r2, #0
			(config->resolution) |
  4214f0:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4214f2:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  4214f4:	7e8b      	ldrb	r3, [r1, #26]
  4214f6:	021b      	lsls	r3, r3, #8
  4214f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4214fc:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  421500:	4b0e      	ldr	r3, [pc, #56]	; (42153c <afec_init+0xc4>)
  421502:	4298      	cmp	r0, r3
  421504:	d005      	beq.n	421512 <afec_init+0x9a>
	if(afec == AFEC1) {
  421506:	4b0e      	ldr	r3, [pc, #56]	; (421540 <afec_init+0xc8>)
  421508:	4298      	cmp	r0, r3
  42150a:	d00c      	beq.n	421526 <afec_init+0xae>
	return STATUS_OK;
  42150c:	2000      	movs	r0, #0
}
  42150e:	bc70      	pop	{r4, r5, r6}
  421510:	4770      	bx	lr
  421512:	4b0c      	ldr	r3, [pc, #48]	; (421544 <afec_init+0xcc>)
  421514:	f103 0138 	add.w	r1, r3, #56	; 0x38
			afec_callback_pointer[0][i] = 0;
  421518:	2200      	movs	r2, #0
  42151a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  42151e:	428b      	cmp	r3, r1
  421520:	d1fb      	bne.n	42151a <afec_init+0xa2>
	return STATUS_OK;
  421522:	2000      	movs	r0, #0
  421524:	e7f3      	b.n	42150e <afec_init+0x96>
  421526:	4b08      	ldr	r3, [pc, #32]	; (421548 <afec_init+0xd0>)
  421528:	f103 0138 	add.w	r1, r3, #56	; 0x38
			afec_callback_pointer[1][i] = 0;
  42152c:	2200      	movs	r2, #0
  42152e:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  421532:	428b      	cmp	r3, r1
  421534:	d1fb      	bne.n	42152e <afec_init+0xb6>
	return STATUS_OK;
  421536:	2000      	movs	r0, #0
  421538:	e7e9      	b.n	42150e <afec_init+0x96>
  42153a:	bf00      	nop
  42153c:	400b0000 	.word	0x400b0000
  421540:	400b4000 	.word	0x400b4000
  421544:	200015b0 	.word	0x200015b0
  421548:	200015ec 	.word	0x200015ec

0042154c <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  42154c:	4b0c      	ldr	r3, [pc, #48]	; (421580 <afec_enable_interrupt+0x34>)
  42154e:	4299      	cmp	r1, r3
  421550:	d007      	beq.n	421562 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  421552:	2906      	cmp	r1, #6
  421554:	d80b      	bhi.n	42156e <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
  421556:	d006      	beq.n	421566 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  421558:	2301      	movs	r3, #1
  42155a:	fa03 f101 	lsl.w	r1, r3, r1
  42155e:	6241      	str	r1, [r0, #36]	; 0x24
  421560:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  421562:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  421564:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  421566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  42156a:	6243      	str	r3, [r0, #36]	; 0x24
  42156c:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  42156e:	290b      	cmp	r1, #11
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  421570:	bf94      	ite	ls
  421572:	3111      	addls	r1, #17
				+ AFEC_INTERRUPT_GAP2);
  421574:	3112      	addhi	r1, #18
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  421576:	2301      	movs	r3, #1
  421578:	fa03 f101 	lsl.w	r1, r3, r1
  42157c:	6241      	str	r1, [r0, #36]	; 0x24
  42157e:	4770      	bx	lr
  421580:	df00803f 	.word	0xdf00803f

00421584 <afec_set_callback>:
{
  421584:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  421586:	4c11      	ldr	r4, [pc, #68]	; (4215cc <afec_set_callback+0x48>)
  421588:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  42158a:	bf0c      	ite	eq
  42158c:	240e      	moveq	r4, #14
  42158e:	2400      	movne	r4, #0
  421590:	440c      	add	r4, r1
  421592:	4d0f      	ldr	r5, [pc, #60]	; (4215d0 <afec_set_callback+0x4c>)
  421594:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  421598:	d10a      	bne.n	4215b0 <afec_set_callback+0x2c>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  42159a:	4a0e      	ldr	r2, [pc, #56]	; (4215d4 <afec_set_callback+0x50>)
  42159c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  4215a0:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4215a4:	011b      	lsls	r3, r3, #4
  4215a6:	b2db      	uxtb	r3, r3
  4215a8:	f882 331f 	strb.w	r3, [r2, #799]	; 0x31f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4215ac:	6014      	str	r4, [r2, #0]
  4215ae:	e009      	b.n	4215c4 <afec_set_callback+0x40>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4215b0:	4a08      	ldr	r2, [pc, #32]	; (4215d4 <afec_set_callback+0x50>)
  4215b2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  4215b6:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4215ba:	011b      	lsls	r3, r3, #4
  4215bc:	b2db      	uxtb	r3, r3
  4215be:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4215c2:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  4215c4:	4b04      	ldr	r3, [pc, #16]	; (4215d8 <afec_set_callback+0x54>)
  4215c6:	4798      	blx	r3
  4215c8:	bd38      	pop	{r3, r4, r5, pc}
  4215ca:	bf00      	nop
  4215cc:	400b4000 	.word	0x400b4000
  4215d0:	200015b4 	.word	0x200015b4
  4215d4:	e000e100 	.word	0xe000e100
  4215d8:	0042154d 	.word	0x0042154d

004215dc <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4215dc:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4215de:	4802      	ldr	r0, [pc, #8]	; (4215e8 <AFEC0_Handler+0xc>)
  4215e0:	4b02      	ldr	r3, [pc, #8]	; (4215ec <AFEC0_Handler+0x10>)
  4215e2:	4798      	blx	r3
  4215e4:	bd08      	pop	{r3, pc}
  4215e6:	bf00      	nop
  4215e8:	400b0000 	.word	0x400b0000
  4215ec:	00421369 	.word	0x00421369

004215f0 <AFEC1_Handler>:

/**
  * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4215f0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4215f2:	4802      	ldr	r0, [pc, #8]	; (4215fc <AFEC1_Handler+0xc>)
  4215f4:	4b02      	ldr	r3, [pc, #8]	; (421600 <AFEC1_Handler+0x10>)
  4215f6:	4798      	blx	r3
  4215f8:	bd08      	pop	{r3, pc}
  4215fa:	bf00      	nop
  4215fc:	400b4000 	.word	0x400b4000
  421600:	00421369 	.word	0x00421369

00421604 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  421604:	b500      	push	{lr}
  421606:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  421608:	4b13      	ldr	r3, [pc, #76]	; (421658 <afec_enable+0x54>)
  42160a:	4298      	cmp	r0, r3
  42160c:	bf0c      	ite	eq
  42160e:	201f      	moveq	r0, #31
  421610:	201e      	movne	r0, #30
  421612:	4b12      	ldr	r3, [pc, #72]	; (42165c <afec_enable+0x58>)
  421614:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  421616:	4b12      	ldr	r3, [pc, #72]	; (421660 <afec_enable+0x5c>)
  421618:	789b      	ldrb	r3, [r3, #2]
  42161a:	2bff      	cmp	r3, #255	; 0xff
  42161c:	d01a      	beq.n	421654 <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  42161e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  421622:	fab3 f383 	clz	r3, r3
  421626:	095b      	lsrs	r3, r3, #5
  421628:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  42162a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  42162c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  421630:	2200      	movs	r2, #0
  421632:	4b0c      	ldr	r3, [pc, #48]	; (421664 <afec_enable+0x60>)
  421634:	701a      	strb	r2, [r3, #0]
	return flags;
  421636:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  421638:	4a09      	ldr	r2, [pc, #36]	; (421660 <afec_enable+0x5c>)
  42163a:	7893      	ldrb	r3, [r2, #2]
  42163c:	3301      	adds	r3, #1
  42163e:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  421640:	b129      	cbz	r1, 42164e <afec_enable+0x4a>
		cpu_irq_enable();
  421642:	2201      	movs	r2, #1
  421644:	4b07      	ldr	r3, [pc, #28]	; (421664 <afec_enable+0x60>)
  421646:	701a      	strb	r2, [r3, #0]
  421648:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  42164c:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  42164e:	b003      	add	sp, #12
  421650:	f85d fb04 	ldr.w	pc, [sp], #4
  421654:	e7fe      	b.n	421654 <afec_enable+0x50>
  421656:	bf00      	nop
  421658:	400b4000 	.word	0x400b4000
  42165c:	00425941 	.word	0x00425941
  421660:	200015a0 	.word	0x200015a0
  421664:	200000c1 	.word	0x200000c1

00421668 <can_enable>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
	p_can->CAN_MR |= CAN_MR_CANEN;
  421668:	6803      	ldr	r3, [r0, #0]
  42166a:	f043 0301 	orr.w	r3, r3, #1
  42166e:	6003      	str	r3, [r0, #0]
  421670:	4770      	bx	lr

00421672 <can_disable>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
	p_can->CAN_MR &= ~CAN_MR_CANEN;
  421672:	6803      	ldr	r3, [r0, #0]
  421674:	f023 0301 	bic.w	r3, r3, #1
  421678:	6003      	str	r3, [r0, #0]
  42167a:	4770      	bx	lr

0042167c <can_enable_interrupt>:
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
	p_can->CAN_IER = dw_mask;
  42167c:	6041      	str	r1, [r0, #4]
  42167e:	4770      	bx	lr

00421680 <can_disable_interrupt>:
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
	p_can->CAN_IDR = dw_mask;
  421680:	6081      	str	r1, [r0, #8]
  421682:	4770      	bx	lr

00421684 <can_get_status>:
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
	return (p_can->CAN_SR);
  421684:	6900      	ldr	r0, [r0, #16]
}
  421686:	4770      	bx	lr

00421688 <can_global_send_transfer_cmd>:
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
  421688:	6a43      	ldr	r3, [r0, #36]	; 0x24
  42168a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
	p_can->CAN_TCR = ul_reg | uc_mask;
  42168e:	4319      	orrs	r1, r3
  421690:	6241      	str	r1, [r0, #36]	; 0x24
  421692:	4770      	bx	lr

00421694 <can_mailbox_get_status>:
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
	return (p_can->CAN_MB[uc_index].CAN_MSR);
  421694:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  421698:	f8d1 0210 	ldr.w	r0, [r1, #528]	; 0x210
}
  42169c:	4770      	bx	lr

0042169e <can_mailbox_send_transfer_cmd>:
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
  42169e:	780a      	ldrb	r2, [r1, #0]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
  4216a0:	798b      	ldrb	r3, [r1, #6]
  4216a2:	041b      	lsls	r3, r3, #16
  4216a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
  4216a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4216ac:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  4216b0:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
  4216b4:	4770      	bx	lr

004216b6 <can_mailbox_init>:
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  4216b6:	680b      	ldr	r3, [r1, #0]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
  4216b8:	790a      	ldrb	r2, [r1, #4]
  4216ba:	b31a      	cbz	r2, 421704 <can_mailbox_init+0x4e>
{
  4216bc:	b430      	push	{r4, r5}
  4216be:	b2db      	uxtb	r3, r3
  4216c0:	eb00 1243 	add.w	r2, r0, r3, lsl #5
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4216c4:	f8d2 4200 	ldr.w	r4, [r2, #512]	; 0x200
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
  4216c8:	79cd      	ldrb	r5, [r1, #7]
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4216ca:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
  4216ce:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4216d2:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
  4216d6:	794c      	ldrb	r4, [r1, #5]
  4216d8:	b32c      	cbz	r4, 421726 <can_mailbox_init+0x70>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
  4216da:	68cc      	ldr	r4, [r1, #12]
  4216dc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
  4216e0:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  4216e4:	690c      	ldr	r4, [r1, #16]
  4216e6:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
  4216ea:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4216ee:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
  4216f2:	7909      	ldrb	r1, [r1, #4]
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4216f4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
  4216f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4216fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
  421700:	bc30      	pop	{r4, r5}
  421702:	4770      	bx	lr
  421704:	b2db      	uxtb	r3, r3
  421706:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
  42170a:	2300      	movs	r3, #0
  42170c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
  421710:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
		p_can->CAN_MB[uc_index].CAN_MID = 0;
  421714:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
  421718:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
  42171c:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
  421720:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
		return;
  421724:	4770      	bx	lr
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
  421726:	68cc      	ldr	r4, [r1, #12]
  421728:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  42172c:	690c      	ldr	r4, [r1, #16]
  42172e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
  421732:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
  421736:	e7da      	b.n	4216ee <can_mailbox_init+0x38>

00421738 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
  421738:	b570      	push	{r4, r5, r6, lr}
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
	ul_status = p_mailbox->ul_status;
  42173a:	688b      	ldr	r3, [r1, #8]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
  42173c:	f003 72c0 	and.w	r2, r3, #25165824	; 0x1800000
		ul_retval = CAN_MAILBOX_RX_OVER;
  421740:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
  421744:	bf14      	ite	ne
  421746:	2500      	movne	r5, #0
  421748:	2502      	moveq	r5, #2
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
  42174a:	780a      	ldrb	r2, [r1, #0]
  42174c:	eb00 1642 	add.w	r6, r0, r2, lsl #5
  421750:	f8d6 420c 	ldr.w	r4, [r6, #524]	; 0x20c
  421754:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
  421758:	614c      	str	r4, [r1, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
  42175a:	f3c3 4303 	ubfx	r3, r3, #16, #4
  42175e:	718b      	strb	r3, [r1, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
  421760:	f8d6 4214 	ldr.w	r4, [r6, #532]	; 0x214
  421764:	618c      	str	r4, [r1, #24]
	if (p_mailbox->uc_length > 4) {
  421766:	2b04      	cmp	r3, #4
  421768:	d902      	bls.n	421770 <can_mailbox_read+0x38>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
  42176a:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
  42176e:	61cb      	str	r3, [r1, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
  421770:	eb00 1242 	add.w	r2, r0, r2, lsl #5
  421774:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
  421778:	608b      	str	r3, [r1, #8]
	ul_status = p_mailbox->ul_status;
	if (ul_status & CAN_MSR_MMI) {
  42177a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
  42177e:	bf18      	it	ne
  421780:	f045 0504 	orrne.w	r5, r5, #4
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
  421784:	4b01      	ldr	r3, [pc, #4]	; (42178c <can_mailbox_read+0x54>)
  421786:	4798      	blx	r3

	return ul_retval;
}
  421788:	4628      	mov	r0, r5
  42178a:	bd70      	pop	{r4, r5, r6, pc}
  42178c:	0042169f 	.word	0x0042169f

00421790 <can_mailbox_write>:
	return (p_can->CAN_MB[uc_index].CAN_MSR);
  421790:	780b      	ldrb	r3, [r1, #0]
  421792:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  421796:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
  42179a:	608a      	str	r2, [r1, #8]
	ul_status = p_mailbox->ul_status;
	if (!(ul_status & CAN_MSR_MRDY)) {
  42179c:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
  4217a0:	d028      	beq.n	4217f4 <can_mailbox_write+0x64>
{
  4217a2:	b410      	push	{r4}
		return CAN_MAILBOX_NOT_READY;
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
  4217a4:	794a      	ldrb	r2, [r1, #5]
  4217a6:	b1fa      	cbz	r2, 4217e8 <can_mailbox_write+0x58>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  4217a8:	690a      	ldr	r2, [r1, #16]
  4217aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4217ae:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4217b2:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
  4217b6:	698c      	ldr	r4, [r1, #24]
  4217b8:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  4217bc:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
	if (p_mailbox->uc_length > 4) {
  4217c0:	798a      	ldrb	r2, [r1, #6]
  4217c2:	2a04      	cmp	r2, #4
  4217c4:	d904      	bls.n	4217d0 <can_mailbox_write+0x40>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
  4217c6:	69cc      	ldr	r4, [r1, #28]
  4217c8:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  4217cc:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
  4217d0:	798a      	ldrb	r2, [r1, #6]
  4217d2:	0412      	lsls	r2, r2, #16
  4217d4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4217d8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4217dc:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c

	return CAN_MAILBOX_TRANSFER_OK;
  4217e0:	2000      	movs	r0, #0
}
  4217e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4217e6:	4770      	bx	lr
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  4217e8:	690c      	ldr	r4, [r1, #16]
  4217ea:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  4217ee:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
  4217f2:	e7e0      	b.n	4217b6 <can_mailbox_write+0x26>
		return CAN_MAILBOX_NOT_READY;
  4217f4:	2001      	movs	r0, #1
  4217f6:	4770      	bx	lr

004217f8 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
  4217f8:	b570      	push	{r4, r5, r6, lr}
  4217fa:	b088      	sub	sp, #32
  4217fc:	4606      	mov	r6, r0
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
  4217fe:	2400      	movs	r4, #0
  421800:	f88d 4004 	strb.w	r4, [sp, #4]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
  421804:	4d04      	ldr	r5, [pc, #16]	; (421818 <can_reset_all_mailbox+0x20>)
		mb_config_t.ul_mb_idx = i;
  421806:	9400      	str	r4, [sp, #0]
		can_mailbox_init(p_can, &mb_config_t);
  421808:	4669      	mov	r1, sp
  42180a:	4630      	mov	r0, r6
  42180c:	47a8      	blx	r5
  42180e:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  421810:	2c08      	cmp	r4, #8
  421812:	d1f8      	bne.n	421806 <can_reset_all_mailbox+0xe>
	}
}
  421814:	b008      	add	sp, #32
  421816:	bd70      	pop	{r4, r5, r6, pc}
  421818:	004216b7 	.word	0x004216b7

0042181c <can_init>:
{
  42181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  42181e:	f246 13a8 	movw	r3, #25000	; 0x61a8
  421822:	fb03 f402 	mul.w	r4, r3, r2
  421826:	190b      	adds	r3, r1, r4
  421828:	3b01      	subs	r3, #1
  42182a:	fbb3 f3f4 	udiv	r3, r3, r4
  42182e:	2b80      	cmp	r3, #128	; 0x80
  421830:	d866      	bhi.n	421900 <can_init+0xe4>
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
  421832:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
  421836:	fb04 f402 	mul.w	r4, r4, r2
  42183a:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
  42183e:	d861      	bhi.n	421904 <can_init+0xe8>
  421840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  421844:	fb03 f202 	mul.w	r2, r3, r2
  421848:	2708      	movs	r7, #8
  42184a:	f04f 36ff 	mov.w	r6, #4294967295
  42184e:	463b      	mov	r3, r7
  421850:	e004      	b.n	42185c <can_init+0x40>
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  421852:	3301      	adds	r3, #1
  421854:	b2db      	uxtb	r3, r3
  421856:	4414      	add	r4, r2
  421858:	2b1a      	cmp	r3, #26
  42185a:	d00c      	beq.n	421876 <can_init+0x5a>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
  42185c:	fbb1 f5f4 	udiv	r5, r1, r4
  421860:	2d80      	cmp	r5, #128	; 0x80
  421862:	d8f6      	bhi.n	421852 <can_init+0x36>
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
  421864:	fb04 1515 	mls	r5, r4, r5, r1
			if (ul_cur_mod < ul_mod) {
  421868:	42b5      	cmp	r5, r6
  42186a:	d2f2      	bcs.n	421852 <can_init+0x36>
				if (!ul_mod) {
  42186c:	b115      	cbz	r5, 421874 <can_init+0x58>
				ul_mod = ul_cur_mod;
  42186e:	462e      	mov	r6, r5
				if (!ul_mod) {
  421870:	461f      	mov	r7, r3
  421872:	e7ee      	b.n	421852 <can_init+0x36>
  421874:	461f      	mov	r7, r3
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
  421876:	fb02 f207 	mul.w	r2, r2, r7
  42187a:	fbb1 f1f2 	udiv	r1, r1, r2
	if (uc_prescale < 2) {
  42187e:	b2cb      	uxtb	r3, r1
  421880:	2b01      	cmp	r3, #1
  421882:	d941      	bls.n	421908 <can_init+0xec>
  421884:	4604      	mov	r4, r0
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
  421886:	f1a7 0208 	sub.w	r2, r7, #8
	p_can->CAN_MR &= ~CAN_MR_CANEN;
  42188a:	6803      	ldr	r3, [r0, #0]
  42188c:	f023 0301 	bic.w	r3, r3, #1
  421890:	6003      	str	r3, [r0, #0]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  421892:	4d1e      	ldr	r5, [pc, #120]	; (42190c <can_init+0xf0>)
  421894:	0056      	lsls	r6, r2, #1
  421896:	18b7      	adds	r7, r6, r2
  421898:	eb05 0747 	add.w	r7, r5, r7, lsl #1
  42189c:	78bb      	ldrb	r3, [r7, #2]
  42189e:	3b01      	subs	r3, #1
  4218a0:	011b      	lsls	r3, r3, #4
  4218a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  4218a6:	7878      	ldrb	r0, [r7, #1]
  4218a8:	3801      	subs	r0, #1
  4218aa:	0200      	lsls	r0, r0, #8
  4218ac:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  4218b0:	4303      	orrs	r3, r0
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  4218b2:	78f8      	ldrb	r0, [r7, #3]
  4218b4:	3801      	subs	r0, #1
  4218b6:	f000 0007 	and.w	r0, r0, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  4218ba:	4303      	orrs	r3, r0
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  4218bc:	793a      	ldrb	r2, [r7, #4]
  4218be:	3a01      	subs	r2, #1
  4218c0:	0312      	lsls	r2, r2, #12
  4218c2:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  4218c6:	4313      	orrs	r3, r2
			CAN_BR_BRP(uc_prescale - 1);
  4218c8:	b2ca      	uxtb	r2, r1
  4218ca:	3a01      	subs	r2, #1
  4218cc:	0412      	lsls	r2, r2, #16
  4218ce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  4218d2:	4313      	orrs	r3, r2
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  4218d4:	6163      	str	r3, [r4, #20]
	can_reset_all_mailbox(p_can);
  4218d6:	4620      	mov	r0, r4
  4218d8:	4b0d      	ldr	r3, [pc, #52]	; (421910 <can_init+0xf4>)
  4218da:	4798      	blx	r3
	p_can->CAN_MR |= CAN_MR_CANEN;
  4218dc:	6823      	ldr	r3, [r4, #0]
  4218de:	f043 0301 	orr.w	r3, r3, #1
  4218e2:	6023      	str	r3, [r4, #0]
  4218e4:	2300      	movs	r3, #0
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  4218e6:	490b      	ldr	r1, [pc, #44]	; (421914 <can_init+0xf8>)
	return (p_can->CAN_SR);
  4218e8:	6922      	ldr	r2, [r4, #16]
		ul_tick++;
  4218ea:	3301      	adds	r3, #1
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  4218ec:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
  4218f0:	d101      	bne.n	4218f6 <can_init+0xda>
  4218f2:	428b      	cmp	r3, r1
  4218f4:	d1f8      	bne.n	4218e8 <can_init+0xcc>
	if (CAN_TIMEOUT == ul_tick) {
  4218f6:	4807      	ldr	r0, [pc, #28]	; (421914 <can_init+0xf8>)
  4218f8:	1a18      	subs	r0, r3, r0
  4218fa:	bf18      	it	ne
  4218fc:	2001      	movne	r0, #1
  4218fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
  421900:	2000      	movs	r0, #0
  421902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  421904:	2000      	movs	r0, #0
  421906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  421908:	2000      	movs	r0, #0
}
  42190a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42190c:	0042f398 	.word	0x0042f398
  421910:	004217f9 	.word	0x004217f9
  421914:	000186a0 	.word	0x000186a0

00421918 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
  421918:	b508      	push	{r3, lr}
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
  42191a:	0212      	lsls	r2, r2, #8
  42191c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  421920:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  421924:	4311      	orrs	r1, r2
  421926:	4b02      	ldr	r3, [pc, #8]	; (421930 <efc_init+0x18>)
  421928:	4798      	blx	r3
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
#endif
	return EFC_RC_OK;
}
  42192a:	2000      	movs	r0, #0
  42192c:	bd08      	pop	{r3, pc}
  42192e:	bf00      	nop
  421930:	20000069 	.word	0x20000069

00421934 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  421934:	f1a1 030e 	sub.w	r3, r1, #14
  421938:	2b01      	cmp	r3, #1
  42193a:	d802      	bhi.n	421942 <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
  42193c:	f04f 30ff 	mov.w	r0, #4294967295
  421940:	4770      	bx	lr
{
  421942:	b510      	push	{r4, lr}
  421944:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  421946:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  42194a:	fab3 f383 	clz	r3, r3
  42194e:	095b      	lsrs	r3, r3, #5
  421950:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  421952:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  421954:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  421958:	2400      	movs	r4, #0
  42195a:	4b0b      	ldr	r3, [pc, #44]	; (421988 <efc_perform_command+0x54>)
  42195c:	701c      	strb	r4, [r3, #0]
	return flags;
  42195e:	9c01      	ldr	r4, [sp, #4]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  421960:	0212      	lsls	r2, r2, #8
  421962:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  421966:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
  42196a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
  42196e:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
  421970:	4311      	orrs	r1, r2
  421972:	4b06      	ldr	r3, [pc, #24]	; (42198c <efc_perform_command+0x58>)
  421974:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  421976:	b12c      	cbz	r4, 421984 <efc_perform_command+0x50>
		cpu_irq_enable();
  421978:	2201      	movs	r2, #1
  42197a:	4b03      	ldr	r3, [pc, #12]	; (421988 <efc_perform_command+0x54>)
  42197c:	701a      	strb	r2, [r3, #0]
  42197e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  421982:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
  421984:	b002      	add	sp, #8
  421986:	bd10      	pop	{r4, pc}
  421988:	200000c1 	.word	0x200000c1
  42198c:	2000006d 	.word	0x2000006d

00421990 <matrix_set_system_io>:
	p_matrix->CCFG_SYSIO &= 0xFFFF0000;
	p_matrix->CCFG_SYSIO |= (ul_io & 0xFFFF);

#else

	p_matrix->CCFG_SYSIO = ul_io;
  421990:	4b01      	ldr	r3, [pc, #4]	; (421998 <matrix_set_system_io+0x8>)
  421992:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  421996:	4770      	bx	lr
  421998:	400e0200 	.word	0x400e0200

0042199c <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  42199c:	460b      	mov	r3, r1
  42199e:	b119      	cbz	r1, 4219a8 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  4219a0:	6809      	ldr	r1, [r1, #0]
  4219a2:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  4219a4:	685b      	ldr	r3, [r3, #4]
  4219a6:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  4219a8:	b11a      	cbz	r2, 4219b2 <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  4219aa:	6813      	ldr	r3, [r2, #0]
  4219ac:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  4219ae:	6853      	ldr	r3, [r2, #4]
  4219b0:	6143      	str	r3, [r0, #20]
  4219b2:	4770      	bx	lr

004219b4 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4219b4:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  4219b8:	05c9      	lsls	r1, r1, #23
  4219ba:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
  4219bc:	6201      	str	r1, [r0, #32]
  4219be:	4770      	bx	lr

004219c0 <rstc_start_software_reset>:
		Rstc *p_rstc)
{
#if (SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST;
#else
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
  4219c0:	4b01      	ldr	r3, [pc, #4]	; (4219c8 <rstc_start_software_reset+0x8>)
  4219c2:	6003      	str	r3, [r0, #0]
  4219c4:	4770      	bx	lr
  4219c6:	bf00      	nop
  4219c8:	a5000005 	.word	0xa5000005

004219cc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4219cc:	b508      	push	{r3, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4219ce:	2013      	movs	r0, #19
  4219d0:	4b01      	ldr	r3, [pc, #4]	; (4219d8 <spi_enable_clock+0xc>)
  4219d2:	4798      	blx	r3
  4219d4:	bd08      	pop	{r3, pc}
  4219d6:	bf00      	nop
  4219d8:	00425941 	.word	0x00425941

004219dc <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4219dc:	6843      	ldr	r3, [r0, #4]
  4219de:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4219e2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4219e4:	6843      	ldr	r3, [r0, #4]
  4219e6:	0409      	lsls	r1, r1, #16
  4219e8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4219ec:	4319      	orrs	r1, r3
  4219ee:	6041      	str	r1, [r0, #4]
  4219f0:	4770      	bx	lr

004219f2 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  4219f2:	6843      	ldr	r3, [r0, #4]
  4219f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4219f8:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  4219fa:	6843      	ldr	r3, [r0, #4]
  4219fc:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  421a00:	6041      	str	r1, [r0, #4]
  421a02:	4770      	bx	lr

00421a04 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  421a04:	b932      	cbnz	r2, 421a14 <spi_set_clock_polarity+0x10>
  421a06:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  421a0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421a0c:	f023 0301 	bic.w	r3, r3, #1
  421a10:	6303      	str	r3, [r0, #48]	; 0x30
  421a12:	4770      	bx	lr
  421a14:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  421a18:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421a1a:	f043 0301 	orr.w	r3, r3, #1
  421a1e:	6303      	str	r3, [r0, #48]	; 0x30
  421a20:	4770      	bx	lr

00421a22 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  421a22:	b932      	cbnz	r2, 421a32 <spi_set_clock_phase+0x10>
  421a24:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  421a28:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421a2a:	f023 0302 	bic.w	r3, r3, #2
  421a2e:	6303      	str	r3, [r0, #48]	; 0x30
  421a30:	4770      	bx	lr
  421a32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  421a36:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421a38:	f043 0302 	orr.w	r3, r3, #2
  421a3c:	6303      	str	r3, [r0, #48]	; 0x30
  421a3e:	4770      	bx	lr

00421a40 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  421a40:	2a04      	cmp	r2, #4
  421a42:	d003      	beq.n	421a4c <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  421a44:	b16a      	cbz	r2, 421a62 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  421a46:	2a08      	cmp	r2, #8
  421a48:	d016      	beq.n	421a78 <spi_configure_cs_behavior+0x38>
  421a4a:	4770      	bx	lr
  421a4c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  421a50:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421a52:	f023 0308 	bic.w	r3, r3, #8
  421a56:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  421a58:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421a5a:	f043 0304 	orr.w	r3, r3, #4
  421a5e:	6303      	str	r3, [r0, #48]	; 0x30
  421a60:	4770      	bx	lr
  421a62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  421a66:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421a68:	f023 0308 	bic.w	r3, r3, #8
  421a6c:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  421a6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421a70:	f023 0304 	bic.w	r3, r3, #4
  421a74:	6303      	str	r3, [r0, #48]	; 0x30
  421a76:	4770      	bx	lr
  421a78:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  421a7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  421a7e:	f043 0308 	orr.w	r3, r3, #8
  421a82:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  421a84:	e7e1      	b.n	421a4a <spi_configure_cs_behavior+0xa>

00421a86 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  421a86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  421a8a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  421a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  421a90:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  421a92:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  421a94:	431a      	orrs	r2, r3
  421a96:	630a      	str	r2, [r1, #48]	; 0x30
  421a98:	4770      	bx	lr

00421a9a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  421a9a:	1e43      	subs	r3, r0, #1
  421a9c:	4419      	add	r1, r3
  421a9e:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  421aa2:	1e43      	subs	r3, r0, #1
  421aa4:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  421aa6:	bf94      	ite	ls
  421aa8:	b200      	sxthls	r0, r0
		return -1;
  421aaa:	f04f 30ff 	movhi.w	r0, #4294967295
}
  421aae:	4770      	bx	lr

00421ab0 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  421ab0:	b17a      	cbz	r2, 421ad2 <spi_set_baudrate_div+0x22>
{
  421ab2:	b410      	push	{r4}
  421ab4:	4614      	mov	r4, r2
  421ab6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  421aba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  421abc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  421ac0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  421ac2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  421ac4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  421ac8:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  421aca:	2000      	movs	r0, #0
}
  421acc:	f85d 4b04 	ldr.w	r4, [sp], #4
  421ad0:	4770      	bx	lr
        return -1;
  421ad2:	f04f 30ff 	mov.w	r0, #4294967295
  421ad6:	4770      	bx	lr

00421ad8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  421ad8:	b410      	push	{r4}
  421ada:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  421ade:	6b08      	ldr	r0, [r1, #48]	; 0x30
  421ae0:	b280      	uxth	r0, r0
  421ae2:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  421ae4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  421ae6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  421aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  421aee:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  421af0:	f85d 4b04 	ldr.w	r4, [sp], #4
  421af4:	4770      	bx	lr

00421af6 <supc_set_wakeup_inputs>:
 * 0 means a low-to-high level transition forces the wake up of core power supply.
 */
void supc_set_wakeup_inputs(Supc *p_supc, uint32_t ul_inputs,
		uint32_t ul_transition)
{
	p_supc->SUPC_WUIR = ul_inputs | ul_transition;
  421af6:	430a      	orrs	r2, r1
  421af8:	6102      	str	r2, [r0, #16]
  421afa:	4770      	bx	lr

00421afc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  421afc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  421afe:	0189      	lsls	r1, r1, #6
  421b00:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  421b02:	2402      	movs	r4, #2
  421b04:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  421b06:	f04f 31ff 	mov.w	r1, #4294967295
  421b0a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  421b0c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  421b0e:	605a      	str	r2, [r3, #4]
}
  421b10:	f85d 4b04 	ldr.w	r4, [sp], #4
  421b14:	4770      	bx	lr

00421b16 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  421b16:	0189      	lsls	r1, r1, #6
  421b18:	2305      	movs	r3, #5
  421b1a:	5043      	str	r3, [r0, r1]
  421b1c:	4770      	bx	lr

00421b1e <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  421b1e:	0189      	lsls	r1, r1, #6
  421b20:	2302      	movs	r3, #2
  421b22:	5043      	str	r3, [r0, r1]
  421b24:	4770      	bx	lr

00421b26 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  421b26:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  421b2a:	61ca      	str	r2, [r1, #28]
  421b2c:	4770      	bx	lr

00421b2e <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  421b2e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  421b32:	624a      	str	r2, [r1, #36]	; 0x24
  421b34:	4770      	bx	lr

00421b36 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  421b36:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  421b3a:	6a08      	ldr	r0, [r1, #32]
}
  421b3c:	4770      	bx	lr
	...

00421b40 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  421b40:	4b2a      	ldr	r3, [pc, #168]	; (421bec <twi_set_speed+0xac>)
  421b42:	4299      	cmp	r1, r3
  421b44:	d84a      	bhi.n	421bdc <twi_set_speed+0x9c>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  421b46:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  421b4a:	4299      	cmp	r1, r3
  421b4c:	d92c      	bls.n	421ba8 <twi_set_speed+0x68>
{
  421b4e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  421b50:	4c27      	ldr	r4, [pc, #156]	; (421bf0 <twi_set_speed+0xb0>)
  421b52:	fba4 3402 	umull	r3, r4, r4, r2
  421b56:	0ba4      	lsrs	r4, r4, #14
  421b58:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  421b5a:	4b26      	ldr	r3, [pc, #152]	; (421bf4 <twi_set_speed+0xb4>)
  421b5c:	440b      	add	r3, r1
  421b5e:	009b      	lsls	r3, r3, #2
  421b60:	fbb2 f2f3 	udiv	r2, r2, r3
  421b64:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  421b66:	2cff      	cmp	r4, #255	; 0xff
  421b68:	d93a      	bls.n	421be0 <twi_set_speed+0xa0>
  421b6a:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  421b6c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  421b6e:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  421b70:	2cff      	cmp	r4, #255	; 0xff
  421b72:	d90e      	bls.n	421b92 <twi_set_speed+0x52>
  421b74:	2907      	cmp	r1, #7
  421b76:	d1f9      	bne.n	421b6c <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  421b78:	0213      	lsls	r3, r2, #8
  421b7a:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
  421b7c:	0409      	lsls	r1, r1, #16
  421b7e:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  421b82:	430b      	orrs	r3, r1
  421b84:	b2e4      	uxtb	r4, r4
  421b86:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
  421b88:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  421b8a:	2000      	movs	r0, #0
}
  421b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  421b90:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  421b92:	2aff      	cmp	r2, #255	; 0xff
  421b94:	d9f0      	bls.n	421b78 <twi_set_speed+0x38>
  421b96:	2906      	cmp	r1, #6
  421b98:	d8ee      	bhi.n	421b78 <twi_set_speed+0x38>
			ckdiv++;
  421b9a:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
  421b9c:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  421b9e:	2aff      	cmp	r2, #255	; 0xff
  421ba0:	d9ea      	bls.n	421b78 <twi_set_speed+0x38>
  421ba2:	2906      	cmp	r1, #6
  421ba4:	d9f9      	bls.n	421b9a <twi_set_speed+0x5a>
  421ba6:	e7e7      	b.n	421b78 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  421ba8:	0049      	lsls	r1, r1, #1
  421baa:	fbb2 f2f1 	udiv	r2, r2, r1
  421bae:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  421bb0:	2aff      	cmp	r2, #255	; 0xff
  421bb2:	d911      	bls.n	421bd8 <twi_set_speed+0x98>
  421bb4:	2300      	movs	r3, #0
			ckdiv++;
  421bb6:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
  421bb8:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  421bba:	2aff      	cmp	r2, #255	; 0xff
  421bbc:	d901      	bls.n	421bc2 <twi_set_speed+0x82>
  421bbe:	2b07      	cmp	r3, #7
  421bc0:	d1f9      	bne.n	421bb6 <twi_set_speed+0x76>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  421bc2:	0211      	lsls	r1, r2, #8
  421bc4:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
  421bc6:	041b      	lsls	r3, r3, #16
  421bc8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  421bcc:	430b      	orrs	r3, r1
  421bce:	b2d2      	uxtb	r2, r2
  421bd0:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  421bd2:	6102      	str	r2, [r0, #16]
	return PASS;
  421bd4:	2000      	movs	r0, #0
  421bd6:	4770      	bx	lr
	uint32_t ckdiv = 0;
  421bd8:	2300      	movs	r3, #0
  421bda:	e7f2      	b.n	421bc2 <twi_set_speed+0x82>
		return FAIL;
  421bdc:	2001      	movs	r0, #1
  421bde:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  421be0:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
  421be2:	bf88      	it	hi
  421be4:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  421be6:	d8d8      	bhi.n	421b9a <twi_set_speed+0x5a>
	uint32_t ckdiv = 0;
  421be8:	2100      	movs	r1, #0
  421bea:	e7c5      	b.n	421b78 <twi_set_speed+0x38>
  421bec:	00061a80 	.word	0x00061a80
  421bf0:	057619f1 	.word	0x057619f1
  421bf4:	3ffd1200 	.word	0x3ffd1200

00421bf8 <twi_master_init>:
{
  421bf8:	b538      	push	{r3, r4, r5, lr}
  421bfa:	4604      	mov	r4, r0
  421bfc:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
  421bfe:	f04f 33ff 	mov.w	r3, #4294967295
  421c02:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
  421c04:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  421c06:	2380      	movs	r3, #128	; 0x80
  421c08:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  421c0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
  421c0c:	2308      	movs	r3, #8
  421c0e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  421c10:	2320      	movs	r3, #32
  421c12:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
  421c14:	2304      	movs	r3, #4
  421c16:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  421c18:	680a      	ldr	r2, [r1, #0]
  421c1a:	6849      	ldr	r1, [r1, #4]
  421c1c:	4b05      	ldr	r3, [pc, #20]	; (421c34 <twi_master_init+0x3c>)
  421c1e:	4798      	blx	r3
  421c20:	2801      	cmp	r0, #1
  421c22:	bf14      	ite	ne
  421c24:	2000      	movne	r0, #0
  421c26:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
  421c28:	7a6b      	ldrb	r3, [r5, #9]
  421c2a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  421c2c:	bf04      	itt	eq
  421c2e:	2340      	moveq	r3, #64	; 0x40
  421c30:	6023      	streq	r3, [r4, #0]
}
  421c32:	bd38      	pop	{r3, r4, r5, pc}
  421c34:	00421b41 	.word	0x00421b41

00421c38 <twi_mk_addr>:
	if (len == 0)
  421c38:	460a      	mov	r2, r1
  421c3a:	b159      	cbz	r1, 421c54 <twi_mk_addr+0x1c>
	val = addr[0];
  421c3c:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  421c3e:	2901      	cmp	r1, #1
		val |= addr[1];
  421c40:	bfc4      	itt	gt
  421c42:	7841      	ldrbgt	r1, [r0, #1]
  421c44:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
  421c48:	2a02      	cmp	r2, #2
  421c4a:	dd04      	ble.n	421c56 <twi_mk_addr+0x1e>
		val |= addr[2];
  421c4c:	7882      	ldrb	r2, [r0, #2]
  421c4e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  421c52:	e000      	b.n	421c56 <twi_mk_addr+0x1e>
		return 0;
  421c54:	2300      	movs	r3, #0
}
  421c56:	4618      	mov	r0, r3
  421c58:	4770      	bx	lr
	...

00421c5c <twi_master_read>:
{
  421c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
  421c5e:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
  421c60:	2c00      	cmp	r4, #0
  421c62:	d04f      	beq.n	421d04 <twi_master_read+0xa8>
  421c64:	460b      	mov	r3, r1
  421c66:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
  421c68:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  421c6a:	2000      	movs	r0, #0
  421c6c:	6068      	str	r0, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  421c6e:	684a      	ldr	r2, [r1, #4]
  421c70:	0212      	lsls	r2, r2, #8
  421c72:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  421c76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  421c7a:	7c09      	ldrb	r1, [r1, #16]
  421c7c:	0409      	lsls	r1, r1, #16
  421c7e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
  421c82:	430a      	orrs	r2, r1
  421c84:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
  421c86:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  421c88:	6859      	ldr	r1, [r3, #4]
  421c8a:	4618      	mov	r0, r3
  421c8c:	4b22      	ldr	r3, [pc, #136]	; (421d18 <twi_master_read+0xbc>)
  421c8e:	4798      	blx	r3
  421c90:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
  421c92:	2c01      	cmp	r4, #1
  421c94:	d00f      	beq.n	421cb6 <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
  421c96:	2301      	movs	r3, #1
  421c98:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  421c9a:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
  421c9c:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  421c9e:	f413 7f80 	tst.w	r3, #256	; 0x100
  421ca2:	d136      	bne.n	421d12 <twi_master_read+0xb6>
  421ca4:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
  421ca8:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
  421cac:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
  421cb0:	f04f 0c02 	mov.w	ip, #2
  421cb4:	e019      	b.n	421cea <twi_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  421cb6:	2303      	movs	r3, #3
  421cb8:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  421cba:	2001      	movs	r0, #1
  421cbc:	e7ee      	b.n	421c9c <twi_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
  421cbe:	460a      	mov	r2, r1
  421cc0:	4670      	mov	r0, lr
  421cc2:	e00c      	b.n	421cde <twi_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
  421cc4:	b908      	cbnz	r0, 421cca <twi_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
  421cc6:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
  421cca:	f013 0f02 	tst.w	r3, #2
  421cce:	d0f6      	beq.n	421cbe <twi_master_read+0x62>
  421cd0:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
  421cd2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  421cd4:	7033      	strb	r3, [r6, #0]
		cnt--;
  421cd6:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
  421cd8:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
  421cda:	463a      	mov	r2, r7
	 while (cnt > 0) {
  421cdc:	b164      	cbz	r4, 421cf8 <twi_master_read+0x9c>
		status = p_twi->TWI_SR;
  421cde:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  421ce0:	f413 7f80 	tst.w	r3, #256	; 0x100
  421ce4:	d111      	bne.n	421d0a <twi_master_read+0xae>
		 if (!timeout--) {
  421ce6:	1e51      	subs	r1, r2, #1
  421ce8:	b18a      	cbz	r2, 421d0e <twi_master_read+0xb2>
		if (cnt == 1  && !stop_sent) {
  421cea:	2c01      	cmp	r4, #1
  421cec:	d0ea      	beq.n	421cc4 <twi_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
  421cee:	f013 0f02 	tst.w	r3, #2
  421cf2:	d1ee      	bne.n	421cd2 <twi_master_read+0x76>
  421cf4:	460a      	mov	r2, r1
  421cf6:	e7f1      	b.n	421cdc <twi_master_read+0x80>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  421cf8:	6a2b      	ldr	r3, [r5, #32]
  421cfa:	f013 0f01 	tst.w	r3, #1
  421cfe:	d0fb      	beq.n	421cf8 <twi_master_read+0x9c>
	p_twi->TWI_SR;
  421d00:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
  421d02:	e000      	b.n	421d06 <twi_master_read+0xaa>
		return TWI_INVALID_ARGUMENT;
  421d04:	2401      	movs	r4, #1
}
  421d06:	4620      	mov	r0, r4
  421d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
  421d0a:	2405      	movs	r4, #5
  421d0c:	e7fb      	b.n	421d06 <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
  421d0e:	2409      	movs	r4, #9
  421d10:	e7f9      	b.n	421d06 <twi_master_read+0xaa>
			return TWI_RECEIVE_NACK;
  421d12:	2405      	movs	r4, #5
  421d14:	e7f7      	b.n	421d06 <twi_master_read+0xaa>
  421d16:	bf00      	nop
  421d18:	00421c39 	.word	0x00421c39

00421d1c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  421d1c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  421d1e:	23ac      	movs	r3, #172	; 0xac
  421d20:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  421d22:	680b      	ldr	r3, [r1, #0]
  421d24:	684a      	ldr	r2, [r1, #4]
  421d26:	fbb3 f3f2 	udiv	r3, r3, r2
  421d2a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  421d2c:	1e5c      	subs	r4, r3, #1
  421d2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  421d32:	4294      	cmp	r4, r2
  421d34:	d80c      	bhi.n	421d50 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  421d36:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  421d38:	688b      	ldr	r3, [r1, #8]
  421d3a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  421d3c:	f240 2302 	movw	r3, #514	; 0x202
  421d40:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  421d44:	2350      	movs	r3, #80	; 0x50
  421d46:	6003      	str	r3, [r0, #0]

	return 0;
  421d48:	2000      	movs	r0, #0
}
  421d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
  421d4e:	4770      	bx	lr
		return 1;
  421d50:	2001      	movs	r0, #1
  421d52:	e7fa      	b.n	421d4a <uart_init+0x2e>

00421d54 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  421d54:	6943      	ldr	r3, [r0, #20]
  421d56:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  421d5a:	bf1a      	itte	ne
  421d5c:	61c1      	strne	r1, [r0, #28]
	return 0;
  421d5e:	2000      	movne	r0, #0
		return 1;
  421d60:	2001      	moveq	r0, #1
}
  421d62:	4770      	bx	lr

00421d64 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  421d64:	6943      	ldr	r3, [r0, #20]
  421d66:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  421d6a:	bf1d      	ittte	ne
  421d6c:	6983      	ldrne	r3, [r0, #24]
  421d6e:	700b      	strbne	r3, [r1, #0]
	return 0;
  421d70:	2000      	movne	r0, #0
		return 1;
  421d72:	2001      	moveq	r0, #1
}
  421d74:	4770      	bx	lr

00421d76 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  421d76:	6943      	ldr	r3, [r0, #20]
  421d78:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  421d7c:	bf1d      	ittte	ne
  421d7e:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  421d82:	61c1      	strne	r1, [r0, #28]
	return 0;
  421d84:	2000      	movne	r0, #0
		return 1;
  421d86:	2001      	moveq	r0, #1
}
  421d88:	4770      	bx	lr

00421d8a <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  421d8a:	6943      	ldr	r3, [r0, #20]
  421d8c:	f013 0f01 	tst.w	r3, #1
  421d90:	d005      	beq.n	421d9e <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  421d92:	6983      	ldr	r3, [r0, #24]
  421d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
  421d98:	600b      	str	r3, [r1, #0]

	return 0;
  421d9a:	2000      	movs	r0, #0
  421d9c:	4770      	bx	lr
		return 1;
  421d9e:	2001      	movs	r0, #1
}
  421da0:	4770      	bx	lr
	...

00421da4 <wdt_restart>:
/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
	if (p_wdt == WDT) {
  421da4:	4b02      	ldr	r3, [pc, #8]	; (421db0 <wdt_restart+0xc>)
  421da6:	4298      	cmp	r0, r3
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
  421da8:	bf04      	itt	eq
  421daa:	4a02      	ldreq	r2, [pc, #8]	; (421db4 <wdt_restart+0x10>)
  421dac:	601a      	streq	r2, [r3, #0]
  421dae:	4770      	bx	lr
  421db0:	400e1850 	.word	0x400e1850
  421db4:	a5000001 	.word	0xa5000001

00421db8 <Buzzer_Freq_Set>:
/* Function  :  Changing Buzzer frequency and duty cycle
 * Parameter :  Set frequency,set duty cycle
 * Return    :   None
 */
void Buzzer_Freq_Set(uint32_t frequency, uint16_t duty_cycle)
{
  421db8:	b538      	push	{r3, r4, r5, lr}


 	static uint16_t last_frequency_sl_u16 = 0u;
 	static uint16_t last_duty_cycle_sl_u16 = 0u;

 	if((last_frequency_sl_u16 != frequency) || (last_duty_cycle_sl_u16 != duty_cycle))
  421dba:	4b1c      	ldr	r3, [pc, #112]	; (421e2c <Buzzer_Freq_Set+0x74>)
  421dbc:	881b      	ldrh	r3, [r3, #0]
  421dbe:	4283      	cmp	r3, r0
  421dc0:	d02a      	beq.n	421e18 <Buzzer_Freq_Set+0x60>
 	{

	 	last_frequency_sl_u16 =  frequency;
  421dc2:	4b1a      	ldr	r3, [pc, #104]	; (421e2c <Buzzer_Freq_Set+0x74>)
  421dc4:	8018      	strh	r0, [r3, #0]
	 	last_duty_cycle_sl_u16 = duty_cycle;
  421dc6:	4b1a      	ldr	r3, [pc, #104]	; (421e30 <Buzzer_Freq_Set+0x78>)
  421dc8:	8019      	strh	r1, [r3, #0]
	 	clock_setting.ul_clka= frequency * PERIOD_VALUE;
  421dca:	2364      	movs	r3, #100	; 0x64
  421dcc:	fb03 f000 	mul.w	r0, r3, r0
  421dd0:	4b18      	ldr	r3, [pc, #96]	; (421e34 <Buzzer_Freq_Set+0x7c>)
  421dd2:	6018      	str	r0, [r3, #0]
		(Freq_selec_bit == 0) ? (clock_setting.ul_mck =  sysclk_get_cpu_hz()) : (clock_setting.ul_mck =  4000000UL);
  421dd4:	4b18      	ldr	r3, [pc, #96]	; (421e38 <Buzzer_Freq_Set+0x80>)
  421dd6:	781b      	ldrb	r3, [r3, #0]
  421dd8:	bb1b      	cbnz	r3, 421e22 <Buzzer_Freq_Set+0x6a>
  421dda:	4a18      	ldr	r2, [pc, #96]	; (421e3c <Buzzer_Freq_Set+0x84>)
  421ddc:	4b15      	ldr	r3, [pc, #84]	; (421e34 <Buzzer_Freq_Set+0x7c>)
  421dde:	609a      	str	r2, [r3, #8]
  421de0:	460c      	mov	r4, r1

	 	// clock_setting.ul_mck =   	sysclk_get_cpu_hz();	//	4000000;//
	 	pwm_init(PWM, &clock_setting);
  421de2:	4914      	ldr	r1, [pc, #80]	; (421e34 <Buzzer_Freq_Set+0x7c>)
  421de4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  421de8:	4b15      	ldr	r3, [pc, #84]	; (421e40 <Buzzer_Freq_Set+0x88>)
  421dea:	4798      	blx	r3
		//pwm_channel_enable(PWM, PWMH3_Buzzer);
	 	g_pwm_channel_led.channel = PWMH3_Buzzer;
  421dec:	4915      	ldr	r1, [pc, #84]	; (421e44 <Buzzer_Freq_Set+0x8c>)
  421dee:	2503      	movs	r5, #3
  421df0:	600d      	str	r5, [r1, #0]
	 	g_pwm_channel_led.ul_duty=duty_cycle;
  421df2:	60cc      	str	r4, [r1, #12]
	 	/* Period is left-aligned */
	 	g_pwm_channel_led.alignment =  PWM_ALIGN_LEFT;//
  421df4:	2300      	movs	r3, #0
  421df6:	810b      	strh	r3, [r1, #8]
	 	/* Output waveform starts at a low level */
	 	g_pwm_channel_led.polarity = PWM_HIGH;
  421df8:	2301      	movs	r3, #1
  421dfa:	728b      	strb	r3, [r1, #10]
	 	/* Use PWM clock A as source clock */
	 	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  421dfc:	230b      	movs	r3, #11
  421dfe:	604b      	str	r3, [r1, #4]
	 	/* Period value of output waveform */
	 	g_pwm_channel_led.ul_period =PERIOD_VALUE;
  421e00:	2364      	movs	r3, #100	; 0x64
  421e02:	610b      	str	r3, [r1, #16]
	 	pwm_channel_init(PWM, &g_pwm_channel_led);
  421e04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  421e08:	4b0f      	ldr	r3, [pc, #60]	; (421e48 <Buzzer_Freq_Set+0x90>)
  421e0a:	4798      	blx	r3
	 	pwm_channel_enable(PWM, PWMH3_Buzzer);
  421e0c:	4629      	mov	r1, r5
  421e0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  421e12:	4b0e      	ldr	r3, [pc, #56]	; (421e4c <Buzzer_Freq_Set+0x94>)
  421e14:	4798      	blx	r3
  421e16:	bd38      	pop	{r3, r4, r5, pc}
 	if((last_frequency_sl_u16 != frequency) || (last_duty_cycle_sl_u16 != duty_cycle))
  421e18:	4b05      	ldr	r3, [pc, #20]	; (421e30 <Buzzer_Freq_Set+0x78>)
  421e1a:	881b      	ldrh	r3, [r3, #0]
  421e1c:	428b      	cmp	r3, r1
  421e1e:	d1d0      	bne.n	421dc2 <Buzzer_Freq_Set+0xa>
  421e20:	e7f9      	b.n	421e16 <Buzzer_Freq_Set+0x5e>
		(Freq_selec_bit == 0) ? (clock_setting.ul_mck =  sysclk_get_cpu_hz()) : (clock_setting.ul_mck =  4000000UL);
  421e22:	4a0b      	ldr	r2, [pc, #44]	; (421e50 <Buzzer_Freq_Set+0x98>)
  421e24:	4b03      	ldr	r3, [pc, #12]	; (421e34 <Buzzer_Freq_Set+0x7c>)
  421e26:	609a      	str	r2, [r3, #8]
  421e28:	e7da      	b.n	421de0 <Buzzer_Freq_Set+0x28>
  421e2a:	bf00      	nop
  421e2c:	20001096 	.word	0x20001096
  421e30:	20001094 	.word	0x20001094
  421e34:	2000148c 	.word	0x2000148c
  421e38:	20001359 	.word	0x20001359
  421e3c:	03938700 	.word	0x03938700
  421e40:	00425a25 	.word	0x00425a25
  421e44:	20001498 	.word	0x20001498
  421e48:	00425a69 	.word	0x00425a69
  421e4c:	00425bcf 	.word	0x00425bcf
  421e50:	003d0900 	.word	0x003d0900

00421e54 <Startup_Music>:
{
  421e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		Amerex_LOGO_RGB(RGB_LED_RED);
  421e56:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  421e5a:	4f32      	ldr	r7, [pc, #200]	; (421f24 <Startup_Music+0xd0>)
  421e5c:	47b8      	blx	r7
		SysNormal_LED(ON);
  421e5e:	2001      	movs	r0, #1
  421e60:	4b31      	ldr	r3, [pc, #196]	; (421f28 <Startup_Music+0xd4>)
  421e62:	4798      	blx	r3
		Buzzer_Freq_Set(BUZZER_FREQ_0_5KHZ, DUTY_0_5_KHZ);
  421e64:	2132      	movs	r1, #50	; 0x32
  421e66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  421e6a:	4c30      	ldr	r4, [pc, #192]	; (421f2c <Startup_Music+0xd8>)
  421e6c:	47a0      	blx	r4
		Delay(100u);
  421e6e:	2064      	movs	r0, #100	; 0x64
  421e70:	4d2f      	ldr	r5, [pc, #188]	; (421f30 <Startup_Music+0xdc>)
  421e72:	47a8      	blx	r5
	   	Buzzer_Freq_Set(BUZZER_FREQ_1KHZ, DUTY_1_KHZ);
  421e74:	2132      	movs	r1, #50	; 0x32
  421e76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  421e7a:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  421e7c:	4e2d      	ldr	r6, [pc, #180]	; (421f34 <Startup_Music+0xe0>)
  421e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  421e82:	6333      	str	r3, [r6, #48]	; 0x30
		Delay(100u);
  421e84:	2064      	movs	r0, #100	; 0x64
  421e86:	47a8      	blx	r5
		Buzzer_Freq_Set(BUZZER_FREQ_1_5KHZ, DUTY_1_5_KHZ);
  421e88:	2132      	movs	r1, #50	; 0x32
  421e8a:	f240 50dc 	movw	r0, #1500	; 0x5dc
  421e8e:	47a0      	blx	r4
  421e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  421e94:	6333      	str	r3, [r6, #48]	; 0x30
		Delay(100u);
  421e96:	2064      	movs	r0, #100	; 0x64
  421e98:	47a8      	blx	r5
		Amerex_LOGO_RGB(RGB_LED_GREEN);
  421e9a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  421e9e:	47b8      	blx	r7
		Buzzer_Freq_Set(BUZZER_FREQ_2KHZ, DUTY_2_KHZ);
  421ea0:	2132      	movs	r1, #50	; 0x32
  421ea2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  421ea6:	47a0      	blx	r4
  421ea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  421eac:	6333      	str	r3, [r6, #48]	; 0x30
		Delay(100u);
  421eae:	2064      	movs	r0, #100	; 0x64
  421eb0:	47a8      	blx	r5
		Buzzer_Freq_Set(BUZZER_FREQ_2_5KHZ, DUTY_2_5_KHZ);
  421eb2:	2132      	movs	r1, #50	; 0x32
  421eb4:	f640 10c4 	movw	r0, #2500	; 0x9c4
  421eb8:	47a0      	blx	r4
  421eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  421ebe:	6333      	str	r3, [r6, #48]	; 0x30
		Delay(100u);
  421ec0:	2064      	movs	r0, #100	; 0x64
  421ec2:	47a8      	blx	r5
		Buzzer_Freq_Set(BUZZER_FREQ_2_5KHZ, 0);
  421ec4:	2100      	movs	r1, #0
  421ec6:	f640 10c4 	movw	r0, #2500	; 0x9c4
  421eca:	47a0      	blx	r4
		Amerex_LOGO_RGB(RGB_LED_BLUE);
  421ecc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  421ed0:	47b8      	blx	r7
		FIRE_LED_PWM_EN(amerex_config_data.fire_LED_duty);
  421ed2:	4c19      	ldr	r4, [pc, #100]	; (421f38 <Startup_Music+0xe4>)
  421ed4:	78a0      	ldrb	r0, [r4, #2]
  421ed6:	4b19      	ldr	r3, [pc, #100]	; (421f3c <Startup_Music+0xe8>)
  421ed8:	4798      	blx	r3
		wdt_restart(WDT);
  421eda:	f506 6605 	add.w	r6, r6, #2128	; 0x850
  421ede:	4630      	mov	r0, r6
  421ee0:	4d17      	ldr	r5, [pc, #92]	; (421f40 <Startup_Music+0xec>)
  421ee2:	47a8      	blx	r5
		LPF_buffer_load();
  421ee4:	4b17      	ldr	r3, [pc, #92]	; (421f44 <Startup_Music+0xf0>)
  421ee6:	4798      	blx	r3
		wdt_restart(WDT);
  421ee8:	4630      	mov	r0, r6
  421eea:	47a8      	blx	r5
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  421eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  421ef0:	4b15      	ldr	r3, [pc, #84]	; (421f48 <Startup_Music+0xf4>)
  421ef2:	635a      	str	r2, [r3, #52]	; 0x34
	if (level) {
  421ef4:	7b63      	ldrb	r3, [r4, #13]
  421ef6:	b15b      	cbz	r3, 421f10 <Startup_Music+0xbc>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  421ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  421efc:	4b12      	ldr	r3, [pc, #72]	; (421f48 <Startup_Music+0xf4>)
  421efe:	631a      	str	r2, [r3, #48]	; 0x30
		ioport_set_pin_level(RELAY_B,amerex_config_data.Default_fire_rly_level);
  421f00:	4b0d      	ldr	r3, [pc, #52]	; (421f38 <Startup_Music+0xe4>)
	if (level) {
  421f02:	7b9b      	ldrb	r3, [r3, #14]
  421f04:	b94b      	cbnz	r3, 421f1a <Startup_Music+0xc6>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  421f06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  421f0a:	4b0f      	ldr	r3, [pc, #60]	; (421f48 <Startup_Music+0xf4>)
  421f0c:	635a      	str	r2, [r3, #52]	; 0x34
  421f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  421f10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  421f14:	4b0c      	ldr	r3, [pc, #48]	; (421f48 <Startup_Music+0xf4>)
  421f16:	635a      	str	r2, [r3, #52]	; 0x34
  421f18:	e7f2      	b.n	421f00 <Startup_Music+0xac>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  421f1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  421f1e:	4b0a      	ldr	r3, [pc, #40]	; (421f48 <Startup_Music+0xf4>)
  421f20:	631a      	str	r2, [r3, #48]	; 0x30
  421f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  421f24:	00423d29 	.word	0x00423d29
  421f28:	00423d9d 	.word	0x00423d9d
  421f2c:	00421db9 	.word	0x00421db9
  421f30:	0042527d 	.word	0x0042527d
  421f34:	400e1000 	.word	0x400e1000
  421f38:	20001588 	.word	0x20001588
  421f3c:	00424491 	.word	0x00424491
  421f40:	00421da5 	.word	0x00421da5
  421f44:	004206a1 	.word	0x004206a1
  421f48:	400e0e00 	.word	0x400e0e00

00421f4c <windup_Music>:
{
  421f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wdt_restart(WDT);
  421f50:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 42200c <windup_Music+0xc0>
  421f54:	4640      	mov	r0, r8
  421f56:	4f28      	ldr	r7, [pc, #160]	; (421ff8 <windup_Music+0xac>)
  421f58:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  421f5a:	4e28      	ldr	r6, [pc, #160]	; (421ffc <windup_Music+0xb0>)
  421f5c:	f44f 6a00 	mov.w	sl, #2048	; 0x800
  421f60:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
	Buzzer_Freq_Set(BUZZER_FREQ_0_5KHZ, DUTY_0_5_KHZ);
  421f64:	2132      	movs	r1, #50	; 0x32
  421f66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  421f6a:	4c25      	ldr	r4, [pc, #148]	; (422000 <windup_Music+0xb4>)
  421f6c:	47a0      	blx	r4
	Amerex_LOGO_RGB(RGB_LED_BLUE);
  421f6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  421f72:	f8df 909c 	ldr.w	r9, [pc, #156]	; 422010 <windup_Music+0xc4>
  421f76:	47c8      	blx	r9
	Delay(100u);
  421f78:	2064      	movs	r0, #100	; 0x64
  421f7a:	4d22      	ldr	r5, [pc, #136]	; (422004 <windup_Music+0xb8>)
  421f7c:	47a8      	blx	r5
	Buzzer_Freq_Set(BUZZER_FREQ_1KHZ, DUTY_1_KHZ);
  421f7e:	2132      	movs	r1, #50	; 0x32
  421f80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  421f84:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  421f86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  421f8a:	6333      	str	r3, [r6, #48]	; 0x30
	Delay(100u);
  421f8c:	2064      	movs	r0, #100	; 0x64
  421f8e:	47a8      	blx	r5
	Amerex_LOGO_RGB(RGB_LED_GREEN);
  421f90:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  421f94:	47c8      	blx	r9
	 	wdt_restart(WDT);
  421f96:	4640      	mov	r0, r8
  421f98:	47b8      	blx	r7
	Buzzer_Freq_Set(BUZZER_FREQ_1_5KHZ, DUTY_1_5_KHZ);
  421f9a:	2132      	movs	r1, #50	; 0x32
  421f9c:	f240 50dc 	movw	r0, #1500	; 0x5dc
  421fa0:	47a0      	blx	r4
  421fa2:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
	Delay(100u);
  421fa6:	2064      	movs	r0, #100	; 0x64
  421fa8:	47a8      	blx	r5
	Buzzer_Freq_Set(BUZZER_FREQ_2KHZ, DUTY_2_KHZ);
  421faa:	2132      	movs	r1, #50	; 0x32
  421fac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  421fb0:	47a0      	blx	r4
  421fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  421fb6:	6333      	str	r3, [r6, #48]	; 0x30
	Delay(100u);
  421fb8:	2064      	movs	r0, #100	; 0x64
  421fba:	47a8      	blx	r5
	Buzzer_Freq_Set(BUZZER_FREQ_2_5KHZ, DUTY_2_5_KHZ);
  421fbc:	2132      	movs	r1, #50	; 0x32
  421fbe:	f640 10c4 	movw	r0, #2500	; 0x9c4
  421fc2:	47a0      	blx	r4
  421fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  421fc8:	6333      	str	r3, [r6, #48]	; 0x30
	Delay(100u);
  421fca:	2064      	movs	r0, #100	; 0x64
  421fcc:	47a8      	blx	r5
	Amerex_LOGO_RGB(RGB_LED_RED);
  421fce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  421fd2:	47c8      	blx	r9
	SysNormal_LED(ON);
  421fd4:	2001      	movs	r0, #1
  421fd6:	4b0c      	ldr	r3, [pc, #48]	; (422008 <windup_Music+0xbc>)
  421fd8:	4798      	blx	r3
	Buzzer_Freq_Set(BUZZER_FREQ_0_5KHZ, DUTY_0_5_KHZ);
  421fda:	2132      	movs	r1, #50	; 0x32
  421fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  421fe0:	47a0      	blx	r4
	Delay(100u);
  421fe2:	2064      	movs	r0, #100	; 0x64
  421fe4:	47a8      	blx	r5
	Buzzer_Freq_Set(BUZZER_FREQ_0_5KHZ, 0);
  421fe6:	2100      	movs	r1, #0
  421fe8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  421fec:	47a0      	blx	r4
		wdt_restart(WDT);
  421fee:	4640      	mov	r0, r8
  421ff0:	47b8      	blx	r7
  421ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  421ff6:	bf00      	nop
  421ff8:	00421da5 	.word	0x00421da5
  421ffc:	400e1000 	.word	0x400e1000
  422000:	00421db9 	.word	0x00421db9
  422004:	0042527d 	.word	0x0042527d
  422008:	00423d9d 	.word	0x00423d9d
  42200c:	400e1850 	.word	0x400e1850
  422010:	00423d29 	.word	0x00423d29

00422014 <Buzzer_Beep>:
/* Function  :  Buzzer beep sound
 * Parameter :  @param1 ON/OFF/Beep
 * Return    :   None
 */
void Buzzer_Beep(uint8_t State)
{
  422014:	b508      	push	{r3, lr}
    if(State == OFF)
  422016:	b1c8      	cbz	r0, 42204c <Buzzer_Beep+0x38>
    {
	    Buzzer_Freq_Set(BUZZER_FREQ_2KHZ, 0);  /* OFF PWM*/
	    buzzer_interval_g_u16 = ON_delay_500ms;
	    buzzer_state = 1;
    }
    else if(State == ON)
  422018:	2801      	cmp	r0, #1
  42201a:	d024      	beq.n	422066 <Buzzer_Beep+0x52>
	    // buzzer_state = 0;
		buzzer_prev_tick_g_u32 	=count_1ms;
    }
    else
    {
	    if((count_1ms - buzzer_prev_tick_g_u32) >= buzzer_interval_g_u16)
  42201c:	4b2d      	ldr	r3, [pc, #180]	; (4220d4 <Buzzer_Beep+0xc0>)
  42201e:	681b      	ldr	r3, [r3, #0]
  422020:	4a2d      	ldr	r2, [pc, #180]	; (4220d8 <Buzzer_Beep+0xc4>)
  422022:	6812      	ldr	r2, [r2, #0]
  422024:	1a9b      	subs	r3, r3, r2
  422026:	4a2d      	ldr	r2, [pc, #180]	; (4220dc <Buzzer_Beep+0xc8>)
  422028:	8812      	ldrh	r2, [r2, #0]
  42202a:	4293      	cmp	r3, r2
  42202c:	d30d      	bcc.n	42204a <Buzzer_Beep+0x36>
	    {
		    buzzer_prev_tick_g_u32 = count_1ms;
  42202e:	4b29      	ldr	r3, [pc, #164]	; (4220d4 <Buzzer_Beep+0xc0>)
  422030:	681a      	ldr	r2, [r3, #0]
  422032:	4b29      	ldr	r3, [pc, #164]	; (4220d8 <Buzzer_Beep+0xc4>)
  422034:	601a      	str	r2, [r3, #0]

		    if(Buzzer_bit == 1 && buzzer_state ==2)
  422036:	4b2a      	ldr	r3, [pc, #168]	; (4220e0 <Buzzer_Beep+0xcc>)
  422038:	681b      	ldr	r3, [r3, #0]
  42203a:	2b01      	cmp	r3, #1
  42203c:	d01d      	beq.n	42207a <Buzzer_Beep+0x66>
			    buzzer_state = 1;
			    trouble_LED_prevtick_g_u32 = count_1ms;
			    //printf("Buzzer_bit %d\n",Buzzer_bit);
		    }

		    else if(buzzer_state == 1)
  42203e:	4b29      	ldr	r3, [pc, #164]	; (4220e4 <Buzzer_Beep+0xd0>)
  422040:	781b      	ldrb	r3, [r3, #0]
  422042:	2b01      	cmp	r3, #1
  422044:	d02c      	beq.n	4220a0 <Buzzer_Beep+0x8c>
		    {
			    buzzer_interval_g_u16 = ON_delay_500ms;
			    buzzer_state = 0;
			    Buzzer_Freq_Set(BUZZER_FREQ_2_5KHZ, Default_buzz_Duty);//amerex_config_data.buzzer_duty
		    }
		    else if(buzzer_state == 0)
  422046:	2b00      	cmp	r3, #0
  422048:	d037      	beq.n	4220ba <Buzzer_Beep+0xa6>
  42204a:	bd08      	pop	{r3, pc}
	    Buzzer_Freq_Set(BUZZER_FREQ_2KHZ, 0);  /* OFF PWM*/
  42204c:	2100      	movs	r1, #0
  42204e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  422052:	4b25      	ldr	r3, [pc, #148]	; (4220e8 <Buzzer_Beep+0xd4>)
  422054:	4798      	blx	r3
	    buzzer_interval_g_u16 = ON_delay_500ms;
  422056:	4b25      	ldr	r3, [pc, #148]	; (4220ec <Buzzer_Beep+0xd8>)
  422058:	881a      	ldrh	r2, [r3, #0]
  42205a:	4b20      	ldr	r3, [pc, #128]	; (4220dc <Buzzer_Beep+0xc8>)
  42205c:	801a      	strh	r2, [r3, #0]
	    buzzer_state = 1;
  42205e:	2201      	movs	r2, #1
  422060:	4b20      	ldr	r3, [pc, #128]	; (4220e4 <Buzzer_Beep+0xd0>)
  422062:	701a      	strb	r2, [r3, #0]
  422064:	bd08      	pop	{r3, pc}
	    Buzzer_Freq_Set(BUZZER_FREQ_2_5KHZ, Default_buzz_Duty);//  /* ON PWM*/  amerex_config_data.buzzer_duty
  422066:	2132      	movs	r1, #50	; 0x32
  422068:	f640 10c4 	movw	r0, #2500	; 0x9c4
  42206c:	4b1e      	ldr	r3, [pc, #120]	; (4220e8 <Buzzer_Beep+0xd4>)
  42206e:	4798      	blx	r3
		buzzer_prev_tick_g_u32 	=count_1ms;
  422070:	4b18      	ldr	r3, [pc, #96]	; (4220d4 <Buzzer_Beep+0xc0>)
  422072:	681a      	ldr	r2, [r3, #0]
  422074:	4b18      	ldr	r3, [pc, #96]	; (4220d8 <Buzzer_Beep+0xc4>)
  422076:	601a      	str	r2, [r3, #0]
  422078:	bd08      	pop	{r3, pc}
		    if(Buzzer_bit == 1 && buzzer_state ==2)
  42207a:	4b1a      	ldr	r3, [pc, #104]	; (4220e4 <Buzzer_Beep+0xd0>)
  42207c:	781b      	ldrb	r3, [r3, #0]
  42207e:	2b02      	cmp	r3, #2
  422080:	d1dd      	bne.n	42203e <Buzzer_Beep+0x2a>
			    buzzer_interval_g_u16 = OFF_delay_10s;
  422082:	4b1b      	ldr	r3, [pc, #108]	; (4220f0 <Buzzer_Beep+0xdc>)
  422084:	881a      	ldrh	r2, [r3, #0]
  422086:	4b15      	ldr	r3, [pc, #84]	; (4220dc <Buzzer_Beep+0xc8>)
  422088:	801a      	strh	r2, [r3, #0]
			    Buzzer_bit = 0;
  42208a:	2200      	movs	r2, #0
  42208c:	4b14      	ldr	r3, [pc, #80]	; (4220e0 <Buzzer_Beep+0xcc>)
  42208e:	601a      	str	r2, [r3, #0]
			    buzzer_state = 1;
  422090:	2201      	movs	r2, #1
  422092:	4b14      	ldr	r3, [pc, #80]	; (4220e4 <Buzzer_Beep+0xd0>)
  422094:	701a      	strb	r2, [r3, #0]
			    trouble_LED_prevtick_g_u32 = count_1ms;
  422096:	4b0f      	ldr	r3, [pc, #60]	; (4220d4 <Buzzer_Beep+0xc0>)
  422098:	681a      	ldr	r2, [r3, #0]
  42209a:	4b16      	ldr	r3, [pc, #88]	; (4220f4 <Buzzer_Beep+0xe0>)
  42209c:	601a      	str	r2, [r3, #0]
  42209e:	bd08      	pop	{r3, pc}
			    buzzer_interval_g_u16 = ON_delay_500ms;
  4220a0:	4b12      	ldr	r3, [pc, #72]	; (4220ec <Buzzer_Beep+0xd8>)
  4220a2:	881a      	ldrh	r2, [r3, #0]
  4220a4:	4b0d      	ldr	r3, [pc, #52]	; (4220dc <Buzzer_Beep+0xc8>)
  4220a6:	801a      	strh	r2, [r3, #0]
			    buzzer_state = 0;
  4220a8:	2200      	movs	r2, #0
  4220aa:	4b0e      	ldr	r3, [pc, #56]	; (4220e4 <Buzzer_Beep+0xd0>)
  4220ac:	701a      	strb	r2, [r3, #0]
			    Buzzer_Freq_Set(BUZZER_FREQ_2_5KHZ, Default_buzz_Duty);//amerex_config_data.buzzer_duty
  4220ae:	2132      	movs	r1, #50	; 0x32
  4220b0:	f640 10c4 	movw	r0, #2500	; 0x9c4
  4220b4:	4b0c      	ldr	r3, [pc, #48]	; (4220e8 <Buzzer_Beep+0xd4>)
  4220b6:	4798      	blx	r3
  4220b8:	bd08      	pop	{r3, pc}
		    {
			    buzzer_interval_g_u16 = 1u;
  4220ba:	2201      	movs	r2, #1
  4220bc:	4b07      	ldr	r3, [pc, #28]	; (4220dc <Buzzer_Beep+0xc8>)
  4220be:	801a      	strh	r2, [r3, #0]
			    buzzer_state = 2;
  4220c0:	2202      	movs	r2, #2
  4220c2:	4b08      	ldr	r3, [pc, #32]	; (4220e4 <Buzzer_Beep+0xd0>)
  4220c4:	701a      	strb	r2, [r3, #0]
			    Buzzer_Freq_Set(BUZZER_FREQ_2_5KHZ, 0);
  4220c6:	2100      	movs	r1, #0
  4220c8:	f640 10c4 	movw	r0, #2500	; 0x9c4
  4220cc:	4b06      	ldr	r3, [pc, #24]	; (4220e8 <Buzzer_Beep+0xd4>)
  4220ce:	4798      	blx	r3
		    }

	    }

    }
}
  4220d0:	e7bb      	b.n	42204a <Buzzer_Beep+0x36>
  4220d2:	bf00      	nop
  4220d4:	200012f8 	.word	0x200012f8
  4220d8:	2000108c 	.word	0x2000108c
  4220dc:	20000092 	.word	0x20000092
  4220e0:	20001328 	.word	0x20001328
  4220e4:	20001090 	.word	0x20001090
  4220e8:	00421db9 	.word	0x00421db9
  4220ec:	0042f4c8 	.word	0x0042f4c8
  4220f0:	0042f4c6 	.word	0x0042f4c6
  4220f4:	20001344 	.word	0x20001344

004220f8 <Buzzer_indication>:
 * Parameter :  Set frequency,set duty cycle
 * Return    :   None
 */

void Buzzer_indication(void)
{
  4220f8:	b510      	push	{r4, lr}
    static uint8_t prev_hd_val_sl_b = 0u;
    static uint8_t hd_val_sl_b = 0u;
	//static uint8_t Backup_Trouble = 0u;

   if(any_of_trouble_g_b && !fire_happen_g_b && (!alarm_sil_flag_g_b) )	//   && (!timer_30min_sil_g_b)
  4220fa:	4b33      	ldr	r3, [pc, #204]	; (4221c8 <Buzzer_indication+0xd0>)
  4220fc:	781b      	ldrb	r3, [r3, #0]
  4220fe:	b163      	cbz	r3, 42211a <Buzzer_indication+0x22>
  422100:	4b32      	ldr	r3, [pc, #200]	; (4221cc <Buzzer_indication+0xd4>)
  422102:	781b      	ldrb	r3, [r3, #0]
  422104:	b9f3      	cbnz	r3, 422144 <Buzzer_indication+0x4c>
  422106:	4b32      	ldr	r3, [pc, #200]	; (4221d0 <Buzzer_indication+0xd8>)
  422108:	781b      	ldrb	r3, [r3, #0]
  42210a:	b113      	cbz	r3, 422112 <Buzzer_indication+0x1a>
    {
        Buzzer_Beep(BEEP);
    }
    else if( Fire_Rst_vehicle_start_bit!=2u && fire_happen_g_b && (!alarm_sil_flag_g_b) )//  && (!timer_30min_sil_g_b)
  42210c:	4b31      	ldr	r3, [pc, #196]	; (4221d4 <Buzzer_indication+0xdc>)
  42210e:	781b      	ldrb	r3, [r3, #0]
  422110:	e021      	b.n	422156 <Buzzer_indication+0x5e>
        Buzzer_Beep(BEEP);
  422112:	2003      	movs	r0, #3
  422114:	4b30      	ldr	r3, [pc, #192]	; (4221d8 <Buzzer_indication+0xe0>)
  422116:	4798      	blx	r3
  422118:	e020      	b.n	42215c <Buzzer_indication+0x64>
    else if( Fire_Rst_vehicle_start_bit!=2u && fire_happen_g_b && (!alarm_sil_flag_g_b) )//  && (!timer_30min_sil_g_b)
  42211a:	4b2e      	ldr	r3, [pc, #184]	; (4221d4 <Buzzer_indication+0xdc>)
  42211c:	781b      	ldrb	r3, [r3, #0]
  42211e:	b2db      	uxtb	r3, r3
  422120:	2b02      	cmp	r3, #2
  422122:	d018      	beq.n	422156 <Buzzer_indication+0x5e>
  422124:	4b29      	ldr	r3, [pc, #164]	; (4221cc <Buzzer_indication+0xd4>)
  422126:	781b      	ldrb	r3, [r3, #0]
  422128:	b1ab      	cbz	r3, 422156 <Buzzer_indication+0x5e>
  42212a:	e010      	b.n	42214e <Buzzer_indication+0x56>
    {
        Buzzer_Beep(ON);
  42212c:	2001      	movs	r0, #1
  42212e:	4b2a      	ldr	r3, [pc, #168]	; (4221d8 <Buzzer_indication+0xe0>)
  422130:	4798      	blx	r3
  422132:	e013      	b.n	42215c <Buzzer_indication+0x64>
      /* if fire occurred and user silence the  Buzzer by alarm silence button after some time in another heat detector fire occurred re sound the buzzer*/
if(fire_happen_g_b && Fire_Rst_vehicle_start_bit != 2u)
{
   if(hd1_trouble_g_u8 == 1u)
   {
       hd1_fire_sl_b = 1u;
  422134:	2201      	movs	r2, #1
  422136:	4b29      	ldr	r3, [pc, #164]	; (4221dc <Buzzer_indication+0xe4>)
  422138:	701a      	strb	r2, [r3, #0]
  42213a:	e01c      	b.n	422176 <Buzzer_indication+0x7e>
   }
   if(hd2_trouble_g_u8 == 1u)
   {
       hd2_fire_sl_b = 1u;
  42213c:	2201      	movs	r2, #1
  42213e:	4b28      	ldr	r3, [pc, #160]	; (4221e0 <Buzzer_indication+0xe8>)
  422140:	701a      	strb	r2, [r3, #0]
  422142:	e01c      	b.n	42217e <Buzzer_indication+0x86>
    else if( Fire_Rst_vehicle_start_bit!=2u && fire_happen_g_b && (!alarm_sil_flag_g_b) )//  && (!timer_30min_sil_g_b)
  422144:	4b23      	ldr	r3, [pc, #140]	; (4221d4 <Buzzer_indication+0xdc>)
  422146:	781b      	ldrb	r3, [r3, #0]
  422148:	b2db      	uxtb	r3, r3
  42214a:	2b02      	cmp	r3, #2
  42214c:	d003      	beq.n	422156 <Buzzer_indication+0x5e>
  42214e:	4b20      	ldr	r3, [pc, #128]	; (4221d0 <Buzzer_indication+0xd8>)
  422150:	781b      	ldrb	r3, [r3, #0]
  422152:	2b00      	cmp	r3, #0
  422154:	d0ea      	beq.n	42212c <Buzzer_indication+0x34>
        Buzzer_Beep(OFF);
  422156:	2000      	movs	r0, #0
  422158:	4b1f      	ldr	r3, [pc, #124]	; (4221d8 <Buzzer_indication+0xe0>)
  42215a:	4798      	blx	r3
if(fire_happen_g_b && Fire_Rst_vehicle_start_bit != 2u)
  42215c:	4b1b      	ldr	r3, [pc, #108]	; (4221cc <Buzzer_indication+0xd4>)
  42215e:	781b      	ldrb	r3, [r3, #0]
  422160:	2b00      	cmp	r3, #0
  422162:	d02f      	beq.n	4221c4 <Buzzer_indication+0xcc>
  422164:	4b1b      	ldr	r3, [pc, #108]	; (4221d4 <Buzzer_indication+0xdc>)
  422166:	781b      	ldrb	r3, [r3, #0]
  422168:	b2db      	uxtb	r3, r3
  42216a:	2b02      	cmp	r3, #2
  42216c:	d02a      	beq.n	4221c4 <Buzzer_indication+0xcc>
   if(hd1_trouble_g_u8 == 1u)
  42216e:	4b1d      	ldr	r3, [pc, #116]	; (4221e4 <Buzzer_indication+0xec>)
  422170:	781b      	ldrb	r3, [r3, #0]
  422172:	2b01      	cmp	r3, #1
  422174:	d0de      	beq.n	422134 <Buzzer_indication+0x3c>
   if(hd2_trouble_g_u8 == 1u)
  422176:	4b1c      	ldr	r3, [pc, #112]	; (4221e8 <Buzzer_indication+0xf0>)
  422178:	781b      	ldrb	r3, [r3, #0]
  42217a:	2b01      	cmp	r3, #1
  42217c:	d0de      	beq.n	42213c <Buzzer_indication+0x44>
   }

   hd_val_sl_b = hd1_fire_sl_b + hd2_fire_sl_b + manual_sw_trbl_silence_b;
  42217e:	4b17      	ldr	r3, [pc, #92]	; (4221dc <Buzzer_indication+0xe4>)
  422180:	781b      	ldrb	r3, [r3, #0]
  422182:	4a17      	ldr	r2, [pc, #92]	; (4221e0 <Buzzer_indication+0xe8>)
  422184:	7812      	ldrb	r2, [r2, #0]
  422186:	4413      	add	r3, r2
  422188:	4a18      	ldr	r2, [pc, #96]	; (4221ec <Buzzer_indication+0xf4>)
  42218a:	7812      	ldrb	r2, [r2, #0]
  42218c:	4413      	add	r3, r2
  42218e:	b2db      	uxtb	r3, r3
  422190:	4a17      	ldr	r2, [pc, #92]	; (4221f0 <Buzzer_indication+0xf8>)
  422192:	7013      	strb	r3, [r2, #0]

   if(hd_val_sl_b != prev_hd_val_sl_b)
  422194:	4a17      	ldr	r2, [pc, #92]	; (4221f4 <Buzzer_indication+0xfc>)
  422196:	7812      	ldrb	r2, [r2, #0]
  422198:	429a      	cmp	r2, r3
  42219a:	d00e      	beq.n	4221ba <Buzzer_indication+0xc2>
   {
      alarm_sil_flag_g_b = 0u;
  42219c:	2400      	movs	r4, #0
  42219e:	4b0c      	ldr	r3, [pc, #48]	; (4221d0 <Buzzer_indication+0xd8>)
  4221a0:	701c      	strb	r4, [r3, #0]
	   tc_stop(TC0,0);
  4221a2:	4621      	mov	r1, r4
  4221a4:	4814      	ldr	r0, [pc, #80]	; (4221f8 <Buzzer_indication+0x100>)
  4221a6:	4b15      	ldr	r3, [pc, #84]	; (4221fc <Buzzer_indication+0x104>)
  4221a8:	4798      	blx	r3
	   Timer_cnt_msec= 0u;
  4221aa:	4b15      	ldr	r3, [pc, #84]	; (422200 <Buzzer_indication+0x108>)
  4221ac:	701c      	strb	r4, [r3, #0]
	   Timer_cnt_sec= 0u;
  4221ae:	4b15      	ldr	r3, [pc, #84]	; (422204 <Buzzer_indication+0x10c>)
  4221b0:	701c      	strb	r4, [r3, #0]
	   //Silence_Timer_cnt=0;
       //timer_30min_sil_g_b = 0u;
      alarm_sil_prev_tick_g_u32 = count_1ms;
  4221b2:	4b15      	ldr	r3, [pc, #84]	; (422208 <Buzzer_indication+0x110>)
  4221b4:	681a      	ldr	r2, [r3, #0]
  4221b6:	4b15      	ldr	r3, [pc, #84]	; (42220c <Buzzer_indication+0x114>)
  4221b8:	601a      	str	r2, [r3, #0]
   }
   prev_hd_val_sl_b = hd_val_sl_b;
  4221ba:	4b0d      	ldr	r3, [pc, #52]	; (4221f0 <Buzzer_indication+0xf8>)
  4221bc:	781a      	ldrb	r2, [r3, #0]
  4221be:	4b0d      	ldr	r3, [pc, #52]	; (4221f4 <Buzzer_indication+0xfc>)
  4221c0:	701a      	strb	r2, [r3, #0]





}
  4221c2:	bd10      	pop	{r4, pc}
  4221c4:	bd10      	pop	{r4, pc}
  4221c6:	bf00      	nop
  4221c8:	2000138c 	.word	0x2000138c
  4221cc:	20000b08 	.word	0x20000b08
  4221d0:	20001360 	.word	0x20001360
  4221d4:	20001358 	.word	0x20001358
  4221d8:	00422015 	.word	0x00422015
  4221dc:	20001091 	.word	0x20001091
  4221e0:	20001092 	.word	0x20001092
  4221e4:	20000b0c 	.word	0x20000b0c
  4221e8:	20000b10 	.word	0x20000b10
  4221ec:	20001372 	.word	0x20001372
  4221f0:	20001093 	.word	0x20001093
  4221f4:	20001098 	.word	0x20001098
  4221f8:	40090000 	.word	0x40090000
  4221fc:	00421b1f 	.word	0x00421b1f
  422200:	200012f3 	.word	0x200012f3
  422204:	200012f4 	.word	0x200012f4
  422208:	200012f8 	.word	0x200012f8
  42220c:	200010c8 	.word	0x200010c8

00422210 <Small_Beep>:
/* Function  :  Small  beep
 * Parameter :  None
 * Return    :  None
 */
void Small_Beep(uint32_t delay)
{
  422210:	b538      	push	{r3, r4, r5, lr}
  422212:	4605      	mov	r5, r0
    Buzzer_Beep(ON);
  422214:	2001      	movs	r0, #1
  422216:	4c04      	ldr	r4, [pc, #16]	; (422228 <Small_Beep+0x18>)
  422218:	47a0      	blx	r4
    Delay(delay);
  42221a:	4628      	mov	r0, r5
  42221c:	4b03      	ldr	r3, [pc, #12]	; (42222c <Small_Beep+0x1c>)
  42221e:	4798      	blx	r3
    Buzzer_Beep(OFF);
  422220:	2000      	movs	r0, #0
  422222:	47a0      	blx	r4
  422224:	bd38      	pop	{r3, r4, r5, pc}
  422226:	bf00      	nop
  422228:	00422015 	.word	0x00422015
  42222c:	0042527d 	.word	0x0042527d

00422230 <reset_mailbox_conf>:


//////////////////////////////////////////////////////
  void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
 {
	 p_mailbox->ul_mb_idx = 0;
  422230:	2300      	movs	r3, #0
  422232:	6003      	str	r3, [r0, #0]
	 p_mailbox->uc_obj_type = 0;
  422234:	7103      	strb	r3, [r0, #4]
	 p_mailbox->uc_id_ver = 0;
  422236:	7143      	strb	r3, [r0, #5]
	 p_mailbox->uc_length = 0;
  422238:	7183      	strb	r3, [r0, #6]
	 p_mailbox->uc_tx_prio = 0;
  42223a:	71c3      	strb	r3, [r0, #7]
	 p_mailbox->ul_status = 0;
  42223c:	6083      	str	r3, [r0, #8]
	 p_mailbox->ul_id_msk = 0;
  42223e:	60c3      	str	r3, [r0, #12]
	 p_mailbox->ul_id = 0;
  422240:	6103      	str	r3, [r0, #16]
	 p_mailbox->ul_fid = 0;
  422242:	6143      	str	r3, [r0, #20]
	 p_mailbox->ul_datal = 0;
  422244:	6183      	str	r3, [r0, #24]
	 p_mailbox->ul_datah = 0;
  422246:	61c3      	str	r3, [r0, #28]
  422248:	4770      	bx	lr
	...

0042224c <j1939_data_read>:



void j1939_data_read()
{
	memset(j1939_pgn_data.data, 0xFF,sizeof(j1939_pgn_data.data)); //this is for reset
  42224c:	4b19      	ldr	r3, [pc, #100]	; (4222b4 <j1939_data_read+0x68>)
  42224e:	f04f 32ff 	mov.w	r2, #4294967295
  422252:	605a      	str	r2, [r3, #4]
  422254:	60da      	str	r2, [r3, #12]
  422256:	611a      	str	r2, [r3, #16]
  422258:	615a      	str	r2, [r3, #20]
  42225a:	761a      	strb	r2, [r3, #24]
	//the all valuse to 0xFF so unavaiable value automatically filled by 0xFF
//	hd1_data = ((hd1_measured_g_u16)/1000);// / 1000); // get heat detector 1 data

	//j1939_pgn_data.data[0] =0x01;  //sequence_1

	j1939_pgn_data.data[0] = (uint8_t)((hd1_measured_g_u16 >> 8) & 0xFF); //SPN number 10941 heat detector 1 data
  42225c:	4a16      	ldr	r2, [pc, #88]	; (4222b8 <j1939_data_read+0x6c>)
  42225e:	8812      	ldrh	r2, [r2, #0]
  422260:	0a11      	lsrs	r1, r2, #8
  422262:	f803 1901 	strb.w	r1, [r3], #-1
	j1939_pgn_data.data[1] = (uint8_t)(hd1_measured_g_u16 & 0xFF); //SPN number 10941
  422266:	709a      	strb	r2, [r3, #2]

//	hd2_data = ((hd2_measured_g_u16)/1000); //get heat detector 2 data
	j1939_pgn_data.data[2] = (uint8_t)((hd2_measured_g_u16 >> 8) & 0xFF); //SPN number 10942 heat detector 2 data;
  422268:	4a14      	ldr	r2, [pc, #80]	; (4222bc <j1939_data_read+0x70>)
  42226a:	8812      	ldrh	r2, [r2, #0]
  42226c:	0a11      	lsrs	r1, r2, #8
  42226e:	70d9      	strb	r1, [r3, #3]
	j1939_pgn_data.data[3] = (uint8_t)(hd2_measured_g_u16 & 0xFF); //SPN number 10942;
  422270:	711a      	strb	r2, [r3, #4]

	if(pres_sw_trbl_g_b)
  422272:	4b13      	ldr	r3, [pc, #76]	; (4222c0 <j1939_data_read+0x74>)
  422274:	781b      	ldrb	r3, [r3, #0]
  422276:	b9bb      	cbnz	r3, 4222a8 <j1939_data_read+0x5c>
		j1939_pgn_data.data[5] = 0x01; ////SPN number 10945 pressure switch digital data if Switch open 1
	}
	else
	{
		//j1939_pgn_data.data[8] = 0x02; //sequence_2
		j1939_pgn_data.data[4] = 0x00; //sequence_2
  422278:	4b12      	ldr	r3, [pc, #72]	; (4222c4 <j1939_data_read+0x78>)
  42227a:	2200      	movs	r2, #0
  42227c:	715a      	strb	r2, [r3, #5]
		j1939_pgn_data.data[5] = 0x00; //SPN number 10945 pressure switch digital data if Switch close 0
  42227e:	719a      	strb	r2, [r3, #6]
	}


	j1939_pgn_data.data[7] = (uint8_t)((super_capVolt_g_u16 >> 8) & 0xFF) ; //SPN number 10947 primary power voltage
  422280:	4b11      	ldr	r3, [pc, #68]	; (4222c8 <j1939_data_read+0x7c>)
  422282:	881a      	ldrh	r2, [r3, #0]
  422284:	4b0f      	ldr	r3, [pc, #60]	; (4222c4 <j1939_data_read+0x78>)
  422286:	0a11      	lsrs	r1, r2, #8
  422288:	7219      	strb	r1, [r3, #8]
	j1939_pgn_data.data[8] = (uint8_t)(super_capVolt_g_u16 & 0xFF); //SPN number 10947 primary power voltage
  42228a:	725a      	strb	r2, [r3, #9]


	  // j1939_pgn_data.data[8] = 0x02; //sequence_2
	//primary_pwr_data = (primary_pwr_vol_g_u16 /1000); //get primary power voltage
	j1939_pgn_data.data[9] = (uint8_t)((primary_pwr_vol_g_u16 >> 8) & 0xFF) ; //SPN number 10947 primary power voltage
  42228c:	4a0f      	ldr	r2, [pc, #60]	; (4222cc <j1939_data_read+0x80>)
  42228e:	6812      	ldr	r2, [r2, #0]
  422290:	0a11      	lsrs	r1, r2, #8
  422292:	7299      	strb	r1, [r3, #10]
	j1939_pgn_data.data[10] = (uint8_t)(primary_pwr_vol_g_u16 & 0xFF); //SPN number 10947 primary power voltage
  422294:	72da      	strb	r2, [r3, #11]

	//j1939_pgn_data.data[16] = 0x03; //sequence_2

	//secondary_pwr_data = ((sec_pwr_vol_g_u16) / 1000); //get secondary power voltage
	j1939_pgn_data.data[11] =  (uint8_t)((sec_pwr_vol_g_u16 >> 8) & 0xFF) ; //SPN number 10947 secondary power voltage MSB
  422296:	4a0e      	ldr	r2, [pc, #56]	; (4222d0 <j1939_data_read+0x84>)
  422298:	8812      	ldrh	r2, [r2, #0]
  42229a:	0a11      	lsrs	r1, r2, #8
  42229c:	7319      	strb	r1, [r3, #12]
	j1939_pgn_data.data[12] =  (uint8_t)(sec_pwr_vol_g_u16 & 0xFF); //SPN number 10947 secondary power voltage LSB
  42229e:	735a      	strb	r2, [r3, #13]
	j1939_pgn_data.data[13] = Trouble_status; //sequence_2
  4222a0:	4a0c      	ldr	r2, [pc, #48]	; (4222d4 <j1939_data_read+0x88>)
  4222a2:	7812      	ldrb	r2, [r2, #0]
  4222a4:	739a      	strb	r2, [r3, #14]
  4222a6:	4770      	bx	lr
		j1939_pgn_data.data[4] = 0x00; //SPN number 10945 pressure switch digital data if Switch open 1
  4222a8:	4b06      	ldr	r3, [pc, #24]	; (4222c4 <j1939_data_read+0x78>)
  4222aa:	2200      	movs	r2, #0
  4222ac:	715a      	strb	r2, [r3, #5]
		j1939_pgn_data.data[5] = 0x01; ////SPN number 10945 pressure switch digital data if Switch open 1
  4222ae:	2201      	movs	r2, #1
  4222b0:	719a      	strb	r2, [r3, #6]
  4222b2:	e7e5      	b.n	422280 <j1939_data_read+0x34>
  4222b4:	20001629 	.word	0x20001629
  4222b8:	20000b0a 	.word	0x20000b0a
  4222bc:	20000b0e 	.word	0x20000b0e
  4222c0:	20001373 	.word	0x20001373
  4222c4:	20001628 	.word	0x20001628
  4222c8:	2000106c 	.word	0x2000106c
  4222cc:	20000b54 	.word	0x20000b54
  4222d0:	2000106a 	.word	0x2000106a
  4222d4:	200016d4 	.word	0x200016d4

004222d8 <trnsfer_protocol_connection>:
{
  4222d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4222da:	4607      	mov	r7, r0
		TPC.TCPCON[i]    = temp_data[i];
  4222dc:	4820      	ldr	r0, [pc, #128]	; (422360 <trnsfer_protocol_connection+0x88>)
  4222de:	2420      	movs	r4, #32
  4222e0:	7004      	strb	r4, [r0, #0]
	temp_data[1] = (uint8_t)((data_byte >> 8) & 0xFF);
  4222e2:	0a0c      	lsrs	r4, r1, #8
  4222e4:	7044      	strb	r4, [r0, #1]
	temp_data[2] = (uint8_t)(data_byte & 0xFF);
  4222e6:	7081      	strb	r1, [r0, #2]
		TPC.TCPCON[i+3]  = temp_data[i+3];
  4222e8:	70c2      	strb	r2, [r0, #3]
		TPC.TCPCON[i]    = temp_data[i];
  4222ea:	22ff      	movs	r2, #255	; 0xff
  4222ec:	7102      	strb	r2, [r0, #4]
	temp_data[5] = (uint8_t)((pgn_number >> 16) & 0xFF); // application specific PGN number
  4222ee:	0c1a      	lsrs	r2, r3, #16
  4222f0:	7142      	strb	r2, [r0, #5]
	temp_data[6] = (uint8_t)((pgn_number >> 8) & 0xFF);
  4222f2:	0a1a      	lsrs	r2, r3, #8
  4222f4:	7182      	strb	r2, [r0, #6]
	temp_data[7] = (uint8_t)(pgn_number & 0xFF);
  4222f6:	71c3      	strb	r3, [r0, #7]
					if (can_get_status(CAN0) & CAN_SR_TBSY) {
  4222f8:	481a      	ldr	r0, [pc, #104]	; (422364 <trnsfer_protocol_connection+0x8c>)
  4222fa:	4b1b      	ldr	r3, [pc, #108]	; (422368 <trnsfer_protocol_connection+0x90>)
  4222fc:	4798      	blx	r3
  4222fe:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  422302:	d125      	bne.n	422350 <trnsfer_protocol_connection+0x78>
	   				tx_mailbox.ul_mb_idx = CAN_COMM_TXMB_ID;
  422304:	4c19      	ldr	r4, [pc, #100]	; (42236c <trnsfer_protocol_connection+0x94>)
  422306:	2605      	movs	r6, #5
  422308:	6026      	str	r6, [r4, #0]
	   				tx_mailbox.uc_obj_type = CAN_MB_TX_MODE;
  42230a:	2303      	movs	r3, #3
  42230c:	7123      	strb	r3, [r4, #4]
	   				tx_mailbox.uc_tx_prio = CAN_TX_PRIO;
  42230e:	230f      	movs	r3, #15
  422310:	71e3      	strb	r3, [r4, #7]
	   				tx_mailbox.uc_id_ver = 1;
  422312:	2301      	movs	r3, #1
  422314:	7163      	strb	r3, [r4, #5]
	   				tx_mailbox.ul_id_msk = 0;
  422316:	2300      	movs	r3, #0
  422318:	60e3      	str	r3, [r4, #12]
	   				can_mailbox_init(CAN0, &tx_mailbox);
  42231a:	4d12      	ldr	r5, [pc, #72]	; (422364 <trnsfer_protocol_connection+0x8c>)
  42231c:	4621      	mov	r1, r4
  42231e:	4628      	mov	r0, r5
  422320:	4b13      	ldr	r3, [pc, #76]	; (422370 <trnsfer_protocol_connection+0x98>)
  422322:	4798      	blx	r3
	   				tx_mailbox.ul_id =  identifier;//j1939_pgn(TP_DATA_PGN);//CAN_MID_MIDvA(7);
  422324:	6127      	str	r7, [r4, #16]
	   				tx_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
  422326:	2308      	movs	r3, #8
  422328:	71a3      	strb	r3, [r4, #6]
	   				tx_mailbox.ul_datah = TPC.GET_TPC.TPCh_1;
  42232a:	4b0d      	ldr	r3, [pc, #52]	; (422360 <trnsfer_protocol_connection+0x88>)
  42232c:	685a      	ldr	r2, [r3, #4]
  42232e:	61e2      	str	r2, [r4, #28]
	   				tx_mailbox.ul_datal = TPC.GET_TPC.TPCl_1;
  422330:	681b      	ldr	r3, [r3, #0]
  422332:	61a3      	str	r3, [r4, #24]
	   				can_mailbox_write(CAN0, &tx_mailbox);
  422334:	4621      	mov	r1, r4
  422336:	4628      	mov	r0, r5
  422338:	4b0e      	ldr	r3, [pc, #56]	; (422374 <trnsfer_protocol_connection+0x9c>)
  42233a:	4798      	blx	r3
	   				can_global_send_transfer_cmd(CAN0, CAN_TCR_MB1);
  42233c:	2102      	movs	r1, #2
  42233e:	4628      	mov	r0, r5
  422340:	4b0d      	ldr	r3, [pc, #52]	; (422378 <trnsfer_protocol_connection+0xa0>)
  422342:	4798      	blx	r3
 					 j1939_data_read();
  422344:	4b0d      	ldr	r3, [pc, #52]	; (42237c <trnsfer_protocol_connection+0xa4>)
  422346:	4798      	blx	r3
					  Delay(5);
  422348:	4630      	mov	r0, r6
  42234a:	4b0d      	ldr	r3, [pc, #52]	; (422380 <trnsfer_protocol_connection+0xa8>)
  42234c:	4798      	blx	r3
  42234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						tx_mailbox.ul_mb_idx = CAN_COMM_TXMB_ID;
  422350:	4906      	ldr	r1, [pc, #24]	; (42236c <trnsfer_protocol_connection+0x94>)
  422352:	2305      	movs	r3, #5
  422354:	600b      	str	r3, [r1, #0]
						can_mailbox_init(CAN0, &tx_mailbox);
  422356:	4803      	ldr	r0, [pc, #12]	; (422364 <trnsfer_protocol_connection+0x8c>)
  422358:	4b05      	ldr	r3, [pc, #20]	; (422370 <trnsfer_protocol_connection+0x98>)
  42235a:	4798      	blx	r3
  42235c:	e7d2      	b.n	422304 <trnsfer_protocol_connection+0x2c>
  42235e:	bf00      	nop
  422360:	2000157c 	.word	0x2000157c
  422364:	40010000 	.word	0x40010000
  422368:	00421685 	.word	0x00421685
  42236c:	20001644 	.word	0x20001644
  422370:	004216b7 	.word	0x004216b7
  422374:	00421791 	.word	0x00421791
  422378:	00421689 	.word	0x00421689
  42237c:	0042224d 	.word	0x0042224d
  422380:	0042527d 	.word	0x0042527d

00422384 <j1939_data_transfer>:
 *
 *  \param p_mailbox Pointer to mailbox configure structure.
 */

void j1939_data_transfer(uint32_t identifier,uint8_t Store_Send_Data)
{
  422384:	b570      	push	{r4, r5, r6, lr}
  422386:	b082      	sub	sp, #8
  422388:	4605      	mov	r5, r0
	uint8_t data_tmp1[8] = {0};
  42238a:	2300      	movs	r3, #0
  42238c:	9300      	str	r3, [sp, #0]
  42238e:	9301      	str	r3, [sp, #4]

 if(!Store_Send_Data){
  422390:	460e      	mov	r6, r1
  422392:	2900      	cmp	r1, #0
  422394:	d17b      	bne.n	42248e <j1939_data_transfer+0x10a>
	if(!j1939_pgn_data.sequence_num)
  422396:	4b48      	ldr	r3, [pc, #288]	; (4224b8 <j1939_data_transfer+0x134>)
  422398:	781b      	ldrb	r3, [r3, #0]
  42239a:	b983      	cbnz	r3, 4223be <j1939_data_transfer+0x3a>
	{
		j1939_pgn_data.sequence_num = 1;
  42239c:	2201      	movs	r2, #1
  42239e:	4b46      	ldr	r3, [pc, #280]	; (4224b8 <j1939_data_transfer+0x134>)
  4223a0:	701a      	strb	r2, [r3, #0]
	}
	if(j1939_pgn_data.sequence_num == 1)
	{
		data_tmp1[0] = j1939_pgn_data.sequence_num;
  4223a2:	2301      	movs	r3, #1
  4223a4:	f88d 3000 	strb.w	r3, [sp]
		memcpy(&data_tmp1[1], &j1939_pgn_data.data[0],7);
  4223a8:	4b44      	ldr	r3, [pc, #272]	; (4224bc <j1939_data_transfer+0x138>)
  4223aa:	681a      	ldr	r2, [r3, #0]
  4223ac:	f8cd 2001 	str.w	r2, [sp, #1]
  4223b0:	889a      	ldrh	r2, [r3, #4]
  4223b2:	799b      	ldrb	r3, [r3, #6]
  4223b4:	f8ad 2005 	strh.w	r2, [sp, #5]
  4223b8:	f88d 3007 	strb.w	r3, [sp, #7]
  4223bc:	e005      	b.n	4223ca <j1939_data_transfer+0x46>
	if(j1939_pgn_data.sequence_num == 1)
  4223be:	2b01      	cmp	r3, #1
  4223c0:	d0ef      	beq.n	4223a2 <j1939_data_transfer+0x1e>
	}
	else if(j1939_pgn_data.sequence_num == 2)
  4223c2:	2b02      	cmp	r3, #2
  4223c4:	d049      	beq.n	42245a <j1939_data_transfer+0xd6>
	{
		data_tmp1[0] = j1939_pgn_data.sequence_num;
		memcpy(&data_tmp1[1], &j1939_pgn_data.data[7],7);
	}
	else if(j1939_pgn_data.sequence_num == 3)
  4223c6:	2b03      	cmp	r3, #3
  4223c8:	d054      	beq.n	422474 <j1939_data_transfer+0xf0>



	  	for(int i=0;i<=4;i+=4)
	  	{
		  	MeterData.MtrRawData[i]    = data_tmp1[i];
  4223ca:	4b3d      	ldr	r3, [pc, #244]	; (4224c0 <j1939_data_transfer+0x13c>)
  4223cc:	f89d 2000 	ldrb.w	r2, [sp]
  4223d0:	701a      	strb	r2, [r3, #0]
		  	MeterData.MtrRawData[i+1]  = data_tmp1[i+1];
  4223d2:	f89d 2001 	ldrb.w	r2, [sp, #1]
  4223d6:	705a      	strb	r2, [r3, #1]
		  	MeterData.MtrRawData[i+2]  = data_tmp1[i+2];
  4223d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4223dc:	709a      	strb	r2, [r3, #2]
		  	MeterData.MtrRawData[i+3]  = data_tmp1[i+3];
  4223de:	f89d 2003 	ldrb.w	r2, [sp, #3]
  4223e2:	70da      	strb	r2, [r3, #3]
		  	MeterData.MtrRawData[i]    = data_tmp1[i];
  4223e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4223e8:	711a      	strb	r2, [r3, #4]
		  	MeterData.MtrRawData[i+1]  = data_tmp1[i+1];
  4223ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
  4223ee:	715a      	strb	r2, [r3, #5]
		  	MeterData.MtrRawData[i+2]  = data_tmp1[i+2];
  4223f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
  4223f4:	719a      	strb	r2, [r3, #6]
		  	MeterData.MtrRawData[i+3]  = data_tmp1[i+3];
  4223f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
  4223fa:	71da      	strb	r2, [r3, #7]
	  	}



	 					if (can_get_status(CAN0) & CAN_SR_TBSY) {
  4223fc:	4831      	ldr	r0, [pc, #196]	; (4224c4 <j1939_data_transfer+0x140>)
  4223fe:	4b32      	ldr	r3, [pc, #200]	; (4224c8 <j1939_data_transfer+0x144>)
  422400:	4798      	blx	r3
  422402:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  422406:	d150      	bne.n	4224aa <j1939_data_transfer+0x126>
		 					can_mailbox_init(CAN0, &tx_mailbox);
		 					//return 0;
	 					}

	 					/* Init CAN1 Mailbox 1 to Transmit Mailbox. */
	 					reset_mailbox_conf(&tx_mailbox);
  422408:	4c30      	ldr	r4, [pc, #192]	; (4224cc <j1939_data_transfer+0x148>)
  42240a:	4620      	mov	r0, r4
  42240c:	4b30      	ldr	r3, [pc, #192]	; (4224d0 <j1939_data_transfer+0x14c>)
  42240e:	4798      	blx	r3
	 					tx_mailbox.ul_mb_idx = CAN_COMM_TXMB_ID;
  422410:	2305      	movs	r3, #5
  422412:	6023      	str	r3, [r4, #0]
	 					tx_mailbox.uc_obj_type = CAN_MB_TX_MODE;
  422414:	2303      	movs	r3, #3
  422416:	7123      	strb	r3, [r4, #4]
	 					tx_mailbox.uc_tx_prio = CAN_TX_PRIO;
  422418:	230f      	movs	r3, #15
  42241a:	71e3      	strb	r3, [r4, #7]
	 					tx_mailbox.uc_id_ver = 1;
  42241c:	2301      	movs	r3, #1
  42241e:	7163      	strb	r3, [r4, #5]
	 					tx_mailbox.ul_id_msk = 0;
  422420:	2300      	movs	r3, #0
  422422:	60e3      	str	r3, [r4, #12]
	 					can_mailbox_init(CAN0, &tx_mailbox);
  422424:	4621      	mov	r1, r4
  422426:	4827      	ldr	r0, [pc, #156]	; (4224c4 <j1939_data_transfer+0x140>)
  422428:	4b2a      	ldr	r3, [pc, #168]	; (4224d4 <j1939_data_transfer+0x150>)
  42242a:	4798      	blx	r3

	 					/* Write transmit information into mailbox. */
	 					tx_mailbox.ul_id = (Store_Send_Data == 0)? (identifier):CAN_MID_MIDvA(7);	//j1939_pgn(TP_DATA_PGN);
  42242c:	2e00      	cmp	r6, #0
  42242e:	bf18      	it	ne
  422430:	f44f 15e0 	movne.w	r5, #1835008	; 0x1c0000
  422434:	4621      	mov	r1, r4
  422436:	6125      	str	r5, [r4, #16]
	 					//tx_mailbox.ul_datal = CAN_MSG_DUMMY_DATA;
	 					tx_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
  422438:	2308      	movs	r3, #8
  42243a:	71a3      	strb	r3, [r4, #6]

				       tx_mailbox.ul_datah = MeterData.Para.datah_1;
  42243c:	4b20      	ldr	r3, [pc, #128]	; (4224c0 <j1939_data_transfer+0x13c>)
  42243e:	685a      	ldr	r2, [r3, #4]
  422440:	61e2      	str	r2, [r4, #28]
				       tx_mailbox.ul_datal = MeterData.Para.datal_1;
  422442:	681b      	ldr	r3, [r3, #0]
  422444:	61a3      	str	r3, [r4, #24]
 	 					can_mailbox_write(CAN0, &tx_mailbox);
  422446:	4c1f      	ldr	r4, [pc, #124]	; (4224c4 <j1939_data_transfer+0x140>)
  422448:	4620      	mov	r0, r4
  42244a:	4b23      	ldr	r3, [pc, #140]	; (4224d8 <j1939_data_transfer+0x154>)
  42244c:	4798      	blx	r3

	 					/* Send out the information in the mailbox. */
	 					can_global_send_transfer_cmd(CAN0, CAN_TCR_MB1);
  42244e:	2102      	movs	r1, #2
  422450:	4620      	mov	r0, r4
  422452:	4b22      	ldr	r3, [pc, #136]	; (4224dc <j1939_data_transfer+0x158>)
  422454:	4798      	blx	r3
						 //Delay(5);


}
  422456:	b002      	add	sp, #8
  422458:	bd70      	pop	{r4, r5, r6, pc}
		data_tmp1[0] = j1939_pgn_data.sequence_num;
  42245a:	f88d 3000 	strb.w	r3, [sp]
		memcpy(&data_tmp1[1], &j1939_pgn_data.data[7],7);
  42245e:	4b20      	ldr	r3, [pc, #128]	; (4224e0 <j1939_data_transfer+0x15c>)
  422460:	681a      	ldr	r2, [r3, #0]
  422462:	f8cd 2001 	str.w	r2, [sp, #1]
  422466:	889a      	ldrh	r2, [r3, #4]
  422468:	799b      	ldrb	r3, [r3, #6]
  42246a:	f8ad 2005 	strh.w	r2, [sp, #5]
  42246e:	f88d 3007 	strb.w	r3, [sp, #7]
  422472:	e7aa      	b.n	4223ca <j1939_data_transfer+0x46>
		data_tmp1[0] = j1939_pgn_data.sequence_num;
  422474:	f88d 3000 	strb.w	r3, [sp]
		memcpy(&data_tmp1[1], &j1939_pgn_data.data[14],7);
  422478:	4b1a      	ldr	r3, [pc, #104]	; (4224e4 <j1939_data_transfer+0x160>)
  42247a:	681a      	ldr	r2, [r3, #0]
  42247c:	f8cd 2001 	str.w	r2, [sp, #1]
  422480:	889a      	ldrh	r2, [r3, #4]
  422482:	799b      	ldrb	r3, [r3, #6]
  422484:	f8ad 2005 	strh.w	r2, [sp, #5]
  422488:	f88d 3007 	strb.w	r3, [sp, #7]
  42248c:	e79d      	b.n	4223ca <j1939_data_transfer+0x46>
			data_tmp1[0] = 5;
  42248e:	2305      	movs	r3, #5
  422490:	f88d 3000 	strb.w	r3, [sp]
			memcpy(&data_tmp1[1], &Read_flash_data[0],7);
  422494:	4b14      	ldr	r3, [pc, #80]	; (4224e8 <j1939_data_transfer+0x164>)
  422496:	681a      	ldr	r2, [r3, #0]
  422498:	f8cd 2001 	str.w	r2, [sp, #1]
  42249c:	889a      	ldrh	r2, [r3, #4]
  42249e:	799b      	ldrb	r3, [r3, #6]
  4224a0:	f8ad 2005 	strh.w	r2, [sp, #5]
  4224a4:	f88d 3007 	strb.w	r3, [sp, #7]
  4224a8:	e78f      	b.n	4223ca <j1939_data_transfer+0x46>
		 					tx_mailbox.ul_mb_idx = CAN_COMM_TXMB_ID;
  4224aa:	4908      	ldr	r1, [pc, #32]	; (4224cc <j1939_data_transfer+0x148>)
  4224ac:	2305      	movs	r3, #5
  4224ae:	600b      	str	r3, [r1, #0]
		 					can_mailbox_init(CAN0, &tx_mailbox);
  4224b0:	4804      	ldr	r0, [pc, #16]	; (4224c4 <j1939_data_transfer+0x140>)
  4224b2:	4b08      	ldr	r3, [pc, #32]	; (4224d4 <j1939_data_transfer+0x150>)
  4224b4:	4798      	blx	r3
  4224b6:	e7a7      	b.n	422408 <j1939_data_transfer+0x84>
  4224b8:	20001628 	.word	0x20001628
  4224bc:	20001629 	.word	0x20001629
  4224c0:	20001524 	.word	0x20001524
  4224c4:	40010000 	.word	0x40010000
  4224c8:	00421685 	.word	0x00421685
  4224cc:	20001644 	.word	0x20001644
  4224d0:	00422231 	.word	0x00422231
  4224d4:	004216b7 	.word	0x004216b7
  4224d8:	00421791 	.word	0x00421791
  4224dc:	00421689 	.word	0x00421689
  4224e0:	20001630 	.word	0x20001630
  4224e4:	20001637 	.word	0x20001637
  4224e8:	200016d8 	.word	0x200016d8

004224ec <j1939_pgn>:
uint32_t j1939_pgn(uint16_t pgn_number)
{
	uint32_t can_identifier_tmp = 0; // store CAN identifier data


	j1939_frame.Priority = 7;
  4224ec:	4a07      	ldr	r2, [pc, #28]	; (42250c <j1939_pgn+0x20>)
  4224ee:	7813      	ldrb	r3, [r2, #0]
	j1939_frame.DataPage = 0;
  4224f0:	f043 0307 	orr.w	r3, r3, #7
	j1939_frame.Res      = 0;
  4224f4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  4224f8:	f36f 1304 	bfc	r3, #4, #1
  4224fc:	7013      	strb	r3, [r2, #0]
	j1939_frame.SourceAddress = 0x00;
  4224fe:	2300      	movs	r3, #0
  422500:	7053      	strb	r3, [r2, #1]

	can_identifier_tmp = (((uint32_t)j1939_frame.Priority << 26)  | ((uint32_t)j1939_frame.Res << 25)   
	| ((uint32_t)j1939_frame.DataPage << 24) | ((uint32_t) pgn_number << 8) | ((uint32_t) j1939_frame.SourceAddress));
  422502:	0200      	lsls	r0, r0, #8

	return can_identifier_tmp;
}
  422504:	f040 50e0 	orr.w	r0, r0, #469762048	; 0x1c000000
  422508:	4770      	bx	lr
  42250a:	bf00      	nop
  42250c:	20001668 	.word	0x20001668

00422510 <CAN_process>:

void CAN_process()
{
   static uint32_t Payload_send_count = 0;
	if(!pri_pwr_trouble_g_b && !test_sw_pressed_g_b && ((count_1ms - CAN_tx_bit) > 2000u) && g_ul_recv_status == 0u && ota_start == 0u && amerex_config_data.CAN_baud_rate != 0u)
  422510:	4b36      	ldr	r3, [pc, #216]	; (4225ec <CAN_process+0xdc>)
  422512:	781b      	ldrb	r3, [r3, #0]
  422514:	2b00      	cmp	r3, #0
  422516:	d167      	bne.n	4225e8 <CAN_process+0xd8>
  422518:	4b35      	ldr	r3, [pc, #212]	; (4225f0 <CAN_process+0xe0>)
  42251a:	781b      	ldrb	r3, [r3, #0]
  42251c:	2b00      	cmp	r3, #0
  42251e:	d163      	bne.n	4225e8 <CAN_process+0xd8>
  422520:	4b34      	ldr	r3, [pc, #208]	; (4225f4 <CAN_process+0xe4>)
  422522:	681b      	ldr	r3, [r3, #0]
  422524:	4a34      	ldr	r2, [pc, #208]	; (4225f8 <CAN_process+0xe8>)
  422526:	6812      	ldr	r2, [r2, #0]
  422528:	1a9b      	subs	r3, r3, r2
  42252a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  42252e:	d95b      	bls.n	4225e8 <CAN_process+0xd8>
  422530:	4b32      	ldr	r3, [pc, #200]	; (4225fc <CAN_process+0xec>)
  422532:	681b      	ldr	r3, [r3, #0]
  422534:	2b00      	cmp	r3, #0
  422536:	d157      	bne.n	4225e8 <CAN_process+0xd8>
  422538:	4b31      	ldr	r3, [pc, #196]	; (422600 <CAN_process+0xf0>)
  42253a:	781b      	ldrb	r3, [r3, #0]
  42253c:	2b00      	cmp	r3, #0
  42253e:	d153      	bne.n	4225e8 <CAN_process+0xd8>
  422540:	4b30      	ldr	r3, [pc, #192]	; (422604 <CAN_process+0xf4>)
  422542:	7b1b      	ldrb	r3, [r3, #12]
  422544:	2b00      	cmp	r3, #0
  422546:	d04f      	beq.n	4225e8 <CAN_process+0xd8>
{
  422548:	b510      	push	{r4, lr}
	{
		CAN_tx_bit =count_1ms;
  42254a:	4b2a      	ldr	r3, [pc, #168]	; (4225f4 <CAN_process+0xe4>)
  42254c:	681a      	ldr	r2, [r3, #0]
  42254e:	4b2a      	ldr	r3, [pc, #168]	; (4225f8 <CAN_process+0xe8>)
  422550:	601a      	str	r2, [r3, #0]

			if(j1939_pgn_data.sequence_num <= 3 && !g_ul_log_en)
  422552:	4b2d      	ldr	r3, [pc, #180]	; (422608 <CAN_process+0xf8>)
  422554:	781b      	ldrb	r3, [r3, #0]
  422556:	2b03      	cmp	r3, #3
  422558:	d82c      	bhi.n	4225b4 <CAN_process+0xa4>
  42255a:	4a2c      	ldr	r2, [pc, #176]	; (42260c <CAN_process+0xfc>)
  42255c:	7812      	ldrb	r2, [r2, #0]
  42255e:	bb4a      	cbnz	r2, 4225b4 <CAN_process+0xa4>
			{


				if(!j1939_pgn_data.sequence_num)
  422560:	b9f3      	cbnz	r3, 4225a0 <CAN_process+0x90>
  422562:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  422566:	4b2a      	ldr	r3, [pc, #168]	; (422610 <CAN_process+0x100>)
  422568:	631a      	str	r2, [r3, #48]	; 0x30
				{
					ioport_set_pin_level(CAN_ACT,1);
					can_identifier = j1939_pgn(TP_PGN);
  42256a:	f44f 406c 	mov.w	r0, #60416	; 0xec00
  42256e:	4b29      	ldr	r3, [pc, #164]	; (422614 <CAN_process+0x104>)
  422570:	4798      	blx	r3
  422572:	4b29      	ldr	r3, [pc, #164]	; (422618 <CAN_process+0x108>)
  422574:	6018      	str	r0, [r3, #0]
					trnsfer_protocol_connection(can_identifier, 24, 3, PGN_AUXILLIARY_1);
  422576:	f64f 335f 	movw	r3, #64351	; 0xfb5f
  42257a:	2203      	movs	r2, #3
  42257c:	2118      	movs	r1, #24
  42257e:	4c27      	ldr	r4, [pc, #156]	; (42261c <CAN_process+0x10c>)
  422580:	47a0      	blx	r4
				{
					can_identifier = j1939_pgn(TP_DATA_PGN);
				    j1939_data_transfer(can_identifier,0);
				}

				j1939_pgn_data.sequence_num++;
  422582:	4a21      	ldr	r2, [pc, #132]	; (422608 <CAN_process+0xf8>)
  422584:	7813      	ldrb	r3, [r2, #0]
  422586:	3301      	adds	r3, #1
  422588:	b2db      	uxtb	r3, r3
  42258a:	7013      	strb	r3, [r2, #0]

				if(j1939_pgn_data.sequence_num > 3)
  42258c:	2b03      	cmp	r3, #3
  42258e:	d915      	bls.n	4225bc <CAN_process+0xac>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  422594:	4b1e      	ldr	r3, [pc, #120]	; (422610 <CAN_process+0x100>)
  422596:	635a      	str	r2, [r3, #52]	; 0x34
				{
					 ioport_set_pin_level(CAN_ACT,0);
					j1939_pgn_data.sequence_num = 0;
  422598:	2200      	movs	r2, #0
  42259a:	4b1b      	ldr	r3, [pc, #108]	; (422608 <CAN_process+0xf8>)
  42259c:	701a      	strb	r2, [r3, #0]
  42259e:	bd10      	pop	{r4, pc}
					can_identifier = j1939_pgn(TP_DATA_PGN);
  4225a0:	f44f 406b 	mov.w	r0, #60160	; 0xeb00
  4225a4:	4b1b      	ldr	r3, [pc, #108]	; (422614 <CAN_process+0x104>)
  4225a6:	4798      	blx	r3
  4225a8:	4b1b      	ldr	r3, [pc, #108]	; (422618 <CAN_process+0x108>)
  4225aa:	6018      	str	r0, [r3, #0]
				    j1939_data_transfer(can_identifier,0);
  4225ac:	2100      	movs	r1, #0
  4225ae:	4b1c      	ldr	r3, [pc, #112]	; (422620 <CAN_process+0x110>)
  4225b0:	4798      	blx	r3
  4225b2:	e7e6      	b.n	422582 <CAN_process+0x72>
				}
			}
			else if(g_ul_log_en == 1)
  4225b4:	4b15      	ldr	r3, [pc, #84]	; (42260c <CAN_process+0xfc>)
  4225b6:	781b      	ldrb	r3, [r3, #0]
  4225b8:	2b01      	cmp	r3, #1
  4225ba:	d000      	beq.n	4225be <CAN_process+0xae>
  4225bc:	bd10      	pop	{r4, pc}
			{

				if(payload_cnt.flash_data_counter > 0 && Payload_send_count <= payload_cnt.flash_data_counter && g_ul_log_en == 1)
  4225be:	4b19      	ldr	r3, [pc, #100]	; (422624 <CAN_process+0x114>)
  4225c0:	681b      	ldr	r3, [r3, #0]
  4225c2:	b11b      	cbz	r3, 4225cc <CAN_process+0xbc>
  4225c4:	4a18      	ldr	r2, [pc, #96]	; (422628 <CAN_process+0x118>)
  4225c6:	6810      	ldr	r0, [r2, #0]
  4225c8:	4283      	cmp	r3, r0
  4225ca:	d205      	bcs.n	4225d8 <CAN_process+0xc8>
				 database_send_payload(Payload_send_count);
				 Payload_send_count++;
				}
				else
				{
				g_ul_log_en = 0;
  4225cc:	2300      	movs	r3, #0
  4225ce:	4a0f      	ldr	r2, [pc, #60]	; (42260c <CAN_process+0xfc>)
  4225d0:	7013      	strb	r3, [r2, #0]
				Payload_send_count = 0;
  4225d2:	4a15      	ldr	r2, [pc, #84]	; (422628 <CAN_process+0x118>)
  4225d4:	6013      	str	r3, [r2, #0]





}
  4225d6:	e7f1      	b.n	4225bc <CAN_process+0xac>
				 database_send_payload(Payload_send_count);
  4225d8:	b280      	uxth	r0, r0
  4225da:	4b14      	ldr	r3, [pc, #80]	; (42262c <CAN_process+0x11c>)
  4225dc:	4798      	blx	r3
				 Payload_send_count++;
  4225de:	4a12      	ldr	r2, [pc, #72]	; (422628 <CAN_process+0x118>)
  4225e0:	6813      	ldr	r3, [r2, #0]
  4225e2:	3301      	adds	r3, #1
  4225e4:	6013      	str	r3, [r2, #0]
  4225e6:	bd10      	pop	{r4, pc}
  4225e8:	4770      	bx	lr
  4225ea:	bf00      	nop
  4225ec:	20000b50 	.word	0x20000b50
  4225f0:	20001384 	.word	0x20001384
  4225f4:	200012f8 	.word	0x200012f8
  4225f8:	2000109c 	.word	0x2000109c
  4225fc:	20001318 	.word	0x20001318
  422600:	2000131c 	.word	0x2000131c
  422604:	20001588 	.word	0x20001588
  422608:	20001628 	.word	0x20001628
  42260c:	20001314 	.word	0x20001314
  422610:	400e1400 	.word	0x400e1400
  422614:	004224ed 	.word	0x004224ed
  422618:	200010a4 	.word	0x200010a4
  42261c:	004222d9 	.word	0x004222d9
  422620:	00422385 	.word	0x00422385
  422624:	20001510 	.word	0x20001510
  422628:	200010a0 	.word	0x200010a0
  42262c:	00424839 	.word	0x00424839

00422630 <CAN_Open>:




  void CAN_Open()
  {
  422630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	  
	if(amerex_config_data.CAN_baud_rate != 0u)
  422634:	4b20      	ldr	r3, [pc, #128]	; (4226b8 <CAN_Open+0x88>)
  422636:	7b1b      	ldrb	r3, [r3, #12]
  422638:	b90b      	cbnz	r3, 42263e <CAN_Open+0xe>
  42263a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
		  // set_can_baudrate = (amerex_config_data.CAN_baud_rate == 1) ? CAN_BPS_500K : CAN_BPS_250K;

		   set_can_baudrate	=  CAN_BPS_500K;
  42263e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  422642:	4b1e      	ldr	r3, [pc, #120]	; (4226bc <CAN_Open+0x8c>)
  422644:	601a      	str	r2, [r3, #0]

		if (can_init(CAN0, sysclk_get_cpu_hz(), set_can_baudrate))	
  422646:	491e      	ldr	r1, [pc, #120]	; (4226c0 <CAN_Open+0x90>)
  422648:	481e      	ldr	r0, [pc, #120]	; (4226c4 <CAN_Open+0x94>)
  42264a:	4b1f      	ldr	r3, [pc, #124]	; (4226c8 <CAN_Open+0x98>)
  42264c:	4798      	blx	r3
  42264e:	2800      	cmp	r0, #0
  422650:	d0f3      	beq.n	42263a <CAN_Open+0xa>
		{
			//puts("CAN initialization is completed." STRING_EOL);
			/* Disable all CAN1 interrupts. */
			can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
  422652:	4d1c      	ldr	r5, [pc, #112]	; (4226c4 <CAN_Open+0x94>)
  422654:	f04f 31ff 	mov.w	r1, #4294967295
  422658:	4628      	mov	r0, r5
  42265a:	4b1c      	ldr	r3, [pc, #112]	; (4226cc <CAN_Open+0x9c>)
  42265c:	4798      	blx	r3
			can_reset_all_mailbox(CAN0);
  42265e:	4628      	mov	r0, r5
  422660:	4b1b      	ldr	r3, [pc, #108]	; (4226d0 <CAN_Open+0xa0>)
  422662:	4798      	blx	r3

			/* Init CAN1 Mailbox 0 to Reception Mailbox. */
			reset_mailbox_conf(&rx_mailbox);
  422664:	4c1b      	ldr	r4, [pc, #108]	; (4226d4 <CAN_Open+0xa4>)
  422666:	4620      	mov	r0, r4
  422668:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4226e4 <CAN_Open+0xb4>
  42266c:	47c8      	blx	r9
			rx_mailbox.ul_mb_idx = CAN_COMM_RXMB_ID;
  42266e:	2600      	movs	r6, #0
  422670:	6026      	str	r6, [r4, #0]
			rx_mailbox.uc_obj_type = CAN_MB_RX_MODE;
  422672:	2701      	movs	r7, #1
  422674:	7127      	strb	r7, [r4, #4]
			rx_mailbox.ul_id_msk = CAN_MAM_MIDvA_Msk| CAN_MAM_MIDvB_Msk;
  422676:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  42267a:	60e3      	str	r3, [r4, #12]
			rx_mailbox.ul_id = CAN_MID_MIDvA(CAN_TRANSFER_ID);
  42267c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  422680:	6123      	str	r3, [r4, #16]
			can_mailbox_init(CAN0, &rx_mailbox);
  422682:	4621      	mov	r1, r4
  422684:	4628      	mov	r0, r5
  422686:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4226e8 <CAN_Open+0xb8>
  42268a:	47c0      	blx	r8
	reset_mailbox_conf(&tx_mailbox);
  42268c:	4c12      	ldr	r4, [pc, #72]	; (4226d8 <CAN_Open+0xa8>)
  42268e:	4620      	mov	r0, r4
  422690:	47c8      	blx	r9
	tx_mailbox.ul_mb_idx = CAN_COMM_TXMB_ID;
  422692:	2305      	movs	r3, #5
  422694:	6023      	str	r3, [r4, #0]
	tx_mailbox.uc_obj_type = CAN_MB_TX_MODE;
  422696:	2303      	movs	r3, #3
  422698:	7123      	strb	r3, [r4, #4]
	tx_mailbox.uc_tx_prio = 15;
  42269a:	230f      	movs	r3, #15
  42269c:	71e3      	strb	r3, [r4, #7]
	tx_mailbox.uc_id_ver = 0;
  42269e:	7166      	strb	r6, [r4, #5]
	tx_mailbox.ul_id_msk = 0;
  4226a0:	60e6      	str	r6, [r4, #12]
	can_mailbox_init(CAN0, &tx_mailbox);
  4226a2:	4621      	mov	r1, r4
  4226a4:	4628      	mov	r0, r5
  4226a6:	47c0      	blx	r8


			/* Enable CAN1 mailbox interrupt. */
			//can_enable_interrupt(CAN0, 1 << CAN_COMM_RXMB_ID);
			can_enable_interrupt(CAN0, CAN_IER_MB0);
  4226a8:	4639      	mov	r1, r7
  4226aa:	4628      	mov	r0, r5
  4226ac:	4b0b      	ldr	r3, [pc, #44]	; (4226dc <CAN_Open+0xac>)
  4226ae:	4798      	blx	r3
  4226b0:	2220      	movs	r2, #32
  4226b2:	4b0b      	ldr	r3, [pc, #44]	; (4226e0 <CAN_Open+0xb0>)
  4226b4:	605a      	str	r2, [r3, #4]
			NVIC_EnableIRQ(CAN0_IRQn);


		}
   }
}
  4226b6:	e7c0      	b.n	42263a <CAN_Open+0xa>
  4226b8:	20001588 	.word	0x20001588
  4226bc:	200010a8 	.word	0x200010a8
  4226c0:	03938700 	.word	0x03938700
  4226c4:	40010000 	.word	0x40010000
  4226c8:	0042181d 	.word	0x0042181d
  4226cc:	00421681 	.word	0x00421681
  4226d0:	004217f9 	.word	0x004217f9
  4226d4:	20001678 	.word	0x20001678
  4226d8:	20001644 	.word	0x20001644
  4226dc:	0042167d 	.word	0x0042167d
  4226e0:	e000e100 	.word	0xe000e100
  4226e4:	00422231 	.word	0x00422231
  4226e8:	004216b7 	.word	0x004216b7

004226ec <Button_Status>:
/* Function : Check the Increment and decrement button status
 * Parameter: None
 * Return   : any one of enum INC_BUTTON_PRESSED or DEC_BUTTON_PRESSED or NO_BUTTON_PRESSED
 */
uint32_t Button_Status(void)
{
  4226ec:	b570      	push	{r4, r5, r6, lr}
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4226ee:	4b36      	ldr	r3, [pc, #216]	; (4227c8 <Button_Status+0xdc>)
  4226f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    static uint8_t inc_db_count_sl_u8 = 0u; /*For increment button debounce count*/
    static uint8_t dec_db_count_sl_u8 = 0u; /*For decrement button debounce count*/
    static bool inc_status = 0u;
    static bool dec_status = 0u;

    if(!ioport_get_pin_level(ALARM_SILEN_PIN) && !inc_status)
  4226f2:	f013 0f04 	tst.w	r3, #4
  4226f6:	d124      	bne.n	422742 <Button_Status+0x56>
  4226f8:	4b34      	ldr	r3, [pc, #208]	; (4227cc <Button_Status+0xe0>)
  4226fa:	781b      	ldrb	r3, [r3, #0]
  4226fc:	bb0b      	cbnz	r3, 422742 <Button_Status+0x56>
    {
        dec_db_count_sl_u8 = 0u;
  4226fe:	2200      	movs	r2, #0
  422700:	4b33      	ldr	r3, [pc, #204]	; (4227d0 <Button_Status+0xe4>)
  422702:	701a      	strb	r2, [r3, #0]
        inc_db_count_sl_u8++;
  422704:	4a33      	ldr	r2, [pc, #204]	; (4227d4 <Button_Status+0xe8>)
  422706:	7813      	ldrb	r3, [r2, #0]
  422708:	3301      	adds	r3, #1
  42270a:	b2db      	uxtb	r3, r3
  42270c:	7013      	strb	r3, [r2, #0]
        if(inc_db_count_sl_u8 > CONFIG_DB_COUNT)
  42270e:	2b64      	cmp	r3, #100	; 0x64
  422710:	d921      	bls.n	422756 <Button_Status+0x6a>
        {
            blink_g_b = 0u;
  422712:	2500      	movs	r5, #0
  422714:	4b30      	ldr	r3, [pc, #192]	; (4227d8 <Button_Status+0xec>)
  422716:	701d      	strb	r5, [r3, #0]
            Buzzer_Freq_Set(BUZZER_FREQ_1_5KHZ, DUTY_1_5_KHZ);
  422718:	2132      	movs	r1, #50	; 0x32
  42271a:	f240 50dc 	movw	r0, #1500	; 0x5dc
  42271e:	4c2f      	ldr	r4, [pc, #188]	; (4227dc <Button_Status+0xf0>)
  422720:	47a0      	blx	r4
            //Small_Beep(100);
			Delay(100);
  422722:	2064      	movs	r0, #100	; 0x64
  422724:	4b2e      	ldr	r3, [pc, #184]	; (4227e0 <Button_Status+0xf4>)
  422726:	4798      	blx	r3
            inc_status = 1u;
  422728:	2201      	movs	r2, #1
  42272a:	4b28      	ldr	r3, [pc, #160]	; (4227cc <Button_Status+0xe0>)
  42272c:	701a      	strb	r2, [r3, #0]
            auto_exit_prev_tick_g_u32 = count_1ms;
  42272e:	4b2d      	ldr	r3, [pc, #180]	; (4227e4 <Button_Status+0xf8>)
  422730:	681a      	ldr	r2, [r3, #0]
  422732:	4b2d      	ldr	r3, [pc, #180]	; (4227e8 <Button_Status+0xfc>)
  422734:	601a      	str	r2, [r3, #0]
		  // Buzzer_Freq_Set(BUZZER_FREQ_0, DUTY_1_5_KHZ);
		    Buzzer_Freq_Set(BUZZER_FREQ_1_5KHZ, 0);
  422736:	4629      	mov	r1, r5
  422738:	f240 50dc 	movw	r0, #1500	; 0x5dc
  42273c:	47a0      	blx	r4
            return INC_BUTTON_PRESSED ;
  42273e:	2002      	movs	r0, #2
  422740:	bd70      	pop	{r4, r5, r6, pc}
  422742:	4b21      	ldr	r3, [pc, #132]	; (4227c8 <Button_Status+0xdc>)
  422744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
        }
    }
    else if(ioport_get_pin_level(ALARM_SILEN_PIN))
  422746:	f013 0f04 	tst.w	r3, #4
  42274a:	d004      	beq.n	422756 <Button_Status+0x6a>
    {
        inc_db_count_sl_u8 = 0u;
  42274c:	2300      	movs	r3, #0
  42274e:	4a21      	ldr	r2, [pc, #132]	; (4227d4 <Button_Status+0xe8>)
  422750:	7013      	strb	r3, [r2, #0]
        inc_status = 0u;
  422752:	4a1e      	ldr	r2, [pc, #120]	; (4227cc <Button_Status+0xe0>)
  422754:	7013      	strb	r3, [r2, #0]
  422756:	4b1c      	ldr	r3, [pc, #112]	; (4227c8 <Button_Status+0xdc>)
  422758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }

    if(!ioport_get_pin_level(SYS_RESET_SW_PIN) && !dec_status)
  42275a:	f013 0f02 	tst.w	r3, #2
  42275e:	d126      	bne.n	4227ae <Button_Status+0xc2>
  422760:	4b22      	ldr	r3, [pc, #136]	; (4227ec <Button_Status+0x100>)
  422762:	781b      	ldrb	r3, [r3, #0]
  422764:	bb1b      	cbnz	r3, 4227ae <Button_Status+0xc2>
    {
        inc_db_count_sl_u8 = 0u;
  422766:	2200      	movs	r2, #0
  422768:	4b1a      	ldr	r3, [pc, #104]	; (4227d4 <Button_Status+0xe8>)
  42276a:	701a      	strb	r2, [r3, #0]
        dec_db_count_sl_u8++;
  42276c:	4a18      	ldr	r2, [pc, #96]	; (4227d0 <Button_Status+0xe4>)
  42276e:	7813      	ldrb	r3, [r2, #0]
  422770:	3301      	adds	r3, #1
  422772:	b2db      	uxtb	r3, r3
  422774:	7013      	strb	r3, [r2, #0]
        if(dec_db_count_sl_u8 > CONFIG_DB_COUNT)
  422776:	2b64      	cmp	r3, #100	; 0x64
  422778:	d801      	bhi.n	42277e <Button_Status+0x92>
    {
        dec_status = 0u;
        dec_db_count_sl_u8 = 0u;
    }

    return NO_BUTTON_PRESSED;
  42277a:	2000      	movs	r0, #0
  42277c:	bd70      	pop	{r4, r5, r6, pc}
            blink_g_b = 0u;
  42277e:	2600      	movs	r6, #0
  422780:	4b15      	ldr	r3, [pc, #84]	; (4227d8 <Button_Status+0xec>)
  422782:	701e      	strb	r6, [r3, #0]
            Buzzer_Freq_Set(BUZZER_FREQ_1_5KHZ, DUTY_1_5_KHZ);
  422784:	2132      	movs	r1, #50	; 0x32
  422786:	f240 50dc 	movw	r0, #1500	; 0x5dc
  42278a:	4d14      	ldr	r5, [pc, #80]	; (4227dc <Button_Status+0xf0>)
  42278c:	47a8      	blx	r5
		   Delay(100);
  42278e:	2064      	movs	r0, #100	; 0x64
  422790:	4b13      	ldr	r3, [pc, #76]	; (4227e0 <Button_Status+0xf4>)
  422792:	4798      	blx	r3
            dec_status = 1u;
  422794:	2401      	movs	r4, #1
  422796:	4b15      	ldr	r3, [pc, #84]	; (4227ec <Button_Status+0x100>)
  422798:	701c      	strb	r4, [r3, #0]
            auto_exit_prev_tick_g_u32 = count_1ms;
  42279a:	4b12      	ldr	r3, [pc, #72]	; (4227e4 <Button_Status+0xf8>)
  42279c:	681a      	ldr	r2, [r3, #0]
  42279e:	4b12      	ldr	r3, [pc, #72]	; (4227e8 <Button_Status+0xfc>)
  4227a0:	601a      	str	r2, [r3, #0]
			Buzzer_Freq_Set(BUZZER_FREQ_1_5KHZ, 0);
  4227a2:	4631      	mov	r1, r6
  4227a4:	f240 50dc 	movw	r0, #1500	; 0x5dc
  4227a8:	47a8      	blx	r5
            return DEC_BUTTON_PRESSED;
  4227aa:	4620      	mov	r0, r4
  4227ac:	bd70      	pop	{r4, r5, r6, pc}
  4227ae:	4b06      	ldr	r3, [pc, #24]	; (4227c8 <Button_Status+0xdc>)
  4227b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    else if(ioport_get_pin_level(SYS_RESET_SW_PIN))
  4227b2:	f013 0f02 	tst.w	r3, #2
  4227b6:	d005      	beq.n	4227c4 <Button_Status+0xd8>
        dec_status = 0u;
  4227b8:	2000      	movs	r0, #0
  4227ba:	4b0c      	ldr	r3, [pc, #48]	; (4227ec <Button_Status+0x100>)
  4227bc:	7018      	strb	r0, [r3, #0]
        dec_db_count_sl_u8 = 0u;
  4227be:	4b04      	ldr	r3, [pc, #16]	; (4227d0 <Button_Status+0xe4>)
  4227c0:	7018      	strb	r0, [r3, #0]
  4227c2:	bd70      	pop	{r4, r5, r6, pc}
    return NO_BUTTON_PRESSED;
  4227c4:	2000      	movs	r0, #0
}
  4227c6:	bd70      	pop	{r4, r5, r6, pc}
  4227c8:	400e0e00 	.word	0x400e0e00
  4227cc:	200010c3 	.word	0x200010c3
  4227d0:	200010bc 	.word	0x200010bc
  4227d4:	200010c2 	.word	0x200010c2
  4227d8:	20000095 	.word	0x20000095
  4227dc:	00421db9 	.word	0x00421db9
  4227e0:	0042527d 	.word	0x0042527d
  4227e4:	200012f8 	.word	0x200012f8
  4227e8:	200010b0 	.word	0x200010b0
  4227ec:	200010bd 	.word	0x200010bd

004227f0 <Sound_Alert>:
/* Function : if the set value change to minimum or maximum alert to thr user by sound
 * Parameter: None
 * Return   : None
 */
void Sound_Alert(void)
{
  4227f0:	b510      	push	{r4, lr}

     Small_Beep(100);
  4227f2:	2064      	movs	r0, #100	; 0x64
  4227f4:	4c03      	ldr	r4, [pc, #12]	; (422804 <Sound_Alert+0x14>)
  4227f6:	47a0      	blx	r4
     Delay(50);
  4227f8:	2032      	movs	r0, #50	; 0x32
  4227fa:	4b03      	ldr	r3, [pc, #12]	; (422808 <Sound_Alert+0x18>)
  4227fc:	4798      	blx	r3
     Small_Beep(100);
  4227fe:	2064      	movs	r0, #100	; 0x64
  422800:	47a0      	blx	r4
  422802:	bd10      	pop	{r4, pc}
  422804:	00422211 	.word	0x00422211
  422808:	0042527d 	.word	0x0042527d

0042280c <LED_Blink>:
 * Parameter: @param 1 - Which LED to be access @param2 - CONFIG_ON/CONFIG_OFF/CONF_BLINK enum
 * Return   : None
 */

void LED_Blink(uint8_t led, uint8_t C_Val)
{
  42280c:	b508      	push	{r3, lr}
    static bool on_off = 0u;
    if(C_Val == CONFIG_ON)
  42280e:	2901      	cmp	r1, #1
  422810:	d00a      	beq.n	422828 <LED_Blink+0x1c>
    {
        on_off = CONFIG_ON;
    }
    else if(C_Val == CONFIG_OFF)
  422812:	b999      	cbnz	r1, 42283c <LED_Blink+0x30>
    {
        on_off = CONFIG_OFF;
  422814:	2200      	movs	r2, #0
  422816:	4b33      	ldr	r3, [pc, #204]	; (4228e4 <LED_Blink+0xd8>)
  422818:	701a      	strb	r2, [r3, #0]
    else
    {
        on_off = !on_off;
    }

    switch(led)
  42281a:	2804      	cmp	r0, #4
  42281c:	d85b      	bhi.n	4228d6 <LED_Blink+0xca>
  42281e:	e8df f000 	tbb	[pc, r0]
  422822:	1e19      	.short	0x1e19
  422824:	422a      	.short	0x422a
  422826:	56          	.byte	0x56
  422827:	00          	.byte	0x00
        on_off = CONFIG_ON;
  422828:	2201      	movs	r2, #1
  42282a:	4b2e      	ldr	r3, [pc, #184]	; (4228e4 <LED_Blink+0xd8>)
  42282c:	701a      	strb	r2, [r3, #0]
    switch(led)
  42282e:	2804      	cmp	r0, #4
  422830:	d851      	bhi.n	4228d6 <LED_Blink+0xca>
  422832:	e8df f000 	tbb	[pc, r0]
  422836:	1b0f      	.short	0x1b0f
  422838:	3820      	.short	0x3820
  42283a:	45          	.byte	0x45
  42283b:	00          	.byte	0x00
        on_off = !on_off;
  42283c:	4a29      	ldr	r2, [pc, #164]	; (4228e4 <LED_Blink+0xd8>)
  42283e:	7813      	ldrb	r3, [r2, #0]
  422840:	f083 0301 	eor.w	r3, r3, #1
  422844:	7013      	strb	r3, [r2, #0]
    switch(led)
  422846:	2804      	cmp	r0, #4
  422848:	d845      	bhi.n	4228d6 <LED_Blink+0xca>
  42284a:	e8df f000 	tbb	[pc, r0]
  42284e:	0803      	.short	0x0803
  422850:	2c14      	.short	0x2c14
  422852:	39          	.byte	0x39
  422853:	00          	.byte	0x00
    {
    case CONFIG_ALL_LED:
        ALL_LED_BLINK(on_off); /*PWM Pin disable*/
  422854:	4b23      	ldr	r3, [pc, #140]	; (4228e4 <LED_Blink+0xd8>)
  422856:	7818      	ldrb	r0, [r3, #0]
  422858:	4b23      	ldr	r3, [pc, #140]	; (4228e8 <LED_Blink+0xdc>)
  42285a:	4798      	blx	r3
        break;
  42285c:	bd08      	pop	{r3, pc}
    case CONFIG_FIRE_LED:
        on_off?FIRE_LED_PWM_EN(amerex_config_data.fire_LED_duty):FIRE_LED_PWM_EN(0);
  42285e:	4b21      	ldr	r3, [pc, #132]	; (4228e4 <LED_Blink+0xd8>)
  422860:	781b      	ldrb	r3, [r3, #0]
  422862:	b91b      	cbnz	r3, 42286c <LED_Blink+0x60>
  422864:	2000      	movs	r0, #0
  422866:	4b21      	ldr	r3, [pc, #132]	; (4228ec <LED_Blink+0xe0>)
  422868:	4798      	blx	r3
  42286a:	bd08      	pop	{r3, pc}
  42286c:	4b20      	ldr	r3, [pc, #128]	; (4228f0 <LED_Blink+0xe4>)
  42286e:	7898      	ldrb	r0, [r3, #2]
  422870:	4b1e      	ldr	r3, [pc, #120]	; (4228ec <LED_Blink+0xe0>)
  422872:	4798      	blx	r3
  422874:	bd08      	pop	{r3, pc}
        break;
    case CONFIG_BUZZER_LED:
		on_off?FIRE_LED_PWM_EN(amerex_config_data.fire_LED_duty):FIRE_LED_PWM_EN(0);
  422876:	4b1b      	ldr	r3, [pc, #108]	; (4228e4 <LED_Blink+0xd8>)
  422878:	781b      	ldrb	r3, [r3, #0]
  42287a:	b15b      	cbz	r3, 422894 <LED_Blink+0x88>
  42287c:	4b1c      	ldr	r3, [pc, #112]	; (4228f0 <LED_Blink+0xe4>)
  42287e:	7898      	ldrb	r0, [r3, #2]
  422880:	4b1a      	ldr	r3, [pc, #104]	; (4228ec <LED_Blink+0xe0>)
  422882:	4798      	blx	r3
        ioport_set_pin_level(Trouble_LED,on_off);
  422884:	4b17      	ldr	r3, [pc, #92]	; (4228e4 <LED_Blink+0xd8>)
	if (level) {
  422886:	781b      	ldrb	r3, [r3, #0]
  422888:	b143      	cbz	r3, 42289c <LED_Blink+0x90>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  42288a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  42288e:	4b19      	ldr	r3, [pc, #100]	; (4228f4 <LED_Blink+0xe8>)
  422890:	631a      	str	r2, [r3, #48]	; 0x30
  422892:	bd08      	pop	{r3, pc}
		on_off?FIRE_LED_PWM_EN(amerex_config_data.fire_LED_duty):FIRE_LED_PWM_EN(0);
  422894:	2000      	movs	r0, #0
  422896:	4b15      	ldr	r3, [pc, #84]	; (4228ec <LED_Blink+0xe0>)
  422898:	4798      	blx	r3
  42289a:	e7f3      	b.n	422884 <LED_Blink+0x78>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  42289c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4228a0:	4b14      	ldr	r3, [pc, #80]	; (4228f4 <LED_Blink+0xe8>)
  4228a2:	635a      	str	r2, [r3, #52]	; 0x34
  4228a4:	bd08      	pop	{r3, pc}
       break;
    case CONFIG_TRBL_LED:
       ioport_set_pin_level(Trouble_LED,on_off);
  4228a6:	4b0f      	ldr	r3, [pc, #60]	; (4228e4 <LED_Blink+0xd8>)
	if (level) {
  4228a8:	781b      	ldrb	r3, [r3, #0]
  4228aa:	b123      	cbz	r3, 4228b6 <LED_Blink+0xaa>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4228ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4228b0:	4b10      	ldr	r3, [pc, #64]	; (4228f4 <LED_Blink+0xe8>)
  4228b2:	631a      	str	r2, [r3, #48]	; 0x30
  4228b4:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4228b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4228ba:	4b0e      	ldr	r3, [pc, #56]	; (4228f4 <LED_Blink+0xe8>)
  4228bc:	635a      	str	r2, [r3, #52]	; 0x34
  4228be:	bd08      	pop	{r3, pc}
        break;
    case CONFIG_CONFIG_LED:
       ioport_set_pin_level(sys_normal,on_off);
  4228c0:	4b08      	ldr	r3, [pc, #32]	; (4228e4 <LED_Blink+0xd8>)
	if (level) {
  4228c2:	781b      	ldrb	r3, [r3, #0]
  4228c4:	b11b      	cbz	r3, 4228ce <LED_Blink+0xc2>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4228c6:	2210      	movs	r2, #16
  4228c8:	4b0b      	ldr	r3, [pc, #44]	; (4228f8 <LED_Blink+0xec>)
  4228ca:	631a      	str	r2, [r3, #48]	; 0x30
  4228cc:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4228ce:	2210      	movs	r2, #16
  4228d0:	4b09      	ldr	r3, [pc, #36]	; (4228f8 <LED_Blink+0xec>)
  4228d2:	635a      	str	r2, [r3, #52]	; 0x34
  4228d4:	bd08      	pop	{r3, pc}
        break;
    default:
      ALL_LED_BLINK(OFF);  /*PWM Pin disable*/
  4228d6:	2000      	movs	r0, #0
  4228d8:	4b03      	ldr	r3, [pc, #12]	; (4228e8 <LED_Blink+0xdc>)
  4228da:	4798      	blx	r3
      FIRE_LED_PWM_EN(0);
  4228dc:	2000      	movs	r0, #0
  4228de:	4b03      	ldr	r3, [pc, #12]	; (4228ec <LED_Blink+0xe0>)
  4228e0:	4798      	blx	r3
  4228e2:	bd08      	pop	{r3, pc}
  4228e4:	200010c4 	.word	0x200010c4
  4228e8:	0042427d 	.word	0x0042427d
  4228ec:	00424491 	.word	0x00424491
  4228f0:	20001588 	.word	0x20001588
  4228f4:	400e1000 	.word	0x400e1000
  4228f8:	400e1400 	.word	0x400e1400

004228fc <Fire_LED_Count>:
 * Return   : None
 */
void Fire_LED_Count(void)
{
    uint16_t fire_LED_value;
    fire_LED_value =  (FIRE_LED_FADING_TIME / amerex_config_data.fire_LED_duty);
  4228fc:	4b06      	ldr	r3, [pc, #24]	; (422918 <Fire_LED_Count+0x1c>)
  4228fe:	885b      	ldrh	r3, [r3, #2]
  422900:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  422904:	fb92 f2f3 	sdiv	r2, r2, r3
    fire_LED_fading_count_g_u8 = (uint8_t)fire_LED_value;
  422908:	4904      	ldr	r1, [pc, #16]	; (42291c <Fire_LED_Count+0x20>)
  42290a:	700a      	strb	r2, [r1, #0]
    fire_LED_duty_max_g_u8 = (amerex_config_data.fire_LED_duty * 2u) - 1u;
  42290c:	005b      	lsls	r3, r3, #1
  42290e:	3b01      	subs	r3, #1
  422910:	4a03      	ldr	r2, [pc, #12]	; (422920 <Fire_LED_Count+0x24>)
  422912:	7013      	strb	r3, [r2, #0]
  422914:	4770      	bx	lr
  422916:	bf00      	nop
  422918:	20001588 	.word	0x20001588
  42291c:	200000a9 	.word	0x200000a9
  422920:	200000a8 	.word	0x200000a8

00422924 <Configuration>:
    if((count_1ms - test_sw_prev_tick_g_u32) >= SEC_5) //  15000u
  422924:	4b8e      	ldr	r3, [pc, #568]	; (422b60 <Configuration+0x23c>)
  422926:	681b      	ldr	r3, [r3, #0]
  422928:	4a8e      	ldr	r2, [pc, #568]	; (422b64 <Configuration+0x240>)
  42292a:	6812      	ldr	r2, [r2, #0]
  42292c:	1a9b      	subs	r3, r3, r2
  42292e:	f241 3287 	movw	r2, #4999	; 0x1387
  422932:	4293      	cmp	r3, r2
  422934:	d800      	bhi.n	422938 <Configuration+0x14>
  422936:	4770      	bx	lr
{
  422938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42293c:	b085      	sub	sp, #20
		FIRE_LED_PWM_EN(amerex_config_data.fire_LED_duty);
  42293e:	4b8a      	ldr	r3, [pc, #552]	; (422b68 <Configuration+0x244>)
  422940:	7898      	ldrb	r0, [r3, #2]
  422942:	4b8a      	ldr	r3, [pc, #552]	; (422b6c <Configuration+0x248>)
  422944:	4798      	blx	r3
        Buzzer_Beep(OFF);
  422946:	2000      	movs	r0, #0
  422948:	4b89      	ldr	r3, [pc, #548]	; (422b70 <Configuration+0x24c>)
  42294a:	4798      	blx	r3
        uint32_t blink_prev_tick= count_1ms;             /*To store the Previous tick*/
  42294c:	4c84      	ldr	r4, [pc, #528]	; (422b60 <Configuration+0x23c>)
  42294e:	f8d4 8000 	ldr.w	r8, [r4]
        uint32_t test_exit_prev_tick = count_1ms;    /*To store the Previous tick*/
  422952:	6823      	ldr	r3, [r4, #0]
  422954:	9301      	str	r3, [sp, #4]
        uint32_t test_state_prev_tick= count_1ms;    /*To store the Previous tick For move to next state*/
  422956:	6823      	ldr	r3, [r4, #0]
  422958:	9302      	str	r3, [sp, #8]
  42295a:	4b86      	ldr	r3, [pc, #536]	; (422b74 <Configuration+0x250>)
  42295c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  422960:	635a      	str	r2, [r3, #52]	; 0x34
  422962:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  422966:	635a      	str	r2, [r3, #52]	; 0x34
  422968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  42296c:	635a      	str	r2, [r3, #52]	; 0x34
		Reset_Values();
  42296e:	4b82      	ldr	r3, [pc, #520]	; (422b78 <Configuration+0x254>)
  422970:	4798      	blx	r3
        log_data.log_code = 11u; /*Indicating system reset button pressed*/
  422972:	4882      	ldr	r0, [pc, #520]	; (422b7c <Configuration+0x258>)
  422974:	230b      	movs	r3, #11
  422976:	7103      	strb	r3, [r0, #4]
        log_data.start_stop = 1u; /*button pressed*/
  422978:	2501      	movs	r5, #1
  42297a:	7185      	strb	r5, [r0, #6]
        NOR_Flash_Log_Data(&log_data);
  42297c:	4b80      	ldr	r3, [pc, #512]	; (422b80 <Configuration+0x25c>)
  42297e:	4798      	blx	r3
 		auto_exit_prev_tick_g_u32 = count_1ms;
  422980:	6822      	ldr	r2, [r4, #0]
  422982:	4b80      	ldr	r3, [pc, #512]	; (422b84 <Configuration+0x260>)
  422984:	601a      	str	r2, [r3, #0]
		blink_g_b = 1u;
  422986:	4b80      	ldr	r3, [pc, #512]	; (422b88 <Configuration+0x264>)
  422988:	701d      	strb	r5, [r3, #0]
		LED_Blink(CONFIG_ALL_OFF,CONFIG_OFF);
  42298a:	2100      	movs	r1, #0
  42298c:	2032      	movs	r0, #50	; 0x32
  42298e:	4b7f      	ldr	r3, [pc, #508]	; (422b8c <Configuration+0x268>)
  422990:	4798      	blx	r3
		Delay(500u);
  422992:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  422996:	4b7e      	ldr	r3, [pc, #504]	; (422b90 <Configuration+0x26c>)
  422998:	4798      	blx	r3
		Sound_Alert();
  42299a:	4b7e      	ldr	r3, [pc, #504]	; (422b94 <Configuration+0x270>)
  42299c:	4798      	blx	r3
        uint32_t first_release = 0u;
  42299e:	f04f 0b00 	mov.w	fp, #0
        uint32_t test_button_pressed = 0u; /* Set bit indicate button pressed*/
  4229a2:	46da      	mov	sl, fp
        uint32_t config_state = 0;       /* To identify the configuration*/
  4229a4:	465d      	mov	r5, fp
			    	wdt_restart(WDT);
  4229a6:	f8df 922c 	ldr.w	r9, [pc, #556]	; 422bd4 <Configuration+0x2b0>
		              if(((count_1ms - blink_prev_tick) >= __500ms) && blink_g_b)
  4229aa:	4f77      	ldr	r7, [pc, #476]	; (422b88 <Configuration+0x264>)
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4229ac:	4e71      	ldr	r6, [pc, #452]	; (422b74 <Configuration+0x250>)
  4229ae:	e122      	b.n	422bf6 <Configuration+0x2d2>
			              blink_prev_tick = count_1ms;
  4229b0:	f8d4 8000 	ldr.w	r8, [r4]
			              LED_Blink(config_state,CONF_BLINK);
  4229b4:	2103      	movs	r1, #3
  4229b6:	b2e8      	uxtb	r0, r5
  4229b8:	4b74      	ldr	r3, [pc, #464]	; (422b8c <Configuration+0x268>)
  4229ba:	4798      	blx	r3
  4229bc:	e127      	b.n	422c0e <Configuration+0x2ea>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4229be:	4b6d      	ldr	r3, [pc, #436]	; (422b74 <Configuration+0x250>)
  4229c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4229c4:	635a      	str	r2, [r3, #52]	; 0x34
  4229c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4229ca:	635a      	str	r2, [r3, #52]	; 0x34
  4229cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4229d0:	635a      	str	r2, [r3, #52]	; 0x34
					if(amerex_config_data.CAN_baud_rate != 0u)
  4229d2:	4b65      	ldr	r3, [pc, #404]	; (422b68 <Configuration+0x244>)
  4229d4:	7b1b      	ldrb	r3, [r3, #12]
  4229d6:	b92b      	cbnz	r3, 4229e4 <Configuration+0xc0>
					Small_Beep(40u);
  4229d8:	2028      	movs	r0, #40	; 0x28
  4229da:	4b6f      	ldr	r3, [pc, #444]	; (422b98 <Configuration+0x274>)
  4229dc:	4798      	blx	r3
}
  4229de:	b005      	add	sp, #20
  4229e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					can_enable(CAN0);
  4229e4:	486d      	ldr	r0, [pc, #436]	; (422b9c <Configuration+0x278>)
  4229e6:	4b6e      	ldr	r3, [pc, #440]	; (422ba0 <Configuration+0x27c>)
  4229e8:	4798      	blx	r3
  4229ea:	e7f5      	b.n	4229d8 <Configuration+0xb4>
          				 test_sw_prev_tick_g_u32 = count_1ms;
  4229ec:	4b5c      	ldr	r3, [pc, #368]	; (422b60 <Configuration+0x23c>)
  4229ee:	681a      	ldr	r2, [r3, #0]
  4229f0:	4b5c      	ldr	r3, [pc, #368]	; (422b64 <Configuration+0x240>)
  4229f2:	601a      	str	r2, [r3, #0]
                              LED_Blink(CONFIG_ALL_OFF,CONFIG_OFF);
  4229f4:	2100      	movs	r1, #0
  4229f6:	2032      	movs	r0, #50	; 0x32
  4229f8:	4b64      	ldr	r3, [pc, #400]	; (422b8c <Configuration+0x268>)
  4229fa:	4798      	blx	r3
								  amerex_config_data.Trigger =1u;
  4229fc:	485a      	ldr	r0, [pc, #360]	; (422b68 <Configuration+0x244>)
  4229fe:	2301      	movs	r3, #1
  422a00:	73c3      	strb	r3, [r0, #15]
								  flash_write_status = flash_write_amerex_param(ptr);
  422a02:	4b68      	ldr	r3, [pc, #416]	; (422ba4 <Configuration+0x280>)
  422a04:	4798      	blx	r3
  422a06:	b280      	uxth	r0, r0
  422a08:	4b67      	ldr	r3, [pc, #412]	; (422ba8 <Configuration+0x284>)
  422a0a:	8018      	strh	r0, [r3, #0]
							if(flash_write_status==1u)
  422a0c:	2801      	cmp	r0, #1
  422a0e:	d003      	beq.n	422a18 <Configuration+0xf4>
							Small_Beep(40u);
  422a10:	2028      	movs	r0, #40	; 0x28
  422a12:	4b61      	ldr	r3, [pc, #388]	; (422b98 <Configuration+0x274>)
  422a14:	4798      	blx	r3
							break;/*Break the while statement if configuration data write unsuccessful in EEPROM*/
  422a16:	e7e2      	b.n	4229de <Configuration+0xba>
								 rstc_start_software_reset(RSTC);
  422a18:	4864      	ldr	r0, [pc, #400]	; (422bac <Configuration+0x288>)
  422a1a:	4b65      	ldr	r3, [pc, #404]	; (422bb0 <Configuration+0x28c>)
  422a1c:	4798      	blx	r3
  422a1e:	e7f7      	b.n	422a10 <Configuration+0xec>
						test_exit_prev_tick =  count_1ms;
  422a20:	6823      	ldr	r3, [r4, #0]
  422a22:	9301      	str	r3, [sp, #4]
						test_state_prev_tick = count_1ms;
  422a24:	6823      	ldr	r3, [r4, #0]
  422a26:	9302      	str	r3, [sp, #8]
						if(test_button_pressed)
  422a28:	f1ba 0f00 	cmp.w	sl, #0
  422a2c:	d10d      	bne.n	422a4a <Configuration+0x126>
						first_release = 1u;
  422a2e:	f04f 0b01 	mov.w	fp, #1
        switch(config_state)
  422a32:	2d06      	cmp	r5, #6
  422a34:	f200 80df 	bhi.w	422bf6 <Configuration+0x2d2>
  422a38:	e8df f015 	tbh	[pc, r5, lsl #1]
  422a3c:	00d00066 	.word	0x00d00066
  422a40:	00450122 	.word	0x00450122
  422a44:	01d2019a 	.word	0x01d2019a
  422a48:	022a      	.short	0x022a
							auto_exit_prev_tick_g_u32 = count_1ms; /*Update the auto exit count*/
  422a4a:	6822      	ldr	r2, [r4, #0]
  422a4c:	4b4d      	ldr	r3, [pc, #308]	; (422b84 <Configuration+0x260>)
  422a4e:	601a      	str	r2, [r3, #0]
							blink_g_b = 1u;
  422a50:	2301      	movs	r3, #1
  422a52:	703b      	strb	r3, [r7, #0]
							LED_Blink(CONFIG_ALL_OFF,CONFIG_OFF);
  422a54:	2100      	movs	r1, #0
  422a56:	2032      	movs	r0, #50	; 0x32
  422a58:	4b4c      	ldr	r3, [pc, #304]	; (422b8c <Configuration+0x268>)
  422a5a:	4798      	blx	r3
							Config_Indication_LED(OFF);
  422a5c:	2000      	movs	r0, #0
  422a5e:	4b55      	ldr	r3, [pc, #340]	; (422bb4 <Configuration+0x290>)
  422a60:	4798      	blx	r3
							Buzzer_Freq_Set(BUZZER_FREQ_0_5KHZ, DUTY_0_5_KHZ);
  422a62:	2132      	movs	r1, #50	; 0x32
  422a64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  422a68:	f8df b16c 	ldr.w	fp, [pc, #364]	; 422bd8 <Configuration+0x2b4>
  422a6c:	47d8      	blx	fp
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422a6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  422a72:	6333      	str	r3, [r6, #48]	; 0x30
							Delay(200);
  422a74:	20c8      	movs	r0, #200	; 0xc8
  422a76:	4b46      	ldr	r3, [pc, #280]	; (422b90 <Configuration+0x26c>)
  422a78:	4798      	blx	r3
							Buzzer_Freq_Set(BUZZER_FREQ_0_5KHZ, 0);
  422a7a:	2100      	movs	r1, #0
  422a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  422a80:	47d8      	blx	fp
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422a82:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  422a86:	6373      	str	r3, [r6, #52]	; 0x34
						    Sys_Reset_LED(OFF);
  422a88:	2000      	movs	r0, #0
  422a8a:	4b4b      	ldr	r3, [pc, #300]	; (422bb8 <Configuration+0x294>)
  422a8c:	4798      	blx	r3
							config_state++;
  422a8e:	3501      	adds	r5, #1
							if(config_state ==3u)
  422a90:	2d03      	cmp	r5, #3
  422a92:	d005      	beq.n	422aa0 <Configuration+0x17c>
							if(config_state == 7u)
  422a94:	2d07      	cmp	r5, #7
  422a96:	d031      	beq.n	422afc <Configuration+0x1d8>
						first_release = 1u;
  422a98:	46d3      	mov	fp, sl
							test_button_pressed = 0u;
  422a9a:	f04f 0a00 	mov.w	sl, #0
  422a9e:	e7c8      	b.n	422a32 <Configuration+0x10e>
  422aa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  422aa4:	6373      	str	r3, [r6, #52]	; 0x34
  422aa6:	4b45      	ldr	r3, [pc, #276]	; (422bbc <Configuration+0x298>)
  422aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  422aac:	635a      	str	r2, [r3, #52]	; 0x34
  422aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  422ab2:	635a      	str	r2, [r3, #52]	; 0x34
  422ab4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  422ab8:	6373      	str	r3, [r6, #52]	; 0x34
  422aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  422abe:	6373      	str	r3, [r6, #52]	; 0x34
						first_release = 1u;
  422ac0:	46d3      	mov	fp, sl
							test_button_pressed = 0u;
  422ac2:	f04f 0a00 	mov.w	sl, #0
	        blink_g_b = 0u;
  422ac6:	2300      	movs	r3, #0
  422ac8:	703b      	strb	r3, [r7, #0]
	        button_status = Button_Status();
  422aca:	4b3d      	ldr	r3, [pc, #244]	; (422bc0 <Configuration+0x29c>)
  422acc:	4798      	blx	r3
  422ace:	4605      	mov	r5, r0
	        _Trouble_LED(ALWAYS_ON);
  422ad0:	2064      	movs	r0, #100	; 0x64
  422ad2:	4b3c      	ldr	r3, [pc, #240]	; (422bc4 <Configuration+0x2a0>)
  422ad4:	4798      	blx	r3
	        if(button_status == INC_BUTTON_PRESSED)
  422ad6:	2d02      	cmp	r5, #2
  422ad8:	f000 812c 	beq.w	422d34 <Configuration+0x410>
	        else if(button_status == DEC_BUTTON_PRESSED)
  422adc:	2d01      	cmp	r5, #1
  422ade:	f000 813a 	beq.w	422d56 <Configuration+0x432>
	        if(button_status)
  422ae2:	2d00      	cmp	r5, #0
  422ae4:	f040 8130 	bne.w	422d48 <Configuration+0x424>
	        Config_Indication_LED(amerex_config_data.trbl_relay_delay / 1000u);
  422ae8:	4b1f      	ldr	r3, [pc, #124]	; (422b68 <Configuration+0x244>)
  422aea:	88d8      	ldrh	r0, [r3, #6]
  422aec:	4b36      	ldr	r3, [pc, #216]	; (422bc8 <Configuration+0x2a4>)
  422aee:	fba3 3000 	umull	r3, r0, r3, r0
  422af2:	0980      	lsrs	r0, r0, #6
  422af4:	4b2f      	ldr	r3, [pc, #188]	; (422bb4 <Configuration+0x290>)
  422af6:	4798      	blx	r3
	  break;
  422af8:	2503      	movs	r5, #3
  422afa:	e07c      	b.n	422bf6 <Configuration+0x2d2>
  422afc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  422b00:	6373      	str	r3, [r6, #52]	; 0x34
						first_release = 1u;
  422b02:	46d3      	mov	fp, sl
							test_button_pressed = 0u;
  422b04:	f04f 0a00 	mov.w	sl, #0
                    button_status = Button_Status();
  422b08:	4b2d      	ldr	r3, [pc, #180]	; (422bc0 <Configuration+0x29c>)
  422b0a:	4798      	blx	r3
  422b0c:	4605      	mov	r5, r0
                    if(button_status == INC_BUTTON_PRESSED)
  422b0e:	2802      	cmp	r0, #2
  422b10:	d004      	beq.n	422b1c <Configuration+0x1f8>
                    else if(button_status == DEC_BUTTON_PRESSED)
  422b12:	2801      	cmp	r0, #1
  422b14:	d019      	beq.n	422b4a <Configuration+0x226>
                    if(button_status)
  422b16:	2800      	cmp	r0, #0
  422b18:	d06d      	beq.n	422bf6 <Configuration+0x2d2>
  422b1a:	e006      	b.n	422b2a <Configuration+0x206>
                        if(amerex_config_data.all_LED_duty < 100u)
  422b1c:	4b12      	ldr	r3, [pc, #72]	; (422b68 <Configuration+0x244>)
  422b1e:	881b      	ldrh	r3, [r3, #0]
  422b20:	2b63      	cmp	r3, #99	; 0x63
  422b22:	d80f      	bhi.n	422b44 <Configuration+0x220>
                            amerex_config_data.all_LED_duty += 10u;
  422b24:	330a      	adds	r3, #10
  422b26:	4a10      	ldr	r2, [pc, #64]	; (422b68 <Configuration+0x244>)
  422b28:	8013      	strh	r3, [r2, #0]
                        LED_Blink(config_state,CONFIG_ON);
  422b2a:	2101      	movs	r1, #1
  422b2c:	2000      	movs	r0, #0
  422b2e:	4b17      	ldr	r3, [pc, #92]	; (422b8c <Configuration+0x268>)
  422b30:	4798      	blx	r3
                       	Amerex_LOGO_PWM_EN(amerex_config_data.all_LED_duty);
  422b32:	4d0d      	ldr	r5, [pc, #52]	; (422b68 <Configuration+0x244>)
  422b34:	7828      	ldrb	r0, [r5, #0]
  422b36:	4b25      	ldr	r3, [pc, #148]	; (422bcc <Configuration+0x2a8>)
  422b38:	4798      	blx	r3
                       	LEDS_PWM_EN(amerex_config_data.all_LED_duty);
  422b3a:	7828      	ldrb	r0, [r5, #0]
  422b3c:	4b24      	ldr	r3, [pc, #144]	; (422bd0 <Configuration+0x2ac>)
  422b3e:	4798      	blx	r3
  422b40:	2500      	movs	r5, #0
  422b42:	e058      	b.n	422bf6 <Configuration+0x2d2>
                            Sound_Alert();
  422b44:	4b13      	ldr	r3, [pc, #76]	; (422b94 <Configuration+0x270>)
  422b46:	4798      	blx	r3
  422b48:	e7ef      	b.n	422b2a <Configuration+0x206>
                        if(amerex_config_data.all_LED_duty > 10u)
  422b4a:	4b07      	ldr	r3, [pc, #28]	; (422b68 <Configuration+0x244>)
  422b4c:	881b      	ldrh	r3, [r3, #0]
  422b4e:	2b0a      	cmp	r3, #10
  422b50:	d903      	bls.n	422b5a <Configuration+0x236>
                            amerex_config_data.all_LED_duty -= 10u;
  422b52:	3b0a      	subs	r3, #10
  422b54:	4a04      	ldr	r2, [pc, #16]	; (422b68 <Configuration+0x244>)
  422b56:	8013      	strh	r3, [r2, #0]
  422b58:	e7e7      	b.n	422b2a <Configuration+0x206>
                             Sound_Alert();
  422b5a:	4b0e      	ldr	r3, [pc, #56]	; (422b94 <Configuration+0x270>)
  422b5c:	4798      	blx	r3
  422b5e:	e7e4      	b.n	422b2a <Configuration+0x206>
  422b60:	200012f8 	.word	0x200012f8
  422b64:	20001388 	.word	0x20001388
  422b68:	20001588 	.word	0x20001588
  422b6c:	00424491 	.word	0x00424491
  422b70:	00422015 	.word	0x00422015
  422b74:	400e0e00 	.word	0x400e0e00
  422b78:	004249a5 	.word	0x004249a5
  422b7c:	20000098 	.word	0x20000098
  422b80:	00424729 	.word	0x00424729
  422b84:	200010b0 	.word	0x200010b0
  422b88:	20000095 	.word	0x20000095
  422b8c:	0042280d 	.word	0x0042280d
  422b90:	0042527d 	.word	0x0042527d
  422b94:	004227f1 	.word	0x004227f1
  422b98:	00422211 	.word	0x00422211
  422b9c:	40010000 	.word	0x40010000
  422ba0:	00421669 	.word	0x00421669
  422ba4:	00424701 	.word	0x00424701
  422ba8:	200010c0 	.word	0x200010c0
  422bac:	400e1800 	.word	0x400e1800
  422bb0:	004219c1 	.word	0x004219c1
  422bb4:	00423ea5 	.word	0x00423ea5
  422bb8:	00423d81 	.word	0x00423d81
  422bbc:	400e1000 	.word	0x400e1000
  422bc0:	004226ed 	.word	0x004226ed
  422bc4:	00423f8d 	.word	0x00423f8d
  422bc8:	10624dd3 	.word	0x10624dd3
  422bcc:	00424391 	.word	0x00424391
  422bd0:	004243ad 	.word	0x004243ad
  422bd4:	00421da5 	.word	0x00421da5
  422bd8:	00421db9 	.word	0x00421db9
          blink_g_b = 0u;
  422bdc:	2300      	movs	r3, #0
  422bde:	703b      	strb	r3, [r7, #0]
          button_status = Button_Status();
  422be0:	4b9f      	ldr	r3, [pc, #636]	; (422e60 <Configuration+0x53c>)
  422be2:	4798      	blx	r3
          if(button_status == INC_BUTTON_PRESSED)
  422be4:	2802      	cmp	r0, #2
  422be6:	d033      	beq.n	422c50 <Configuration+0x32c>
          else if(button_status == DEC_BUTTON_PRESSED)
  422be8:	2801      	cmp	r0, #1
  422bea:	d03e      	beq.n	422c6a <Configuration+0x346>
          if(button_status)
  422bec:	2800      	cmp	r0, #0
  422bee:	d136      	bne.n	422c5e <Configuration+0x33a>
          Fire_LED(LED_FADING);
  422bf0:	2001      	movs	r0, #1
  422bf2:	4b9c      	ldr	r3, [pc, #624]	; (422e64 <Configuration+0x540>)
  422bf4:	4798      	blx	r3
			    	wdt_restart(WDT);
  422bf6:	489c      	ldr	r0, [pc, #624]	; (422e68 <Configuration+0x544>)
  422bf8:	47c8      	blx	r9
		              if(((count_1ms - blink_prev_tick) >= __500ms) && blink_g_b)
  422bfa:	6823      	ldr	r3, [r4, #0]
  422bfc:	eba3 0308 	sub.w	r3, r3, r8
  422c00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  422c04:	d303      	bcc.n	422c0e <Configuration+0x2ea>
  422c06:	783b      	ldrb	r3, [r7, #0]
  422c08:	2b00      	cmp	r3, #0
  422c0a:	f47f aed1 	bne.w	4229b0 <Configuration+0x8c>
					if((count_1ms - auto_exit_prev_tick_g_u32) > __20_SEC)
  422c0e:	6823      	ldr	r3, [r4, #0]
  422c10:	4a96      	ldr	r2, [pc, #600]	; (422e6c <Configuration+0x548>)
  422c12:	6812      	ldr	r2, [r2, #0]
  422c14:	1a9b      	subs	r3, r3, r2
  422c16:	f644 6220 	movw	r2, #20000	; 0x4e20
  422c1a:	4293      	cmp	r3, r2
  422c1c:	f63f aecf 	bhi.w	4229be <Configuration+0x9a>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  422c20:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
					if(!ioport_get_pin_level(TEST_SW_PIN))
  422c22:	f013 0f01 	tst.w	r3, #1
  422c26:	f47f aefb 	bne.w	422a20 <Configuration+0xfc>
						if((count_1ms - test_exit_prev_tick) > 5000u)	   // SEC_5
  422c2a:	6823      	ldr	r3, [r4, #0]
  422c2c:	9a01      	ldr	r2, [sp, #4]
  422c2e:	1a9b      	subs	r3, r3, r2
  422c30:	f241 3288 	movw	r2, #5000	; 0x1388
  422c34:	4293      	cmp	r3, r2
  422c36:	f63f aed9 	bhi.w	4229ec <Configuration+0xc8>
						if(((count_1ms - test_state_prev_tick) >= __100ms) && first_release)
  422c3a:	6823      	ldr	r3, [r4, #0]
  422c3c:	9a02      	ldr	r2, [sp, #8]
  422c3e:	1a9b      	subs	r3, r3, r2
  422c40:	2b63      	cmp	r3, #99	; 0x63
  422c42:	f67f aef6 	bls.w	422a32 <Configuration+0x10e>
							test_button_pressed = 1u;
  422c46:	f1bb 0f00 	cmp.w	fp, #0
  422c4a:	bf18      	it	ne
  422c4c:	46da      	movne	sl, fp
  422c4e:	e6f0      	b.n	422a32 <Configuration+0x10e>
              if(amerex_config_data.fire_LED_duty < 100u)
  422c50:	4b87      	ldr	r3, [pc, #540]	; (422e70 <Configuration+0x54c>)
  422c52:	885b      	ldrh	r3, [r3, #2]
  422c54:	2b63      	cmp	r3, #99	; 0x63
  422c56:	d805      	bhi.n	422c64 <Configuration+0x340>
                 amerex_config_data.fire_LED_duty += 10u;
  422c58:	330a      	adds	r3, #10
  422c5a:	4a85      	ldr	r2, [pc, #532]	; (422e70 <Configuration+0x54c>)
  422c5c:	8053      	strh	r3, [r2, #2]
              Fire_LED_Count();
  422c5e:	4b85      	ldr	r3, [pc, #532]	; (422e74 <Configuration+0x550>)
  422c60:	4798      	blx	r3
  422c62:	e7c5      	b.n	422bf0 <Configuration+0x2cc>
                   Sound_Alert();
  422c64:	4b84      	ldr	r3, [pc, #528]	; (422e78 <Configuration+0x554>)
  422c66:	4798      	blx	r3
  422c68:	e7f9      	b.n	422c5e <Configuration+0x33a>
              if(amerex_config_data.fire_LED_duty > 10u)
  422c6a:	4b81      	ldr	r3, [pc, #516]	; (422e70 <Configuration+0x54c>)
  422c6c:	885b      	ldrh	r3, [r3, #2]
  422c6e:	2b0a      	cmp	r3, #10
  422c70:	d903      	bls.n	422c7a <Configuration+0x356>
                 amerex_config_data.fire_LED_duty -= 10u;
  422c72:	3b0a      	subs	r3, #10
  422c74:	4a7e      	ldr	r2, [pc, #504]	; (422e70 <Configuration+0x54c>)
  422c76:	8053      	strh	r3, [r2, #2]
  422c78:	e7f1      	b.n	422c5e <Configuration+0x33a>
                  Sound_Alert();
  422c7a:	4b7f      	ldr	r3, [pc, #508]	; (422e78 <Configuration+0x554>)
  422c7c:	4798      	blx	r3
  422c7e:	e7ee      	b.n	422c5e <Configuration+0x33a>
	  	   blink_g_b = 0u;
  422c80:	2300      	movs	r3, #0
  422c82:	703b      	strb	r3, [r7, #0]
	  	   button_status = Button_Status();
  422c84:	4b76      	ldr	r3, [pc, #472]	; (422e60 <Configuration+0x53c>)
  422c86:	4798      	blx	r3
		if(amerex_config_data.CAN_baud_rate == 0u)
  422c88:	4b79      	ldr	r3, [pc, #484]	; (422e70 <Configuration+0x54c>)
  422c8a:	7b1b      	ldrb	r3, [r3, #12]
  422c8c:	b9cb      	cbnz	r3, 422cc2 <Configuration+0x39e>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  422c92:	6332      	str	r2, [r6, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422c94:	4a79      	ldr	r2, [pc, #484]	; (422e7c <Configuration+0x558>)
  422c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
  422c9a:	6351      	str	r1, [r2, #52]	; 0x34
  422c9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  422ca0:	6351      	str	r1, [r2, #52]	; 0x34
  422ca2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  422ca6:	6372      	str	r2, [r6, #52]	; 0x34
  422ca8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  422cac:	6372      	str	r2, [r6, #52]	; 0x34
	  	   if(button_status == INC_BUTTON_PRESSED)
  422cae:	2802      	cmp	r0, #2
  422cb0:	d039      	beq.n	422d26 <Configuration+0x402>
	  	   else if(button_status == DEC_BUTTON_PRESSED)
  422cb2:	2801      	cmp	r0, #1
  422cb4:	d19f      	bne.n	422bf6 <Configuration+0x2d2>
		  	   if(amerex_config_data.CAN_baud_rate > 0u)
  422cb6:	2b00      	cmp	r3, #0
  422cb8:	d039      	beq.n	422d2e <Configuration+0x40a>
			  	   amerex_config_data.CAN_baud_rate -= 1u;
  422cba:	3b01      	subs	r3, #1
  422cbc:	4a6c      	ldr	r2, [pc, #432]	; (422e70 <Configuration+0x54c>)
  422cbe:	7313      	strb	r3, [r2, #12]
  422cc0:	e799      	b.n	422bf6 <Configuration+0x2d2>
		else if(amerex_config_data.CAN_baud_rate == 1u)
  422cc2:	2b01      	cmp	r3, #1
  422cc4:	d006      	beq.n	422cd4 <Configuration+0x3b0>
		else if(amerex_config_data.CAN_baud_rate == 2u)
  422cc6:	2b02      	cmp	r3, #2
  422cc8:	d015      	beq.n	422cf6 <Configuration+0x3d2>
	  	   if(button_status == INC_BUTTON_PRESSED)
  422cca:	2802      	cmp	r0, #2
  422ccc:	d026      	beq.n	422d1c <Configuration+0x3f8>
	  	   else if(button_status == DEC_BUTTON_PRESSED)
  422cce:	2801      	cmp	r0, #1
  422cd0:	d191      	bne.n	422bf6 <Configuration+0x2d2>
  422cd2:	e7f2      	b.n	422cba <Configuration+0x396>
  422cd4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  422cd8:	6372      	str	r2, [r6, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422cda:	4a68      	ldr	r2, [pc, #416]	; (422e7c <Configuration+0x558>)
  422cdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  422ce0:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422ce2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  422ce6:	6351      	str	r1, [r2, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422ce8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  422cec:	6332      	str	r2, [r6, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  422cf2:	6372      	str	r2, [r6, #52]	; 0x34
  422cf4:	e7db      	b.n	422cae <Configuration+0x38a>
  422cf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  422cfa:	6372      	str	r2, [r6, #52]	; 0x34
  422cfc:	4a5f      	ldr	r2, [pc, #380]	; (422e7c <Configuration+0x558>)
  422cfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
  422d02:	6351      	str	r1, [r2, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422d04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  422d08:	6311      	str	r1, [r2, #48]	; 0x30
  422d0a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  422d0e:	6332      	str	r2, [r6, #48]	; 0x30
  422d10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  422d14:	6332      	str	r2, [r6, #48]	; 0x30
	  	   if(button_status == INC_BUTTON_PRESSED)
  422d16:	2802      	cmp	r0, #2
  422d18:	d1d9      	bne.n	422cce <Configuration+0x3aa>
  422d1a:	e001      	b.n	422d20 <Configuration+0x3fc>
		  	   if(amerex_config_data.CAN_baud_rate < 2u)
  422d1c:	2b01      	cmp	r3, #1
  422d1e:	d902      	bls.n	422d26 <Configuration+0x402>
			  	   Sound_Alert();
  422d20:	4b55      	ldr	r3, [pc, #340]	; (422e78 <Configuration+0x554>)
  422d22:	4798      	blx	r3
  422d24:	e767      	b.n	422bf6 <Configuration+0x2d2>
			  	   amerex_config_data.CAN_baud_rate += 1u;
  422d26:	3301      	adds	r3, #1
  422d28:	4a51      	ldr	r2, [pc, #324]	; (422e70 <Configuration+0x54c>)
  422d2a:	7313      	strb	r3, [r2, #12]
  422d2c:	e763      	b.n	422bf6 <Configuration+0x2d2>
			  	   Sound_Alert();
  422d2e:	4b52      	ldr	r3, [pc, #328]	; (422e78 <Configuration+0x554>)
  422d30:	4798      	blx	r3
  422d32:	e760      	b.n	422bf6 <Configuration+0x2d2>
		        if(amerex_config_data.trbl_relay_delay < 6000u)
  422d34:	4b4e      	ldr	r3, [pc, #312]	; (422e70 <Configuration+0x54c>)
  422d36:	88db      	ldrh	r3, [r3, #6]
  422d38:	f241 726f 	movw	r2, #5999	; 0x176f
  422d3c:	4293      	cmp	r3, r2
  422d3e:	d807      	bhi.n	422d50 <Configuration+0x42c>
			        amerex_config_data.trbl_relay_delay += 1000u;
  422d40:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
  422d44:	4a4a      	ldr	r2, [pc, #296]	; (422e70 <Configuration+0x54c>)
  422d46:	80d3      	strh	r3, [r2, #6]
		        Config_Indication_LED(OFF);
  422d48:	2000      	movs	r0, #0
  422d4a:	4b4d      	ldr	r3, [pc, #308]	; (422e80 <Configuration+0x55c>)
  422d4c:	4798      	blx	r3
  422d4e:	e6cb      	b.n	422ae8 <Configuration+0x1c4>
			        Sound_Alert();
  422d50:	4b49      	ldr	r3, [pc, #292]	; (422e78 <Configuration+0x554>)
  422d52:	4798      	blx	r3
  422d54:	e7f8      	b.n	422d48 <Configuration+0x424>
		        if(amerex_config_data.trbl_relay_delay > 1000u)
  422d56:	4b46      	ldr	r3, [pc, #280]	; (422e70 <Configuration+0x54c>)
  422d58:	88db      	ldrh	r3, [r3, #6]
  422d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  422d5e:	d904      	bls.n	422d6a <Configuration+0x446>
			        amerex_config_data.trbl_relay_delay -= 1000u;
  422d60:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
  422d64:	4a42      	ldr	r2, [pc, #264]	; (422e70 <Configuration+0x54c>)
  422d66:	80d3      	strh	r3, [r2, #6]
  422d68:	e7ee      	b.n	422d48 <Configuration+0x424>
			        Sound_Alert();
  422d6a:	4b43      	ldr	r3, [pc, #268]	; (422e78 <Configuration+0x554>)
  422d6c:	4798      	blx	r3
  422d6e:	e7eb      	b.n	422d48 <Configuration+0x424>
	        blink_g_b = 0u;
  422d70:	2300      	movs	r3, #0
  422d72:	703b      	strb	r3, [r7, #0]
	        button_status = Button_Status();
  422d74:	4b3a      	ldr	r3, [pc, #232]	; (422e60 <Configuration+0x53c>)
  422d76:	4798      	blx	r3
  422d78:	9003      	str	r0, [sp, #12]
	        LED_Blink(CONFIG_FIRE_LED,CONFIG_ON);
  422d7a:	2101      	movs	r1, #1
  422d7c:	4608      	mov	r0, r1
  422d7e:	4b41      	ldr	r3, [pc, #260]	; (422e84 <Configuration+0x560>)
  422d80:	4798      	blx	r3
	        if(button_status == INC_BUTTON_PRESSED)
  422d82:	9b03      	ldr	r3, [sp, #12]
  422d84:	2b02      	cmp	r3, #2
  422d86:	d00d      	beq.n	422da4 <Configuration+0x480>
	        else if(button_status == DEC_BUTTON_PRESSED)
  422d88:	9b03      	ldr	r3, [sp, #12]
  422d8a:	2b01      	cmp	r3, #1
  422d8c:	d01b      	beq.n	422dc6 <Configuration+0x4a2>
	        if(button_status)
  422d8e:	9b03      	ldr	r3, [sp, #12]
  422d90:	b993      	cbnz	r3, 422db8 <Configuration+0x494>
	        Config_Indication_LED(amerex_config_data.fire_relay_delay / 1000u);
  422d92:	4b37      	ldr	r3, [pc, #220]	; (422e70 <Configuration+0x54c>)
  422d94:	8918      	ldrh	r0, [r3, #8]
  422d96:	4b3c      	ldr	r3, [pc, #240]	; (422e88 <Configuration+0x564>)
  422d98:	fba3 3000 	umull	r3, r0, r3, r0
  422d9c:	0980      	lsrs	r0, r0, #6
  422d9e:	4b38      	ldr	r3, [pc, #224]	; (422e80 <Configuration+0x55c>)
  422da0:	4798      	blx	r3
	  break;
  422da2:	e728      	b.n	422bf6 <Configuration+0x2d2>
		        if(amerex_config_data.fire_relay_delay < 6000u)
  422da4:	4b32      	ldr	r3, [pc, #200]	; (422e70 <Configuration+0x54c>)
  422da6:	891b      	ldrh	r3, [r3, #8]
  422da8:	f241 726f 	movw	r2, #5999	; 0x176f
  422dac:	4293      	cmp	r3, r2
  422dae:	d807      	bhi.n	422dc0 <Configuration+0x49c>
			       amerex_config_data.fire_relay_delay += 1000u;
  422db0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
  422db4:	4a2e      	ldr	r2, [pc, #184]	; (422e70 <Configuration+0x54c>)
  422db6:	8113      	strh	r3, [r2, #8]
		        Config_Indication_LED(OFF);
  422db8:	2000      	movs	r0, #0
  422dba:	4b31      	ldr	r3, [pc, #196]	; (422e80 <Configuration+0x55c>)
  422dbc:	4798      	blx	r3
  422dbe:	e7e8      	b.n	422d92 <Configuration+0x46e>
			        Sound_Alert();
  422dc0:	4b2d      	ldr	r3, [pc, #180]	; (422e78 <Configuration+0x554>)
  422dc2:	4798      	blx	r3
  422dc4:	e7f8      	b.n	422db8 <Configuration+0x494>
		        if(amerex_config_data.fire_relay_delay > 1000u)
  422dc6:	4b2a      	ldr	r3, [pc, #168]	; (422e70 <Configuration+0x54c>)
  422dc8:	891b      	ldrh	r3, [r3, #8]
  422dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  422dce:	d904      	bls.n	422dda <Configuration+0x4b6>
			       amerex_config_data.fire_relay_delay -= 1000u;
  422dd0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
  422dd4:	4a26      	ldr	r2, [pc, #152]	; (422e70 <Configuration+0x54c>)
  422dd6:	8113      	strh	r3, [r2, #8]
  422dd8:	e7ee      	b.n	422db8 <Configuration+0x494>
			        Sound_Alert();
  422dda:	4b27      	ldr	r3, [pc, #156]	; (422e78 <Configuration+0x554>)
  422ddc:	4798      	blx	r3
  422dde:	e7eb      	b.n	422db8 <Configuration+0x494>
	   	  	   _Trouble_LED(ALWAYS_ON);
  422de0:	2064      	movs	r0, #100	; 0x64
  422de2:	4b2a      	ldr	r3, [pc, #168]	; (422e8c <Configuration+0x568>)
  422de4:	4798      	blx	r3
			   (amerex_config_data.Default_trbl_rly_level == 1u)?(ioport_set_pin_level(Alarm_silence,ON),ioport_set_pin_level(SYS_RST_LED,OFF),ioport_set_pin_level(Amerex_R,ON),ioport_set_pin_level(Amerex_G,OFF)):(ioport_set_pin_level(Alarm_silence,OFF),ioport_set_pin_level(SYS_RST_LED,ON),ioport_set_pin_level(Amerex_G,ON),ioport_set_pin_level(Amerex_R,OFF));
  422de6:	4b22      	ldr	r3, [pc, #136]	; (422e70 <Configuration+0x54c>)
  422de8:	7b5b      	ldrb	r3, [r3, #13]
  422dea:	2b01      	cmp	r3, #1
  422dec:	d01c      	beq.n	422e28 <Configuration+0x504>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422dee:	4b23      	ldr	r3, [pc, #140]	; (422e7c <Configuration+0x558>)
  422df0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  422df4:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  422dfa:	631a      	str	r2, [r3, #48]	; 0x30
  422dfc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  422e00:	6333      	str	r3, [r6, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422e02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  422e06:	6373      	str	r3, [r6, #52]	; 0x34
	   	  	   blink_g_b = 0u;
  422e08:	2300      	movs	r3, #0
  422e0a:	703b      	strb	r3, [r7, #0]
	   	  	   button_status = Button_Status();
  422e0c:	4b14      	ldr	r3, [pc, #80]	; (422e60 <Configuration+0x53c>)
  422e0e:	4798      	blx	r3
 	   	  	   if(button_status == INC_BUTTON_PRESSED)
  422e10:	2802      	cmp	r0, #2
  422e12:	d017      	beq.n	422e44 <Configuration+0x520>
	   	  	   else if(button_status == DEC_BUTTON_PRESSED)
  422e14:	2801      	cmp	r0, #1
  422e16:	f47f aeee 	bne.w	422bf6 <Configuration+0x2d2>
		   	  	   if(amerex_config_data.Default_trbl_rly_level == 1u)
  422e1a:	4b15      	ldr	r3, [pc, #84]	; (422e70 <Configuration+0x54c>)
  422e1c:	7b5b      	ldrb	r3, [r3, #13]
  422e1e:	2b01      	cmp	r3, #1
  422e20:	d01a      	beq.n	422e58 <Configuration+0x534>
			   	  	   Sound_Alert();
  422e22:	4b15      	ldr	r3, [pc, #84]	; (422e78 <Configuration+0x554>)
  422e24:	4798      	blx	r3
  422e26:	e6e6      	b.n	422bf6 <Configuration+0x2d2>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422e28:	4b14      	ldr	r3, [pc, #80]	; (422e7c <Configuration+0x558>)
  422e2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  422e2e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
  422e34:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422e36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  422e3a:	6333      	str	r3, [r6, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422e3c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  422e40:	6373      	str	r3, [r6, #52]	; 0x34
  422e42:	e7e1      	b.n	422e08 <Configuration+0x4e4>
		   	  	   if(amerex_config_data.Default_trbl_rly_level <= 0u)
  422e44:	4b0a      	ldr	r3, [pc, #40]	; (422e70 <Configuration+0x54c>)
  422e46:	7b5b      	ldrb	r3, [r3, #13]
  422e48:	b91b      	cbnz	r3, 422e52 <Configuration+0x52e>
			   	  	   amerex_config_data.Default_trbl_rly_level = 1u;
  422e4a:	2201      	movs	r2, #1
  422e4c:	4b08      	ldr	r3, [pc, #32]	; (422e70 <Configuration+0x54c>)
  422e4e:	735a      	strb	r2, [r3, #13]
  422e50:	e6d1      	b.n	422bf6 <Configuration+0x2d2>
			   	  	   Sound_Alert();
  422e52:	4b09      	ldr	r3, [pc, #36]	; (422e78 <Configuration+0x554>)
  422e54:	4798      	blx	r3
  422e56:	e6ce      	b.n	422bf6 <Configuration+0x2d2>
			   	  	   amerex_config_data.Default_trbl_rly_level = 0u;
  422e58:	2200      	movs	r2, #0
  422e5a:	4b05      	ldr	r3, [pc, #20]	; (422e70 <Configuration+0x54c>)
  422e5c:	735a      	strb	r2, [r3, #13]
  422e5e:	e6ca      	b.n	422bf6 <Configuration+0x2d2>
  422e60:	004226ed 	.word	0x004226ed
  422e64:	004241a1 	.word	0x004241a1
  422e68:	400e1850 	.word	0x400e1850
  422e6c:	200010b0 	.word	0x200010b0
  422e70:	20001588 	.word	0x20001588
  422e74:	004228fd 	.word	0x004228fd
  422e78:	004227f1 	.word	0x004227f1
  422e7c:	400e1000 	.word	0x400e1000
  422e80:	00423ea5 	.word	0x00423ea5
  422e84:	0042280d 	.word	0x0042280d
  422e88:	10624dd3 	.word	0x10624dd3
  422e8c:	00423f8d 	.word	0x00423f8d
             LED_Blink(CONFIG_FIRE_LED,CONFIG_ON);
  422e90:	2101      	movs	r1, #1
  422e92:	4608      	mov	r0, r1
  422e94:	4b1f      	ldr	r3, [pc, #124]	; (422f14 <Configuration+0x5f0>)
  422e96:	4798      	blx	r3
		  (amerex_config_data.Default_fire_rly_level == 1u)?(ioport_set_pin_level(Alarm_silence,ON),ioport_set_pin_level(SYS_RST_LED,OFF),ioport_set_pin_level(Amerex_R,ON),ioport_set_pin_level(Amerex_G,OFF)):(ioport_set_pin_level(Alarm_silence,OFF),ioport_set_pin_level(SYS_RST_LED,ON),ioport_set_pin_level(Amerex_G,ON),ioport_set_pin_level(Amerex_R,OFF));		 //  ioport_set_pin_level(Amerex_R,ON);
  422e98:	4b1f      	ldr	r3, [pc, #124]	; (422f18 <Configuration+0x5f4>)
  422e9a:	7b9b      	ldrb	r3, [r3, #14]
  422e9c:	2b01      	cmp	r3, #1
  422e9e:	d01c      	beq.n	422eda <Configuration+0x5b6>
  422ea0:	4b1e      	ldr	r3, [pc, #120]	; (422f1c <Configuration+0x5f8>)
  422ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  422ea6:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  422eac:	631a      	str	r2, [r3, #48]	; 0x30
  422eae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  422eb2:	6333      	str	r3, [r6, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  422eb8:	6373      	str	r3, [r6, #52]	; 0x34
		   blink_g_b = 0u;
  422eba:	2300      	movs	r3, #0
  422ebc:	703b      	strb	r3, [r7, #0]
		   button_status = Button_Status();
  422ebe:	4b18      	ldr	r3, [pc, #96]	; (422f20 <Configuration+0x5fc>)
  422ec0:	4798      	blx	r3
		   if(button_status == INC_BUTTON_PRESSED)
  422ec2:	2802      	cmp	r0, #2
  422ec4:	d017      	beq.n	422ef6 <Configuration+0x5d2>
		   else if(button_status == DEC_BUTTON_PRESSED)
  422ec6:	2801      	cmp	r0, #1
  422ec8:	f47f ae95 	bne.w	422bf6 <Configuration+0x2d2>
			   if(amerex_config_data.Default_fire_rly_level == 1u)
  422ecc:	4b12      	ldr	r3, [pc, #72]	; (422f18 <Configuration+0x5f4>)
  422ece:	7b9b      	ldrb	r3, [r3, #14]
  422ed0:	2b01      	cmp	r3, #1
  422ed2:	d01a      	beq.n	422f0a <Configuration+0x5e6>
				   Sound_Alert();
  422ed4:	4b13      	ldr	r3, [pc, #76]	; (422f24 <Configuration+0x600>)
  422ed6:	4798      	blx	r3
  422ed8:	e68d      	b.n	422bf6 <Configuration+0x2d2>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422eda:	4b10      	ldr	r3, [pc, #64]	; (422f1c <Configuration+0x5f8>)
  422edc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  422ee0:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  422ee6:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422ee8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  422eec:	6333      	str	r3, [r6, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422eee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  422ef2:	6373      	str	r3, [r6, #52]	; 0x34
  422ef4:	e7e1      	b.n	422eba <Configuration+0x596>
			   if(amerex_config_data.Default_fire_rly_level <= 0u)
  422ef6:	4b08      	ldr	r3, [pc, #32]	; (422f18 <Configuration+0x5f4>)
  422ef8:	7b9b      	ldrb	r3, [r3, #14]
  422efa:	b91b      	cbnz	r3, 422f04 <Configuration+0x5e0>
				   amerex_config_data.Default_fire_rly_level = 1u;
  422efc:	2201      	movs	r2, #1
  422efe:	4b06      	ldr	r3, [pc, #24]	; (422f18 <Configuration+0x5f4>)
  422f00:	739a      	strb	r2, [r3, #14]
  422f02:	e678      	b.n	422bf6 <Configuration+0x2d2>
				   Sound_Alert();
  422f04:	4b07      	ldr	r3, [pc, #28]	; (422f24 <Configuration+0x600>)
  422f06:	4798      	blx	r3
  422f08:	e675      	b.n	422bf6 <Configuration+0x2d2>
				   amerex_config_data.Default_fire_rly_level = 0u;
  422f0a:	2200      	movs	r2, #0
  422f0c:	4b02      	ldr	r3, [pc, #8]	; (422f18 <Configuration+0x5f4>)
  422f0e:	739a      	strb	r2, [r3, #14]
  422f10:	e671      	b.n	422bf6 <Configuration+0x2d2>
  422f12:	bf00      	nop
  422f14:	0042280d 	.word	0x0042280d
  422f18:	20001588 	.word	0x20001588
  422f1c:	400e1000 	.word	0x400e1000
  422f20:	004226ed 	.word	0x004226ed
  422f24:	004227f1 	.word	0x004227f1

00422f28 <Actuator_Pulse>:
/* Function : Actuate the actuator when fire occur
 * Parameter: None
 * Return   : None
 */
void Actuator_Pulse(void)
{
  422f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(fire_happen_g_b == 1u)
  422f2a:	4b22      	ldr	r3, [pc, #136]	; (422fb4 <Actuator_Pulse+0x8c>)
  422f2c:	781b      	ldrb	r3, [r3, #0]
  422f2e:	b173      	cbz	r3, 422f4e <Actuator_Pulse+0x26>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422f30:	4b21      	ldr	r3, [pc, #132]	; (422fb8 <Actuator_Pulse+0x90>)
  422f32:	2208      	movs	r2, #8
  422f34:	631a      	str	r2, [r3, #48]	; 0x30
  422f36:	2201      	movs	r2, #1
  422f38:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422f3a:	2204      	movs	r2, #4
  422f3c:	635a      	str	r2, [r3, #52]	; 0x34
  422f3e:	2202      	movs	r2, #2
  422f40:	635a      	str	r2, [r3, #52]	; 0x34
    {
        ioport_set_pin_level(ACTA_P,1);
        ioport_set_pin_level(ACTB_P,1);
        ioport_set_pin_level(ACTA_N,0);
        ioport_set_pin_level(ACTB_N,0);
        if((fire_happen_safety_g_b) && (!pulse_flag_g_b) && fire_happen_g_b)
  422f42:	4b1e      	ldr	r3, [pc, #120]	; (422fbc <Actuator_Pulse+0x94>)
  422f44:	781b      	ldrb	r3, [r3, #0]
  422f46:	b113      	cbz	r3, 422f4e <Actuator_Pulse+0x26>
  422f48:	4b1d      	ldr	r3, [pc, #116]	; (422fc0 <Actuator_Pulse+0x98>)
  422f4a:	781b      	ldrb	r3, [r3, #0]
  422f4c:	b103      	cbz	r3, 422f50 <Actuator_Pulse+0x28>
  422f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            pulse_flag_g_b = 1u;
  422f50:	2701      	movs	r7, #1
  422f52:	4b1b      	ldr	r3, [pc, #108]	; (422fc0 <Actuator_Pulse+0x98>)
  422f54:	701f      	strb	r7, [r3, #0]
            Delay(5);
  422f56:	2005      	movs	r0, #5
  422f58:	4c1a      	ldr	r4, [pc, #104]	; (422fc4 <Actuator_Pulse+0x9c>)
  422f5a:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422f5c:	4d1a      	ldr	r5, [pc, #104]	; (422fc8 <Actuator_Pulse+0xa0>)
  422f5e:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  422f62:	632e      	str	r6, [r5, #48]	; 0x30
			ioport_set_pin_level(ACT_FIRE_ON,1);
            Delay(50);
  422f64:	2032      	movs	r0, #50	; 0x32
  422f66:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422f68:	636e      	str	r6, [r5, #52]	; 0x34
            ioport_set_pin_level(ACT_FIRE_ON,0);
            Delay(500);
  422f6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  422f6e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422f70:	632e      	str	r6, [r5, #48]	; 0x30
            ioport_set_pin_level(ACT_FIRE_ON,1);
            Delay(50);
  422f72:	2032      	movs	r0, #50	; 0x32
  422f74:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  422f76:	636e      	str	r6, [r5, #52]	; 0x34
            ioport_set_pin_level(ACT_FIRE_ON,0);
            Delay(50);
  422f78:	2032      	movs	r0, #50	; 0x32
  422f7a:	47a0      	blx	r4

            /* Log the fire event*/
            //LOG
                Reset_Values();
  422f7c:	4b13      	ldr	r3, [pc, #76]	; (422fcc <Actuator_Pulse+0xa4>)
  422f7e:	4798      	blx	r3

                log_data.log_code = 8u; /*8 to indicate the fire happened in system*/
  422f80:	4b13      	ldr	r3, [pc, #76]	; (422fd0 <Actuator_Pulse+0xa8>)
  422f82:	2208      	movs	r2, #8
  422f84:	711a      	strb	r2, [r3, #4]

                log_data.start_stop = 1u;
  422f86:	719f      	strb	r7, [r3, #6]

                log_data.trouble_fire = (manual_sw_trbl_g_b << 2) | (hd2_trouble_g_u8 ==1u?2u:0) | (hd1_trouble_g_u8 ==1u?1:0) ;  /*assign the fire event
  422f88:	4b12      	ldr	r3, [pc, #72]	; (422fd4 <Actuator_Pulse+0xac>)
  422f8a:	781b      	ldrb	r3, [r3, #0]
  422f8c:	009b      	lsls	r3, r3, #2
  422f8e:	b2db      	uxtb	r3, r3
  422f90:	4a11      	ldr	r2, [pc, #68]	; (422fd8 <Actuator_Pulse+0xb0>)
  422f92:	7812      	ldrb	r2, [r2, #0]
  422f94:	42ba      	cmp	r2, r7
  422f96:	bf0c      	ite	eq
  422f98:	2202      	moveq	r2, #2
  422f9a:	2200      	movne	r2, #0
  422f9c:	480c      	ldr	r0, [pc, #48]	; (422fd0 <Actuator_Pulse+0xa8>)
  422f9e:	490f      	ldr	r1, [pc, #60]	; (422fdc <Actuator_Pulse+0xb4>)
  422fa0:	7809      	ldrb	r1, [r1, #0]
  422fa2:	42b9      	cmp	r1, r7
  422fa4:	bf08      	it	eq
  422fa6:	f043 0301 	orreq.w	r3, r3, #1
  422faa:	4313      	orrs	r3, r2
  422fac:	7143      	strb	r3, [r0, #5]
                due to manual actuation or HD1 or HD2*/

                NOR_Flash_Log_Data(&log_data);
  422fae:	4b0c      	ldr	r3, [pc, #48]	; (422fe0 <Actuator_Pulse+0xb8>)
  422fb0:	4798      	blx	r3
        }

    }
}
  422fb2:	e7cc      	b.n	422f4e <Actuator_Pulse+0x26>
  422fb4:	20000b08 	.word	0x20000b08
  422fb8:	400e1400 	.word	0x400e1400
  422fbc:	20000b09 	.word	0x20000b09
  422fc0:	200010e0 	.word	0x200010e0
  422fc4:	0042527d 	.word	0x0042527d
  422fc8:	400e0e00 	.word	0x400e0e00
  422fcc:	004249a5 	.word	0x004249a5
  422fd0:	20000098 	.word	0x20000098
  422fd4:	20001371 	.word	0x20001371
  422fd8:	20000b10 	.word	0x20000b10
  422fdc:	20000b0c 	.word	0x20000b0c
  422fe0:	00424729 	.word	0x00424729

00422fe4 <Check_Heat_Detector_Trbl>:

void Check_Heat_Detector_Trbl(void)
	{
  422fe4:	b508      	push	{r3, lr}
	static  uint8_t hd1_prev_state_sl_u8 = 0u;
	static  uint8_t hd2_prev_state_sl_u8 = 0u;

	 /**********************For Heat Detector 1*****************************/

	if((hd1_measured_g_u16 >= HD_OK_MIN && hd1_measured_g_u16 < HD_OK_MAX) && (Raw_value_HD1 >= HD_OK_MIN && Raw_value_HD1 < HD_OK_MAX))
  422fe6:	4b96      	ldr	r3, [pc, #600]	; (423240 <Check_Heat_Detector_Trbl+0x25c>)
  422fe8:	881b      	ldrh	r3, [r3, #0]
  422fea:	f6a3 3254 	subw	r2, r3, #2900	; 0xb54
  422fee:	b292      	uxth	r2, r2
  422ff0:	2ac7      	cmp	r2, #199	; 0xc7
  422ff2:	d86d      	bhi.n	4230d0 <Check_Heat_Detector_Trbl+0xec>
  422ff4:	4a93      	ldr	r2, [pc, #588]	; (423244 <Check_Heat_Detector_Trbl+0x260>)
  422ff6:	6812      	ldr	r2, [r2, #0]
  422ff8:	f6a2 3254 	subw	r2, r2, #2900	; 0xb54
  422ffc:	2ac7      	cmp	r2, #199	; 0xc7
  422ffe:	d867      	bhi.n	4230d0 <Check_Heat_Detector_Trbl+0xec>
	{
		hd1_trouble_g_u8 = NO_TROUBLE;  /* No trouble in zone*/
  423000:	2200      	movs	r2, #0
  423002:	4b91      	ldr	r3, [pc, #580]	; (423248 <Check_Heat_Detector_Trbl+0x264>)
  423004:	701a      	strb	r2, [r3, #0]
		hd1_prev_tick_g_u32 = count_1ms ;
  423006:	4b91      	ldr	r3, [pc, #580]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  423008:	681a      	ldr	r2, [r3, #0]
  42300a:	4b91      	ldr	r3, [pc, #580]	; (423250 <Check_Heat_Detector_Trbl+0x26c>)
  42300c:	601a      	str	r2, [r3, #0]





	if(hd1_prev_state_sl_u8 != hd1_trouble_g_u8)/*if any trouble happened log the data*/
  42300e:	4b91      	ldr	r3, [pc, #580]	; (423254 <Check_Heat_Detector_Trbl+0x270>)
  423010:	781a      	ldrb	r2, [r3, #0]
  423012:	4b8d      	ldr	r3, [pc, #564]	; (423248 <Check_Heat_Detector_Trbl+0x264>)
  423014:	781b      	ldrb	r3, [r3, #0]
  423016:	429a      	cmp	r2, r3
  423018:	d01e      	beq.n	423058 <Check_Heat_Detector_Trbl+0x74>
	{
		//LOG
	Reset_Values();
  42301a:	4b8f      	ldr	r3, [pc, #572]	; (423258 <Check_Heat_Detector_Trbl+0x274>)
  42301c:	4798      	blx	r3

		log_data.log_code = HD1_1_FLASH;
  42301e:	2201      	movs	r2, #1
  423020:	4b8e      	ldr	r3, [pc, #568]	; (42325c <Check_Heat_Detector_Trbl+0x278>)
  423022:	711a      	strb	r2, [r3, #4]

		if(!hd1_trouble_g_u8) /*if trouble cleared log the data*/
  423024:	4b88      	ldr	r3, [pc, #544]	; (423248 <Check_Heat_Detector_Trbl+0x264>)
  423026:	781b      	ldrb	r3, [r3, #0]
  423028:	2b00      	cmp	r3, #0
  42302a:	f040 80c6 	bne.w	4231ba <Check_Heat_Detector_Trbl+0x1d6>
		{
			log_data.start_stop = 0u;
  42302e:	2100      	movs	r1, #0
  423030:	4a8a      	ldr	r2, [pc, #552]	; (42325c <Check_Heat_Detector_Trbl+0x278>)
  423032:	7191      	strb	r1, [r2, #6]
		else
		{
			log_data.start_stop = 1u;
		}

		log_data.trouble_fire = hd1_trouble_g_u8 ; /*log the Heat detector trouble*/
  423034:	4889      	ldr	r0, [pc, #548]	; (42325c <Check_Heat_Detector_Trbl+0x278>)
  423036:	7143      	strb	r3, [r0, #5]

		log_data.value = hd1_measured_g_u16 / 50u; /*divide the value  by 50 to accommodate the value in 1 byte*/
  423038:	4b81      	ldr	r3, [pc, #516]	; (423240 <Check_Heat_Detector_Trbl+0x25c>)
  42303a:	881b      	ldrh	r3, [r3, #0]
  42303c:	4a88      	ldr	r2, [pc, #544]	; (423260 <Check_Heat_Detector_Trbl+0x27c>)
  42303e:	fba2 2303 	umull	r2, r3, r2, r3
  423042:	091b      	lsrs	r3, r3, #4
  423044:	71c3      	strb	r3, [r0, #7]

		NOR_Flash_Log_Data(&log_data);
  423046:	4b87      	ldr	r3, [pc, #540]	; (423264 <Check_Heat_Detector_Trbl+0x280>)
  423048:	4798      	blx	r3

		hd1_prev_state_sl_u8 = hd1_trouble_g_u8;
  42304a:	4b7f      	ldr	r3, [pc, #508]	; (423248 <Check_Heat_Detector_Trbl+0x264>)
  42304c:	781a      	ldrb	r2, [r3, #0]
  42304e:	4b81      	ldr	r3, [pc, #516]	; (423254 <Check_Heat_Detector_Trbl+0x270>)
  423050:	701a      	strb	r2, [r3, #0]

		 Get_New_trouble=HD1_1_FLASH;
  423052:	2201      	movs	r2, #1
  423054:	4b84      	ldr	r3, [pc, #528]	; (423268 <Check_Heat_Detector_Trbl+0x284>)
  423056:	701a      	strb	r2, [r3, #0]



	/*********************For Heat Detector 2*****************************/

	if((hd2_measured_g_u16 >= HD_OK_MIN && hd2_measured_g_u16 < HD_OK_MAX) && (Raw_value_HD2 >= HD_OK_MIN && Raw_value_HD2 < HD_OK_MAX))
  423058:	4b84      	ldr	r3, [pc, #528]	; (42326c <Check_Heat_Detector_Trbl+0x288>)
  42305a:	881b      	ldrh	r3, [r3, #0]
  42305c:	f6a3 3254 	subw	r2, r3, #2900	; 0xb54
  423060:	b292      	uxth	r2, r2
  423062:	2ac7      	cmp	r2, #199	; 0xc7
  423064:	f200 80ad 	bhi.w	4231c2 <Check_Heat_Detector_Trbl+0x1de>
  423068:	4a81      	ldr	r2, [pc, #516]	; (423270 <Check_Heat_Detector_Trbl+0x28c>)
  42306a:	6812      	ldr	r2, [r2, #0]
  42306c:	f6a2 3254 	subw	r2, r2, #2900	; 0xb54
  423070:	2ac7      	cmp	r2, #199	; 0xc7
  423072:	f200 80a6 	bhi.w	4231c2 <Check_Heat_Detector_Trbl+0x1de>
	{
		hd2_trouble_g_u8 = NO_TROUBLE;  /* No trouble in zone*/
  423076:	2200      	movs	r2, #0
  423078:	4b7e      	ldr	r3, [pc, #504]	; (423274 <Check_Heat_Detector_Trbl+0x290>)
  42307a:	701a      	strb	r2, [r3, #0]
		hd2_prev_tick_g_u32 = count_1ms;
  42307c:	4b73      	ldr	r3, [pc, #460]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  42307e:	681a      	ldr	r2, [r3, #0]
  423080:	4b7d      	ldr	r3, [pc, #500]	; (423278 <Check_Heat_Detector_Trbl+0x294>)
  423082:	601a      	str	r2, [r3, #0]
				hd2_prev_tick_g_u32 = count_1ms;
			hd2_trouble_g_u8 = 4u;
		}
	}

	if(hd2_prev_state_sl_u8 != hd2_trouble_g_u8)/*if any trouble happened log the data*/
  423084:	4b7d      	ldr	r3, [pc, #500]	; (42327c <Check_Heat_Detector_Trbl+0x298>)
  423086:	781a      	ldrb	r2, [r3, #0]
  423088:	4b7a      	ldr	r3, [pc, #488]	; (423274 <Check_Heat_Detector_Trbl+0x290>)
  42308a:	781b      	ldrb	r3, [r3, #0]
  42308c:	429a      	cmp	r2, r3
  42308e:	d01e      	beq.n	4230ce <Check_Heat_Detector_Trbl+0xea>
	{
		//LOG
		Reset_Values();
  423090:	4b71      	ldr	r3, [pc, #452]	; (423258 <Check_Heat_Detector_Trbl+0x274>)
  423092:	4798      	blx	r3

		log_data.log_code = HD2_2_FLASH;
  423094:	2202      	movs	r2, #2
  423096:	4b71      	ldr	r3, [pc, #452]	; (42325c <Check_Heat_Detector_Trbl+0x278>)
  423098:	711a      	strb	r2, [r3, #4]

		if(!hd2_trouble_g_u8) /*if trouble cleared log the data*/
  42309a:	4b76      	ldr	r3, [pc, #472]	; (423274 <Check_Heat_Detector_Trbl+0x290>)
  42309c:	781b      	ldrb	r3, [r3, #0]
  42309e:	2b00      	cmp	r3, #0
  4230a0:	f040 8129 	bne.w	4232f6 <Check_Heat_Detector_Trbl+0x312>
		{
			log_data.start_stop = 0u;
  4230a4:	2100      	movs	r1, #0
  4230a6:	4a6d      	ldr	r2, [pc, #436]	; (42325c <Check_Heat_Detector_Trbl+0x278>)
  4230a8:	7191      	strb	r1, [r2, #6]
		else
		{
			log_data.start_stop = 1u;
		}

		log_data.trouble_fire = hd2_trouble_g_u8 ; /*log the Heat detector trouble*/
  4230aa:	486c      	ldr	r0, [pc, #432]	; (42325c <Check_Heat_Detector_Trbl+0x278>)
  4230ac:	7143      	strb	r3, [r0, #5]

		log_data.value = hd2_measured_g_u16 / 50u; /*divide the value  by 50 to accommodate the value in 1 byte*/
  4230ae:	4b6f      	ldr	r3, [pc, #444]	; (42326c <Check_Heat_Detector_Trbl+0x288>)
  4230b0:	881b      	ldrh	r3, [r3, #0]
  4230b2:	4a6b      	ldr	r2, [pc, #428]	; (423260 <Check_Heat_Detector_Trbl+0x27c>)
  4230b4:	fba2 2303 	umull	r2, r3, r2, r3
  4230b8:	091b      	lsrs	r3, r3, #4
  4230ba:	71c3      	strb	r3, [r0, #7]

		NOR_Flash_Log_Data(&log_data);
  4230bc:	4b69      	ldr	r3, [pc, #420]	; (423264 <Check_Heat_Detector_Trbl+0x280>)
  4230be:	4798      	blx	r3

		hd2_prev_state_sl_u8 = hd2_trouble_g_u8;
  4230c0:	4b6c      	ldr	r3, [pc, #432]	; (423274 <Check_Heat_Detector_Trbl+0x290>)
  4230c2:	781a      	ldrb	r2, [r3, #0]
  4230c4:	4b6d      	ldr	r3, [pc, #436]	; (42327c <Check_Heat_Detector_Trbl+0x298>)
  4230c6:	701a      	strb	r2, [r3, #0]

		  Get_New_trouble=HD2_2_FLASH;
  4230c8:	2202      	movs	r2, #2
  4230ca:	4b67      	ldr	r3, [pc, #412]	; (423268 <Check_Heat_Detector_Trbl+0x284>)
  4230cc:	701a      	strb	r2, [r3, #0]
  4230ce:	bd08      	pop	{r3, pc}
	else if(hd1_measured_g_u16 <= HD_FIRE_MIN && Raw_value_HD1 <= HD_FIRE_MIN)
  4230d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4230d4:	d822      	bhi.n	42311c <Check_Heat_Detector_Trbl+0x138>
  4230d6:	4a5b      	ldr	r2, [pc, #364]	; (423244 <Check_Heat_Detector_Trbl+0x260>)
  4230d8:	6812      	ldr	r2, [r2, #0]
  4230da:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  4230de:	d81d      	bhi.n	42311c <Check_Heat_Detector_Trbl+0x138>
			if(fire_happen_g_b && fire_happen_safety_g_b)
  4230e0:	4b67      	ldr	r3, [pc, #412]	; (423280 <Check_Heat_Detector_Trbl+0x29c>)
  4230e2:	781b      	ldrb	r3, [r3, #0]
  4230e4:	b133      	cbz	r3, 4230f4 <Check_Heat_Detector_Trbl+0x110>
  4230e6:	4b67      	ldr	r3, [pc, #412]	; (423284 <Check_Heat_Detector_Trbl+0x2a0>)
  4230e8:	781b      	ldrb	r3, [r3, #0]
  4230ea:	b11b      	cbz	r3, 4230f4 <Check_Heat_Detector_Trbl+0x110>
				hd1_trouble_g_u8 = 1u; /* Fire Trouble*/
  4230ec:	2201      	movs	r2, #1
  4230ee:	4b56      	ldr	r3, [pc, #344]	; (423248 <Check_Heat_Detector_Trbl+0x264>)
  4230f0:	701a      	strb	r2, [r3, #0]
  4230f2:	e78c      	b.n	42300e <Check_Heat_Detector_Trbl+0x2a>
			else if((count_1ms - hd1_prev_tick_g_u32) > __500ms) // &&  pri_pwr_trouble_g_b == false
  4230f4:	4b55      	ldr	r3, [pc, #340]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  4230f6:	681b      	ldr	r3, [r3, #0]
  4230f8:	4a55      	ldr	r2, [pc, #340]	; (423250 <Check_Heat_Detector_Trbl+0x26c>)
  4230fa:	6812      	ldr	r2, [r2, #0]
  4230fc:	1a9b      	subs	r3, r3, r2
  4230fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  423102:	d984      	bls.n	42300e <Check_Heat_Detector_Trbl+0x2a>
				hd1_prev_tick_g_u32 = count_1ms ;
  423104:	4b51      	ldr	r3, [pc, #324]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  423106:	681a      	ldr	r2, [r3, #0]
  423108:	4b51      	ldr	r3, [pc, #324]	; (423250 <Check_Heat_Detector_Trbl+0x26c>)
  42310a:	601a      	str	r2, [r3, #0]
				fire_happen_g_b =  FIRE;
  42310c:	2301      	movs	r3, #1
  42310e:	4a5c      	ldr	r2, [pc, #368]	; (423280 <Check_Heat_Detector_Trbl+0x29c>)
  423110:	7013      	strb	r3, [r2, #0]
				fire_happen_safety_g_b = FIRE;
  423112:	4a5c      	ldr	r2, [pc, #368]	; (423284 <Check_Heat_Detector_Trbl+0x2a0>)
  423114:	7013      	strb	r3, [r2, #0]
				hd1_trouble_g_u8 = 1u; /* Fire Trouble*/
  423116:	4a4c      	ldr	r2, [pc, #304]	; (423248 <Check_Heat_Detector_Trbl+0x264>)
  423118:	7013      	strb	r3, [r2, #0]
  42311a:	e778      	b.n	42300e <Check_Heat_Detector_Trbl+0x2a>
	else if(hd1_measured_g_u16 >= OPEN_TROUBLE && Raw_value_HD1 >= OPEN_TROUBLE)
  42311c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
  423120:	d314      	bcc.n	42314c <Check_Heat_Detector_Trbl+0x168>
  423122:	4a48      	ldr	r2, [pc, #288]	; (423244 <Check_Heat_Detector_Trbl+0x260>)
  423124:	6812      	ldr	r2, [r2, #0]
  423126:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
  42312a:	d30f      	bcc.n	42314c <Check_Heat_Detector_Trbl+0x168>
		if((count_1ms - hd1_prev_tick_g_u32) > __250ms)
  42312c:	4b47      	ldr	r3, [pc, #284]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  42312e:	681b      	ldr	r3, [r3, #0]
  423130:	4a47      	ldr	r2, [pc, #284]	; (423250 <Check_Heat_Detector_Trbl+0x26c>)
  423132:	6812      	ldr	r2, [r2, #0]
  423134:	1a9b      	subs	r3, r3, r2
  423136:	2bfa      	cmp	r3, #250	; 0xfa
  423138:	f67f af69 	bls.w	42300e <Check_Heat_Detector_Trbl+0x2a>
			hd1_prev_tick_g_u32 = count_1ms ;
  42313c:	4b43      	ldr	r3, [pc, #268]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  42313e:	681a      	ldr	r2, [r3, #0]
  423140:	4b43      	ldr	r3, [pc, #268]	; (423250 <Check_Heat_Detector_Trbl+0x26c>)
  423142:	601a      	str	r2, [r3, #0]
			hd1_trouble_g_u8 = 2u;  /*Open trouble in zone*/
  423144:	2202      	movs	r2, #2
  423146:	4b40      	ldr	r3, [pc, #256]	; (423248 <Check_Heat_Detector_Trbl+0x264>)
  423148:	701a      	strb	r2, [r3, #0]
  42314a:	e760      	b.n	42300e <Check_Heat_Detector_Trbl+0x2a>
	else if( (hd1_measured_g_u16 >= HD_SHORT_MIN) && (hd1_measured_g_u16 < HD_SHORT_MAX)  &&  ((Raw_value_HD1 >= HD_SHORT_MIN) && (Raw_value_HD1 < HD_SHORT_MAX))) //
  42314c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
  423150:	b292      	uxth	r2, r2
  423152:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
  423156:	d216      	bcs.n	423186 <Check_Heat_Detector_Trbl+0x1a2>
  423158:	4a3a      	ldr	r2, [pc, #232]	; (423244 <Check_Heat_Detector_Trbl+0x260>)
  42315a:	6812      	ldr	r2, [r2, #0]
  42315c:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
  423160:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
  423164:	d20f      	bcs.n	423186 <Check_Heat_Detector_Trbl+0x1a2>
		if((count_1ms - hd1_prev_tick_g_u32) > __250ms)
  423166:	4b39      	ldr	r3, [pc, #228]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  423168:	681b      	ldr	r3, [r3, #0]
  42316a:	4a39      	ldr	r2, [pc, #228]	; (423250 <Check_Heat_Detector_Trbl+0x26c>)
  42316c:	6812      	ldr	r2, [r2, #0]
  42316e:	1a9b      	subs	r3, r3, r2
  423170:	2bfa      	cmp	r3, #250	; 0xfa
  423172:	f67f af4c 	bls.w	42300e <Check_Heat_Detector_Trbl+0x2a>
		   hd1_prev_tick_g_u32 = count_1ms ;
  423176:	4b35      	ldr	r3, [pc, #212]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  423178:	681a      	ldr	r2, [r3, #0]
  42317a:	4b35      	ldr	r3, [pc, #212]	; (423250 <Check_Heat_Detector_Trbl+0x26c>)
  42317c:	601a      	str	r2, [r3, #0]
			hd1_trouble_g_u8 = 3u;  /* Some resistance short  trouble in zone*/
  42317e:	2203      	movs	r2, #3
  423180:	4b31      	ldr	r3, [pc, #196]	; (423248 <Check_Heat_Detector_Trbl+0x264>)
  423182:	701a      	strb	r2, [r3, #0]
  423184:	e743      	b.n	42300e <Check_Heat_Detector_Trbl+0x2a>
	else if( hd1_measured_g_u16 > HD_FIRE_MIN &&  Raw_value_HD1 > HD_FIRE_MIN)
  423186:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  42318a:	f67f af40 	bls.w	42300e <Check_Heat_Detector_Trbl+0x2a>
  42318e:	4b2d      	ldr	r3, [pc, #180]	; (423244 <Check_Heat_Detector_Trbl+0x260>)
  423190:	681b      	ldr	r3, [r3, #0]
  423192:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  423196:	f67f af3a 	bls.w	42300e <Check_Heat_Detector_Trbl+0x2a>
		if((count_1ms - hd1_prev_tick_g_u32) > __250ms )
  42319a:	4b2c      	ldr	r3, [pc, #176]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  42319c:	681b      	ldr	r3, [r3, #0]
  42319e:	4a2c      	ldr	r2, [pc, #176]	; (423250 <Check_Heat_Detector_Trbl+0x26c>)
  4231a0:	6812      	ldr	r2, [r2, #0]
  4231a2:	1a9b      	subs	r3, r3, r2
  4231a4:	2bfa      	cmp	r3, #250	; 0xfa
  4231a6:	f67f af32 	bls.w	42300e <Check_Heat_Detector_Trbl+0x2a>
			hd1_prev_tick_g_u32 = count_1ms ;
  4231aa:	4b28      	ldr	r3, [pc, #160]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  4231ac:	681a      	ldr	r2, [r3, #0]
  4231ae:	4b28      	ldr	r3, [pc, #160]	; (423250 <Check_Heat_Detector_Trbl+0x26c>)
  4231b0:	601a      	str	r2, [r3, #0]
			hd1_trouble_g_u8 = 4u;
  4231b2:	2204      	movs	r2, #4
  4231b4:	4b24      	ldr	r3, [pc, #144]	; (423248 <Check_Heat_Detector_Trbl+0x264>)
  4231b6:	701a      	strb	r2, [r3, #0]
  4231b8:	e729      	b.n	42300e <Check_Heat_Detector_Trbl+0x2a>
			log_data.start_stop = 1u;
  4231ba:	2101      	movs	r1, #1
  4231bc:	4a27      	ldr	r2, [pc, #156]	; (42325c <Check_Heat_Detector_Trbl+0x278>)
  4231be:	7191      	strb	r1, [r2, #6]
  4231c0:	e738      	b.n	423034 <Check_Heat_Detector_Trbl+0x50>
	else if(hd2_measured_g_u16 <= HD_FIRE_MIN && Raw_value_HD2 <= HD_FIRE_MIN)
  4231c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4231c6:	d823      	bhi.n	423210 <Check_Heat_Detector_Trbl+0x22c>
  4231c8:	4a29      	ldr	r2, [pc, #164]	; (423270 <Check_Heat_Detector_Trbl+0x28c>)
  4231ca:	6812      	ldr	r2, [r2, #0]
  4231cc:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  4231d0:	d81e      	bhi.n	423210 <Check_Heat_Detector_Trbl+0x22c>
					if(fire_happen_g_b && fire_happen_safety_g_b)
  4231d2:	4b2b      	ldr	r3, [pc, #172]	; (423280 <Check_Heat_Detector_Trbl+0x29c>)
  4231d4:	781b      	ldrb	r3, [r3, #0]
  4231d6:	b133      	cbz	r3, 4231e6 <Check_Heat_Detector_Trbl+0x202>
  4231d8:	4b2a      	ldr	r3, [pc, #168]	; (423284 <Check_Heat_Detector_Trbl+0x2a0>)
  4231da:	781b      	ldrb	r3, [r3, #0]
  4231dc:	b11b      	cbz	r3, 4231e6 <Check_Heat_Detector_Trbl+0x202>
						hd2_trouble_g_u8 = 1u; /* Fire Trouble*/
  4231de:	2201      	movs	r2, #1
  4231e0:	4b24      	ldr	r3, [pc, #144]	; (423274 <Check_Heat_Detector_Trbl+0x290>)
  4231e2:	701a      	strb	r2, [r3, #0]
  4231e4:	e74e      	b.n	423084 <Check_Heat_Detector_Trbl+0xa0>
					else if((count_1ms - hd2_prev_tick_g_u32) > __500ms)
  4231e6:	4b19      	ldr	r3, [pc, #100]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  4231e8:	681b      	ldr	r3, [r3, #0]
  4231ea:	4a23      	ldr	r2, [pc, #140]	; (423278 <Check_Heat_Detector_Trbl+0x294>)
  4231ec:	6812      	ldr	r2, [r2, #0]
  4231ee:	1a9b      	subs	r3, r3, r2
  4231f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4231f4:	f67f af46 	bls.w	423084 <Check_Heat_Detector_Trbl+0xa0>
						hd2_prev_tick_g_u32 = count_1ms ;
  4231f8:	4b14      	ldr	r3, [pc, #80]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  4231fa:	681a      	ldr	r2, [r3, #0]
  4231fc:	4b1e      	ldr	r3, [pc, #120]	; (423278 <Check_Heat_Detector_Trbl+0x294>)
  4231fe:	601a      	str	r2, [r3, #0]
						fire_happen_g_b =  FIRE;
  423200:	2301      	movs	r3, #1
  423202:	4a1f      	ldr	r2, [pc, #124]	; (423280 <Check_Heat_Detector_Trbl+0x29c>)
  423204:	7013      	strb	r3, [r2, #0]
						fire_happen_safety_g_b = FIRE;
  423206:	4a1f      	ldr	r2, [pc, #124]	; (423284 <Check_Heat_Detector_Trbl+0x2a0>)
  423208:	7013      	strb	r3, [r2, #0]
						hd2_trouble_g_u8 = 1u; /* Fire Trouble*/
  42320a:	4a1a      	ldr	r2, [pc, #104]	; (423274 <Check_Heat_Detector_Trbl+0x290>)
  42320c:	7013      	strb	r3, [r2, #0]
  42320e:	e739      	b.n	423084 <Check_Heat_Detector_Trbl+0xa0>
	else if(hd2_measured_g_u16 >= OPEN_TROUBLE && Raw_value_HD2 >= OPEN_TROUBLE)
  423210:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
  423214:	d338      	bcc.n	423288 <Check_Heat_Detector_Trbl+0x2a4>
  423216:	4a16      	ldr	r2, [pc, #88]	; (423270 <Check_Heat_Detector_Trbl+0x28c>)
  423218:	6812      	ldr	r2, [r2, #0]
  42321a:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
  42321e:	d333      	bcc.n	423288 <Check_Heat_Detector_Trbl+0x2a4>
		if((count_1ms - hd2_prev_tick_g_u32) > __250ms)
  423220:	4b0a      	ldr	r3, [pc, #40]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  423222:	681b      	ldr	r3, [r3, #0]
  423224:	4a14      	ldr	r2, [pc, #80]	; (423278 <Check_Heat_Detector_Trbl+0x294>)
  423226:	6812      	ldr	r2, [r2, #0]
  423228:	1a9b      	subs	r3, r3, r2
  42322a:	2bfa      	cmp	r3, #250	; 0xfa
  42322c:	f67f af2a 	bls.w	423084 <Check_Heat_Detector_Trbl+0xa0>
				hd2_prev_tick_g_u32 = count_1ms;
  423230:	4b06      	ldr	r3, [pc, #24]	; (42324c <Check_Heat_Detector_Trbl+0x268>)
  423232:	681a      	ldr	r2, [r3, #0]
  423234:	4b10      	ldr	r3, [pc, #64]	; (423278 <Check_Heat_Detector_Trbl+0x294>)
  423236:	601a      	str	r2, [r3, #0]
			hd2_trouble_g_u8 = 2u;  /*Open trouble in zone*/
  423238:	2202      	movs	r2, #2
  42323a:	4b0e      	ldr	r3, [pc, #56]	; (423274 <Check_Heat_Detector_Trbl+0x290>)
  42323c:	701a      	strb	r2, [r3, #0]
  42323e:	e721      	b.n	423084 <Check_Heat_Detector_Trbl+0xa0>
  423240:	20000b0a 	.word	0x20000b0a
  423244:	20000ae0 	.word	0x20000ae0
  423248:	20000b0c 	.word	0x20000b0c
  42324c:	200012f8 	.word	0x200012f8
  423250:	200010d4 	.word	0x200010d4
  423254:	200010d0 	.word	0x200010d0
  423258:	004249a5 	.word	0x004249a5
  42325c:	20000098 	.word	0x20000098
  423260:	51eb851f 	.word	0x51eb851f
  423264:	00424729 	.word	0x00424729
  423268:	20001088 	.word	0x20001088
  42326c:	20000b0e 	.word	0x20000b0e
  423270:	20000ae4 	.word	0x20000ae4
  423274:	20000b10 	.word	0x20000b10
  423278:	200010dc 	.word	0x200010dc
  42327c:	200010d8 	.word	0x200010d8
  423280:	20000b08 	.word	0x20000b08
  423284:	20000b09 	.word	0x20000b09
	else if( (hd2_measured_g_u16 >= HD_SHORT_MIN) && (hd2_measured_g_u16 < HD_SHORT_MAX) &&  ((Raw_value_HD2 >= HD_SHORT_MIN) && (Raw_value_HD2 < HD_SHORT_MAX)))
  423288:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
  42328c:	b292      	uxth	r2, r2
  42328e:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
  423292:	d216      	bcs.n	4232c2 <Check_Heat_Detector_Trbl+0x2de>
  423294:	4a1a      	ldr	r2, [pc, #104]	; (423300 <Check_Heat_Detector_Trbl+0x31c>)
  423296:	6812      	ldr	r2, [r2, #0]
  423298:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
  42329c:	f5b2 6fe1 	cmp.w	r2, #1800	; 0x708
  4232a0:	d20f      	bcs.n	4232c2 <Check_Heat_Detector_Trbl+0x2de>
		if((count_1ms - hd2_prev_tick_g_u32) > __250ms)
  4232a2:	4b18      	ldr	r3, [pc, #96]	; (423304 <Check_Heat_Detector_Trbl+0x320>)
  4232a4:	681b      	ldr	r3, [r3, #0]
  4232a6:	4a18      	ldr	r2, [pc, #96]	; (423308 <Check_Heat_Detector_Trbl+0x324>)
  4232a8:	6812      	ldr	r2, [r2, #0]
  4232aa:	1a9b      	subs	r3, r3, r2
  4232ac:	2bfa      	cmp	r3, #250	; 0xfa
  4232ae:	f67f aee9 	bls.w	423084 <Check_Heat_Detector_Trbl+0xa0>
				hd2_prev_tick_g_u32 = count_1ms;
  4232b2:	4b14      	ldr	r3, [pc, #80]	; (423304 <Check_Heat_Detector_Trbl+0x320>)
  4232b4:	681a      	ldr	r2, [r3, #0]
  4232b6:	4b14      	ldr	r3, [pc, #80]	; (423308 <Check_Heat_Detector_Trbl+0x324>)
  4232b8:	601a      	str	r2, [r3, #0]
			hd2_trouble_g_u8 = 3u;  /* Some resistance short  trouble in zone*/
  4232ba:	2203      	movs	r2, #3
  4232bc:	4b13      	ldr	r3, [pc, #76]	; (42330c <Check_Heat_Detector_Trbl+0x328>)
  4232be:	701a      	strb	r2, [r3, #0]
  4232c0:	e6e0      	b.n	423084 <Check_Heat_Detector_Trbl+0xa0>
	else if(hd2_measured_g_u16 > HD_FIRE_MIN &&  Raw_value_HD2 > HD_FIRE_MIN)
  4232c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4232c6:	f67f aedd 	bls.w	423084 <Check_Heat_Detector_Trbl+0xa0>
  4232ca:	4b0d      	ldr	r3, [pc, #52]	; (423300 <Check_Heat_Detector_Trbl+0x31c>)
  4232cc:	681b      	ldr	r3, [r3, #0]
  4232ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4232d2:	f67f aed7 	bls.w	423084 <Check_Heat_Detector_Trbl+0xa0>
		if((count_1ms - hd2_prev_tick_g_u32) > __250ms) //
  4232d6:	4b0b      	ldr	r3, [pc, #44]	; (423304 <Check_Heat_Detector_Trbl+0x320>)
  4232d8:	681b      	ldr	r3, [r3, #0]
  4232da:	4a0b      	ldr	r2, [pc, #44]	; (423308 <Check_Heat_Detector_Trbl+0x324>)
  4232dc:	6812      	ldr	r2, [r2, #0]
  4232de:	1a9b      	subs	r3, r3, r2
  4232e0:	2bfa      	cmp	r3, #250	; 0xfa
  4232e2:	f67f aecf 	bls.w	423084 <Check_Heat_Detector_Trbl+0xa0>
				hd2_prev_tick_g_u32 = count_1ms;
  4232e6:	4b07      	ldr	r3, [pc, #28]	; (423304 <Check_Heat_Detector_Trbl+0x320>)
  4232e8:	681a      	ldr	r2, [r3, #0]
  4232ea:	4b07      	ldr	r3, [pc, #28]	; (423308 <Check_Heat_Detector_Trbl+0x324>)
  4232ec:	601a      	str	r2, [r3, #0]
			hd2_trouble_g_u8 = 4u;
  4232ee:	2204      	movs	r2, #4
  4232f0:	4b06      	ldr	r3, [pc, #24]	; (42330c <Check_Heat_Detector_Trbl+0x328>)
  4232f2:	701a      	strb	r2, [r3, #0]
  4232f4:	e6c6      	b.n	423084 <Check_Heat_Detector_Trbl+0xa0>
			log_data.start_stop = 1u;
  4232f6:	2101      	movs	r1, #1
  4232f8:	4a05      	ldr	r2, [pc, #20]	; (423310 <Check_Heat_Detector_Trbl+0x32c>)
  4232fa:	7191      	strb	r1, [r2, #6]
  4232fc:	e6d5      	b.n	4230aa <Check_Heat_Detector_Trbl+0xc6>
  4232fe:	bf00      	nop
  423300:	20000ae4 	.word	0x20000ae4
  423304:	200012f8 	.word	0x200012f8
  423308:	200010dc 	.word	0x200010dc
  42330c:	20000b10 	.word	0x20000b10
  423310:	20000098 	.word	0x20000098

00423314 <Fire_sound_retry_by_Timer>:


void Fire_sound_retry_by_Timer(void)
{

	if(fire_happen_g_b && Fire_Rst_vehicle_start_bit == 2u && test_sw_pressed_g_b == 0)
  423314:	4b10      	ldr	r3, [pc, #64]	; (423358 <Fire_sound_retry_by_Timer+0x44>)
  423316:	781b      	ldrb	r3, [r3, #0]
  423318:	b123      	cbz	r3, 423324 <Fire_sound_retry_by_Timer+0x10>
  42331a:	4b10      	ldr	r3, [pc, #64]	; (42335c <Fire_sound_retry_by_Timer+0x48>)
  42331c:	781b      	ldrb	r3, [r3, #0]
  42331e:	b2db      	uxtb	r3, r3
  423320:	2b02      	cmp	r3, #2
  423322:	d004      	beq.n	42332e <Fire_sound_retry_by_Timer+0x1a>

		}
	}
	else
	{
		fire_retry_sound_prev_tick_g_u32 = count_1ms;
  423324:	4b0e      	ldr	r3, [pc, #56]	; (423360 <Fire_sound_retry_by_Timer+0x4c>)
  423326:	681a      	ldr	r2, [r3, #0]
  423328:	4b0e      	ldr	r3, [pc, #56]	; (423364 <Fire_sound_retry_by_Timer+0x50>)
  42332a:	601a      	str	r2, [r3, #0]
  42332c:	4770      	bx	lr
	if(fire_happen_g_b && Fire_Rst_vehicle_start_bit == 2u && test_sw_pressed_g_b == 0)
  42332e:	4b0e      	ldr	r3, [pc, #56]	; (423368 <Fire_sound_retry_by_Timer+0x54>)
  423330:	781b      	ldrb	r3, [r3, #0]
  423332:	2b00      	cmp	r3, #0
  423334:	d1f6      	bne.n	423324 <Fire_sound_retry_by_Timer+0x10>
		if((count_1ms - fire_retry_sound_prev_tick_g_u32) >= 10000u)	 // SILENCE_TIME_30min
  423336:	4b0a      	ldr	r3, [pc, #40]	; (423360 <Fire_sound_retry_by_Timer+0x4c>)
  423338:	681b      	ldr	r3, [r3, #0]
  42333a:	4a0a      	ldr	r2, [pc, #40]	; (423364 <Fire_sound_retry_by_Timer+0x50>)
  42333c:	6812      	ldr	r2, [r2, #0]
  42333e:	1a9b      	subs	r3, r3, r2
  423340:	f242 720f 	movw	r2, #9999	; 0x270f
  423344:	4293      	cmp	r3, r2
  423346:	d9f1      	bls.n	42332c <Fire_sound_retry_by_Timer+0x18>
			Fire_Rst_vehicle_start_bit = 0u;
  423348:	2200      	movs	r2, #0
  42334a:	4b04      	ldr	r3, [pc, #16]	; (42335c <Fire_sound_retry_by_Timer+0x48>)
  42334c:	701a      	strb	r2, [r3, #0]
			fire_rly_en_vehicle_start_bit =1u;
  42334e:	2201      	movs	r2, #1
  423350:	4b06      	ldr	r3, [pc, #24]	; (42336c <Fire_sound_retry_by_Timer+0x58>)
  423352:	701a      	strb	r2, [r3, #0]
  423354:	4770      	bx	lr
  423356:	bf00      	nop
  423358:	20000b08 	.word	0x20000b08
  42335c:	20001358 	.word	0x20001358
  423360:	200012f8 	.word	0x200012f8
  423364:	200010cc 	.word	0x200010cc
  423368:	20001384 	.word	0x20001384
  42336c:	20001368 	.word	0x20001368

00423370 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
  423370:	b508      	push	{r3, lr}
	efc_init(EFC, ul_mode, ul_fws);
  423372:	460a      	mov	r2, r1
  423374:	4601      	mov	r1, r0
  423376:	4802      	ldr	r0, [pc, #8]	; (423380 <flash_init+0x10>)
  423378:	4b02      	ldr	r3, [pc, #8]	; (423384 <flash_init+0x14>)
  42337a:	4798      	blx	r3
#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
#endif

	return FLASH_RC_OK;
}
  42337c:	2000      	movs	r0, #0
  42337e:	bd08      	pop	{r3, pc}
  423380:	400e0a00 	.word	0x400e0a00
  423384:	00421919 	.word	0x00421919

00423388 <flash_erase_page>:
uint32_t flash_erase_page(uint32_t ul_address, uint8_t uc_page_num)
{
	Efc *p_efc;
	uint16_t us_page;

	if (uc_page_num >= IFLASH_ERASE_PAGES_INVALID) {
  423388:	2903      	cmp	r1, #3
  42338a:	d901      	bls.n	423390 <flash_erase_page+0x8>
		return FLASH_RC_INVALID;
  42338c:	2011      	movs	r0, #17
  42338e:	4770      	bx	lr
{
  423390:	b508      	push	{r3, lr}
	}

	if (ul_address & (IFLASH_PAGE_SIZE - 1)) {
  423392:	f3c0 0308 	ubfx	r3, r0, #0, #9
  423396:	b10b      	cbz	r3, 42339c <flash_erase_page+0x14>
		return FLASH_RC_INVALID;
  423398:	2011      	movs	r0, #17
					(us_page | uc_page_num))) {
		return FLASH_RC_ERROR;
	}

	return FLASH_RC_OK;
}
  42339a:	bd08      	pop	{r3, pc}
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  42339c:	f5a0 0280 	sub.w	r2, r0, #4194304	; 0x400000
					(us_page | uc_page_num))) {
  4233a0:	f3c2 224f 	ubfx	r2, r2, #9, #16
	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_EPA,
  4233a4:	430a      	orrs	r2, r1
  4233a6:	2107      	movs	r1, #7
  4233a8:	4803      	ldr	r0, [pc, #12]	; (4233b8 <flash_erase_page+0x30>)
  4233aa:	4b04      	ldr	r3, [pc, #16]	; (4233bc <flash_erase_page+0x34>)
  4233ac:	4798      	blx	r3
  4233ae:	2800      	cmp	r0, #0
		return FLASH_RC_ERROR;
  4233b0:	bf18      	it	ne
  4233b2:	2010      	movne	r0, #16
  4233b4:	bd08      	pop	{r3, pc}
  4233b6:	bf00      	nop
  4233b8:	400e0a00 	.word	0x400e0a00
  4233bc:	00421935 	.word	0x00421935

004233c0 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  4233c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4233c4:	b085      	sub	sp, #20
  4233c6:	9100      	str	r1, [sp, #0]
  4233c8:	9303      	str	r3, [sp, #12]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  4233ca:	f5a0 0380 	sub.w	r3, r0, #4194304	; 0x400000
  4233ce:	f3c3 2a4f 	ubfx	sl, r3, #9, #16
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  4233d2:	f3c0 0708 	ubfx	r7, r0, #0, #9
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  4233d6:	4693      	mov	fp, r2
  4233d8:	2a00      	cmp	r2, #0
  4233da:	d04d      	beq.n	423478 <flash_write+0xb8>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  4233dc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 423488 <flash_write+0xc8>
  4233e0:	f509 75fe 	add.w	r5, r9, #508	; 0x1fc
  4233e4:	e011      	b.n	42340a <flash_write+0x4a>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  4233e6:	9a01      	ldr	r2, [sp, #4]
  4233e8:	2101      	movs	r1, #1
  4233ea:	4824      	ldr	r0, [pc, #144]	; (42347c <flash_write+0xbc>)
  4233ec:	4b24      	ldr	r3, [pc, #144]	; (423480 <flash_write+0xc0>)
  4233ee:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
  4233f0:	2800      	cmp	r0, #0
  4233f2:	d13e      	bne.n	423472 <flash_write+0xb2>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  4233f4:	9b00      	ldr	r3, [sp, #0]
  4233f6:	4423      	add	r3, r4
  4233f8:	9300      	str	r3, [sp, #0]
		ul_size -= writeSize;
		us_page++;
  4233fa:	f10a 0a01 	add.w	sl, sl, #1
  4233fe:	fa1f fa8a 	uxth.w	sl, sl
		us_offset = 0;
  423402:	2700      	movs	r7, #0
	while (ul_size > 0) {
  423404:	ebbb 0b04 	subs.w	fp, fp, r4
  423408:	d032      	beq.n	423470 <flash_write+0xb0>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  42340a:	f5c7 7300 	rsb	r3, r7, #512	; 0x200
  42340e:	9302      	str	r3, [sp, #8]
  423410:	461c      	mov	r4, r3
  423412:	455b      	cmp	r3, fp
  423414:	bf28      	it	cs
  423416:	465c      	movcs	r4, fp
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  423418:	f8cd a004 	str.w	sl, [sp, #4]
  42341c:	f50a 5300 	add.w	r3, sl, #8192	; 0x2000
  423420:	ea4f 2843 	mov.w	r8, r3, lsl #9
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  423424:	463a      	mov	r2, r7
  423426:	4641      	mov	r1, r8
  423428:	4648      	mov	r0, r9
  42342a:	4e16      	ldr	r6, [pc, #88]	; (423484 <flash_write+0xc4>)
  42342c:	47b0      	blx	r6
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  42342e:	4622      	mov	r2, r4
  423430:	9900      	ldr	r1, [sp, #0]
  423432:	eb09 0007 	add.w	r0, r9, r7
  423436:	47b0      	blx	r6
		memcpy(puc_page_buffer + us_offset + writeSize,
  423438:	1938      	adds	r0, r7, r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  42343a:	9a02      	ldr	r2, [sp, #8]
  42343c:	1b12      	subs	r2, r2, r4
				(void *)(ul_page_addr + us_offset + writeSize),
  42343e:	eb04 0108 	add.w	r1, r4, r8
		memcpy(puc_page_buffer + us_offset + writeSize,
  423442:	b292      	uxth	r2, r2
  423444:	4439      	add	r1, r7
  423446:	4448      	add	r0, r9
  423448:	47b0      	blx	r6
  42344a:	f1a9 0304 	sub.w	r3, r9, #4
  42344e:	f1a8 0204 	sub.w	r2, r8, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  423452:	f853 1f04 	ldr.w	r1, [r3, #4]!
  423456:	f842 1f04 	str.w	r1, [r2, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  42345a:	42ab      	cmp	r3, r5
  42345c:	d1f9      	bne.n	423452 <flash_write+0x92>
		if (ul_erase_flag) {
  42345e:	9b03      	ldr	r3, [sp, #12]
  423460:	2b00      	cmp	r3, #0
  423462:	d0c0      	beq.n	4233e6 <flash_write+0x26>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  423464:	9a01      	ldr	r2, [sp, #4]
  423466:	2103      	movs	r1, #3
  423468:	4804      	ldr	r0, [pc, #16]	; (42347c <flash_write+0xbc>)
  42346a:	4b05      	ldr	r3, [pc, #20]	; (423480 <flash_write+0xc0>)
  42346c:	4798      	blx	r3
  42346e:	e7bf      	b.n	4233f0 <flash_write+0x30>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  423470:	4658      	mov	r0, fp
}
  423472:	b005      	add	sp, #20
  423474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return FLASH_RC_OK;
  423478:	4610      	mov	r0, r2
  42347a:	e7fa      	b.n	423472 <flash_write+0xb2>
  42347c:	400e0a00 	.word	0x400e0a00
  423480:	00421935 	.word	0x00421935
  423484:	00426ac1 	.word	0x00426ac1
  423488:	200010e4 	.word	0x200010e4

0042348c <RV3028_Read>:

	 return Resp;
 }

 rv3028_error_t RV3028_Read(uint8_t Device_Addr, uint8_t Reg_Addr, uint8_t* p_Reg_Data, uint32_t Length)
 {
  42348c:	b510      	push	{r4, lr}

	 uint8_t Resp = RV3028_NO_ERROR;
	 // TWI chip address to communicate with
	 packet_rx.chip = Device_Addr;
  42348e:	4c08      	ldr	r4, [pc, #32]	; (4234b0 <RV3028_Read+0x24>)
  423490:	7420      	strb	r0, [r4, #16]
	 // TWI address/commands to issue to the other chip (node)
	 packet_rx.addr[0] = Reg_Addr;
  423492:	7021      	strb	r1, [r4, #0]

	 // Length of the TWI data address segment (1-3 bytes)
	 packet_rx.addr_length = 1;
  423494:	2101      	movs	r1, #1
  423496:	6061      	str	r1, [r4, #4]
	 // Where to find the data to be written
	 packet_rx.buffer =p_Reg_Data;
  423498:	60a2      	str	r2, [r4, #8]
	 // How many bytes do we want to write
	 packet_rx.length = Length;
  42349a:	60e3      	str	r3, [r4, #12]
		    Delay(100u);
  42349c:	2064      	movs	r0, #100	; 0x64
  42349e:	4b05      	ldr	r3, [pc, #20]	; (4234b4 <RV3028_Read+0x28>)
  4234a0:	4798      	blx	r3
	 // perform a write access
	   Resp = twi_master_read(EDBG_I2C_MODULE, &packet_rx);
  4234a2:	4621      	mov	r1, r4
  4234a4:	4804      	ldr	r0, [pc, #16]	; (4234b8 <RV3028_Read+0x2c>)
  4234a6:	4b05      	ldr	r3, [pc, #20]	; (4234bc <RV3028_Read+0x30>)
  4234a8:	4798      	blx	r3

	 return Resp;
 }
  4234aa:	b2c0      	uxtb	r0, r0
  4234ac:	bd10      	pop	{r4, pc}
  4234ae:	bf00      	nop
  4234b0:	2000169c 	.word	0x2000169c
  4234b4:	0042527d 	.word	0x0042527d
  4234b8:	400a8000 	.word	0x400a8000
  4234bc:	00421c5d 	.word	0x00421c5d

004234c0 <configure_i2c_master>:



void configure_i2c_master(void)
{
  4234c0:	b508      	push	{r3, lr}

	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(EDBG_I2C_MODULE_ID);
  4234c2:	2011      	movs	r0, #17
  4234c4:	4b0c      	ldr	r3, [pc, #48]	; (4234f8 <configure_i2c_master+0x38>)
  4234c6:	4798      	blx	r3

 (Freq_selec_bit == 0) ? (opt.master_clk = sysclk_get_cpu_hz()) : (opt.master_clk =  4000000UL);
  4234c8:	4b0c      	ldr	r3, [pc, #48]	; (4234fc <configure_i2c_master+0x3c>)
  4234ca:	781b      	ldrb	r3, [r3, #0]
  4234cc:	b953      	cbnz	r3, 4234e4 <configure_i2c_master+0x24>
  4234ce:	4a0c      	ldr	r2, [pc, #48]	; (423500 <configure_i2c_master+0x40>)
  4234d0:	4b0c      	ldr	r3, [pc, #48]	; (423504 <configure_i2c_master+0x44>)
  4234d2:	601a      	str	r2, [r3, #0]
	/* Configure the options of TWI driver */
	opt.speed      = TWI_CLK;
  4234d4:	490b      	ldr	r1, [pc, #44]	; (423504 <configure_i2c_master+0x44>)
  4234d6:	4b0c      	ldr	r3, [pc, #48]	; (423508 <configure_i2c_master+0x48>)
  4234d8:	604b      	str	r3, [r1, #4]

 (twi_master_init(EDBG_I2C_MODULE, &opt) == TWI_SUCCESS)?RV3028_Interface(&_RTC):TWI_NO_CHIP_FOUND;
  4234da:	480c      	ldr	r0, [pc, #48]	; (42350c <configure_i2c_master+0x4c>)
  4234dc:	4b0c      	ldr	r3, [pc, #48]	; (423510 <configure_i2c_master+0x50>)
  4234de:	4798      	blx	r3
  4234e0:	b120      	cbz	r0, 4234ec <configure_i2c_master+0x2c>
  4234e2:	bd08      	pop	{r3, pc}
 (Freq_selec_bit == 0) ? (opt.master_clk = sysclk_get_cpu_hz()) : (opt.master_clk =  4000000UL);
  4234e4:	4a0b      	ldr	r2, [pc, #44]	; (423514 <configure_i2c_master+0x54>)
  4234e6:	4b07      	ldr	r3, [pc, #28]	; (423504 <configure_i2c_master+0x44>)
  4234e8:	601a      	str	r2, [r3, #0]
  4234ea:	e7f3      	b.n	4234d4 <configure_i2c_master+0x14>

 rv3028_error_t RV3028_Interface(rv3028_t* p_Device)
 {
	// uint8_t Resp = RV3028_NO_ERROR;

	 p_Device->p_Read = RV3028_Read;
  4234ec:	4b0a      	ldr	r3, [pc, #40]	; (423518 <configure_i2c_master+0x58>)
  4234ee:	4a0b      	ldr	r2, [pc, #44]	; (42351c <configure_i2c_master+0x5c>)
  4234f0:	605a      	str	r2, [r3, #4]
	// p_Device->p_Write = RV3028_Write;
	 p_Device->DeviceAddr = RV3028_ADDRESS;
  4234f2:	2251      	movs	r2, #81	; 0x51
  4234f4:	701a      	strb	r2, [r3, #0]
}
  4234f6:	e7f4      	b.n	4234e2 <configure_i2c_master+0x22>
  4234f8:	00425941 	.word	0x00425941
  4234fc:	20001359 	.word	0x20001359
  423500:	03938700 	.word	0x03938700
  423504:	200016b0 	.word	0x200016b0
  423508:	000186a0 	.word	0x000186a0
  42350c:	400a8000 	.word	0x400a8000
  423510:	00421bf9 	.word	0x00421bf9
  423514:	003d0900 	.word	0x003d0900
  423518:	20001564 	.word	0x20001564
  42351c:	0042348d 	.word	0x0042348d

00423520 <crc16>:
	  uint8_t crc;
	  uint32_t OAD_image_CRC;

  } regions_info_t;

uint16_t crc16(uint16_t crc, unsigned char val) {
  423520:	b410      	push	{r4}
  423522:	2308      	movs	r3, #8
		if (val & 0x80) {
			crc |= 0x0001;
		}

		if (msb) {
			crc ^= poly;
  423524:	f241 0421 	movw	r4, #4129	; 0x1021
		unsigned char msb = (crc & 0x8000) ? 1 : 0;
  423528:	b202      	sxth	r2, r0
		crc <<= 1;
  42352a:	0040      	lsls	r0, r0, #1
  42352c:	b280      	uxth	r0, r0
		if (val & 0x80) {
  42352e:	f011 0f80 	tst.w	r1, #128	; 0x80
			crc |= 0x0001;
  423532:	bf18      	it	ne
  423534:	f040 0001 	orrne.w	r0, r0, #1
		if (msb) {
  423538:	2a00      	cmp	r2, #0
			crc ^= poly;
  42353a:	bfb8      	it	lt
  42353c:	4060      	eorlt	r0, r4
	for (cnt = 0; cnt < 8; cnt++, val <<= 1) {
  42353e:	0049      	lsls	r1, r1, #1
  423540:	b2c9      	uxtb	r1, r1
  423542:	3b01      	subs	r3, #1
  423544:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  423548:	d1ee      	bne.n	423528 <crc16+0x8>
		}
	}

	return crc;
}
  42354a:	f85d 4b04 	ldr.w	r4, [sp], #4
  42354e:	4770      	bx	lr

00423550 <decode_can_msg>:
 bool decode_can_msg(can_mb_conf_t *p_mailbox)
{
  423550:	b538      	push	{r3, r4, r5, lr}

	decode.data = p_mailbox->ul_datal ;
	decode.rx_data.RawData[4]    = decode.data;

	//printf("datahigh %ld\r\n",decode.data);
	memcpy(datahigh, decode.rx_data.RawData, 4);
  423552:	6983      	ldr	r3, [r0, #24]
  423554:	4a36      	ldr	r2, [pc, #216]	; (423630 <decode_can_msg+0xe0>)
  423556:	6013      	str	r3, [r2, #0]
//
// 	 	}



	decode.data = p_mailbox->ul_datah;
  423558:	69c4      	ldr	r4, [r0, #28]
  42355a:	4a36      	ldr	r2, [pc, #216]	; (423634 <decode_can_msg+0xe4>)
  42355c:	6014      	str	r4, [r2, #0]

      timestamp =decode.data;
	decode.rx_data.RawData[4]    = decode.data;
  42355e:	7114      	strb	r4, [r2, #4]
	memcpy(datalow, decode.rx_data.RawData, 4);
  423560:	4a35      	ldr	r2, [pc, #212]	; (423638 <decode_can_msg+0xe8>)
  423562:	6014      	str	r4, [r2, #0]
 		//printf("Hello World %u\n",datalow[i]);
//
 	//}


	  switch (datahigh[0]) {
  423564:	b2db      	uxtb	r3, r3
  423566:	2b05      	cmp	r3, #5
  423568:	d811      	bhi.n	42358e <decode_can_msg+0x3e>
  42356a:	e8df f003 	tbb	[pc, r3]
  42356e:	1203      	.short	0x1203
  423570:	59521010 	.word	0x59521010

		 case Amerex_rtc_set:
							printf("Amerex_rtc_set %ld\r\n",timestamp);
  423574:	4621      	mov	r1, r4
  423576:	4831      	ldr	r0, [pc, #196]	; (42363c <decode_can_msg+0xec>)
  423578:	4d31      	ldr	r5, [pc, #196]	; (423640 <decode_can_msg+0xf0>)
  42357a:	47a8      	blx	r5
							RV3028_Set_TimeStamp(timestamp);
  42357c:	4620      	mov	r0, r4
  42357e:	4b31      	ldr	r3, [pc, #196]	; (423644 <decode_can_msg+0xf4>)
  423580:	4798      	blx	r3
							printf("Time at Bootup : %lu\r\n", RV3028_GetTime(&_RTC));
  423582:	4831      	ldr	r0, [pc, #196]	; (423648 <decode_can_msg+0xf8>)
  423584:	4b31      	ldr	r3, [pc, #196]	; (42364c <decode_can_msg+0xfc>)
  423586:	4798      	blx	r3
  423588:	4601      	mov	r1, r0
  42358a:	4831      	ldr	r0, [pc, #196]	; (423650 <decode_can_msg+0x100>)
  42358c:	47a8      	blx	r5
		                   break;


                      }
					 return 0; 
}
  42358e:	2000      	movs	r0, #0
  423590:	bd38      	pop	{r3, r4, r5, pc}
							if(datalow[0]>=10 && datalow[0]<=100)
  423592:	4b29      	ldr	r3, [pc, #164]	; (423638 <decode_can_msg+0xe8>)
  423594:	781a      	ldrb	r2, [r3, #0]
  423596:	f1a2 030a 	sub.w	r3, r2, #10
  42359a:	b2db      	uxtb	r3, r3
  42359c:	2b5a      	cmp	r3, #90	; 0x5a
  42359e:	d8f6      	bhi.n	42358e <decode_can_msg+0x3e>
								amerex_config_data.all_LED_duty = datalow[0];
  4235a0:	4b2c      	ldr	r3, [pc, #176]	; (423654 <decode_can_msg+0x104>)
  4235a2:	801a      	strh	r2, [r3, #0]
							 if(datalow[1]>=10 && datalow[1]<=100)
  4235a4:	4b24      	ldr	r3, [pc, #144]	; (423638 <decode_can_msg+0xe8>)
  4235a6:	785a      	ldrb	r2, [r3, #1]
  4235a8:	f1a2 030a 	sub.w	r3, r2, #10
  4235ac:	b2db      	uxtb	r3, r3
  4235ae:	2b5a      	cmp	r3, #90	; 0x5a
  4235b0:	d8ed      	bhi.n	42358e <decode_can_msg+0x3e>
							amerex_config_data.fire_LED_duty = datalow[1];
  4235b2:	4b28      	ldr	r3, [pc, #160]	; (423654 <decode_can_msg+0x104>)
  4235b4:	805a      	strh	r2, [r3, #2]
							 temp = (datalow[2] >> 4) & 0x0F;
  4235b6:	4b20      	ldr	r3, [pc, #128]	; (423638 <decode_can_msg+0xe8>)
  4235b8:	789b      	ldrb	r3, [r3, #2]
  4235ba:	091a      	lsrs	r2, r3, #4
							 if(temp>=1 && temp<=6)
  4235bc:	1e51      	subs	r1, r2, #1
  4235be:	b2c9      	uxtb	r1, r1
  4235c0:	2905      	cmp	r1, #5
  4235c2:	d8e4      	bhi.n	42358e <decode_can_msg+0x3e>
								amerex_config_data.trbl_relay_delay = temp *1000;
  4235c4:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
  4235c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4235cc:	00d2      	lsls	r2, r2, #3
  4235ce:	4921      	ldr	r1, [pc, #132]	; (423654 <decode_can_msg+0x104>)
  4235d0:	80ca      	strh	r2, [r1, #6]
							 temp = datalow[2]  & 0x0F ;
  4235d2:	f003 030f 	and.w	r3, r3, #15
							  if(temp>=1 && temp<=6)
  4235d6:	1e5a      	subs	r2, r3, #1
  4235d8:	b2d2      	uxtb	r2, r2
  4235da:	2a05      	cmp	r2, #5
  4235dc:	d8d7      	bhi.n	42358e <decode_can_msg+0x3e>
								amerex_config_data.fire_relay_delay =  temp *1000;
  4235de:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
  4235e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4235e6:	00db      	lsls	r3, r3, #3
  4235e8:	810b      	strh	r3, [r1, #8]
							 temp = datalow[3] & 0x0F ;
  4235ea:	4b13      	ldr	r3, [pc, #76]	; (423638 <decode_can_msg+0xe8>)
  4235ec:	78db      	ldrb	r3, [r3, #3]
  4235ee:	f003 030f 	and.w	r3, r3, #15
							if(temp>=1 && temp<=2)
  4235f2:	1e5a      	subs	r2, r3, #1
  4235f4:	b2d2      	uxtb	r2, r2
  4235f6:	2a01      	cmp	r2, #1
  4235f8:	d8c9      	bhi.n	42358e <decode_can_msg+0x3e>
							amerex_config_data.CAN_baud_rate = temp;
  4235fa:	4608      	mov	r0, r1
  4235fc:	730b      	strb	r3, [r1, #12]
							amerex_config_data.Trigger =1u;
  4235fe:	2301      	movs	r3, #1
  423600:	73cb      	strb	r3, [r1, #15]
							res = flash_write_amerex_param(ptr);
  423602:	4b15      	ldr	r3, [pc, #84]	; (423658 <decode_can_msg+0x108>)
  423604:	4798      	blx	r3
							if(res==1)
  423606:	2801      	cmp	r0, #1
  423608:	d1c1      	bne.n	42358e <decode_can_msg+0x3e>
								rstc_start_software_reset(RSTC);
  42360a:	4814      	ldr	r0, [pc, #80]	; (42365c <decode_can_msg+0x10c>)
  42360c:	4b14      	ldr	r3, [pc, #80]	; (423660 <decode_can_msg+0x110>)
  42360e:	4798      	blx	r3
  423610:	e7bd      	b.n	42358e <decode_can_msg+0x3e>
							printf("Amerex_Get_Log\r\n");
  423612:	4814      	ldr	r0, [pc, #80]	; (423664 <decode_can_msg+0x114>)
  423614:	4b0a      	ldr	r3, [pc, #40]	; (423640 <decode_can_msg+0xf0>)
  423616:	4798      	blx	r3
							g_ul_log_en =1;
  423618:	2201      	movs	r2, #1
  42361a:	4b13      	ldr	r3, [pc, #76]	; (423668 <decode_can_msg+0x118>)
  42361c:	701a      	strb	r2, [r3, #0]
							break;
  42361e:	e7b6      	b.n	42358e <decode_can_msg+0x3e>
							printf("Amerex_Software_RST\r\n");
  423620:	4812      	ldr	r0, [pc, #72]	; (42366c <decode_can_msg+0x11c>)
  423622:	4b07      	ldr	r3, [pc, #28]	; (423640 <decode_can_msg+0xf0>)
  423624:	4798      	blx	r3
							 rstc_start_software_reset(RSTC);
  423626:	480d      	ldr	r0, [pc, #52]	; (42365c <decode_can_msg+0x10c>)
  423628:	4b0d      	ldr	r3, [pc, #52]	; (423660 <decode_can_msg+0x110>)
  42362a:	4798      	blx	r3
							break;
  42362c:	e7af      	b.n	42358e <decode_can_msg+0x3e>
  42362e:	bf00      	nop
  423630:	200012fc 	.word	0x200012fc
  423634:	200016d0 	.word	0x200016d0
  423638:	20001304 	.word	0x20001304
  42363c:	0042f46c 	.word	0x0042f46c
  423640:	00426851 	.word	0x00426851
  423644:	00424639 	.word	0x00424639
  423648:	20001564 	.word	0x20001564
  42364c:	0042456d 	.word	0x0042456d
  423650:	0042f484 	.word	0x0042f484
  423654:	20001588 	.word	0x20001588
  423658:	00424701 	.word	0x00424701
  42365c:	400e1800 	.word	0x400e1800
  423660:	004219c1 	.word	0x004219c1
  423664:	0042f49c 	.word	0x0042f49c
  423668:	20001314 	.word	0x20001314
  42366c:	0042f4b0 	.word	0x0042f4b0

00423670 <CAN0_Handler>:

/**
 * \brief Default interrupt handler for CAN 1.	   // Set transfer id on CAN Bus Analyzer rx_mailbox.ul_id = CAN_MID_MIDvA(CAN_TRANSFER_ID) ex:transmit id: 7
 */
void CAN0_Handler(void)
{
  423670:	b508      	push	{r3, lr}
	uint32_t ul_status=0;

	ul_status = can_mailbox_get_status(CAN0, 0);	//  && g_ul_recv_status == 0
  423672:	2100      	movs	r1, #0
  423674:	4807      	ldr	r0, [pc, #28]	; (423694 <CAN0_Handler+0x24>)
  423676:	4b08      	ldr	r3, [pc, #32]	; (423698 <CAN0_Handler+0x28>)
  423678:	4798      	blx	r3
	if (ul_status & CAN_MSR_MRDY ) {   //&& g_ul_recv_status == 0
  42367a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  42367e:	d100      	bne.n	423682 <CAN0_Handler+0x12>
  423680:	bd08      	pop	{r3, pc}
		
		rx_mailbox.ul_status = ul_status;
  423682:	4906      	ldr	r1, [pc, #24]	; (42369c <CAN0_Handler+0x2c>)
  423684:	6088      	str	r0, [r1, #8]
		can_mailbox_read(CAN0, &rx_mailbox);
  423686:	4803      	ldr	r0, [pc, #12]	; (423694 <CAN0_Handler+0x24>)
  423688:	4b05      	ldr	r3, [pc, #20]	; (4236a0 <CAN0_Handler+0x30>)
  42368a:	4798      	blx	r3
		//can_disable_interrupt(CAN0, CAN_IDR_MB0);
		g_ul_recv_status = 1;
  42368c:	2201      	movs	r2, #1
  42368e:	4b05      	ldr	r3, [pc, #20]	; (4236a4 <CAN0_Handler+0x34>)
  423690:	601a      	str	r2, [r3, #0]

	}
}
  423692:	e7f5      	b.n	423680 <CAN0_Handler+0x10>
  423694:	40010000 	.word	0x40010000
  423698:	00421695 	.word	0x00421695
  42369c:	20001678 	.word	0x20001678
  4236a0:	00421739 	.word	0x00421739
  4236a4:	20001318 	.word	0x20001318

004236a8 <ota_process_start>:
 * \brief Decode CAN messages.
 *
 *  \param p_mailbox Pointer to CAN Mailbox structure.
 */
  void ota_process_start(uint8_t *BinCRC)
  {
  4236a8:	b510      	push	{r4, lr}
	  /* Write transmit information into mailbox. */
	  tx_mailbox.ul_id = CAN_MID_MIDvA(3);	//j1939_pgn(TP_DATA_PGN);
  4236aa:	4909      	ldr	r1, [pc, #36]	; (4236d0 <ota_process_start+0x28>)
  4236ac:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  4236b0:	610b      	str	r3, [r1, #16]
	  //tx_mailbox.ul_datal = CAN_MSG_DUMMY_DATA;
	  tx_mailbox.uc_length = 1;
  4236b2:	2301      	movs	r3, #1
  4236b4:	718b      	strb	r3, [r1, #6]
	   tx_mailbox.ul_datal = *BinCRC;
  4236b6:	7803      	ldrb	r3, [r0, #0]
  4236b8:	618b      	str	r3, [r1, #24]
	   tx_mailbox.ul_datah = 0;
  4236ba:	2300      	movs	r3, #0
  4236bc:	61cb      	str	r3, [r1, #28]
	  can_mailbox_write(CAN0, &tx_mailbox);
  4236be:	4c05      	ldr	r4, [pc, #20]	; (4236d4 <ota_process_start+0x2c>)
  4236c0:	4620      	mov	r0, r4
  4236c2:	4b05      	ldr	r3, [pc, #20]	; (4236d8 <ota_process_start+0x30>)
  4236c4:	4798      	blx	r3

	  /* Send out the information in the mailbox. */
	  can_global_send_transfer_cmd(CAN0,CAN_TCR_MB5);	// CAN_TCR_MB1
  4236c6:	2120      	movs	r1, #32
  4236c8:	4620      	mov	r0, r4
  4236ca:	4b04      	ldr	r3, [pc, #16]	; (4236dc <ota_process_start+0x34>)
  4236cc:	4798      	blx	r3
  4236ce:	bd10      	pop	{r4, pc}
  4236d0:	20001644 	.word	0x20001644
  4236d4:	40010000 	.word	0x40010000
  4236d8:	00421791 	.word	0x00421791
  4236dc:	00421689 	.word	0x00421689

004236e0 <DFU_callback_Fun>:
{
  4236e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4236e4:	b085      	sub	sp, #20
  4236e6:	4604      	mov	r4, r0
	can_disable_interrupt(CAN0, CAN_IDR_MB0);
  4236e8:	2101      	movs	r1, #1
  4236ea:	489c      	ldr	r0, [pc, #624]	; (42395c <DFU_callback_Fun+0x27c>)
  4236ec:	4b9c      	ldr	r3, [pc, #624]	; (423960 <DFU_callback_Fun+0x280>)
  4236ee:	4798      	blx	r3
		DFU_auto_exit_prev_tick_g_u32 =count_1ms;
  4236f0:	4b9c      	ldr	r3, [pc, #624]	; (423964 <DFU_callback_Fun+0x284>)
  4236f2:	681a      	ldr	r2, [r3, #0]
  4236f4:	4b9c      	ldr	r3, [pc, #624]	; (423968 <DFU_callback_Fun+0x288>)
  4236f6:	601a      	str	r2, [r3, #0]
		memcpy(datahigh, decode.rx_data.RawData, 4);
  4236f8:	69e3      	ldr	r3, [r4, #28]
  4236fa:	4a9c      	ldr	r2, [pc, #624]	; (42396c <DFU_callback_Fun+0x28c>)
  4236fc:	6013      	str	r3, [r2, #0]
		decode.data = p_mailbox->ul_datal;
  4236fe:	69a2      	ldr	r2, [r4, #24]
  423700:	499b      	ldr	r1, [pc, #620]	; (423970 <DFU_callback_Fun+0x290>)
  423702:	600a      	str	r2, [r1, #0]
		decode.rx_data.RawData[4]    = decode.data;
  423704:	710a      	strb	r2, [r1, #4]
		memcpy(datalow, decode.rx_data.RawData, 4);
  423706:	499b      	ldr	r1, [pc, #620]	; (423974 <DFU_callback_Fun+0x294>)
  423708:	600a      	str	r2, [r1, #0]
		if((datahigh[0] == 1) && (datahigh[1] == 1) && (datahigh[2] == 1) && (datahigh[3] == 1) && state == initiate)
  42370a:	b2db      	uxtb	r3, r3
  42370c:	2b01      	cmp	r3, #1
  42370e:	d04e      	beq.n	4237ae <DFU_callback_Fun+0xce>
	else if((datahigh[0] == 2) && (datahigh[1] == 2) && (datahigh[2] == 2) && (datahigh[3] == 2) && state == initiate)
  423710:	2b02      	cmp	r3, #2
  423712:	f000 80af 	beq.w	423874 <DFU_callback_Fun+0x194>
		if((datahigh[0] == 3) && (datahigh[1] == 3) && (datahigh[2] == 3) && (datahigh[3] == 3) && state == initiate)
  423716:	4b95      	ldr	r3, [pc, #596]	; (42396c <DFU_callback_Fun+0x28c>)
  423718:	781b      	ldrb	r3, [r3, #0]
  42371a:	2b03      	cmp	r3, #3
  42371c:	f040 8165 	bne.w	4239ea <DFU_callback_Fun+0x30a>
  423720:	4b92      	ldr	r3, [pc, #584]	; (42396c <DFU_callback_Fun+0x28c>)
  423722:	785b      	ldrb	r3, [r3, #1]
  423724:	2b03      	cmp	r3, #3
  423726:	d146      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  423728:	4b90      	ldr	r3, [pc, #576]	; (42396c <DFU_callback_Fun+0x28c>)
  42372a:	789b      	ldrb	r3, [r3, #2]
  42372c:	2b03      	cmp	r3, #3
  42372e:	d142      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  423730:	4b8e      	ldr	r3, [pc, #568]	; (42396c <DFU_callback_Fun+0x28c>)
  423732:	78db      	ldrb	r3, [r3, #3]
  423734:	2b03      	cmp	r3, #3
  423736:	d13e      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  423738:	4b8f      	ldr	r3, [pc, #572]	; (423978 <DFU_callback_Fun+0x298>)
  42373a:	781b      	ldrb	r3, [r3, #0]
  42373c:	2b01      	cmp	r3, #1
  42373e:	d13a      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  423740:	4b8e      	ldr	r3, [pc, #568]	; (42397c <DFU_callback_Fun+0x29c>)
  423742:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  423746:	635a      	str	r2, [r3, #52]	; 0x34
  423748:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  42374c:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  42374e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  423752:	631a      	str	r2, [r3, #48]	; 0x30
		RX_imageCRC =	 (datalow[2]<<16 | datalow[1]<<8 | datalow[0]);
  423754:	4c87      	ldr	r4, [pc, #540]	; (423974 <DFU_callback_Fun+0x294>)
  423756:	7863      	ldrb	r3, [r4, #1]
  423758:	7821      	ldrb	r1, [r4, #0]
  42375a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  42375e:	4b88      	ldr	r3, [pc, #544]	; (423980 <DFU_callback_Fun+0x2a0>)
  423760:	8019      	strh	r1, [r3, #0]
		printf("RX_imageCRC %x\n",RX_imageCRC);
  423762:	4888      	ldr	r0, [pc, #544]	; (423984 <DFU_callback_Fun+0x2a4>)
  423764:	4b88      	ldr	r3, [pc, #544]	; (423988 <DFU_callback_Fun+0x2a8>)
  423766:	4798      	blx	r3
		temp_crc=0;
  423768:	4d88      	ldr	r5, [pc, #544]	; (42398c <DFU_callback_Fun+0x2ac>)
  42376a:	2300      	movs	r3, #0
  42376c:	702b      	strb	r3, [r5, #0]
		temp_crc= crc8_cal((uint8_t *)datalow, 3);
  42376e:	2103      	movs	r1, #3
  423770:	4620      	mov	r0, r4
  423772:	4b87      	ldr	r3, [pc, #540]	; (423990 <DFU_callback_Fun+0x2b0>)
  423774:	4798      	blx	r3
  423776:	7028      	strb	r0, [r5, #0]
		if (datalow[3] == temp_crc)
  423778:	78e3      	ldrb	r3, [r4, #3]
  42377a:	4283      	cmp	r3, r0
  42377c:	f000 8128 	beq.w	4239d0 <DFU_callback_Fun+0x2f0>
			tx_mailbox.ul_datal = (0xCCEE << 8) | temp_crc;
  423780:	f440 004c 	orr.w	r0, r0, #13369344	; 0xcc0000
  423784:	f440 406e 	orr.w	r0, r0, #60928	; 0xee00
  423788:	4b82      	ldr	r3, [pc, #520]	; (423994 <DFU_callback_Fun+0x2b4>)
  42378a:	6198      	str	r0, [r3, #24]
		tx_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
  42378c:	4981      	ldr	r1, [pc, #516]	; (423994 <DFU_callback_Fun+0x2b4>)
  42378e:	2308      	movs	r3, #8
  423790:	718b      	strb	r3, [r1, #6]
		tx_mailbox.ul_datah =0;
  423792:	2300      	movs	r3, #0
  423794:	61cb      	str	r3, [r1, #28]
		tx_mailbox.ul_id = CAN_MID_MIDvA(3);
  423796:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  42379a:	610b      	str	r3, [r1, #16]
		can_mailbox_write(CAN0, &tx_mailbox);
  42379c:	4c6f      	ldr	r4, [pc, #444]	; (42395c <DFU_callback_Fun+0x27c>)
  42379e:	4620      	mov	r0, r4
  4237a0:	4b7d      	ldr	r3, [pc, #500]	; (423998 <DFU_callback_Fun+0x2b8>)
  4237a2:	4798      	blx	r3
		can_global_send_transfer_cmd(CAN0,CAN_TCR_MB5);
  4237a4:	2120      	movs	r1, #32
  4237a6:	4620      	mov	r0, r4
  4237a8:	4b7c      	ldr	r3, [pc, #496]	; (42399c <DFU_callback_Fun+0x2bc>)
  4237aa:	4798      	blx	r3
  4237ac:	e00b      	b.n	4237c6 <DFU_callback_Fun+0xe6>
		if((datahigh[0] == 1) && (datahigh[1] == 1) && (datahigh[2] == 1) && (datahigh[3] == 1) && state == initiate)
  4237ae:	4b6f      	ldr	r3, [pc, #444]	; (42396c <DFU_callback_Fun+0x28c>)
  4237b0:	785b      	ldrb	r3, [r3, #1]
  4237b2:	2b01      	cmp	r3, #1
  4237b4:	d01a      	beq.n	4237ec <DFU_callback_Fun+0x10c>
		       else if( remFileSize!=0 &&  state == imageDownloading)
  4237b6:	4b7a      	ldr	r3, [pc, #488]	; (4239a0 <DFU_callback_Fun+0x2c0>)
  4237b8:	681b      	ldr	r3, [r3, #0]
  4237ba:	b123      	cbz	r3, 4237c6 <DFU_callback_Fun+0xe6>
  4237bc:	4b6e      	ldr	r3, [pc, #440]	; (423978 <DFU_callback_Fun+0x298>)
  4237be:	781b      	ldrb	r3, [r3, #0]
  4237c0:	2b05      	cmp	r3, #5
  4237c2:	f000 8151 	beq.w	423a68 <DFU_callback_Fun+0x388>
								can_enable_interrupt(CAN0, 1 << CAN_COMM_RXMB_ID);
  4237c6:	2101      	movs	r1, #1
  4237c8:	4864      	ldr	r0, [pc, #400]	; (42395c <DFU_callback_Fun+0x27c>)
  4237ca:	4b76      	ldr	r3, [pc, #472]	; (4239a4 <DFU_callback_Fun+0x2c4>)
  4237cc:	4798      	blx	r3
								cpu_irq_enable();
  4237ce:	2201      	movs	r2, #1
  4237d0:	4b75      	ldr	r3, [pc, #468]	; (4239a8 <DFU_callback_Fun+0x2c8>)
  4237d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4237d4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4237d8:	b662      	cpsie	i
  4237da:	2220      	movs	r2, #32
  4237dc:	4b73      	ldr	r3, [pc, #460]	; (4239ac <DFU_callback_Fun+0x2cc>)
  4237de:	605a      	str	r2, [r3, #4]
								g_ul_recv_status =0;	
  4237e0:	2200      	movs	r2, #0
  4237e2:	4b73      	ldr	r3, [pc, #460]	; (4239b0 <DFU_callback_Fun+0x2d0>)
  4237e4:	601a      	str	r2, [r3, #0]
		       	 }
  4237e6:	b005      	add	sp, #20
  4237e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((datahigh[0] == 1) && (datahigh[1] == 1) && (datahigh[2] == 1) && (datahigh[3] == 1) && state == initiate)
  4237ec:	4b5f      	ldr	r3, [pc, #380]	; (42396c <DFU_callback_Fun+0x28c>)
  4237ee:	789b      	ldrb	r3, [r3, #2]
  4237f0:	2b01      	cmp	r3, #1
  4237f2:	d1e0      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  4237f4:	4b5d      	ldr	r3, [pc, #372]	; (42396c <DFU_callback_Fun+0x28c>)
  4237f6:	78db      	ldrb	r3, [r3, #3]
  4237f8:	2b01      	cmp	r3, #1
  4237fa:	d1dc      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  4237fc:	4b5e      	ldr	r3, [pc, #376]	; (423978 <DFU_callback_Fun+0x298>)
  4237fe:	781b      	ldrb	r3, [r3, #0]
  423800:	2b01      	cmp	r3, #1
  423802:	d1d8      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  423804:	4b5d      	ldr	r3, [pc, #372]	; (42397c <DFU_callback_Fun+0x29c>)
  423806:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  42380a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  42380c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  423810:	635a      	str	r2, [r3, #52]	; 0x34
  423812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  423816:	635a      	str	r2, [r3, #52]	; 0x34
		temp_crc=0;
  423818:	4e5c      	ldr	r6, [pc, #368]	; (42398c <DFU_callback_Fun+0x2ac>)
  42381a:	2300      	movs	r3, #0
  42381c:	7033      	strb	r3, [r6, #0]
		temp_crc= crc8_cal((uint8_t *)datalow, 2);
  42381e:	460d      	mov	r5, r1
  423820:	2102      	movs	r1, #2
  423822:	4628      	mov	r0, r5
  423824:	4b5a      	ldr	r3, [pc, #360]	; (423990 <DFU_callback_Fun+0x2b0>)
  423826:	4798      	blx	r3
  423828:	7030      	strb	r0, [r6, #0]
		if (datalow[2] == temp_crc)
  42382a:	78ab      	ldrb	r3, [r5, #2]
  42382c:	4283      	cmp	r3, r0
  42382e:	d016      	beq.n	42385e <DFU_callback_Fun+0x17e>
			tx_mailbox.ul_datal = (0xCCEE << 8) | temp_crc;
  423830:	f440 004c 	orr.w	r0, r0, #13369344	; 0xcc0000
  423834:	f440 406e 	orr.w	r0, r0, #60928	; 0xee00
  423838:	4b56      	ldr	r3, [pc, #344]	; (423994 <DFU_callback_Fun+0x2b4>)
  42383a:	6198      	str	r0, [r3, #24]
		tx_mailbox.ul_id = CAN_MID_MIDvA(TEST1_CAN_TRANSFER_ID);
  42383c:	4955      	ldr	r1, [pc, #340]	; (423994 <DFU_callback_Fun+0x2b4>)
  42383e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  423842:	610b      	str	r3, [r1, #16]
		tx_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
  423844:	2308      	movs	r3, #8
  423846:	718b      	strb	r3, [r1, #6]
		tx_mailbox.ul_datah =0;
  423848:	2300      	movs	r3, #0
  42384a:	61cb      	str	r3, [r1, #28]
		can_mailbox_write(CAN0, &tx_mailbox);
  42384c:	4d43      	ldr	r5, [pc, #268]	; (42395c <DFU_callback_Fun+0x27c>)
  42384e:	4628      	mov	r0, r5
  423850:	4b51      	ldr	r3, [pc, #324]	; (423998 <DFU_callback_Fun+0x2b8>)
  423852:	4798      	blx	r3
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB5);
  423854:	2120      	movs	r1, #32
  423856:	4628      	mov	r0, r5
  423858:	4b50      	ldr	r3, [pc, #320]	; (42399c <DFU_callback_Fun+0x2bc>)
  42385a:	4798      	blx	r3
  42385c:	e75b      	b.n	423716 <DFU_callback_Fun+0x36>
		CAN_Res_pkt.CANRESP[i]    = datalow[i];
  42385e:	4b55      	ldr	r3, [pc, #340]	; (4239b4 <DFU_callback_Fun+0x2d4>)
  423860:	7829      	ldrb	r1, [r5, #0]
  423862:	7019      	strb	r1, [r3, #0]
  423864:	786a      	ldrb	r2, [r5, #1]
  423866:	705a      	strb	r2, [r3, #1]
		tx_mailbox.ul_datal = (CAN_Res_pkt.CANRESP_ST.CANRespL_1 << 8) | temp_crc;
  423868:	681b      	ldr	r3, [r3, #0]
  42386a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  42386e:	4b49      	ldr	r3, [pc, #292]	; (423994 <DFU_callback_Fun+0x2b4>)
  423870:	6198      	str	r0, [r3, #24]
  423872:	e7e3      	b.n	42383c <DFU_callback_Fun+0x15c>
	else if((datahigh[0] == 2) && (datahigh[1] == 2) && (datahigh[2] == 2) && (datahigh[3] == 2) && state == initiate)
  423874:	4b3d      	ldr	r3, [pc, #244]	; (42396c <DFU_callback_Fun+0x28c>)
  423876:	785b      	ldrb	r3, [r3, #1]
  423878:	2b02      	cmp	r3, #2
  42387a:	d19c      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  42387c:	4b3b      	ldr	r3, [pc, #236]	; (42396c <DFU_callback_Fun+0x28c>)
  42387e:	789b      	ldrb	r3, [r3, #2]
  423880:	2b02      	cmp	r3, #2
  423882:	d198      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  423884:	4b39      	ldr	r3, [pc, #228]	; (42396c <DFU_callback_Fun+0x28c>)
  423886:	78db      	ldrb	r3, [r3, #3]
  423888:	2b02      	cmp	r3, #2
  42388a:	d194      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  42388c:	4b3a      	ldr	r3, [pc, #232]	; (423978 <DFU_callback_Fun+0x298>)
  42388e:	781b      	ldrb	r3, [r3, #0]
  423890:	2b01      	cmp	r3, #1
  423892:	d190      	bne.n	4237b6 <DFU_callback_Fun+0xd6>
  423894:	4b39      	ldr	r3, [pc, #228]	; (42397c <DFU_callback_Fun+0x29c>)
  423896:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  42389a:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  42389c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4238a0:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4238a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4238a6:	635a      	str	r2, [r3, #52]	; 0x34
		File_size = remFileSize =	 (datalow[2]<<16 | datalow[1]<<8 | datalow[0]);
  4238a8:	4d32      	ldr	r5, [pc, #200]	; (423974 <DFU_callback_Fun+0x294>)
  4238aa:	78aa      	ldrb	r2, [r5, #2]
  4238ac:	786b      	ldrb	r3, [r5, #1]
  4238ae:	021b      	lsls	r3, r3, #8
  4238b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4238b4:	782a      	ldrb	r2, [r5, #0]
  4238b6:	4313      	orrs	r3, r2
  4238b8:	4a39      	ldr	r2, [pc, #228]	; (4239a0 <DFU_callback_Fun+0x2c0>)
  4238ba:	6013      	str	r3, [r2, #0]
  4238bc:	4a3e      	ldr	r2, [pc, #248]	; (4239b8 <DFU_callback_Fun+0x2d8>)
  4238be:	6013      	str	r3, [r2, #0]
        temp_crc=0;
  4238c0:	4e32      	ldr	r6, [pc, #200]	; (42398c <DFU_callback_Fun+0x2ac>)
  4238c2:	2300      	movs	r3, #0
  4238c4:	7033      	strb	r3, [r6, #0]
		temp_crc= crc8_cal((uint8_t *)datalow, 3);
  4238c6:	2103      	movs	r1, #3
  4238c8:	4628      	mov	r0, r5
  4238ca:	4b31      	ldr	r3, [pc, #196]	; (423990 <DFU_callback_Fun+0x2b0>)
  4238cc:	4798      	blx	r3
  4238ce:	7030      	strb	r0, [r6, #0]
		if ((datalow[3] == temp_crc) && (remFileSize>2000u))
  4238d0:	78eb      	ldrb	r3, [r5, #3]
  4238d2:	4283      	cmp	r3, r0
  4238d4:	d01b      	beq.n	42390e <DFU_callback_Fun+0x22e>
	    tx_mailbox.ul_datal = (0xCCEE << 8) | temp_crc;	
  4238d6:	4a2f      	ldr	r2, [pc, #188]	; (423994 <DFU_callback_Fun+0x2b4>)
  4238d8:	f440 004c 	orr.w	r0, r0, #13369344	; 0xcc0000
  4238dc:	f440 406e 	orr.w	r0, r0, #60928	; 0xee00
  4238e0:	6190      	str	r0, [r2, #24]
		tx_mailbox.uc_length = 8;
  4238e2:	2308      	movs	r3, #8
  4238e4:	7193      	strb	r3, [r2, #6]
		tx_mailbox.ul_id = CAN_MID_MIDvA(3);
  4238e6:	492b      	ldr	r1, [pc, #172]	; (423994 <DFU_callback_Fun+0x2b4>)
  4238e8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  4238ec:	610b      	str	r3, [r1, #16]
		tx_mailbox.ul_datah =0;
  4238ee:	2300      	movs	r3, #0
  4238f0:	61cb      	str	r3, [r1, #28]
		can_mailbox_write(CAN0, &tx_mailbox);
  4238f2:	4d1a      	ldr	r5, [pc, #104]	; (42395c <DFU_callback_Fun+0x27c>)
  4238f4:	4628      	mov	r0, r5
  4238f6:	4b28      	ldr	r3, [pc, #160]	; (423998 <DFU_callback_Fun+0x2b8>)
  4238f8:	4798      	blx	r3
		can_global_send_transfer_cmd(CAN0,CAN_TCR_MB5);
  4238fa:	2120      	movs	r1, #32
  4238fc:	4628      	mov	r0, r5
  4238fe:	4b27      	ldr	r3, [pc, #156]	; (42399c <DFU_callback_Fun+0x2bc>)
  423900:	4798      	blx	r3
		printf("File_size %lu\n",remFileSize);
  423902:	4b27      	ldr	r3, [pc, #156]	; (4239a0 <DFU_callback_Fun+0x2c0>)
  423904:	6819      	ldr	r1, [r3, #0]
  423906:	482d      	ldr	r0, [pc, #180]	; (4239bc <DFU_callback_Fun+0x2dc>)
  423908:	4b1f      	ldr	r3, [pc, #124]	; (423988 <DFU_callback_Fun+0x2a8>)
  42390a:	4798      	blx	r3
  42390c:	e703      	b.n	423716 <DFU_callback_Fun+0x36>
		if ((datalow[3] == temp_crc) && (remFileSize>2000u))
  42390e:	4b24      	ldr	r3, [pc, #144]	; (4239a0 <DFU_callback_Fun+0x2c0>)
  423910:	681b      	ldr	r3, [r3, #0]
  423912:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  423916:	d9de      	bls.n	4238d6 <DFU_callback_Fun+0x1f6>
			flashPos = 0;
  423918:	2000      	movs	r0, #0
  42391a:	4b29      	ldr	r3, [pc, #164]	; (4239c0 <DFU_callback_Fun+0x2e0>)
  42391c:	6018      	str	r0, [r3, #0]
			ota_start =1;
  42391e:	2201      	movs	r2, #1
  423920:	4b28      	ldr	r3, [pc, #160]	; (4239c4 <DFU_callback_Fun+0x2e4>)
  423922:	701a      	strb	r2, [r3, #0]
			remFileSize =remFileSize;
  423924:	4b1e      	ldr	r3, [pc, #120]	; (4239a0 <DFU_callback_Fun+0x2c0>)
  423926:	681a      	ldr	r2, [r3, #0]
  423928:	601a      	str	r2, [r3, #0]
			falsh_state=at25dfx_erase_block_OTA(0);
  42392a:	4b27      	ldr	r3, [pc, #156]	; (4239c8 <DFU_callback_Fun+0x2e8>)
  42392c:	4798      	blx	r3
  42392e:	4b27      	ldr	r3, [pc, #156]	; (4239cc <DFU_callback_Fun+0x2ec>)
  423930:	7018      	strb	r0, [r3, #0]
  423932:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  423936:	4b11      	ldr	r3, [pc, #68]	; (42397c <DFU_callback_Fun+0x29c>)
  423938:	635a      	str	r2, [r3, #52]	; 0x34
		CAN_Res_pkt.CANRESP[i]    = datalow[i];
  42393a:	4b1e      	ldr	r3, [pc, #120]	; (4239b4 <DFU_callback_Fun+0x2d4>)
  42393c:	7829      	ldrb	r1, [r5, #0]
  42393e:	7019      	strb	r1, [r3, #0]
  423940:	7869      	ldrb	r1, [r5, #1]
  423942:	7059      	strb	r1, [r3, #1]
  423944:	78aa      	ldrb	r2, [r5, #2]
  423946:	709a      	strb	r2, [r3, #2]
		tx_mailbox.ul_datal = (CAN_Res_pkt.CANRESP_ST.CANRespL_1 << 8) | temp_crc;
  423948:	4a12      	ldr	r2, [pc, #72]	; (423994 <DFU_callback_Fun+0x2b4>)
  42394a:	6819      	ldr	r1, [r3, #0]
  42394c:	7833      	ldrb	r3, [r6, #0]
  42394e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  423952:	6193      	str	r3, [r2, #24]
		tx_mailbox.uc_length = 8;
  423954:	2308      	movs	r3, #8
  423956:	7193      	strb	r3, [r2, #6]
  423958:	e7c5      	b.n	4238e6 <DFU_callback_Fun+0x206>
  42395a:	bf00      	nop
  42395c:	40010000 	.word	0x40010000
  423960:	00421681 	.word	0x00421681
  423964:	200012f8 	.word	0x200012f8
  423968:	20001354 	.word	0x20001354
  42396c:	20001300 	.word	0x20001300
  423970:	200016d0 	.word	0x200016d0
  423974:	20001308 	.word	0x20001308
  423978:	200000a4 	.word	0x200000a4
  42397c:	400e0e00 	.word	0x400e0e00
  423980:	200012f0 	.word	0x200012f0
  423984:	0042f414 	.word	0x0042f414
  423988:	00426851 	.word	0x00426851
  42398c:	20001324 	.word	0x20001324
  423990:	00424695 	.word	0x00424695
  423994:	20001644 	.word	0x20001644
  423998:	00421791 	.word	0x00421791
  42399c:	00421689 	.word	0x00421689
  4239a0:	20001320 	.word	0x20001320
  4239a4:	0042167d 	.word	0x0042167d
  4239a8:	200000c1 	.word	0x200000c1
  4239ac:	e000e100 	.word	0xe000e100
  4239b0:	20001318 	.word	0x20001318
  4239b4:	20001570 	.word	0x20001570
  4239b8:	200012e4 	.word	0x200012e4
  4239bc:	0042f404 	.word	0x0042f404
  4239c0:	20001310 	.word	0x20001310
  4239c4:	2000131c 	.word	0x2000131c
  4239c8:	00420e2d 	.word	0x00420e2d
  4239cc:	2000130c 	.word	0x2000130c
			CAN_Res_pkt.CANRESP[i]    = datalow[i];
  4239d0:	4b7e      	ldr	r3, [pc, #504]	; (423bcc <DFU_callback_Fun+0x4ec>)
  4239d2:	7821      	ldrb	r1, [r4, #0]
  4239d4:	7019      	strb	r1, [r3, #0]
  4239d6:	7861      	ldrb	r1, [r4, #1]
  4239d8:	7059      	strb	r1, [r3, #1]
  4239da:	78a2      	ldrb	r2, [r4, #2]
  4239dc:	709a      	strb	r2, [r3, #2]
			tx_mailbox.ul_datal = (CAN_Res_pkt.CANRESP_ST.CANRespL_1 << 8) | temp_crc;
  4239de:	681b      	ldr	r3, [r3, #0]
  4239e0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4239e4:	4b7a      	ldr	r3, [pc, #488]	; (423bd0 <DFU_callback_Fun+0x4f0>)
  4239e6:	6198      	str	r0, [r3, #24]
  4239e8:	e6d0      	b.n	42378c <DFU_callback_Fun+0xac>
		else if((datahigh[0] == 4) && (datahigh[1] == 4) && (datahigh[2] == 4) && (datahigh[3] == 4) && state == initiate)
  4239ea:	2b04      	cmp	r3, #4
  4239ec:	f47f aee3 	bne.w	4237b6 <DFU_callback_Fun+0xd6>
  4239f0:	4b78      	ldr	r3, [pc, #480]	; (423bd4 <DFU_callback_Fun+0x4f4>)
  4239f2:	785b      	ldrb	r3, [r3, #1]
  4239f4:	2b04      	cmp	r3, #4
  4239f6:	f47f aede 	bne.w	4237b6 <DFU_callback_Fun+0xd6>
  4239fa:	4b76      	ldr	r3, [pc, #472]	; (423bd4 <DFU_callback_Fun+0x4f4>)
  4239fc:	789b      	ldrb	r3, [r3, #2]
  4239fe:	2b04      	cmp	r3, #4
  423a00:	f47f aed9 	bne.w	4237b6 <DFU_callback_Fun+0xd6>
  423a04:	4b73      	ldr	r3, [pc, #460]	; (423bd4 <DFU_callback_Fun+0x4f4>)
  423a06:	78db      	ldrb	r3, [r3, #3]
  423a08:	2b04      	cmp	r3, #4
  423a0a:	f47f aed4 	bne.w	4237b6 <DFU_callback_Fun+0xd6>
  423a0e:	4b72      	ldr	r3, [pc, #456]	; (423bd8 <DFU_callback_Fun+0x4f8>)
  423a10:	781b      	ldrb	r3, [r3, #0]
  423a12:	2b01      	cmp	r3, #1
  423a14:	f47f aecf 	bne.w	4237b6 <DFU_callback_Fun+0xd6>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  423a18:	4b70      	ldr	r3, [pc, #448]	; (423bdc <DFU_callback_Fun+0x4fc>)
  423a1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  423a1e:	631a      	str	r2, [r3, #48]	; 0x30
  423a20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  423a24:	631a      	str	r2, [r3, #48]	; 0x30
  423a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  423a2a:	631a      	str	r2, [r3, #48]	; 0x30
			tx_mailbox.ul_datal = datalow[0];
  423a2c:	4d6c      	ldr	r5, [pc, #432]	; (423be0 <DFU_callback_Fun+0x500>)
  423a2e:	7829      	ldrb	r1, [r5, #0]
  423a30:	4c67      	ldr	r4, [pc, #412]	; (423bd0 <DFU_callback_Fun+0x4f0>)
  423a32:	61a1      	str	r1, [r4, #24]
			tx_mailbox.ul_id = CAN_MID_MIDvA(3);
  423a34:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  423a38:	6123      	str	r3, [r4, #16]
			tx_mailbox.uc_length = 8;
  423a3a:	2308      	movs	r3, #8
  423a3c:	71a3      	strb	r3, [r4, #6]
			tx_mailbox.ul_datah =0;
  423a3e:	2300      	movs	r3, #0
  423a40:	61e3      	str	r3, [r4, #28]
			printf("%x\r\n", datalow[0]);
  423a42:	4868      	ldr	r0, [pc, #416]	; (423be4 <DFU_callback_Fun+0x504>)
  423a44:	4b68      	ldr	r3, [pc, #416]	; (423be8 <DFU_callback_Fun+0x508>)
  423a46:	4798      	blx	r3
			Strcrc = datalow[0];
  423a48:	782a      	ldrb	r2, [r5, #0]
  423a4a:	4b68      	ldr	r3, [pc, #416]	; (423bec <DFU_callback_Fun+0x50c>)
  423a4c:	701a      	strb	r2, [r3, #0]
		   state = imageDownloading;
  423a4e:	2205      	movs	r2, #5
  423a50:	4b61      	ldr	r3, [pc, #388]	; (423bd8 <DFU_callback_Fun+0x4f8>)
  423a52:	701a      	strb	r2, [r3, #0]
			can_mailbox_write(CAN0, &tx_mailbox);
  423a54:	4d66      	ldr	r5, [pc, #408]	; (423bf0 <DFU_callback_Fun+0x510>)
  423a56:	4621      	mov	r1, r4
  423a58:	4628      	mov	r0, r5
  423a5a:	4b66      	ldr	r3, [pc, #408]	; (423bf4 <DFU_callback_Fun+0x514>)
  423a5c:	4798      	blx	r3
			can_global_send_transfer_cmd(CAN0,CAN_TCR_MB5);
  423a5e:	2120      	movs	r1, #32
  423a60:	4628      	mov	r0, r5
  423a62:	4b65      	ldr	r3, [pc, #404]	; (423bf8 <DFU_callback_Fun+0x518>)
  423a64:	4798      	blx	r3
  423a66:	e6ae      	b.n	4237c6 <DFU_callback_Fun+0xe6>
			       	 memcpy(Merge_Arr, datalow, size2 * sizeof(char));
  423a68:	4864      	ldr	r0, [pc, #400]	; (423bfc <DFU_callback_Fun+0x51c>)
  423a6a:	4b5d      	ldr	r3, [pc, #372]	; (423be0 <DFU_callback_Fun+0x500>)
  423a6c:	681b      	ldr	r3, [r3, #0]
  423a6e:	6003      	str	r3, [r0, #0]
			       	 memcpy(Merge_Arr + size2, datahigh, size1 * sizeof(char));
  423a70:	4b58      	ldr	r3, [pc, #352]	; (423bd4 <DFU_callback_Fun+0x4f4>)
  423a72:	681b      	ldr	r3, [r3, #0]
  423a74:	6043      	str	r3, [r0, #4]
			       	 temp_crc= crc8_cal((uint8_t *)Merge_Arr, 8);
  423a76:	2108      	movs	r1, #8
  423a78:	4b61      	ldr	r3, [pc, #388]	; (423c00 <DFU_callback_Fun+0x520>)
  423a7a:	4798      	blx	r3
  423a7c:	4b61      	ldr	r3, [pc, #388]	; (423c04 <DFU_callback_Fun+0x524>)
  423a7e:	7018      	strb	r0, [r3, #0]
			       	 if(Strcrc == temp_crc)
  423a80:	4b5a      	ldr	r3, [pc, #360]	; (423bec <DFU_callback_Fun+0x50c>)
  423a82:	781b      	ldrb	r3, [r3, #0]
  423a84:	4283      	cmp	r3, r0
  423a86:	d01c      	beq.n	423ac2 <DFU_callback_Fun+0x3e2>
			       	 else if((Strcrc != temp_crc) && (remFileSize!=0))
  423a88:	4b5f      	ldr	r3, [pc, #380]	; (423c08 <DFU_callback_Fun+0x528>)
  423a8a:	681b      	ldr	r3, [r3, #0]
  423a8c:	2b00      	cmp	r3, #0
  423a8e:	d13b      	bne.n	423b08 <DFU_callback_Fun+0x428>
						state = initiate;
  423a90:	2201      	movs	r2, #1
  423a92:	4b51      	ldr	r3, [pc, #324]	; (423bd8 <DFU_callback_Fun+0x4f8>)
  423a94:	701a      	strb	r2, [r3, #0]
			       	 if (remFileSize == 0u)
  423a96:	4b5c      	ldr	r3, [pc, #368]	; (423c08 <DFU_callback_Fun+0x528>)
  423a98:	681b      	ldr	r3, [r3, #0]
  423a9a:	2b00      	cmp	r3, #0
  423a9c:	f040 808b 	bne.w	423bb6 <DFU_callback_Fun+0x4d6>
				       	 remFileSize =File_size;
  423aa0:	4b5a      	ldr	r3, [pc, #360]	; (423c0c <DFU_callback_Fun+0x52c>)
  423aa2:	681a      	ldr	r2, [r3, #0]
  423aa4:	4b58      	ldr	r3, [pc, #352]	; (423c08 <DFU_callback_Fun+0x528>)
  423aa6:	601a      	str	r2, [r3, #0]
				       	 flashPos=0;
  423aa8:	2500      	movs	r5, #0
  423aaa:	4b59      	ldr	r3, [pc, #356]	; (423c10 <DFU_callback_Fun+0x530>)
  423aac:	601d      	str	r5, [r3, #0]
					       	 memset(Merge_Arr, 0, sizeof(Merge_Arr));
  423aae:	f8df 914c 	ldr.w	r9, [pc, #332]	; 423bfc <DFU_callback_Fun+0x51c>
					       	 falsh_state=at25dfx_read(Merge_Arr, sizeof(Merge_Arr),flashPos);
  423ab2:	469a      	mov	sl, r3
  423ab4:	f8df b190 	ldr.w	fp, [pc, #400]	; 423c48 <DFU_callback_Fun+0x568>
  423ab8:	f109 0707 	add.w	r7, r9, #7
					       	 flashPos +=(remFileSize > 8) ?(8) : remFileSize;
  423abc:	f8df 8148 	ldr.w	r8, [pc, #328]	; 423c08 <DFU_callback_Fun+0x528>
  423ac0:	e044      	b.n	423b4c <DFU_callback_Fun+0x46c>
				       	 falsh_state=at25dfx_write(Merge_Arr, p_mailbox->uc_length,flashPos);
  423ac2:	4b53      	ldr	r3, [pc, #332]	; (423c10 <DFU_callback_Fun+0x530>)
  423ac4:	681a      	ldr	r2, [r3, #0]
  423ac6:	79a1      	ldrb	r1, [r4, #6]
  423ac8:	484c      	ldr	r0, [pc, #304]	; (423bfc <DFU_callback_Fun+0x51c>)
  423aca:	4b52      	ldr	r3, [pc, #328]	; (423c14 <DFU_callback_Fun+0x534>)
  423acc:	4798      	blx	r3
  423ace:	4b52      	ldr	r3, [pc, #328]	; (423c18 <DFU_callback_Fun+0x538>)
  423ad0:	7018      	strb	r0, [r3, #0]
				       	flashPos +=(remFileSize > p_mailbox->uc_length) ?(p_mailbox->uc_length) : remFileSize;
  423ad2:	79a3      	ldrb	r3, [r4, #6]
  423ad4:	4a4c      	ldr	r2, [pc, #304]	; (423c08 <DFU_callback_Fun+0x528>)
  423ad6:	6812      	ldr	r2, [r2, #0]
  423ad8:	4293      	cmp	r3, r2
  423ada:	bf26      	itte	cs
  423adc:	4a4a      	ldrcs	r2, [pc, #296]	; (423c08 <DFU_callback_Fun+0x528>)
  423ade:	6810      	ldrcs	r0, [r2, #0]
  423ae0:	4618      	movcc	r0, r3
  423ae2:	494b      	ldr	r1, [pc, #300]	; (423c10 <DFU_callback_Fun+0x530>)
  423ae4:	680a      	ldr	r2, [r1, #0]
  423ae6:	4402      	add	r2, r0
  423ae8:	600a      	str	r2, [r1, #0]
				       	 remFileSize -=(remFileSize > p_mailbox->uc_length) ?(p_mailbox->uc_length) : remFileSize;
  423aea:	4a47      	ldr	r2, [pc, #284]	; (423c08 <DFU_callback_Fun+0x528>)
  423aec:	6812      	ldr	r2, [r2, #0]
  423aee:	4293      	cmp	r3, r2
  423af0:	bf24      	itt	cs
  423af2:	4b45      	ldrcs	r3, [pc, #276]	; (423c08 <DFU_callback_Fun+0x528>)
  423af4:	681b      	ldrcs	r3, [r3, #0]
  423af6:	4944      	ldr	r1, [pc, #272]	; (423c08 <DFU_callback_Fun+0x528>)
  423af8:	680a      	ldr	r2, [r1, #0]
  423afa:	1ad3      	subs	r3, r2, r3
  423afc:	600b      	str	r3, [r1, #0]
				       	 memset(Merge_Arr, 0, sizeof(Merge_Arr));
  423afe:	4b3f      	ldr	r3, [pc, #252]	; (423bfc <DFU_callback_Fun+0x51c>)
  423b00:	2200      	movs	r2, #0
  423b02:	601a      	str	r2, [r3, #0]
  423b04:	605a      	str	r2, [r3, #4]
  423b06:	e7c3      	b.n	423a90 <DFU_callback_Fun+0x3b0>
				       	 printf(" Not SameCRC\r\n");
  423b08:	4844      	ldr	r0, [pc, #272]	; (423c1c <DFU_callback_Fun+0x53c>)
  423b0a:	4b37      	ldr	r3, [pc, #220]	; (423be8 <DFU_callback_Fun+0x508>)
  423b0c:	4798      	blx	r3
  423b0e:	e7bf      	b.n	423a90 <DFU_callback_Fun+0x3b0>
					       	 flashPos +=(remFileSize > 8) ?(8) : remFileSize;
  423b10:	f8d8 3000 	ldr.w	r3, [r8]
  423b14:	2b08      	cmp	r3, #8
  423b16:	bf94      	ite	ls
  423b18:	f8d8 2000 	ldrls.w	r2, [r8]
  423b1c:	2208      	movhi	r2, #8
  423b1e:	f8da 3000 	ldr.w	r3, [sl]
  423b22:	4413      	add	r3, r2
  423b24:	f8ca 3000 	str.w	r3, [sl]
					       	 remFileSize -=(remFileSize > 8) ?(8) : remFileSize;
  423b28:	f8d8 3000 	ldr.w	r3, [r8]
  423b2c:	2b08      	cmp	r3, #8
  423b2e:	bf94      	ite	ls
  423b30:	f8d8 2000 	ldrls.w	r2, [r8]
  423b34:	2208      	movhi	r2, #8
  423b36:	f8d8 3000 	ldr.w	r3, [r8]
  423b3a:	1a9b      	subs	r3, r3, r2
  423b3c:	f8c8 3000 	str.w	r3, [r8]
					       	 wdt_restart(WDT);
  423b40:	4837      	ldr	r0, [pc, #220]	; (423c20 <DFU_callback_Fun+0x540>)
  423b42:	4b38      	ldr	r3, [pc, #224]	; (423c24 <DFU_callback_Fun+0x544>)
  423b44:	4798      	blx	r3
				       	 } while (remFileSize>0);
  423b46:	f8d8 3000 	ldr.w	r3, [r8]
  423b4a:	b1b3      	cbz	r3, 423b7a <DFU_callback_Fun+0x49a>
					       	 memset(Merge_Arr, 0, sizeof(Merge_Arr));
  423b4c:	2300      	movs	r3, #0
  423b4e:	f8c9 3000 	str.w	r3, [r9]
  423b52:	f8c9 3004 	str.w	r3, [r9, #4]
					       	 falsh_state=at25dfx_read(Merge_Arr, sizeof(Merge_Arr),flashPos);
  423b56:	f8da 2000 	ldr.w	r2, [sl]
  423b5a:	2108      	movs	r1, #8
  423b5c:	4648      	mov	r0, r9
  423b5e:	47d8      	blx	fp
  423b60:	4b2d      	ldr	r3, [pc, #180]	; (423c18 <DFU_callback_Fun+0x538>)
  423b62:	7018      	strb	r0, [r3, #0]
  423b64:	f109 34ff 	add.w	r4, r9, #4294967295
						       	 imageCRC = crc16(imageCRC,Merge_Arr[cnt]);
  423b68:	4e2f      	ldr	r6, [pc, #188]	; (423c28 <DFU_callback_Fun+0x548>)
  423b6a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  423b6e:	4628      	mov	r0, r5
  423b70:	47b0      	blx	r6
  423b72:	4605      	mov	r5, r0
					       	 for (int cnt = 0; cnt < 8;  cnt++)
  423b74:	42a7      	cmp	r7, r4
  423b76:	d1f8      	bne.n	423b6a <DFU_callback_Fun+0x48a>
  423b78:	e7ca      	b.n	423b10 <DFU_callback_Fun+0x430>
				       	 printf("Final imageCRC %x \n RX_imageCRC %x\r\n",imageCRC,RX_imageCRC);
  423b7a:	4c2c      	ldr	r4, [pc, #176]	; (423c2c <DFU_callback_Fun+0x54c>)
  423b7c:	8822      	ldrh	r2, [r4, #0]
  423b7e:	4629      	mov	r1, r5
  423b80:	482b      	ldr	r0, [pc, #172]	; (423c30 <DFU_callback_Fun+0x550>)
  423b82:	4b19      	ldr	r3, [pc, #100]	; (423be8 <DFU_callback_Fun+0x508>)
  423b84:	4798      	blx	r3
				       	 if (imageCRC == RX_imageCRC)
  423b86:	8823      	ldrh	r3, [r4, #0]
  423b88:	42ab      	cmp	r3, r5
  423b8a:	d018      	beq.n	423bbe <DFU_callback_Fun+0x4de>
					       	 info.length = 0;
  423b8c:	2300      	movs	r3, #0
  423b8e:	9300      	str	r3, [sp, #0]
					       	 info.trigger = 0;
  423b90:	9301      	str	r3, [sp, #4]
					       	 info.OAD_image_CRC = 0;
  423b92:	9303      	str	r3, [sp, #12]
				       	 wdt_restart(WDT);
  423b94:	4822      	ldr	r0, [pc, #136]	; (423c20 <DFU_callback_Fun+0x540>)
  423b96:	4b23      	ldr	r3, [pc, #140]	; (423c24 <DFU_callback_Fun+0x544>)
  423b98:	4798      	blx	r3
				       	 memory_erase(info_addr, INFO_SIZE);
  423b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  423b9e:	f44f 008e 	mov.w	r0, #4653056	; 0x470000
  423ba2:	4b24      	ldr	r3, [pc, #144]	; (423c34 <DFU_callback_Fun+0x554>)
  423ba4:	4798      	blx	r3
				       	 memory_write(info_addr, &info);
  423ba6:	4669      	mov	r1, sp
  423ba8:	f44f 008e 	mov.w	r0, #4653056	; 0x470000
  423bac:	4b22      	ldr	r3, [pc, #136]	; (423c38 <DFU_callback_Fun+0x558>)
  423bae:	4798      	blx	r3
				       	 rstc_start_software_reset(RSTC);
  423bb0:	4822      	ldr	r0, [pc, #136]	; (423c3c <DFU_callback_Fun+0x55c>)
  423bb2:	4b23      	ldr	r3, [pc, #140]	; (423c40 <DFU_callback_Fun+0x560>)
  423bb4:	4798      	blx	r3
			       	 ota_process_start(&temp_crc);
  423bb6:	4813      	ldr	r0, [pc, #76]	; (423c04 <DFU_callback_Fun+0x524>)
  423bb8:	4b22      	ldr	r3, [pc, #136]	; (423c44 <DFU_callback_Fun+0x564>)
  423bba:	4798      	blx	r3
  423bbc:	e603      	b.n	4237c6 <DFU_callback_Fun+0xe6>
					       	 info.length = File_size;	//flashpos
  423bbe:	4b13      	ldr	r3, [pc, #76]	; (423c0c <DFU_callback_Fun+0x52c>)
  423bc0:	681b      	ldr	r3, [r3, #0]
  423bc2:	9300      	str	r3, [sp, #0]
					       	 info.trigger = TRIGGER_BOOTLAOAD;
  423bc4:	2301      	movs	r3, #1
  423bc6:	9301      	str	r3, [sp, #4]
					       	 info.OAD_image_CRC = imageCRC;
  423bc8:	9503      	str	r5, [sp, #12]
  423bca:	e7e3      	b.n	423b94 <DFU_callback_Fun+0x4b4>
  423bcc:	20001570 	.word	0x20001570
  423bd0:	20001644 	.word	0x20001644
  423bd4:	20001300 	.word	0x20001300
  423bd8:	200000a4 	.word	0x200000a4
  423bdc:	400e0e00 	.word	0x400e0e00
  423be0:	20001308 	.word	0x20001308
  423be4:	0042f454 	.word	0x0042f454
  423be8:	00426851 	.word	0x00426851
  423bec:	200012f2 	.word	0x200012f2
  423bf0:	40010000 	.word	0x40010000
  423bf4:	00421791 	.word	0x00421791
  423bf8:	00421689 	.word	0x00421689
  423bfc:	200012e8 	.word	0x200012e8
  423c00:	00424695 	.word	0x00424695
  423c04:	20001324 	.word	0x20001324
  423c08:	20001320 	.word	0x20001320
  423c0c:	200012e4 	.word	0x200012e4
  423c10:	20001310 	.word	0x20001310
  423c14:	00420f9d 	.word	0x00420f9d
  423c18:	2000130c 	.word	0x2000130c
  423c1c:	0042f424 	.word	0x0042f424
  423c20:	400e1850 	.word	0x400e1850
  423c24:	00421da5 	.word	0x00421da5
  423c28:	00423521 	.word	0x00423521
  423c2c:	200012f0 	.word	0x200012f0
  423c30:	0042f434 	.word	0x0042f434
  423c34:	004242e5 	.word	0x004242e5
  423c38:	00424349 	.word	0x00424349
  423c3c:	400e1800 	.word	0x400e1800
  423c40:	004219c1 	.word	0x004219c1
  423c44:	004236a9 	.word	0x004236a9
  423c48:	00421041 	.word	0x00421041

00423c4c <Timer0_init>:

  }


void Timer0_init()
    {
  423c4c:	b510      	push	{r4, lr}
	    pmc_enable_periph_clk(ID_TC);
  423c4e:	2015      	movs	r0, #21
  423c50:	4b0e      	ldr	r3, [pc, #56]	; (423c8c <Timer0_init+0x40>)
  423c52:	4798      	blx	r3
	    tc_init(TC0, 0, TC_CMR_TCCLKS_TIMER_CLOCK5 | TC_CMR_CPCTRG);
  423c54:	4c0e      	ldr	r4, [pc, #56]	; (423c90 <Timer0_init+0x44>)
  423c56:	f244 0204 	movw	r2, #16388	; 0x4004
  423c5a:	2100      	movs	r1, #0
  423c5c:	4620      	mov	r0, r4
  423c5e:	4b0d      	ldr	r3, [pc, #52]	; (423c94 <Timer0_init+0x48>)
  423c60:	4798      	blx	r3
	    tc_write_rc(TC0, 0, BOARD_FREQ_SLCK_XTAL);
  423c62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  423c66:	2100      	movs	r1, #0
  423c68:	4620      	mov	r0, r4
  423c6a:	4b0b      	ldr	r3, [pc, #44]	; (423c98 <Timer0_init+0x4c>)
  423c6c:	4798      	blx	r3
	    tc_enable_interrupt(TC, CHANNEL, TC_IER_CPCS);
  423c6e:	2210      	movs	r2, #16
  423c70:	2100      	movs	r1, #0
  423c72:	4620      	mov	r0, r4
  423c74:	4b09      	ldr	r3, [pc, #36]	; (423c9c <Timer0_init+0x50>)
  423c76:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  423c78:	4b09      	ldr	r3, [pc, #36]	; (423ca0 <Timer0_init+0x54>)
  423c7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  423c7e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  423c82:	2100      	movs	r1, #0
  423c84:	f883 1315 	strb.w	r1, [r3, #789]	; 0x315
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  423c88:	601a      	str	r2, [r3, #0]
  423c8a:	bd10      	pop	{r4, pc}
  423c8c:	00425941 	.word	0x00425941
  423c90:	40090000 	.word	0x40090000
  423c94:	00421afd 	.word	0x00421afd
  423c98:	00421b27 	.word	0x00421b27
  423c9c:	00421b2f 	.word	0x00421b2f
  423ca0:	e000e100 	.word	0xe000e100

00423ca4 <SysTick_Handler>:
    }


 void SysTick_Handler(void)
 {
	 count_1ms++;
  423ca4:	4a02      	ldr	r2, [pc, #8]	; (423cb0 <SysTick_Handler+0xc>)
  423ca6:	6813      	ldr	r3, [r2, #0]
  423ca8:	3301      	adds	r3, #1
  423caa:	6013      	str	r3, [r2, #0]
  423cac:	4770      	bx	lr
  423cae:	bf00      	nop
  423cb0:	200012f8 	.word	0x200012f8

00423cb4 <TC0_Handler>:
 }

   void TC_Handler(void)
   {
  423cb4:	b510      	push	{r4, lr}

	   if (tc_get_status(TC0, 0) & TC_SR_CPCS)
  423cb6:	2100      	movs	r1, #0
  423cb8:	4813      	ldr	r0, [pc, #76]	; (423d08 <TC0_Handler+0x54>)
  423cba:	4b14      	ldr	r3, [pc, #80]	; (423d0c <TC0_Handler+0x58>)
  423cbc:	4798      	blx	r3
  423cbe:	f010 0f10 	tst.w	r0, #16
  423cc2:	d014      	beq.n	423cee <TC0_Handler+0x3a>
	   {
		   Timer_cnt_msec ++;
  423cc4:	4a12      	ldr	r2, [pc, #72]	; (423d10 <TC0_Handler+0x5c>)
  423cc6:	7813      	ldrb	r3, [r2, #0]
  423cc8:	3301      	adds	r3, #1
  423cca:	b2db      	uxtb	r3, r3
  423ccc:	7013      	strb	r3, [r2, #0]
		   if (Timer_cnt_msec>=57u)
  423cce:	7813      	ldrb	r3, [r2, #0]
  423cd0:	b2db      	uxtb	r3, r3
  423cd2:	2b38      	cmp	r3, #56	; 0x38
  423cd4:	d90b      	bls.n	423cee <TC0_Handler+0x3a>
		   {
			   	Timer_cnt_msec =0;
  423cd6:	2200      	movs	r2, #0
  423cd8:	4b0d      	ldr	r3, [pc, #52]	; (423d10 <TC0_Handler+0x5c>)
  423cda:	701a      	strb	r2, [r3, #0]
				   Timer_cnt_sec++;
  423cdc:	4a0d      	ldr	r2, [pc, #52]	; (423d14 <TC0_Handler+0x60>)
  423cde:	7813      	ldrb	r3, [r2, #0]
  423ce0:	3301      	adds	r3, #1
  423ce2:	b2db      	uxtb	r3, r3
  423ce4:	7013      	strb	r3, [r2, #0]

			   if (Timer_cnt_sec>=30)
  423ce6:	7813      	ldrb	r3, [r2, #0]
  423ce8:	b2db      	uxtb	r3, r3
  423cea:	2b1d      	cmp	r3, #29
  423cec:	d800      	bhi.n	423cf0 <TC0_Handler+0x3c>
  423cee:	bd10      	pop	{r4, pc}
			   {
				   Timer_cnt_sec=0;
  423cf0:	2400      	movs	r4, #0
  423cf2:	7014      	strb	r4, [r2, #0]
				   
					printf("Stop _timer0\n");
  423cf4:	4808      	ldr	r0, [pc, #32]	; (423d18 <TC0_Handler+0x64>)
  423cf6:	4b09      	ldr	r3, [pc, #36]	; (423d1c <TC0_Handler+0x68>)
  423cf8:	4798      	blx	r3
					alarm_sil_flag_g_b = 0u;
  423cfa:	4b09      	ldr	r3, [pc, #36]	; (423d20 <TC0_Handler+0x6c>)
  423cfc:	701c      	strb	r4, [r3, #0]
					tc_stop(TC0,0);
  423cfe:	4621      	mov	r1, r4
  423d00:	4801      	ldr	r0, [pc, #4]	; (423d08 <TC0_Handler+0x54>)
  423d02:	4b08      	ldr	r3, [pc, #32]	; (423d24 <TC0_Handler+0x70>)
  423d04:	4798      	blx	r3

		   }

	   }

   }
  423d06:	e7f2      	b.n	423cee <TC0_Handler+0x3a>
  423d08:	40090000 	.word	0x40090000
  423d0c:	00421b37 	.word	0x00421b37
  423d10:	200012f3 	.word	0x200012f3
  423d14:	200012f4 	.word	0x200012f4
  423d18:	0042f45c 	.word	0x0042f45c
  423d1c:	00426851 	.word	0x00426851
  423d20:	20001360 	.word	0x20001360
  423d24:	00421b1f 	.word	0x00421b1f

00423d28 <Amerex_LOGO_RGB>:
 uint8_t count_test=0;
volatile uint32_t Buzzer_bit=0;
volatile uint8_t Trouble_status;

void Amerex_LOGO_RGB(const uint32_t ul_mask)
{
  423d28:	b508      	push	{r3, lr}
pio_sync_output_write(PIOA,ul_mask);
  423d2a:	4601      	mov	r1, r0
  423d2c:	4801      	ldr	r0, [pc, #4]	; (423d34 <Amerex_LOGO_RGB+0xc>)
  423d2e:	4b02      	ldr	r3, [pc, #8]	; (423d38 <Amerex_LOGO_RGB+0x10>)
  423d30:	4798      	blx	r3
  423d32:	bd08      	pop	{r3, pc}
  423d34:	400e0e00 	.word	0x400e0e00
  423d38:	00425715 	.word	0x00425715

00423d3c <Alarm_Sil_Ind>:
 * Parameter: None
 * Return   : None
 */
void Alarm_Sil_Ind(void)
{
    if(alarm_sil_flag_g_b )
  423d3c:	4b06      	ldr	r3, [pc, #24]	; (423d58 <Alarm_Sil_Ind+0x1c>)
  423d3e:	781b      	ldrb	r3, [r3, #0]
  423d40:	b923      	cbnz	r3, 423d4c <Alarm_Sil_Ind+0x10>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  423d42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  423d46:	4b05      	ldr	r3, [pc, #20]	; (423d5c <Alarm_Sil_Ind+0x20>)
  423d48:	635a      	str	r2, [r3, #52]	; 0x34
  423d4a:	4770      	bx	lr
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  423d4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  423d50:	4b02      	ldr	r3, [pc, #8]	; (423d5c <Alarm_Sil_Ind+0x20>)
  423d52:	631a      	str	r2, [r3, #48]	; 0x30
  423d54:	4770      	bx	lr
  423d56:	bf00      	nop
  423d58:	20001360 	.word	0x20001360
  423d5c:	400e1000 	.word	0x400e1000

00423d60 <System_Normal_Ind>:



void System_Normal_Ind(void)
{
    if((!any_of_trouble_g_b))
  423d60:	4b05      	ldr	r3, [pc, #20]	; (423d78 <System_Normal_Ind+0x18>)
  423d62:	781b      	ldrb	r3, [r3, #0]
  423d64:	b11b      	cbz	r3, 423d6e <System_Normal_Ind+0xe>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  423d66:	2210      	movs	r2, #16
  423d68:	4b04      	ldr	r3, [pc, #16]	; (423d7c <System_Normal_Ind+0x1c>)
  423d6a:	635a      	str	r2, [r3, #52]	; 0x34
  423d6c:	4770      	bx	lr
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  423d6e:	2210      	movs	r2, #16
  423d70:	4b02      	ldr	r3, [pc, #8]	; (423d7c <System_Normal_Ind+0x1c>)
  423d72:	631a      	str	r2, [r3, #48]	; 0x30
  423d74:	4770      	bx	lr
  423d76:	bf00      	nop
  423d78:	2000138c 	.word	0x2000138c
  423d7c:	400e1400 	.word	0x400e1400

00423d80 <Sys_Reset_LED>:
	if (level) {
  423d80:	b920      	cbnz	r0, 423d8c <Sys_Reset_LED+0xc>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  423d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
  423d86:	4b04      	ldr	r3, [pc, #16]	; (423d98 <Sys_Reset_LED+0x18>)
  423d88:	635a      	str	r2, [r3, #52]	; 0x34
  423d8a:	4770      	bx	lr
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  423d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  423d90:	4b01      	ldr	r3, [pc, #4]	; (423d98 <Sys_Reset_LED+0x18>)
  423d92:	631a      	str	r2, [r3, #48]	; 0x30
  423d94:	4770      	bx	lr
  423d96:	bf00      	nop
  423d98:	400e1000 	.word	0x400e1000

00423d9c <SysNormal_LED>:
	if (level) {
  423d9c:	b918      	cbnz	r0, 423da6 <SysNormal_LED+0xa>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  423d9e:	2210      	movs	r2, #16
  423da0:	4b03      	ldr	r3, [pc, #12]	; (423db0 <SysNormal_LED+0x14>)
  423da2:	635a      	str	r2, [r3, #52]	; 0x34
  423da4:	4770      	bx	lr
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  423da6:	2210      	movs	r2, #16
  423da8:	4b01      	ldr	r3, [pc, #4]	; (423db0 <SysNormal_LED+0x14>)
  423daa:	631a      	str	r2, [r3, #48]	; 0x30
  423dac:	4770      	bx	lr
  423dae:	bf00      	nop
  423db0:	400e1400 	.word	0x400e1400

00423db4 <Secondary_Pwr_LED>:
 * Return   : None
 */

void Secondary_Pwr_LED(uint8_t count)
{
    if(count == OFF) /*if parameter is 0, OFF LED*/
  423db4:	b318      	cbz	r0, 423dfe <Secondary_Pwr_LED+0x4a>
    {
        ioport_set_pin_level(SEC_PWR_LED,OFF); /* OFF LED*/
        sec_pwr_prevtick_g_u32 = 0u;
    }
    else if(count == ALWAYS_ON) /*if parameter is 100, Solid ON the LED*/
  423db6:	2864      	cmp	r0, #100	; 0x64
  423db8:	d029      	beq.n	423e0e <Secondary_Pwr_LED+0x5a>
        ioport_set_pin_level(SEC_PWR_LED,ON);  /* ON LED*/
    }
    else
    {

      if((count_1ms - sec_pwr_prevtick_g_u32) >= sec_pwr_interval_g_u32) /*Compare Current time and previous time, then proceed*/
  423dba:	4b28      	ldr	r3, [pc, #160]	; (423e5c <Secondary_Pwr_LED+0xa8>)
  423dbc:	681b      	ldr	r3, [r3, #0]
  423dbe:	4928      	ldr	r1, [pc, #160]	; (423e60 <Secondary_Pwr_LED+0xac>)
  423dc0:	6809      	ldr	r1, [r1, #0]
  423dc2:	1a5b      	subs	r3, r3, r1
  423dc4:	4927      	ldr	r1, [pc, #156]	; (423e64 <Secondary_Pwr_LED+0xb0>)
  423dc6:	8809      	ldrh	r1, [r1, #0]
  423dc8:	428b      	cmp	r3, r1
  423dca:	d345      	bcc.n	423e58 <Secondary_Pwr_LED+0xa4>
      {
        if(sec_pwr_state_g_b && (count == PRIMARY_PWR_NOT_AVAIL))
  423dcc:	4b26      	ldr	r3, [pc, #152]	; (423e68 <Secondary_Pwr_LED+0xb4>)
  423dce:	781b      	ldrb	r3, [r3, #0]
  423dd0:	2b00      	cmp	r3, #0
  423dd2:	d031      	beq.n	423e38 <Secondary_Pwr_LED+0x84>
  423dd4:	2801      	cmp	r0, #1
  423dd6:	d01f      	beq.n	423e18 <Secondary_Pwr_LED+0x64>
        {
            sec_pwr_interval_g_u32 = OFF_delay_10s; /*assign OFF delay time 10Sec*/
        }
        else if(sec_pwr_state_g_b && (count == SEC_PWR_NOT_AVAIL))
  423dd8:	2802      	cmp	r0, #2
  423dda:	d029      	beq.n	423e30 <Secondary_Pwr_LED+0x7c>
        {
            sec_pwr_interval_g_u32 = delay_250ms; /*assign OFF delay time 250ms*/
        }
        else
        {
            sec_pwr_interval_g_u32 = ON_delay_500ms; /*assign ON delay time 500ms*/
  423ddc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  423de0:	4a20      	ldr	r2, [pc, #128]	; (423e64 <Secondary_Pwr_LED+0xb0>)
  423de2:	8011      	strh	r1, [r2, #0]
        }

        sec_pwr_state_g_b = !sec_pwr_state_g_b; /*Toggle the state variable*/
  423de4:	f083 0301 	eor.w	r3, r3, #1
  423de8:	4a1f      	ldr	r2, [pc, #124]	; (423e68 <Secondary_Pwr_LED+0xb4>)
  423dea:	7013      	strb	r3, [r2, #0]

        sec_pwr_prevtick_g_u32 = count_1ms; /*copy current time to previous counter value*/
  423dec:	4b1b      	ldr	r3, [pc, #108]	; (423e5c <Secondary_Pwr_LED+0xa8>)
  423dee:	681a      	ldr	r2, [r3, #0]
  423df0:	4b1b      	ldr	r3, [pc, #108]	; (423e60 <Secondary_Pwr_LED+0xac>)
  423df2:	601a      	str	r2, [r3, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  423df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  423df8:	4b1c      	ldr	r3, [pc, #112]	; (423e6c <Secondary_Pwr_LED+0xb8>)
  423dfa:	635a      	str	r2, [r3, #52]	; 0x34
// 						if(count_test==7)count_test=0;

      }

    }
}
  423dfc:	4770      	bx	lr
  423dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  423e02:	4b1a      	ldr	r3, [pc, #104]	; (423e6c <Secondary_Pwr_LED+0xb8>)
  423e04:	635a      	str	r2, [r3, #52]	; 0x34
        sec_pwr_prevtick_g_u32 = 0u;
  423e06:	2200      	movs	r2, #0
  423e08:	4b15      	ldr	r3, [pc, #84]	; (423e60 <Secondary_Pwr_LED+0xac>)
  423e0a:	601a      	str	r2, [r3, #0]
  423e0c:	4770      	bx	lr
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  423e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  423e12:	4b16      	ldr	r3, [pc, #88]	; (423e6c <Secondary_Pwr_LED+0xb8>)
  423e14:	631a      	str	r2, [r3, #48]	; 0x30
  423e16:	4770      	bx	lr
            sec_pwr_interval_g_u32 = OFF_delay_10s; /*assign OFF delay time 10Sec*/
  423e18:	f242 7210 	movw	r2, #10000	; 0x2710
  423e1c:	4b11      	ldr	r3, [pc, #68]	; (423e64 <Secondary_Pwr_LED+0xb0>)
  423e1e:	801a      	strh	r2, [r3, #0]
        sec_pwr_state_g_b = !sec_pwr_state_g_b; /*Toggle the state variable*/
  423e20:	2200      	movs	r2, #0
  423e22:	4b11      	ldr	r3, [pc, #68]	; (423e68 <Secondary_Pwr_LED+0xb4>)
  423e24:	701a      	strb	r2, [r3, #0]
        sec_pwr_prevtick_g_u32 = count_1ms; /*copy current time to previous counter value*/
  423e26:	4b0d      	ldr	r3, [pc, #52]	; (423e5c <Secondary_Pwr_LED+0xa8>)
  423e28:	681a      	ldr	r2, [r3, #0]
  423e2a:	4b0d      	ldr	r3, [pc, #52]	; (423e60 <Secondary_Pwr_LED+0xac>)
  423e2c:	601a      	str	r2, [r3, #0]
  423e2e:	e7e1      	b.n	423df4 <Secondary_Pwr_LED+0x40>
            sec_pwr_interval_g_u32 = delay_250ms; /*assign OFF delay time 250ms*/
  423e30:	22fa      	movs	r2, #250	; 0xfa
  423e32:	4b0c      	ldr	r3, [pc, #48]	; (423e64 <Secondary_Pwr_LED+0xb0>)
  423e34:	801a      	strh	r2, [r3, #0]
  423e36:	e7f3      	b.n	423e20 <Secondary_Pwr_LED+0x6c>
            sec_pwr_interval_g_u32 = ON_delay_500ms; /*assign ON delay time 500ms*/
  423e38:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  423e3c:	4a09      	ldr	r2, [pc, #36]	; (423e64 <Secondary_Pwr_LED+0xb0>)
  423e3e:	8011      	strh	r1, [r2, #0]
        sec_pwr_state_g_b = !sec_pwr_state_g_b; /*Toggle the state variable*/
  423e40:	f083 0301 	eor.w	r3, r3, #1
  423e44:	4a08      	ldr	r2, [pc, #32]	; (423e68 <Secondary_Pwr_LED+0xb4>)
  423e46:	7013      	strb	r3, [r2, #0]
        sec_pwr_prevtick_g_u32 = count_1ms; /*copy current time to previous counter value*/
  423e48:	4b04      	ldr	r3, [pc, #16]	; (423e5c <Secondary_Pwr_LED+0xa8>)
  423e4a:	681a      	ldr	r2, [r3, #0]
  423e4c:	4b04      	ldr	r3, [pc, #16]	; (423e60 <Secondary_Pwr_LED+0xac>)
  423e4e:	601a      	str	r2, [r3, #0]
  423e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
  423e54:	4b05      	ldr	r3, [pc, #20]	; (423e6c <Secondary_Pwr_LED+0xb8>)
  423e56:	631a      	str	r2, [r3, #48]	; 0x30
  423e58:	4770      	bx	lr
  423e5a:	bf00      	nop
  423e5c:	200012f8 	.word	0x200012f8
  423e60:	2000133c 	.word	0x2000133c
  423e64:	200000aa 	.word	0x200000aa
  423e68:	20001340 	.word	0x20001340
  423e6c:	400e1000 	.word	0x400e1000

00423e70 <Secondary_pwr_Ind>:
{
  423e70:	b508      	push	{r3, lr}
   if(!pri_pwr_trouble_g_b && !sec_pwr_trouble_g_b)
  423e72:	4b09      	ldr	r3, [pc, #36]	; (423e98 <Secondary_pwr_Ind+0x28>)
  423e74:	781b      	ldrb	r3, [r3, #0]
  423e76:	b953      	cbnz	r3, 423e8e <Secondary_pwr_Ind+0x1e>
  423e78:	4b08      	ldr	r3, [pc, #32]	; (423e9c <Secondary_pwr_Ind+0x2c>)
  423e7a:	781b      	ldrb	r3, [r3, #0]
  423e7c:	b11b      	cbz	r3, 423e86 <Secondary_pwr_Ind+0x16>
        Secondary_Pwr_LED(SEC_PWR_NOT_AVAIL);
  423e7e:	2002      	movs	r0, #2
  423e80:	4b07      	ldr	r3, [pc, #28]	; (423ea0 <Secondary_pwr_Ind+0x30>)
  423e82:	4798      	blx	r3
  423e84:	bd08      	pop	{r3, pc}
        Secondary_Pwr_LED(OFF);
  423e86:	2000      	movs	r0, #0
  423e88:	4b05      	ldr	r3, [pc, #20]	; (423ea0 <Secondary_pwr_Ind+0x30>)
  423e8a:	4798      	blx	r3
}
  423e8c:	bd08      	pop	{r3, pc}
        Secondary_Pwr_LED(PRIMARY_PWR_NOT_AVAIL);
  423e8e:	2001      	movs	r0, #1
  423e90:	4b03      	ldr	r3, [pc, #12]	; (423ea0 <Secondary_pwr_Ind+0x30>)
  423e92:	4798      	blx	r3
  423e94:	bd08      	pop	{r3, pc}
  423e96:	bf00      	nop
  423e98:	20000b50 	.word	0x20000b50
  423e9c:	20001068 	.word	0x20001068
  423ea0:	00423db5 	.word	0x00423db5

00423ea4 <Config_Indication_LED>:
 * Return   : None
 */
void Config_Indication_LED(uint8_t count)
{

    if(count == OFF)
  423ea4:	4603      	mov	r3, r0
  423ea6:	b328      	cbz	r0, 423ef4 <Config_Indication_LED+0x50>

		 ioport_set_pin_level(Amerex_B,OFF);
        config_LED_count_g_u8 = 0u;
        config_LED_interval_g_u16 = ON_delay_500ms;
    }
    else if(count == ALWAYS_ON)
  423ea8:	2864      	cmp	r0, #100	; 0x64
  423eaa:	d02f      	beq.n	423f0c <Config_Indication_LED+0x68>
        config_LED_count_g_u8 = 0u;
        config_LED_interval_g_u16 = ON_delay_500ms;
    }
    else
    {
        if(((count_1ms - config_LED_prevtick_g_u32) >= config_LED_interval_g_u16) && (config_LED_count_g_u8 < count))
  423eac:	4a31      	ldr	r2, [pc, #196]	; (423f74 <Config_Indication_LED+0xd0>)
  423eae:	6812      	ldr	r2, [r2, #0]
  423eb0:	4931      	ldr	r1, [pc, #196]	; (423f78 <Config_Indication_LED+0xd4>)
  423eb2:	6808      	ldr	r0, [r1, #0]
  423eb4:	4931      	ldr	r1, [pc, #196]	; (423f7c <Config_Indication_LED+0xd8>)
  423eb6:	8809      	ldrh	r1, [r1, #0]
  423eb8:	1a12      	subs	r2, r2, r0
  423eba:	428a      	cmp	r2, r1
  423ebc:	d332      	bcc.n	423f24 <Config_Indication_LED+0x80>
  423ebe:	4a30      	ldr	r2, [pc, #192]	; (423f80 <Config_Indication_LED+0xdc>)
  423ec0:	7812      	ldrb	r2, [r2, #0]
  423ec2:	4293      	cmp	r3, r2
  423ec4:	d940      	bls.n	423f48 <Config_Indication_LED+0xa4>
        {
            config_LED_prevtick_g_u32 = count_1ms;
  423ec6:	4b2b      	ldr	r3, [pc, #172]	; (423f74 <Config_Indication_LED+0xd0>)
  423ec8:	6819      	ldr	r1, [r3, #0]
  423eca:	4b2b      	ldr	r3, [pc, #172]	; (423f78 <Config_Indication_LED+0xd4>)
  423ecc:	6019      	str	r1, [r3, #0]
            config_LED_state_g_b = !config_LED_state_g_b;
  423ece:	492d      	ldr	r1, [pc, #180]	; (423f84 <Config_Indication_LED+0xe0>)
  423ed0:	780b      	ldrb	r3, [r1, #0]
  423ed2:	f083 0301 	eor.w	r3, r3, #1
  423ed6:	700b      	strb	r3, [r1, #0]
            config_LED_interval_g_u16 = ON_delay_500ms;
  423ed8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  423edc:	4927      	ldr	r1, [pc, #156]	; (423f7c <Config_Indication_LED+0xd8>)
  423ede:	8008      	strh	r0, [r1, #0]
            if(config_LED_state_g_b)
  423ee0:	2b00      	cmp	r3, #0
  423ee2:	d02c      	beq.n	423f3e <Config_Indication_LED+0x9a>
            {
                config_LED_count_g_u8++;
  423ee4:	3201      	adds	r2, #1
  423ee6:	4b26      	ldr	r3, [pc, #152]	; (423f80 <Config_Indication_LED+0xdc>)
  423ee8:	701a      	strb	r2, [r3, #0]
  423eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  423eee:	4b26      	ldr	r3, [pc, #152]	; (423f88 <Config_Indication_LED+0xe4>)
  423ef0:	631a      	str	r2, [r3, #48]	; 0x30
  423ef2:	4770      	bx	lr
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  423ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  423ef8:	4b23      	ldr	r3, [pc, #140]	; (423f88 <Config_Indication_LED+0xe4>)
  423efa:	635a      	str	r2, [r3, #52]	; 0x34
        config_LED_count_g_u8 = 0u;
  423efc:	2200      	movs	r2, #0
  423efe:	4b20      	ldr	r3, [pc, #128]	; (423f80 <Config_Indication_LED+0xdc>)
  423f00:	701a      	strb	r2, [r3, #0]
        config_LED_interval_g_u16 = ON_delay_500ms;
  423f02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  423f06:	4b1d      	ldr	r3, [pc, #116]	; (423f7c <Config_Indication_LED+0xd8>)
  423f08:	801a      	strh	r2, [r3, #0]
  423f0a:	4770      	bx	lr
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  423f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  423f10:	4b1d      	ldr	r3, [pc, #116]	; (423f88 <Config_Indication_LED+0xe4>)
  423f12:	631a      	str	r2, [r3, #48]	; 0x30
        config_LED_count_g_u8 = 0u;
  423f14:	2200      	movs	r2, #0
  423f16:	4b1a      	ldr	r3, [pc, #104]	; (423f80 <Config_Indication_LED+0xdc>)
  423f18:	701a      	strb	r2, [r3, #0]
        config_LED_interval_g_u16 = ON_delay_500ms;
  423f1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  423f1e:	4b17      	ldr	r3, [pc, #92]	; (423f7c <Config_Indication_LED+0xd8>)
  423f20:	801a      	strh	r2, [r3, #0]
  423f22:	4770      	bx	lr
            }
        }
        else if(((count_1ms - config_LED_prevtick_g_u32) >= config_LED_interval_g_u16) && (config_LED_count_g_u8 >= count))
  423f24:	4a13      	ldr	r2, [pc, #76]	; (423f74 <Config_Indication_LED+0xd0>)
  423f26:	6812      	ldr	r2, [r2, #0]
  423f28:	1a10      	subs	r0, r2, r0
  423f2a:	4281      	cmp	r1, r0
  423f2c:	d803      	bhi.n	423f36 <Config_Indication_LED+0x92>
  423f2e:	4a14      	ldr	r2, [pc, #80]	; (423f80 <Config_Indication_LED+0xdc>)
  423f30:	7812      	ldrb	r2, [r2, #0]
  423f32:	429a      	cmp	r2, r3
  423f34:	d20d      	bcs.n	423f52 <Config_Indication_LED+0xae>
            config_LED_count_g_u8 = 0u;
            config_LED_prevtick_g_u32 = count_1ms;
            config_LED_interval_g_u16 = 50000u;
            config_LED_state_g_b = !config_LED_state_g_b;
        }
		 	ioport_set_pin_level(Amerex_B,config_LED_state_g_b);
  423f36:	4b13      	ldr	r3, [pc, #76]	; (423f84 <Config_Indication_LED+0xe0>)
	if (level) {
  423f38:	781b      	ldrb	r3, [r3, #0]
  423f3a:	2b00      	cmp	r3, #0
  423f3c:	d1d5      	bne.n	423eea <Config_Indication_LED+0x46>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  423f3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  423f42:	4b11      	ldr	r3, [pc, #68]	; (423f88 <Config_Indication_LED+0xe4>)
  423f44:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
  423f46:	4770      	bx	lr
        else if(((count_1ms - config_LED_prevtick_g_u32) >= config_LED_interval_g_u16) && (config_LED_count_g_u8 >= count))
  423f48:	4b0a      	ldr	r3, [pc, #40]	; (423f74 <Config_Indication_LED+0xd0>)
  423f4a:	681b      	ldr	r3, [r3, #0]
  423f4c:	1a18      	subs	r0, r3, r0
  423f4e:	4281      	cmp	r1, r0
  423f50:	d8f1      	bhi.n	423f36 <Config_Indication_LED+0x92>
            config_LED_count_g_u8 = 0u;
  423f52:	2200      	movs	r2, #0
  423f54:	4b0a      	ldr	r3, [pc, #40]	; (423f80 <Config_Indication_LED+0xdc>)
  423f56:	701a      	strb	r2, [r3, #0]
            config_LED_prevtick_g_u32 = count_1ms;
  423f58:	4b06      	ldr	r3, [pc, #24]	; (423f74 <Config_Indication_LED+0xd0>)
  423f5a:	681a      	ldr	r2, [r3, #0]
  423f5c:	4b06      	ldr	r3, [pc, #24]	; (423f78 <Config_Indication_LED+0xd4>)
  423f5e:	601a      	str	r2, [r3, #0]
            config_LED_interval_g_u16 = 50000u;
  423f60:	f24c 3250 	movw	r2, #50000	; 0xc350
  423f64:	4b05      	ldr	r3, [pc, #20]	; (423f7c <Config_Indication_LED+0xd8>)
  423f66:	801a      	strh	r2, [r3, #0]
            config_LED_state_g_b = !config_LED_state_g_b;
  423f68:	4a06      	ldr	r2, [pc, #24]	; (423f84 <Config_Indication_LED+0xe0>)
  423f6a:	7813      	ldrb	r3, [r2, #0]
  423f6c:	f083 0301 	eor.w	r3, r3, #1
  423f70:	7013      	strb	r3, [r2, #0]
  423f72:	e7e0      	b.n	423f36 <Config_Indication_LED+0x92>
  423f74:	200012f8 	.word	0x200012f8
  423f78:	20001330 	.word	0x20001330
  423f7c:	200000a6 	.word	0x200000a6
  423f80:	2000132c 	.word	0x2000132c
  423f84:	20001334 	.word	0x20001334
  423f88:	400e0e00 	.word	0x400e0e00

00423f8c <_Trouble_LED>:
 * Return   : None
 */

void _Trouble_LED(uint8_t count)
{
    if(count == OFF)
  423f8c:	4603      	mov	r3, r0
  423f8e:	2800      	cmp	r0, #0
  423f90:	d029      	beq.n	423fe6 <_Trouble_LED+0x5a>
    {
        ioport_set_pin_level(Trouble_LED,OFF);  /* OFF LED*/
        trouble_LED_count_g_u8 = 0u;
        trouble_LED_interval_g_u16 = delay_250ms;
    }
    else if(count == ALWAYS_ON) /*if parameter is 100, Solid On the LED*/
  423f92:	2864      	cmp	r0, #100	; 0x64
  423f94:	d032      	beq.n	423ffc <_Trouble_LED+0x70>
        trouble_LED_count_g_u8 = 0u;
    }

    else
    {
        if(((count_1ms - trouble_LED_prevtick_g_u32) >= trouble_LED_interval_g_u16) && (trouble_LED_count_g_u8 < count)) //Compare Current time, previous time and LED Flash count, then proceed
  423f96:	4a35      	ldr	r2, [pc, #212]	; (42406c <_Trouble_LED+0xe0>)
  423f98:	6812      	ldr	r2, [r2, #0]
  423f9a:	4935      	ldr	r1, [pc, #212]	; (424070 <_Trouble_LED+0xe4>)
  423f9c:	6808      	ldr	r0, [r1, #0]
  423f9e:	4935      	ldr	r1, [pc, #212]	; (424074 <_Trouble_LED+0xe8>)
  423fa0:	8809      	ldrh	r1, [r1, #0]
  423fa2:	1a12      	subs	r2, r2, r0
  423fa4:	428a      	cmp	r2, r1
  423fa6:	d339      	bcc.n	42401c <_Trouble_LED+0x90>
  423fa8:	4a33      	ldr	r2, [pc, #204]	; (424078 <_Trouble_LED+0xec>)
  423faa:	7812      	ldrb	r2, [r2, #0]
  423fac:	4293      	cmp	r3, r2
  423fae:	d944      	bls.n	42403a <_Trouble_LED+0xae>
        {

          if(trouble_LED_state_g_b)
  423fb0:	4b32      	ldr	r3, [pc, #200]	; (42407c <_Trouble_LED+0xf0>)
  423fb2:	781b      	ldrb	r3, [r3, #0]
  423fb4:	2b00      	cmp	r3, #0
  423fb6:	d029      	beq.n	42400c <_Trouble_LED+0x80>
          {
              trouble_LED_interval_g_u16 = delay_250ms;  /*assign OFF delay time 250ms*/
  423fb8:	22fa      	movs	r2, #250	; 0xfa
  423fba:	4b2e      	ldr	r3, [pc, #184]	; (424074 <_Trouble_LED+0xe8>)
  423fbc:	801a      	strh	r2, [r3, #0]
          else
          {
              trouble_LED_interval_g_u16 = ON_delay_500ms; /*assign ON delay time 500ms*/
              trouble_LED_count_g_u8++;
          }
          trouble_LED_state_g_b = !trouble_LED_state_g_b;
  423fbe:	4a2f      	ldr	r2, [pc, #188]	; (42407c <_Trouble_LED+0xf0>)
  423fc0:	7813      	ldrb	r3, [r2, #0]
  423fc2:	f083 0301 	eor.w	r3, r3, #1
  423fc6:	7013      	strb	r3, [r2, #0]
          trouble_LED_prevtick_g_u32 = count_1ms; /*copy current time to previous counter value*/
  423fc8:	4b28      	ldr	r3, [pc, #160]	; (42406c <_Trouble_LED+0xe0>)
  423fca:	681a      	ldr	r2, [r3, #0]
  423fcc:	4b28      	ldr	r3, [pc, #160]	; (424070 <_Trouble_LED+0xe4>)
  423fce:	601a      	str	r2, [r3, #0]
		   Buzzer_bit = 0;
  423fd0:	2200      	movs	r2, #0
  423fd2:	4b2b      	ldr	r3, [pc, #172]	; (424080 <_Trouble_LED+0xf4>)
  423fd4:	601a      	str	r2, [r3, #0]
		

		
		

            ioport_set_pin_level(Trouble_LED,trouble_LED_state_g_b);  /* Toggle LED*/
  423fd6:	4b29      	ldr	r3, [pc, #164]	; (42407c <_Trouble_LED+0xf0>)
	if (level) {
  423fd8:	781b      	ldrb	r3, [r3, #0]
  423fda:	bb4b      	cbnz	r3, 424030 <_Trouble_LED+0xa4>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  423fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  423fe0:	4b28      	ldr	r3, [pc, #160]	; (424084 <_Trouble_LED+0xf8>)
  423fe2:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
  423fe4:	4770      	bx	lr
  423fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  423fea:	4b26      	ldr	r3, [pc, #152]	; (424084 <_Trouble_LED+0xf8>)
  423fec:	635a      	str	r2, [r3, #52]	; 0x34
        trouble_LED_count_g_u8 = 0u;
  423fee:	2200      	movs	r2, #0
  423ff0:	4b21      	ldr	r3, [pc, #132]	; (424078 <_Trouble_LED+0xec>)
  423ff2:	701a      	strb	r2, [r3, #0]
        trouble_LED_interval_g_u16 = delay_250ms;
  423ff4:	22fa      	movs	r2, #250	; 0xfa
  423ff6:	4b1f      	ldr	r3, [pc, #124]	; (424074 <_Trouble_LED+0xe8>)
  423ff8:	801a      	strh	r2, [r3, #0]
  423ffa:	4770      	bx	lr
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  423ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  424000:	4b20      	ldr	r3, [pc, #128]	; (424084 <_Trouble_LED+0xf8>)
  424002:	631a      	str	r2, [r3, #48]	; 0x30
        trouble_LED_count_g_u8 = 0u;
  424004:	2200      	movs	r2, #0
  424006:	4b1c      	ldr	r3, [pc, #112]	; (424078 <_Trouble_LED+0xec>)
  424008:	701a      	strb	r2, [r3, #0]
  42400a:	4770      	bx	lr
              trouble_LED_interval_g_u16 = ON_delay_500ms; /*assign ON delay time 500ms*/
  42400c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  424010:	4b18      	ldr	r3, [pc, #96]	; (424074 <_Trouble_LED+0xe8>)
  424012:	8019      	strh	r1, [r3, #0]
              trouble_LED_count_g_u8++;
  424014:	3201      	adds	r2, #1
  424016:	4b18      	ldr	r3, [pc, #96]	; (424078 <_Trouble_LED+0xec>)
  424018:	701a      	strb	r2, [r3, #0]
  42401a:	e7d0      	b.n	423fbe <_Trouble_LED+0x32>
        else if(((count_1ms - trouble_LED_prevtick_g_u32) >= trouble_LED_interval_g_u16) && (trouble_LED_count_g_u8 >= count)) //Compare Current time, previous time and LED Flash count, then proceed
  42401c:	4a13      	ldr	r2, [pc, #76]	; (42406c <_Trouble_LED+0xe0>)
  42401e:	6812      	ldr	r2, [r2, #0]
  424020:	1a10      	subs	r0, r2, r0
  424022:	4281      	cmp	r1, r0
  424024:	d8d7      	bhi.n	423fd6 <_Trouble_LED+0x4a>
  424026:	4a14      	ldr	r2, [pc, #80]	; (424078 <_Trouble_LED+0xec>)
  424028:	7812      	ldrb	r2, [r2, #0]
  42402a:	429a      	cmp	r2, r3
  42402c:	d3d3      	bcc.n	423fd6 <_Trouble_LED+0x4a>
  42402e:	e009      	b.n	424044 <_Trouble_LED+0xb8>
  424030:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  424034:	4b13      	ldr	r3, [pc, #76]	; (424084 <_Trouble_LED+0xf8>)
  424036:	631a      	str	r2, [r3, #48]	; 0x30
  424038:	4770      	bx	lr
  42403a:	4b0c      	ldr	r3, [pc, #48]	; (42406c <_Trouble_LED+0xe0>)
  42403c:	681b      	ldr	r3, [r3, #0]
  42403e:	1a18      	subs	r0, r3, r0
  424040:	4281      	cmp	r1, r0
  424042:	d8c8      	bhi.n	423fd6 <_Trouble_LED+0x4a>
            trouble_LED_count_g_u8 = 0; //if Flash count reaches the function parameter
  424044:	2200      	movs	r2, #0
  424046:	4b0c      	ldr	r3, [pc, #48]	; (424078 <_Trouble_LED+0xec>)
  424048:	701a      	strb	r2, [r3, #0]
            trouble_LED_interval_g_u16 =OFF_delay_10s; //; /*assign OFF delay time 10Sec*/
  42404a:	f242 7210 	movw	r2, #10000	; 0x2710
  42404e:	4b09      	ldr	r3, [pc, #36]	; (424074 <_Trouble_LED+0xe8>)
  424050:	801a      	strh	r2, [r3, #0]
            trouble_LED_state_g_b = !trouble_LED_state_g_b; //Toggle the Status variable
  424052:	4a0a      	ldr	r2, [pc, #40]	; (42407c <_Trouble_LED+0xf0>)
  424054:	7813      	ldrb	r3, [r2, #0]
  424056:	f083 0301 	eor.w	r3, r3, #1
  42405a:	7013      	strb	r3, [r2, #0]
            trouble_LED_prevtick_g_u32 = count_1ms; /*copy current time to previous counter value*/
  42405c:	4b03      	ldr	r3, [pc, #12]	; (42406c <_Trouble_LED+0xe0>)
  42405e:	681a      	ldr	r2, [r3, #0]
  424060:	4b03      	ldr	r3, [pc, #12]	; (424070 <_Trouble_LED+0xe4>)
  424062:	601a      	str	r2, [r3, #0]
			Buzzer_bit = 1;
  424064:	2201      	movs	r2, #1
  424066:	4b06      	ldr	r3, [pc, #24]	; (424080 <_Trouble_LED+0xf4>)
  424068:	601a      	str	r2, [r3, #0]
  42406a:	e7b4      	b.n	423fd6 <_Trouble_LED+0x4a>
  42406c:	200012f8 	.word	0x200012f8
  424070:	20001344 	.word	0x20001344
  424074:	200000ac 	.word	0x200000ac
  424078:	20001341 	.word	0x20001341
  42407c:	20001348 	.word	0x20001348
  424080:	20001328 	.word	0x20001328
  424084:	400e1000 	.word	0x400e1000

00424088 <Trouble_Ind>:
{
  424088:	b508      	push	{r3, lr}
 if(!any_of_trouble_g_b)
  42408a:	4b2d      	ldr	r3, [pc, #180]	; (424140 <Trouble_Ind+0xb8>)
  42408c:	781b      	ldrb	r3, [r3, #0]
  42408e:	b1fb      	cbz	r3, 4240d0 <Trouble_Ind+0x48>
    else if(hd1_trouble_g_u8)
  424090:	4b2c      	ldr	r3, [pc, #176]	; (424144 <Trouble_Ind+0xbc>)
  424092:	781b      	ldrb	r3, [r3, #0]
  424094:	2b00      	cmp	r3, #0
  424096:	d122      	bne.n	4240de <Trouble_Ind+0x56>
    else if(hd2_trouble_g_u8)
  424098:	4b2b      	ldr	r3, [pc, #172]	; (424148 <Trouble_Ind+0xc0>)
  42409a:	781b      	ldrb	r3, [r3, #0]
  42409c:	2b00      	cmp	r3, #0
  42409e:	d125      	bne.n	4240ec <Trouble_Ind+0x64>
    else if(manual_sw_trbl_g_b)
  4240a0:	4b2a      	ldr	r3, [pc, #168]	; (42414c <Trouble_Ind+0xc4>)
  4240a2:	781b      	ldrb	r3, [r3, #0]
  4240a4:	2b00      	cmp	r3, #0
  4240a6:	d128      	bne.n	4240fa <Trouble_Ind+0x72>
    else if(actuator_trbl_g_u8)
  4240a8:	4b29      	ldr	r3, [pc, #164]	; (424150 <Trouble_Ind+0xc8>)
  4240aa:	781b      	ldrb	r3, [r3, #0]
  4240ac:	2b00      	cmp	r3, #0
  4240ae:	d12b      	bne.n	424108 <Trouble_Ind+0x80>
    else if(pri_pwr_trouble_g_b)
  4240b0:	4b28      	ldr	r3, [pc, #160]	; (424154 <Trouble_Ind+0xcc>)
  4240b2:	781b      	ldrb	r3, [r3, #0]
  4240b4:	2b00      	cmp	r3, #0
  4240b6:	d12e      	bne.n	424116 <Trouble_Ind+0x8e>
    else if(sec_pwr_trouble_g_b)
  4240b8:	4b27      	ldr	r3, [pc, #156]	; (424158 <Trouble_Ind+0xd0>)
  4240ba:	781b      	ldrb	r3, [r3, #0]
  4240bc:	2b00      	cmp	r3, #0
  4240be:	d131      	bne.n	424124 <Trouble_Ind+0x9c>
    else if(pres_sw_trbl_g_b)
  4240c0:	4b26      	ldr	r3, [pc, #152]	; (42415c <Trouble_Ind+0xd4>)
  4240c2:	781b      	ldrb	r3, [r3, #0]
  4240c4:	2b00      	cmp	r3, #0
  4240c6:	d134      	bne.n	424132 <Trouble_Ind+0xaa>
        _Trouble_LED(OFF); /*if no trouble OFF the LED*/
  4240c8:	2000      	movs	r0, #0
  4240ca:	4b25      	ldr	r3, [pc, #148]	; (424160 <Trouble_Ind+0xd8>)
  4240cc:	4798      	blx	r3
  4240ce:	bd08      	pop	{r3, pc}
        _Trouble_LED(OFF);
  4240d0:	2000      	movs	r0, #0
  4240d2:	4b23      	ldr	r3, [pc, #140]	; (424160 <Trouble_Ind+0xd8>)
  4240d4:	4798      	blx	r3
		Trouble_status =0;
  4240d6:	2200      	movs	r2, #0
  4240d8:	4b22      	ldr	r3, [pc, #136]	; (424164 <Trouble_Ind+0xdc>)
  4240da:	701a      	strb	r2, [r3, #0]
  4240dc:	bd08      	pop	{r3, pc}
         _Trouble_LED(HD1_1_FLASH);
  4240de:	2001      	movs	r0, #1
  4240e0:	4b1f      	ldr	r3, [pc, #124]	; (424160 <Trouble_Ind+0xd8>)
  4240e2:	4798      	blx	r3
		Trouble_status = HD1_1_FLASH;
  4240e4:	2201      	movs	r2, #1
  4240e6:	4b1f      	ldr	r3, [pc, #124]	; (424164 <Trouble_Ind+0xdc>)
  4240e8:	701a      	strb	r2, [r3, #0]
  4240ea:	bd08      	pop	{r3, pc}
        _Trouble_LED(HD2_2_FLASH);
  4240ec:	2002      	movs	r0, #2
  4240ee:	4b1c      	ldr	r3, [pc, #112]	; (424160 <Trouble_Ind+0xd8>)
  4240f0:	4798      	blx	r3
		Trouble_status = HD2_2_FLASH;
  4240f2:	2202      	movs	r2, #2
  4240f4:	4b1b      	ldr	r3, [pc, #108]	; (424164 <Trouble_Ind+0xdc>)
  4240f6:	701a      	strb	r2, [r3, #0]
  4240f8:	bd08      	pop	{r3, pc}
        _Trouble_LED(MANUAL_SW_3_FLASH);
  4240fa:	2003      	movs	r0, #3
  4240fc:	4b18      	ldr	r3, [pc, #96]	; (424160 <Trouble_Ind+0xd8>)
  4240fe:	4798      	blx	r3
		Trouble_status = MANUAL_SW_3_FLASH;
  424100:	2203      	movs	r2, #3
  424102:	4b18      	ldr	r3, [pc, #96]	; (424164 <Trouble_Ind+0xdc>)
  424104:	701a      	strb	r2, [r3, #0]
  424106:	bd08      	pop	{r3, pc}
        _Trouble_LED(ACT_TRBL_4_FLASH);
  424108:	2004      	movs	r0, #4
  42410a:	4b15      	ldr	r3, [pc, #84]	; (424160 <Trouble_Ind+0xd8>)
  42410c:	4798      	blx	r3
		Trouble_status = ACT_TRBL_4_FLASH;
  42410e:	2204      	movs	r2, #4
  424110:	4b14      	ldr	r3, [pc, #80]	; (424164 <Trouble_Ind+0xdc>)
  424112:	701a      	strb	r2, [r3, #0]
  424114:	bd08      	pop	{r3, pc}
        _Trouble_LED(PRI_PWR_5_FLASH);
  424116:	2005      	movs	r0, #5
  424118:	4b11      	ldr	r3, [pc, #68]	; (424160 <Trouble_Ind+0xd8>)
  42411a:	4798      	blx	r3
		 Trouble_status = PRI_PWR_5_FLASH;
  42411c:	2205      	movs	r2, #5
  42411e:	4b11      	ldr	r3, [pc, #68]	; (424164 <Trouble_Ind+0xdc>)
  424120:	701a      	strb	r2, [r3, #0]
  424122:	bd08      	pop	{r3, pc}
        _Trouble_LED(SEC_PWR_6_FLASH);
  424124:	2006      	movs	r0, #6
  424126:	4b0e      	ldr	r3, [pc, #56]	; (424160 <Trouble_Ind+0xd8>)
  424128:	4798      	blx	r3
		 Trouble_status = SEC_PWR_6_FLASH;
  42412a:	2206      	movs	r2, #6
  42412c:	4b0d      	ldr	r3, [pc, #52]	; (424164 <Trouble_Ind+0xdc>)
  42412e:	701a      	strb	r2, [r3, #0]
  424130:	bd08      	pop	{r3, pc}
        _Trouble_LED(PRES_SW_TRBL_7_FLASH);
  424132:	2007      	movs	r0, #7
  424134:	4b0a      	ldr	r3, [pc, #40]	; (424160 <Trouble_Ind+0xd8>)
  424136:	4798      	blx	r3
		Trouble_status = PRES_SW_TRBL_7_FLASH;
  424138:	2207      	movs	r2, #7
  42413a:	4b0a      	ldr	r3, [pc, #40]	; (424164 <Trouble_Ind+0xdc>)
  42413c:	701a      	strb	r2, [r3, #0]
  42413e:	bd08      	pop	{r3, pc}
  424140:	2000138c 	.word	0x2000138c
  424144:	20000b0c 	.word	0x20000b0c
  424148:	20000b10 	.word	0x20000b10
  42414c:	20001371 	.word	0x20001371
  424150:	20000af1 	.word	0x20000af1
  424154:	20000b50 	.word	0x20000b50
  424158:	20001068 	.word	0x20001068
  42415c:	20001373 	.word	0x20001373
  424160:	00423f8d 	.word	0x00423f8d
  424164:	200016d4 	.word	0x200016d4

00424168 <System_Reset_Ind>:
 * Parameter: None
 * Return   : None
 */
void System_Reset_Ind(void)
{
    if(!fire_iso_out_g_b && !trbl_iso_out_g_b && !test_sw_pressed_g_b)
  424168:	4b09      	ldr	r3, [pc, #36]	; (424190 <System_Reset_Ind+0x28>)
  42416a:	781b      	ldrb	r3, [r3, #0]
  42416c:	b92b      	cbnz	r3, 42417a <System_Reset_Ind+0x12>
  42416e:	4b09      	ldr	r3, [pc, #36]	; (424194 <System_Reset_Ind+0x2c>)
  424170:	781b      	ldrb	r3, [r3, #0]
  424172:	b913      	cbnz	r3, 42417a <System_Reset_Ind+0x12>
  424174:	4b08      	ldr	r3, [pc, #32]	; (424198 <System_Reset_Ind+0x30>)
  424176:	781b      	ldrb	r3, [r3, #0]
  424178:	b123      	cbz	r3, 424184 <System_Reset_Ind+0x1c>
  42417a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  42417e:	4b07      	ldr	r3, [pc, #28]	; (42419c <System_Reset_Ind+0x34>)
  424180:	631a      	str	r2, [r3, #48]	; 0x30
  424182:	4770      	bx	lr
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  424184:	f44f 6200 	mov.w	r2, #2048	; 0x800
  424188:	4b04      	ldr	r3, [pc, #16]	; (42419c <System_Reset_Ind+0x34>)
  42418a:	635a      	str	r2, [r3, #52]	; 0x34
  42418c:	4770      	bx	lr
  42418e:	bf00      	nop
  424190:	2000138d 	.word	0x2000138d
  424194:	20001394 	.word	0x20001394
  424198:	20001384 	.word	0x20001384
  42419c:	400e1000 	.word	0x400e1000

004241a0 <Fire_LED>:
 * Parameter:  @parm1 - 0 - OFF, not equal to 0 - LED fading
 * Return   : None
 */

void Fire_LED(uint8_t _value)
{
  4241a0:	b508      	push	{r3, lr}
    static uint8_t fire_LED_intensity_sl_u8 = 0u;           /*For LED fading */

    static uint8_t fire_LED_count_sl_u8 = 0u;               /*For count and LED fading */
     if(_value == OFF)
  4241a2:	b320      	cbz	r0, 4241ee <Fire_LED+0x4e>
     }
    else
    {
      //  ROM_PWMOutputState(PWM1_BASE, FIRE_LED_RED, PWM_ENABLE);  /*Enable PWM*/

        if((count_1ms - fire_LED_prevtick_g_u32) >= fire_LED_fading_count_g_u8)
  4241a4:	4b1f      	ldr	r3, [pc, #124]	; (424224 <Fire_LED+0x84>)
  4241a6:	681b      	ldr	r3, [r3, #0]
  4241a8:	4a1f      	ldr	r2, [pc, #124]	; (424228 <Fire_LED+0x88>)
  4241aa:	6812      	ldr	r2, [r2, #0]
  4241ac:	1a9b      	subs	r3, r3, r2
  4241ae:	4a1f      	ldr	r2, [pc, #124]	; (42422c <Fire_LED+0x8c>)
  4241b0:	7812      	ldrb	r2, [r2, #0]
  4241b2:	4293      	cmp	r3, r2
  4241b4:	d31a      	bcc.n	4241ec <Fire_LED+0x4c>
        {
            fire_LED_count_sl_u8++;
  4241b6:	4a1e      	ldr	r2, [pc, #120]	; (424230 <Fire_LED+0x90>)
  4241b8:	7813      	ldrb	r3, [r2, #0]
  4241ba:	3301      	adds	r3, #1
  4241bc:	b2db      	uxtb	r3, r3
  4241be:	7013      	strb	r3, [r2, #0]

            if(fire_LED_count_sl_u8 < amerex_config_data.fire_LED_duty)
  4241c0:	4a1c      	ldr	r2, [pc, #112]	; (424234 <Fire_LED+0x94>)
  4241c2:	8852      	ldrh	r2, [r2, #2]
  4241c4:	429a      	cmp	r2, r3
  4241c6:	d91d      	bls.n	424204 <Fire_LED+0x64>
            {
                fire_LED_intensity_sl_u8++;
  4241c8:	4a1b      	ldr	r2, [pc, #108]	; (424238 <Fire_LED+0x98>)
  4241ca:	7813      	ldrb	r3, [r2, #0]
  4241cc:	3301      	adds	r3, #1
  4241ce:	7013      	strb	r3, [r2, #0]

                fire_LED_intensity_sl_u8 = 1u;
                fire_LED_count_sl_u8 = 0u;
            }

            fire_LED_prevtick_g_u32 = count_1ms;
  4241d0:	4b14      	ldr	r3, [pc, #80]	; (424224 <Fire_LED+0x84>)
  4241d2:	681a      	ldr	r2, [r3, #0]
  4241d4:	4b14      	ldr	r3, [pc, #80]	; (424228 <Fire_LED+0x88>)
  4241d6:	601a      	str	r2, [r3, #0]
            if(!fire_LED_intensity_sl_u8)
  4241d8:	4b17      	ldr	r3, [pc, #92]	; (424238 <Fire_LED+0x98>)
  4241da:	781b      	ldrb	r3, [r3, #0]
  4241dc:	b913      	cbnz	r3, 4241e4 <Fire_LED+0x44>
            {
                fire_LED_intensity_sl_u8 = 1u;
  4241de:	2201      	movs	r2, #1
  4241e0:	4b15      	ldr	r3, [pc, #84]	; (424238 <Fire_LED+0x98>)
  4241e2:	701a      	strb	r2, [r3, #0]
            }
            //ROM_PWMPulseWidthSet(PWM1_BASE,FIRE_LED_RED_WIDTH,PWM_duty_value(fire_LED_intensity_sl_u8));
			FIRE_LED_PWM_EN(fire_LED_intensity_sl_u8);
  4241e4:	4b14      	ldr	r3, [pc, #80]	; (424238 <Fire_LED+0x98>)
  4241e6:	7818      	ldrb	r0, [r3, #0]
  4241e8:	4b14      	ldr	r3, [pc, #80]	; (42423c <Fire_LED+0x9c>)
  4241ea:	4798      	blx	r3
  4241ec:	bd08      	pop	{r3, pc}
         FIRE_LED_PWM_EN(OFF);/* OFF LED*/
  4241ee:	4b13      	ldr	r3, [pc, #76]	; (42423c <Fire_LED+0x9c>)
  4241f0:	4798      	blx	r3
         fire_LED_count_sl_u8 = 0u;
  4241f2:	2300      	movs	r3, #0
  4241f4:	4a0e      	ldr	r2, [pc, #56]	; (424230 <Fire_LED+0x90>)
  4241f6:	7013      	strb	r3, [r2, #0]
         fire_LED_intensity_sl_u8 = 1u;
  4241f8:	2101      	movs	r1, #1
  4241fa:	4a0f      	ldr	r2, [pc, #60]	; (424238 <Fire_LED+0x98>)
  4241fc:	7011      	strb	r1, [r2, #0]
         fire_LED_prevtick_g_u32 = 0u;
  4241fe:	4a0a      	ldr	r2, [pc, #40]	; (424228 <Fire_LED+0x88>)
  424200:	6013      	str	r3, [r2, #0]
  424202:	bd08      	pop	{r3, pc}
            else if(fire_LED_count_sl_u8 >= amerex_config_data.fire_LED_duty && fire_LED_count_sl_u8 < fire_LED_duty_max_g_u8)
  424204:	4a0e      	ldr	r2, [pc, #56]	; (424240 <Fire_LED+0xa0>)
  424206:	7812      	ldrb	r2, [r2, #0]
  424208:	429a      	cmp	r2, r3
  42420a:	d904      	bls.n	424216 <Fire_LED+0x76>
                fire_LED_intensity_sl_u8--;
  42420c:	4a0a      	ldr	r2, [pc, #40]	; (424238 <Fire_LED+0x98>)
  42420e:	7813      	ldrb	r3, [r2, #0]
  424210:	3b01      	subs	r3, #1
  424212:	7013      	strb	r3, [r2, #0]
  424214:	e7dc      	b.n	4241d0 <Fire_LED+0x30>
                fire_LED_intensity_sl_u8 = 1u;
  424216:	2201      	movs	r2, #1
  424218:	4b07      	ldr	r3, [pc, #28]	; (424238 <Fire_LED+0x98>)
  42421a:	701a      	strb	r2, [r3, #0]
                fire_LED_count_sl_u8 = 0u;
  42421c:	2200      	movs	r2, #0
  42421e:	4b04      	ldr	r3, [pc, #16]	; (424230 <Fire_LED+0x90>)
  424220:	701a      	strb	r2, [r3, #0]
  424222:	e7d5      	b.n	4241d0 <Fire_LED+0x30>
  424224:	200012f8 	.word	0x200012f8
  424228:	20001338 	.word	0x20001338
  42422c:	200000a9 	.word	0x200000a9
  424230:	20001335 	.word	0x20001335
  424234:	20001588 	.word	0x20001588
  424238:	20001336 	.word	0x20001336
  42423c:	00424491 	.word	0x00424491
  424240:	200000a8 	.word	0x200000a8

00424244 <Fire_Ind>:
/* Function : Fire indication
 * Parameter: None
 * Return   : None
 */
void Fire_Ind(void)
{
  424244:	b508      	push	{r3, lr}
  if( (Fire_Rst_vehicle_start_bit!=2u && fire_happen_g_b))
  424246:	4b09      	ldr	r3, [pc, #36]	; (42426c <Fire_Ind+0x28>)
  424248:	781b      	ldrb	r3, [r3, #0]
  42424a:	b2db      	uxtb	r3, r3
  42424c:	2b02      	cmp	r3, #2
  42424e:	d002      	beq.n	424256 <Fire_Ind+0x12>
  424250:	4b07      	ldr	r3, [pc, #28]	; (424270 <Fire_Ind+0x2c>)
  424252:	781b      	ldrb	r3, [r3, #0]
  424254:	b91b      	cbnz	r3, 42425e <Fire_Ind+0x1a>
	  	Trouble_status = 8u;

  }
  else
  {
       Fire_LED(OFF);
  424256:	2000      	movs	r0, #0
  424258:	4b06      	ldr	r3, [pc, #24]	; (424274 <Fire_Ind+0x30>)
  42425a:	4798      	blx	r3
  42425c:	bd08      	pop	{r3, pc}
      Fire_LED(LED_FADING);
  42425e:	2001      	movs	r0, #1
  424260:	4b04      	ldr	r3, [pc, #16]	; (424274 <Fire_Ind+0x30>)
  424262:	4798      	blx	r3
	  	Trouble_status = 8u;
  424264:	2208      	movs	r2, #8
  424266:	4b04      	ldr	r3, [pc, #16]	; (424278 <Fire_Ind+0x34>)
  424268:	701a      	strb	r2, [r3, #0]
  42426a:	bd08      	pop	{r3, pc}
  42426c:	20001358 	.word	0x20001358
  424270:	20000b08 	.word	0x20000b08
  424274:	004241a1 	.word	0x004241a1
  424278:	200016d4 	.word	0x200016d4

0042427c <ALL_LED_BLINK>:
	if (level) {
  42427c:	b198      	cbz	r0, 4242a6 <ALL_LED_BLINK+0x2a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  42427e:	4b14      	ldr	r3, [pc, #80]	; (4242d0 <ALL_LED_BLINK+0x54>)
  424280:	f44f 6200 	mov.w	r2, #2048	; 0x800
  424284:	631a      	str	r2, [r3, #48]	; 0x30
  424286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  42428a:	631a      	str	r2, [r3, #48]	; 0x30
  42428c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  424290:	631a      	str	r2, [r3, #48]	; 0x30
  424292:	2110      	movs	r1, #16
  424294:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  424298:	f502 2261 	add.w	r2, r2, #921600	; 0xe1000
  42429c:	6311      	str	r1, [r2, #48]	; 0x30
  42429e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4242a2:	631a      	str	r2, [r3, #48]	; 0x30
  4242a4:	4770      	bx	lr
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4242a6:	4b0a      	ldr	r3, [pc, #40]	; (4242d0 <ALL_LED_BLINK+0x54>)
  4242a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4242ac:	635a      	str	r2, [r3, #52]	; 0x34
  4242ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4242b2:	635a      	str	r2, [r3, #52]	; 0x34
  4242b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4242b8:	635a      	str	r2, [r3, #52]	; 0x34
  4242ba:	2110      	movs	r1, #16
  4242bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  4242c0:	f502 2261 	add.w	r2, r2, #921600	; 0xe1000
  4242c4:	6351      	str	r1, [r2, #52]	; 0x34
  4242c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4242ca:	635a      	str	r2, [r3, #52]	; 0x34
  4242cc:	4770      	bx	lr
  4242ce:	bf00      	nop
  4242d0:	400e1000 	.word	0x400e1000

004242d4 <mem_flash_init>:

/**
 * Initialize the flash
 */
void mem_flash_init(void)
{
  4242d4:	b508      	push	{r3, lr}
	flash_init(FLASH_ACCESS_MODE_128, 6);
  4242d6:	2106      	movs	r1, #6
  4242d8:	2000      	movs	r0, #0
  4242da:	4b01      	ldr	r3, [pc, #4]	; (4242e0 <mem_flash_init+0xc>)
  4242dc:	4798      	blx	r3
  4242de:	bd08      	pop	{r3, pc}
  4242e0:	00423371 	.word	0x00423371

004242e4 <mem_flash_erase>:
 * \param size number of bytes to erase
 *
 * \return erased bytes (could be larger than size)
 */
uint32_t mem_flash_erase(void *addr, uint32_t size)
{
  4242e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4242e8:	460e      	mov	r6, r1
#if SAM4S || SAM4E || SAM4N
	uint32_t page_addr = (uint32_t)addr;
  4242ea:	4604      	mov	r4, r0
	uint32_t page_off  = page_addr % (IFLASH_PAGE_SIZE*8);
  4242ec:	f3c0 070b 	ubfx	r7, r0, #0, #12
	uint32_t rc, erased = 0;
	if (page_off) {
  4242f0:	b987      	cbnz	r7, 424314 <mem_flash_erase+0x30>
		printf("flash: erase address must be 8 page aligned\r\n");
		page_addr = page_addr - page_off;
		printf("flash: erase from %x\r\n", (unsigned)page_addr);
	}
	for (erased = 0; erased < size;) {
  4242f2:	4635      	mov	r5, r6
  4242f4:	b1de      	cbz	r6, 42432e <mem_flash_erase+0x4a>
  4242f6:	2500      	movs	r5, #0
		rc = flash_erase_page((uint32_t)page_addr, IFLASH_ERASE_PAGES_8);
  4242f8:	f04f 0801 	mov.w	r8, #1
  4242fc:	4f0d      	ldr	r7, [pc, #52]	; (424334 <mem_flash_erase+0x50>)
  4242fe:	4641      	mov	r1, r8
  424300:	4620      	mov	r0, r4
  424302:	47b8      	blx	r7
		erased    += IFLASH_PAGE_SIZE*8;
  424304:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
		page_addr += IFLASH_PAGE_SIZE*8;
  424308:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
		if (rc != FLASH_RC_OK) {
  42430c:	b958      	cbnz	r0, 424326 <mem_flash_erase+0x42>
	for (erased = 0; erased < size;) {
  42430e:	42ae      	cmp	r6, r5
  424310:	d8f5      	bhi.n	4242fe <mem_flash_erase+0x1a>
  424312:	e00c      	b.n	42432e <mem_flash_erase+0x4a>
		printf("flash: erase address must be 8 page aligned\r\n");
  424314:	4808      	ldr	r0, [pc, #32]	; (424338 <mem_flash_erase+0x54>)
  424316:	f8df 802c 	ldr.w	r8, [pc, #44]	; 424344 <mem_flash_erase+0x60>
  42431a:	47c0      	blx	r8
		page_addr = page_addr - page_off;
  42431c:	1be4      	subs	r4, r4, r7
		printf("flash: erase from %x\r\n", (unsigned)page_addr);
  42431e:	4621      	mov	r1, r4
  424320:	4806      	ldr	r0, [pc, #24]	; (42433c <mem_flash_erase+0x58>)
  424322:	47c0      	blx	r8
  424324:	e7e5      	b.n	4242f2 <mem_flash_erase+0xe>
			printf("flash: %x erase error\r\n", (unsigned)page_addr);
  424326:	4621      	mov	r1, r4
  424328:	4805      	ldr	r0, [pc, #20]	; (424340 <mem_flash_erase+0x5c>)
  42432a:	4b06      	ldr	r3, [pc, #24]	; (424344 <mem_flash_erase+0x60>)
  42432c:	4798      	blx	r3
#else
	/* Everything assume to be erased since we use erase and write command */
	UNUSED(addr);
	return size;
#endif
}
  42432e:	4628      	mov	r0, r5
  424330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424334:	00423389 	.word	0x00423389
  424338:	0042f4cc 	.word	0x0042f4cc
  42433c:	0042f4fc 	.word	0x0042f4fc
  424340:	0042f514 	.word	0x0042f514
  424344:	00426851 	.word	0x00426851

00424348 <mem_flash_page_write>:
 * \param data Source data buffer
 *
 * \return true if success.
 */
bool mem_flash_page_write(void *addr, void *data)
{
  424348:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("dsb 0xF":::"memory");
  42434a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  42434e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
  424352:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  424354:	f3bf 8f5f 	dmb	sy
	uint32_t rc = FLASH_RC_OK;
	mem_flash_op_enter();
  424358:	4c0b      	ldr	r4, [pc, #44]	; (424388 <mem_flash_page_write+0x40>)
  42435a:	2300      	movs	r3, #0
  42435c:	7023      	strb	r3, [r4, #0]
  42435e:	f3bf 8f5f 	dmb	sy
#if SAM4S || SAM4E || SAM4N || SAMG55
	/* The EWP command can only be used in 8 KBytes sector for SAM4S, SAM4E
	 * and SAM4N, so an erase command is requried before write operation.
	 */
	rc = flash_write((uint32_t)addr, data, IFLASH_PAGE_SIZE, false);
  424362:	f44f 7200 	mov.w	r2, #512	; 0x200
  424366:	4d09      	ldr	r5, [pc, #36]	; (42438c <mem_flash_page_write+0x44>)
  424368:	47a8      	blx	r5
  42436a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("dsb 0xF":::"memory");
  42436e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  424372:	f3bf 8f6f 	isb	sy
#else
	rc = flash_write((uint32_t)addr, data, IFLASH_PAGE_SIZE, true);
#endif
	mem_flash_op_exit();
  424376:	2301      	movs	r3, #1
  424378:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  42437a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  42437e:	b662      	cpsie	i
	if (FLASH_RC_OK != rc) {
		return false;
	}
	return true;
}
  424380:	fab0 f080 	clz	r0, r0
  424384:	0940      	lsrs	r0, r0, #5
  424386:	bd38      	pop	{r3, r4, r5, pc}
  424388:	200000c1 	.word	0x200000c1
  42438c:	004233c1 	.word	0x004233c1

00424390 <Amerex_LOGO_PWM_EN>:


 }

void Amerex_LOGO_PWM_EN(uint8_t ul_mask)
{
  424390:	b508      	push	{r3, lr}
  	 g_pwm_channel_led.channel = PWMH0_Amerex_LOGO;
  424392:	4904      	ldr	r1, [pc, #16]	; (4243a4 <Amerex_LOGO_PWM_EN+0x14>)
  424394:	2300      	movs	r3, #0
  424396:	600b      	str	r3, [r1, #0]
 	 pwm_channel_update_duty(PWM, &g_pwm_channel_led, ul_mask); /*g_pwm_channel_led.ul_duty;*/
  424398:	4602      	mov	r2, r0
  42439a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  42439e:	4b02      	ldr	r3, [pc, #8]	; (4243a8 <Amerex_LOGO_PWM_EN+0x18>)
  4243a0:	4798      	blx	r3
  4243a2:	bd08      	pop	{r3, pc}
  4243a4:	20001498 	.word	0x20001498
  4243a8:	00425bb3 	.word	0x00425bb3

004243ac <LEDS_PWM_EN>:
 }

void LEDS_PWM_EN(uint8_t ul_mask)
{
  4243ac:	b508      	push	{r3, lr}
 	g_pwm_channel_led.channel = PWMH1_LEDS;
  4243ae:	4904      	ldr	r1, [pc, #16]	; (4243c0 <LEDS_PWM_EN+0x14>)
  4243b0:	2301      	movs	r3, #1
  4243b2:	600b      	str	r3, [r1, #0]
 	pwm_channel_update_duty(PWM, &g_pwm_channel_led, ul_mask); /*g_pwm_channel_led.ul_duty;*/
  4243b4:	4602      	mov	r2, r0
  4243b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4243ba:	4b02      	ldr	r3, [pc, #8]	; (4243c4 <LEDS_PWM_EN+0x18>)
  4243bc:	4798      	blx	r3
  4243be:	bd08      	pop	{r3, pc}
  4243c0:	20001498 	.word	0x20001498
  4243c4:	00425bb3 	.word	0x00425bb3

004243c8 <PWM_Init>:
 {
  4243c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  	pmc_enable_periph_clk(ID_PWM);
  4243cc:	2024      	movs	r0, #36	; 0x24
  4243ce:	4b23      	ldr	r3, [pc, #140]	; (42445c <PWM_Init+0x94>)
  4243d0:	4798      	blx	r3
  	(Freq_selec_bit == 0) ? (clock_setting.ul_mck =  sysclk_get_cpu_hz()) : (clock_setting.ul_mck =  4000000UL);
  4243d2:	4b23      	ldr	r3, [pc, #140]	; (424460 <PWM_Init+0x98>)
  4243d4:	781b      	ldrb	r3, [r3, #0]
  4243d6:	2b00      	cmp	r3, #0
  4243d8:	d03c      	beq.n	424454 <PWM_Init+0x8c>
  4243da:	4a22      	ldr	r2, [pc, #136]	; (424464 <PWM_Init+0x9c>)
  4243dc:	4b22      	ldr	r3, [pc, #136]	; (424468 <PWM_Init+0xa0>)
  4243de:	609a      	str	r2, [r3, #8]
	clock_setting.ul_clkb =  PWM_VALUE_25_KHZ* PERIOD_VALUE;
  4243e0:	4921      	ldr	r1, [pc, #132]	; (424468 <PWM_Init+0xa0>)
  4243e2:	4b22      	ldr	r3, [pc, #136]	; (42446c <PWM_Init+0xa4>)
  4243e4:	604b      	str	r3, [r1, #4]
	pwm_init(PWM, &clock_setting);
  4243e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4243ea:	4b21      	ldr	r3, [pc, #132]	; (424470 <PWM_Init+0xa8>)
  4243ec:	4798      	blx	r3
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  4243ee:	4c21      	ldr	r4, [pc, #132]	; (424474 <PWM_Init+0xac>)
  4243f0:	2600      	movs	r6, #0
  4243f2:	8126      	strh	r6, [r4, #8]
	g_pwm_channel_led.polarity = PWM_HIGH;
  4243f4:	f04f 0801 	mov.w	r8, #1
  4243f8:	f884 800a 	strb.w	r8, [r4, #10]
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKB;
  4243fc:	230c      	movs	r3, #12
  4243fe:	6063      	str	r3, [r4, #4]
	g_pwm_channel_led.ul_period =PERIOD_VALUE;
  424400:	2364      	movs	r3, #100	; 0x64
  424402:	6123      	str	r3, [r4, #16]
	g_pwm_channel_led.channel = PWMH2_Fire_LED;
  424404:	2502      	movs	r5, #2
  424406:	6025      	str	r5, [r4, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led);
  424408:	4621      	mov	r1, r4
  42440a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  42440e:	4f1a      	ldr	r7, [pc, #104]	; (424478 <PWM_Init+0xb0>)
  424410:	47b8      	blx	r7
	pwm_channel_enable(PWM, PWMH2_Fire_LED);
  424412:	4629      	mov	r1, r5
  424414:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  424418:	4d18      	ldr	r5, [pc, #96]	; (42447c <PWM_Init+0xb4>)
  42441a:	47a8      	blx	r5
    g_pwm_channel_led.channel = PWMH1_LEDS;
  42441c:	f8c4 8000 	str.w	r8, [r4]
	pwm_channel_init(PWM, &g_pwm_channel_led);
  424420:	4621      	mov	r1, r4
  424422:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  424426:	47b8      	blx	r7
	pwm_channel_enable(PWM, PWMH1_LEDS);
  424428:	4641      	mov	r1, r8
  42442a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  42442e:	47a8      	blx	r5
	g_pwm_channel_led.channel = PWMH0_Amerex_LOGO;
  424430:	6026      	str	r6, [r4, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led);
  424432:	4621      	mov	r1, r4
  424434:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  424438:	47b8      	blx	r7
	pwm_channel_enable(PWM, PWMH0_Amerex_LOGO);
  42443a:	4631      	mov	r1, r6
  42443c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  424440:	47a8      	blx	r5
		Amerex_LOGO_PWM_EN(amerex_config_data.all_LED_duty);
  424442:	4c0f      	ldr	r4, [pc, #60]	; (424480 <PWM_Init+0xb8>)
  424444:	7820      	ldrb	r0, [r4, #0]
  424446:	4b0f      	ldr	r3, [pc, #60]	; (424484 <PWM_Init+0xbc>)
  424448:	4798      	blx	r3
		LEDS_PWM_EN(amerex_config_data.all_LED_duty);
  42444a:	7820      	ldrb	r0, [r4, #0]
  42444c:	4b0e      	ldr	r3, [pc, #56]	; (424488 <PWM_Init+0xc0>)
  42444e:	4798      	blx	r3
  424450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  	(Freq_selec_bit == 0) ? (clock_setting.ul_mck =  sysclk_get_cpu_hz()) : (clock_setting.ul_mck =  4000000UL);
  424454:	4a0d      	ldr	r2, [pc, #52]	; (42448c <PWM_Init+0xc4>)
  424456:	4b04      	ldr	r3, [pc, #16]	; (424468 <PWM_Init+0xa0>)
  424458:	609a      	str	r2, [r3, #8]
  42445a:	e7c1      	b.n	4243e0 <PWM_Init+0x18>
  42445c:	00425941 	.word	0x00425941
  424460:	20001359 	.word	0x20001359
  424464:	003d0900 	.word	0x003d0900
  424468:	2000148c 	.word	0x2000148c
  42446c:	002625a0 	.word	0x002625a0
  424470:	00425a25 	.word	0x00425a25
  424474:	20001498 	.word	0x20001498
  424478:	00425a69 	.word	0x00425a69
  42447c:	00425bcf 	.word	0x00425bcf
  424480:	20001588 	.word	0x20001588
  424484:	00424391 	.word	0x00424391
  424488:	004243ad 	.word	0x004243ad
  42448c:	03938700 	.word	0x03938700

00424490 <FIRE_LED_PWM_EN>:
 }

 void FIRE_LED_PWM_EN(uint8_t ul_mask)
 {
  424490:	b508      	push	{r3, lr}
	 static uint8_t _mask_bit=0;
	if(_mask_bit != ul_mask)
  424492:	4b07      	ldr	r3, [pc, #28]	; (4244b0 <FIRE_LED_PWM_EN+0x20>)
  424494:	781b      	ldrb	r3, [r3, #0]
  424496:	4283      	cmp	r3, r0
  424498:	d009      	beq.n	4244ae <FIRE_LED_PWM_EN+0x1e>
  42449a:	4602      	mov	r2, r0
	{
	  _mask_bit = ul_mask;
  42449c:	4b04      	ldr	r3, [pc, #16]	; (4244b0 <FIRE_LED_PWM_EN+0x20>)
  42449e:	7018      	strb	r0, [r3, #0]
	   g_pwm_channel_led.channel = PWMH2_Fire_LED;
  4244a0:	4904      	ldr	r1, [pc, #16]	; (4244b4 <FIRE_LED_PWM_EN+0x24>)
  4244a2:	2302      	movs	r3, #2
  4244a4:	600b      	str	r3, [r1, #0]
	   pwm_channel_update_duty(PWM, &g_pwm_channel_led, ul_mask); /*g_pwm_channel_led.ul_duty;*/
  4244a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4244aa:	4b03      	ldr	r3, [pc, #12]	; (4244b8 <FIRE_LED_PWM_EN+0x28>)
  4244ac:	4798      	blx	r3
  4244ae:	bd08      	pop	{r3, pc}
  4244b0:	20001349 	.word	0x20001349
  4244b4:	20001498 	.word	0x20001498
  4244b8:	00425bb3 	.word	0x00425bb3

004244bc <RV3028_SetTime>:
	
	return RV3028_NO_ERROR;
}

rv3028_error_t RV3028_SetTime(rv3028_t* p_Device, RV3032_TimeDate *TimeDate)
{
  4244bc:	b530      	push	{r4, r5, lr}
  4244be:	b083      	sub	sp, #12
    uint8_t tmp[7];
   
    /* Convert time values to BCD format used by the RTC */
    tmp[0] = DecimalToBCD(TimeDate->Second);
  4244c0:	780a      	ldrb	r2, [r1, #0]
   return ((Decimal / 0x0A) << 0x04) | (Decimal % 0x0A);
  4244c2:	4b29      	ldr	r3, [pc, #164]	; (424568 <RV3028_SetTime+0xac>)
  4244c4:	fba3 5402 	umull	r5, r4, r3, r2
  4244c8:	08e4      	lsrs	r4, r4, #3
  4244ca:	eb04 0584 	add.w	r5, r4, r4, lsl #2
  4244ce:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
  4244d2:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    tmp[0] = DecimalToBCD(TimeDate->Second);
  4244d6:	f88d 2000 	strb.w	r2, [sp]
    tmp[1] = DecimalToBCD(TimeDate->Minute);
  4244da:	784a      	ldrb	r2, [r1, #1]
   return ((Decimal / 0x0A) << 0x04) | (Decimal % 0x0A);
  4244dc:	fba3 5402 	umull	r5, r4, r3, r2
  4244e0:	08e4      	lsrs	r4, r4, #3
  4244e2:	eb04 0584 	add.w	r5, r4, r4, lsl #2
  4244e6:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
  4244ea:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    tmp[1] = DecimalToBCD(TimeDate->Minute);
  4244ee:	f88d 2001 	strb.w	r2, [sp, #1]
    tmp[2] = DecimalToBCD(TimeDate->Hour);
  4244f2:	788a      	ldrb	r2, [r1, #2]
   return ((Decimal / 0x0A) << 0x04) | (Decimal % 0x0A);
  4244f4:	fba3 5402 	umull	r5, r4, r3, r2
  4244f8:	08e4      	lsrs	r4, r4, #3
  4244fa:	eb04 0584 	add.w	r5, r4, r4, lsl #2
  4244fe:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
  424502:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    tmp[2] = DecimalToBCD(TimeDate->Hour);
  424506:	f88d 2002 	strb.w	r2, [sp, #2]
    tmp[3] = TimeDate->DayWeek;
  42450a:	78ca      	ldrb	r2, [r1, #3]
  42450c:	f88d 2003 	strb.w	r2, [sp, #3]
    tmp[4] =  DecimalToBCD(TimeDate->Day);
  424510:	790a      	ldrb	r2, [r1, #4]
   return ((Decimal / 0x0A) << 0x04) | (Decimal % 0x0A);
  424512:	fba3 5402 	umull	r5, r4, r3, r2
  424516:	08e4      	lsrs	r4, r4, #3
  424518:	eb04 0584 	add.w	r5, r4, r4, lsl #2
  42451c:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
  424520:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    tmp[4] =  DecimalToBCD(TimeDate->Day);
  424524:	f88d 2004 	strb.w	r2, [sp, #4]
    tmp[5] = DecimalToBCD(TimeDate->Month);
  424528:	794a      	ldrb	r2, [r1, #5]
   return ((Decimal / 0x0A) << 0x04) | (Decimal % 0x0A);
  42452a:	fba3 5402 	umull	r5, r4, r3, r2
  42452e:	08e4      	lsrs	r4, r4, #3
  424530:	eb04 0584 	add.w	r5, r4, r4, lsl #2
  424534:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
  424538:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    tmp[5] = DecimalToBCD(TimeDate->Month);
  42453c:	f88d 2005 	strb.w	r2, [sp, #5]
    tmp[6] = DecimalToBCD(TimeDate->Year);
  424540:	798a      	ldrb	r2, [r1, #6]
   return ((Decimal / 0x0A) << 0x04) | (Decimal % 0x0A);
  424542:	fba3 1302 	umull	r1, r3, r3, r2
  424546:	08db      	lsrs	r3, r3, #3
  424548:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42454c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  424550:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
    tmp[6] = DecimalToBCD(TimeDate->Year);
  424554:	f88d 3006 	strb.w	r3, [sp, #6]
    return p_Device->p_Write(p_Device->DeviceAddr, Reg_Addr, p_Reg_Data, Length);
  424558:	6884      	ldr	r4, [r0, #8]
  42455a:	2307      	movs	r3, #7
  42455c:	466a      	mov	r2, sp
  42455e:	2101      	movs	r1, #1
  424560:	7800      	ldrb	r0, [r0, #0]
  424562:	47a0      	blx	r4

    return RV3028_WriteRegister(RV3028_REG_SECONDS, tmp, sizeof(tmp), p_Device);
}
  424564:	b003      	add	sp, #12
  424566:	bd30      	pop	{r4, r5, pc}
  424568:	cccccccd 	.word	0xcccccccd

0042456c <RV3028_GetTime>:

__int32_t RV3028_GetTime(rv3028_t* p_Device)
{
  42456c:	b570      	push	{r4, r5, r6, lr}
  42456e:	b08c      	sub	sp, #48	; 0x30
    return p_Device->p_Read(p_Device->DeviceAddr, Reg_Addr, p_Reg_Data, Length);
  424570:	6844      	ldr	r4, [r0, #4]
  424572:	2307      	movs	r3, #7
  424574:	aa0a      	add	r2, sp, #40	; 0x28
  424576:	2101      	movs	r1, #1
  424578:	7800      	ldrb	r0, [r0, #0]
  42457a:	47a0      	blx	r4
    uint8_t Temp[7];
	RV3032_TimeDate TimeDate;
	  struct tm t;


    ErrorCode = RV3028_ReadRegister(RV3028_REG_SECONDS, Temp, sizeof(Temp), p_Device);
  42457c:	4b2b      	ldr	r3, [pc, #172]	; (42462c <RV3028_GetTime+0xc0>)
  42457e:	7018      	strb	r0, [r3, #0]
    if(ErrorCode != RV3028_NO_ERROR)
  424580:	b108      	cbz	r0, 424586 <RV3028_GetTime+0x1a>
    t.tm_sec = TimeDate.Second;
    t.tm_isdst = -1;
	
	return ((__int32_t)mktime(&t)<1695887402)?0:(__int32_t)mktime(&t); //Time invalid - If less than Tuesday, December 31,
 
}
  424582:	b00c      	add	sp, #48	; 0x30
  424584:	bd70      	pop	{r4, r5, r6, pc}
    TimeDate.Second = BCDToDecimal(Temp[0]);
  424586:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    TimeDate.Minute = BCDToDecimal(Temp[1]);
  42458a:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
    TimeDate.Hour = BCDToDecimal(Temp[2]);
  42458e:	f89d 402a 	ldrb.w	r4, [sp, #42]	; 0x2a
    TimeDate.Day = BCDToDecimal(Temp[4]);
  424592:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
    TimeDate.Month = BCDToDecimal(Temp[5]);
  424596:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    TimeDate.Year = BCDToDecimal(Temp[6]);
  42459a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
   return ((BCD >> 0x04) * 0x0A) + (BCD & 0xF);
  42459e:	0916      	lsrs	r6, r2, #4
  4245a0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4245a4:	f002 020f 	and.w	r2, r2, #15
  4245a8:	eb02 0246 	add.w	r2, r2, r6, lsl #1
    t.tm_year = (2000+TimeDate.Year)-1900;  // Year - 1900
  4245ac:	b2d2      	uxtb	r2, r2
  4245ae:	3264      	adds	r2, #100	; 0x64
  4245b0:	9206      	str	r2, [sp, #24]
   return ((BCD >> 0x04) * 0x0A) + (BCD & 0xF);
  4245b2:	091a      	lsrs	r2, r3, #4
  4245b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4245b8:	f003 030f 	and.w	r3, r3, #15
  4245bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    t.tm_mon = TimeDate.Month-1;           // Month, where 0 = jan
  4245c0:	b2db      	uxtb	r3, r3
  4245c2:	3b01      	subs	r3, #1
  4245c4:	9305      	str	r3, [sp, #20]
   return ((BCD >> 0x04) * 0x0A) + (BCD & 0xF);
  4245c6:	092b      	lsrs	r3, r5, #4
  4245c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4245cc:	f005 050f 	and.w	r5, r5, #15
  4245d0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
    t.tm_mday = TimeDate.Day;          // Day of the month
  4245d4:	b2ed      	uxtb	r5, r5
  4245d6:	9504      	str	r5, [sp, #16]
   return ((BCD >> 0x04) * 0x0A) + (BCD & 0xF);
  4245d8:	0923      	lsrs	r3, r4, #4
  4245da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4245de:	f004 040f 	and.w	r4, r4, #15
  4245e2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    t.tm_hour =TimeDate.Hour;
  4245e6:	b2e4      	uxtb	r4, r4
  4245e8:	9403      	str	r4, [sp, #12]
   return ((BCD >> 0x04) * 0x0A) + (BCD & 0xF);
  4245ea:	0903      	lsrs	r3, r0, #4
  4245ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4245f0:	f000 000f 	and.w	r0, r0, #15
  4245f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    t.tm_min =TimeDate.Minute;
  4245f8:	b2c0      	uxtb	r0, r0
  4245fa:	9002      	str	r0, [sp, #8]
   return ((BCD >> 0x04) * 0x0A) + (BCD & 0xF);
  4245fc:	090b      	lsrs	r3, r1, #4
  4245fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  424602:	f001 010f 	and.w	r1, r1, #15
  424606:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    t.tm_sec = TimeDate.Second;
  42460a:	b2c9      	uxtb	r1, r1
  42460c:	9101      	str	r1, [sp, #4]
    t.tm_isdst = -1;
  42460e:	f04f 33ff 	mov.w	r3, #4294967295
  424612:	9309      	str	r3, [sp, #36]	; 0x24
	return ((__int32_t)mktime(&t)<1695887402)?0:(__int32_t)mktime(&t); //Time invalid - If less than Tuesday, December 31,
  424614:	a801      	add	r0, sp, #4
  424616:	4b06      	ldr	r3, [pc, #24]	; (424630 <RV3028_GetTime+0xc4>)
  424618:	4798      	blx	r3
  42461a:	4b06      	ldr	r3, [pc, #24]	; (424634 <RV3028_GetTime+0xc8>)
  42461c:	4298      	cmp	r0, r3
  42461e:	dc01      	bgt.n	424624 <RV3028_GetTime+0xb8>
  424620:	2000      	movs	r0, #0
  424622:	e7ae      	b.n	424582 <RV3028_GetTime+0x16>
  424624:	a801      	add	r0, sp, #4
  424626:	4b02      	ldr	r3, [pc, #8]	; (424630 <RV3028_GetTime+0xc4>)
  424628:	4798      	blx	r3
  42462a:	e7aa      	b.n	424582 <RV3028_GetTime+0x16>
  42462c:	2000159c 	.word	0x2000159c
  424630:	00426e99 	.word	0x00426e99
  424634:	65153029 	.word	0x65153029

00424638 <RV3028_Set_TimeStamp>:


 void RV3028_Set_TimeStamp (uint32_t t_of_day)
 {
	 if(t_of_day<1695887402)  //Time invalid - If less than THUS, APRIL 04, 2023 16:08:15 PM
  424638:	4b12      	ldr	r3, [pc, #72]	; (424684 <RV3028_Set_TimeStamp+0x4c>)
  42463a:	4298      	cmp	r0, r3
  42463c:	d800      	bhi.n	424640 <RV3028_Set_TimeStamp+0x8>
  42463e:	4770      	bx	lr
 {
  424640:	b530      	push	{r4, r5, lr}
  424642:	b085      	sub	sp, #20
  424644:	4603      	mov	r3, r0
	 return;
	 struct tm  ts;
	 time_t timeStamp;
	 timeStamp = (time_t)t_of_day;
  424646:	a804      	add	r0, sp, #16
  424648:	f840 3d04 	str.w	r3, [r0, #-4]!
	 RV3032_TimeDate TimeDate;
	 ts = *localtime(&timeStamp);
  42464c:	4b0e      	ldr	r3, [pc, #56]	; (424688 <RV3028_Set_TimeStamp+0x50>)
  42464e:	4798      	blx	r3
  424650:	6804      	ldr	r4, [r0, #0]
  424652:	6845      	ldr	r5, [r0, #4]
  424654:	68c1      	ldr	r1, [r0, #12]
  424656:	6902      	ldr	r2, [r0, #16]
  424658:	6943      	ldr	r3, [r0, #20]

	TimeDate.Hour=ts.tm_hour;
  42465a:	6880      	ldr	r0, [r0, #8]
  42465c:	f88d 0006 	strb.w	r0, [sp, #6]
	TimeDate.Minute=ts.tm_min;
  424660:	f88d 5005 	strb.w	r5, [sp, #5]
	TimeDate.Second=ts.tm_sec;
  424664:	f88d 4004 	strb.w	r4, [sp, #4]
	TimeDate.Day=ts.tm_mday;
  424668:	f88d 1008 	strb.w	r1, [sp, #8]
	TimeDate.Month=ts.tm_mon+1;
  42466c:	3201      	adds	r2, #1
  42466e:	f88d 2009 	strb.w	r2, [sp, #9]
	TimeDate.Year=(ts.tm_year-2000)+1900;
  424672:	3b64      	subs	r3, #100	; 0x64
  424674:	f88d 300a 	strb.w	r3, [sp, #10]
	RV3028_SetTime(&_RTC,&TimeDate);
  424678:	a901      	add	r1, sp, #4
  42467a:	4804      	ldr	r0, [pc, #16]	; (42468c <RV3028_Set_TimeStamp+0x54>)
  42467c:	4b04      	ldr	r3, [pc, #16]	; (424690 <RV3028_Set_TimeStamp+0x58>)
  42467e:	4798      	blx	r3

 }
  424680:	b005      	add	sp, #20
  424682:	bd30      	pop	{r4, r5, pc}
  424684:	65153029 	.word	0x65153029
  424688:	00426879 	.word	0x00426879
  42468c:	20001564 	.word	0x20001564
  424690:	004244bd 	.word	0x004244bd

00424694 <crc8_cal>:

	uint8_t extract;
	uint8_t sum;


	for (uint16_t i = 0; i < length; i++) {
  424694:	b1e1      	cbz	r1, 4246d0 <crc8_cal+0x3c>
uint8_t crc8_cal(uint8_t *data, uint16_t length) {
  424696:	b470      	push	{r4, r5, r6}
  424698:	1e44      	subs	r4, r0, #1
  42469a:	1e4b      	subs	r3, r1, #1
  42469c:	fa10 f583 	uxtah	r5, r0, r3
	for (uint16_t i = 0; i < length; i++) {
  4246a0:	2000      	movs	r0, #0
		extract = *data;
  4246a2:	2608      	movs	r6, #8
  4246a4:	e001      	b.n	4246aa <crc8_cal+0x16>
	for (uint16_t i = 0; i < length; i++) {
  4246a6:	42ac      	cmp	r4, r5
  4246a8:	d014      	beq.n	4246d4 <crc8_cal+0x40>
		extract = *data;
  4246aa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  4246ae:	4633      	mov	r3, r6
		for (uint8_t tempI = 8; tempI; tempI--) {
			sum = (crc ^ extract) & 0x01;
  4246b0:	ea80 0201 	eor.w	r2, r0, r1
			crc >>= 1;
			if (sum)
  4246b4:	f012 0f01 	tst.w	r2, #1
  4246b8:	ea4f 0050 	mov.w	r0, r0, lsr #1
			crc ^= 0x8C;
  4246bc:	bf1c      	itt	ne
  4246be:	f080 008c 	eorne.w	r0, r0, #140	; 0x8c
  4246c2:	b2c0      	uxtbne	r0, r0
			extract >>= 1;
  4246c4:	0849      	lsrs	r1, r1, #1
  4246c6:	3b01      	subs	r3, #1
		for (uint8_t tempI = 8; tempI; tempI--) {
  4246c8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  4246cc:	d1f0      	bne.n	4246b0 <crc8_cal+0x1c>
  4246ce:	e7ea      	b.n	4246a6 <crc8_cal+0x12>
	uint8_t crc = 0x00;
  4246d0:	2000      	movs	r0, #0
  4246d2:	4770      	bx	lr
		}
		data++;
	}

	return crc;
}
  4246d4:	bc70      	pop	{r4, r5, r6}
  4246d6:	4770      	bx	lr

004246d8 <write_flash_mid_param>:




void write_flash_mid_param(uint8_t *data)
{
  4246d8:	b538      	push	{r3, r4, r5, lr}
  4246da:	4605      	mov	r5, r0
	void *mid_param_addr;
	//memory_init();
	mid_param_addr = (void *)flash_mid_param(0);
	//printf("Write info area ...\r\n");
	memory_erase(mid_param_addr, flash_mid_param_SIZE);
  4246dc:	4c05      	ldr	r4, [pc, #20]	; (4246f4 <write_flash_mid_param+0x1c>)
  4246de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4246e2:	4620      	mov	r0, r4
  4246e4:	4b04      	ldr	r3, [pc, #16]	; (4246f8 <write_flash_mid_param+0x20>)
  4246e6:	4798      	blx	r3

	memory_write(mid_param_addr, (uint8_t *) data);
  4246e8:	4629      	mov	r1, r5
  4246ea:	4620      	mov	r0, r4
  4246ec:	4b03      	ldr	r3, [pc, #12]	; (4246fc <write_flash_mid_param+0x24>)
  4246ee:	4798      	blx	r3
  4246f0:	bd38      	pop	{r3, r4, r5, pc}
  4246f2:	bf00      	nop
  4246f4:	00472000 	.word	0x00472000
  4246f8:	004242e5 	.word	0x004242e5
  4246fc:	00424349 	.word	0x00424349

00424700 <flash_write_amerex_param>:
}

uint8_t flash_write_amerex_param(uint8_t *data)
{
  424700:	b538      	push	{r3, r4, r5, lr}
  424702:	4605      	mov	r5, r0

	void *amerex_param;
	//memory_init();
	amerex_param = (void *)Amerex_config(0);
	//  printf("Write info area ...\r\n");
	memory_erase(amerex_param, Amerex_config_SIZE);
  424704:	4c05      	ldr	r4, [pc, #20]	; (42471c <flash_write_amerex_param+0x1c>)
  424706:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  42470a:	4620      	mov	r0, r4
  42470c:	4b04      	ldr	r3, [pc, #16]	; (424720 <flash_write_amerex_param+0x20>)
  42470e:	4798      	blx	r3

	ret=memory_write(amerex_param, (uint8_t *) data);
  424710:	4629      	mov	r1, r5
  424712:	4620      	mov	r0, r4
  424714:	4b03      	ldr	r3, [pc, #12]	; (424724 <flash_write_amerex_param+0x24>)
  424716:	4798      	blx	r3
	return ret;
}
  424718:	bd38      	pop	{r3, r4, r5, pc}
  42471a:	bf00      	nop
  42471c:	00471000 	.word	0x00471000
  424720:	004242e5 	.word	0x004242e5
  424724:	00424349 	.word	0x00424349

00424728 <NOR_Flash_Log_Data>:




void NOR_Flash_Log_Data(flash *mylog)
{
  424728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42472a:	4606      	mov	r6, r0
	  // printf("sector_id %d\r\n",sector_id);
	block_id = payload_cnt.flash_data_counter / MAX_PAYLOAD_PER_BLOCK;
	  // printf("block_id %d\r\n",sector_id);
	 */
	//  printf("mylog code  %d\r\n",mylog->log_code);
	sector_memory_adjust = ((payload_cnt.flash_data_counter) / MAX_PAYLOAD_PER_SECTOR);
  42472c:	4f33      	ldr	r7, [pc, #204]	; (4247fc <NOR_Flash_Log_Data+0xd4>)
  42472e:	683a      	ldr	r2, [r7, #0]
  424730:	4c33      	ldr	r4, [pc, #204]	; (424800 <NOR_Flash_Log_Data+0xd8>)
  424732:	fba4 3502 	umull	r3, r5, r4, r2
  424736:	1b53      	subs	r3, r2, r5
  424738:	eb05 0553 	add.w	r5, r5, r3, lsr #1
  42473c:	0a2d      	lsrs	r5, r5, #8
	sector_memory_adjust *= FREE_BYTES_IN_SECTOR;
	location += sector_memory_adjust;
	location += ((payload_cnt.flash_data_counter) * MAX_SIZE_OF_PAYLOAD);
  42473e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
  424742:	009b      	lsls	r3, r3, #2
  424744:	eb03 0585 	add.w	r5, r3, r5, lsl #2
	//if(payload_cnt.flash_data_counter <= 4774)
	  //location += 8192;
	  
	  printf("location %lu mid :%lu\r\n",location,payload_cnt.flash_data_counter);
  424748:	4629      	mov	r1, r5
  42474a:	482e      	ldr	r0, [pc, #184]	; (424804 <NOR_Flash_Log_Data+0xdc>)
  42474c:	4b2e      	ldr	r3, [pc, #184]	; (424808 <NOR_Flash_Log_Data+0xe0>)
  42474e:	4798      	blx	r3
	   wdt_restart(WDT);
  424750:	482e      	ldr	r0, [pc, #184]	; (42480c <NOR_Flash_Log_Data+0xe4>)
  424752:	4b2f      	ldr	r3, [pc, #188]	; (424810 <NOR_Flash_Log_Data+0xe8>)
  424754:	4798      	blx	r3
	if ((payload_cnt.flash_data_counter) % MAX_PAYLOAD_PER_SECTOR == 0) {
  424756:	683b      	ldr	r3, [r7, #0]
  424758:	fba4 2403 	umull	r2, r4, r4, r3
  42475c:	1b1a      	subs	r2, r3, r4
  42475e:	eb04 0452 	add.w	r4, r4, r2, lsr #1
  424762:	0a24      	lsrs	r4, r4, #8
  424764:	f240 1255 	movw	r2, #341	; 0x155
  424768:	fb02 3414 	mls	r4, r2, r4, r3
  42476c:	2c00      	cmp	r4, #0
  42476e:	d02c      	beq.n	4247ca <NOR_Flash_Log_Data+0xa2>

		flash_erase(location, EXT_FLASH_SECTOR_SIZE);
		 printf("FLASH CLR %ld \r\n",location);
	}

	if(mylog->log_code == 5 && mylog->start_stop == 0)
  424770:	6873      	ldr	r3, [r6, #4]
  424772:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  424776:	2b05      	cmp	r3, #5
  424778:	d031      	beq.n	4247de <NOR_Flash_Log_Data+0xb6>
		wdt_restart(WDT);
	}



		mylog->epoch_time = RV3028_GetTime(&_RTC);//Convert_Epoch_time();
  42477a:	4826      	ldr	r0, [pc, #152]	; (424814 <NOR_Flash_Log_Data+0xec>)
  42477c:	4b26      	ldr	r3, [pc, #152]	; (424818 <NOR_Flash_Log_Data+0xf0>)
  42477e:	4798      	blx	r3
  424780:	6030      	str	r0, [r6, #0]

	//	printf("epoch_time %lu\r\n",mylog->epoch_time);
		mylog->crc = crc8_cal((uint8_t *)mylog, sizeof(flash));
  424782:	210c      	movs	r1, #12
  424784:	4630      	mov	r0, r6
  424786:	4b25      	ldr	r3, [pc, #148]	; (42481c <NOR_Flash_Log_Data+0xf4>)
  424788:	4798      	blx	r3
  42478a:	7230      	strb	r0, [r6, #8]
		ret = at25dfx_write((uint8_t *)mylog, sizeof(flash),location);
  42478c:	462a      	mov	r2, r5
  42478e:	210c      	movs	r1, #12
  424790:	4630      	mov	r0, r6
  424792:	4b23      	ldr	r3, [pc, #140]	; (424820 <NOR_Flash_Log_Data+0xf8>)
  424794:	4798      	blx	r3
  424796:	4604      	mov	r4, r0
        printf("FWR %d\r\n CRC %d\r\n",ret,mylog->crc);
  424798:	7a32      	ldrb	r2, [r6, #8]
  42479a:	4601      	mov	r1, r0
  42479c:	4821      	ldr	r0, [pc, #132]	; (424824 <NOR_Flash_Log_Data+0xfc>)
  42479e:	4b1a      	ldr	r3, [pc, #104]	; (424808 <NOR_Flash_Log_Data+0xe0>)
  4247a0:	4798      	blx	r3
		if (ret == 0)
  4247a2:	b98c      	cbnz	r4, 4247c8 <NOR_Flash_Log_Data+0xa0>
		{
		
					//database_update_payload(payload_cnt.flash_data_counter);
		payload_cnt.flash_data_counter +=1;
  4247a4:	4b15      	ldr	r3, [pc, #84]	; (4247fc <NOR_Flash_Log_Data+0xd4>)
  4247a6:	681b      	ldr	r3, [r3, #0]
  4247a8:	3301      	adds	r3, #1
		if (payload_cnt.flash_data_counter>=MAX_PAYLOAD_COUNT)
  4247aa:	f24a 72d5 	movw	r2, #42965	; 0xa7d5
  4247ae:	4293      	cmp	r3, r2
  4247b0:	d820      	bhi.n	4247f4 <NOR_Flash_Log_Data+0xcc>
		payload_cnt.flash_data_counter +=1;
  4247b2:	4a12      	ldr	r2, [pc, #72]	; (4247fc <NOR_Flash_Log_Data+0xd4>)
  4247b4:	6013      	str	r3, [r2, #0]
		{
		payload_cnt.flash_data_counter =0;
		}

		payload_cnt.Trigger =1;
  4247b6:	4c11      	ldr	r4, [pc, #68]	; (4247fc <NOR_Flash_Log_Data+0xd4>)
  4247b8:	2301      	movs	r3, #1
  4247ba:	7123      	strb	r3, [r4, #4]
		wdt_restart(WDT);
  4247bc:	4813      	ldr	r0, [pc, #76]	; (42480c <NOR_Flash_Log_Data+0xe4>)
  4247be:	4b14      	ldr	r3, [pc, #80]	; (424810 <NOR_Flash_Log_Data+0xe8>)
  4247c0:	4798      	blx	r3
		uint8_t* ptr = (uint8_t*) &payload_cnt;
		write_flash_mid_param(ptr);
  4247c2:	4620      	mov	r0, r4
  4247c4:	4b18      	ldr	r3, [pc, #96]	; (424828 <NOR_Flash_Log_Data+0x100>)
  4247c6:	4798      	blx	r3
  4247c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		flash_erase(location, EXT_FLASH_SECTOR_SIZE);
  4247ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4247ce:	4628      	mov	r0, r5
  4247d0:	4b16      	ldr	r3, [pc, #88]	; (42482c <NOR_Flash_Log_Data+0x104>)
  4247d2:	4798      	blx	r3
		 printf("FLASH CLR %ld \r\n",location);
  4247d4:	4629      	mov	r1, r5
  4247d6:	4816      	ldr	r0, [pc, #88]	; (424830 <NOR_Flash_Log_Data+0x108>)
  4247d8:	4b0b      	ldr	r3, [pc, #44]	; (424808 <NOR_Flash_Log_Data+0xe0>)
  4247da:	4798      	blx	r3
  4247dc:	e7c8      	b.n	424770 <NOR_Flash_Log_Data+0x48>
		wdt_restart(WDT);
  4247de:	4f0b      	ldr	r7, [pc, #44]	; (42480c <NOR_Flash_Log_Data+0xe4>)
  4247e0:	4638      	mov	r0, r7
  4247e2:	4c0b      	ldr	r4, [pc, #44]	; (424810 <NOR_Flash_Log_Data+0xe8>)
  4247e4:	47a0      	blx	r4
		Delay(800u);
  4247e6:	f44f 7048 	mov.w	r0, #800	; 0x320
  4247ea:	4b12      	ldr	r3, [pc, #72]	; (424834 <NOR_Flash_Log_Data+0x10c>)
  4247ec:	4798      	blx	r3
		wdt_restart(WDT);
  4247ee:	4638      	mov	r0, r7
  4247f0:	47a0      	blx	r4
  4247f2:	e7c2      	b.n	42477a <NOR_Flash_Log_Data+0x52>
		payload_cnt.flash_data_counter =0;
  4247f4:	2200      	movs	r2, #0
  4247f6:	4b01      	ldr	r3, [pc, #4]	; (4247fc <NOR_Flash_Log_Data+0xd4>)
  4247f8:	601a      	str	r2, [r3, #0]
  4247fa:	e7dc      	b.n	4247b6 <NOR_Flash_Log_Data+0x8e>
  4247fc:	20001510 	.word	0x20001510
  424800:	80601807 	.word	0x80601807
  424804:	0042f52c 	.word	0x0042f52c
  424808:	00426851 	.word	0x00426851
  42480c:	400e1850 	.word	0x400e1850
  424810:	00421da5 	.word	0x00421da5
  424814:	20001564 	.word	0x20001564
  424818:	0042456d 	.word	0x0042456d
  42481c:	00424695 	.word	0x00424695
  424820:	00420f9d 	.word	0x00420f9d
  424824:	0042f558 	.word	0x0042f558
  424828:	004246d9 	.word	0x004246d9
  42482c:	00420ec1 	.word	0x00420ec1
  424830:	0042f544 	.word	0x0042f544
  424834:	0042527d 	.word	0x0042527d

00424838 <database_send_payload>:
		}

}


void database_send_payload(uint16_t mid) {
  424838:	b510      	push	{r4, lr}
  42483a:	b0ba      	sub	sp, #232	; 0xe8
  42483c:	4602      	mov	r2, r0

	char str[200];
	uint32_t sector_memory_adjust = 0;
	uint32_t location = 0;
	flash sent_payload;
	sector_memory_adjust = (mid / MAX_PAYLOAD_PER_SECTOR);
  42483e:	4b2f      	ldr	r3, [pc, #188]	; (4248fc <database_send_payload+0xc4>)
  424840:	fba3 1300 	umull	r1, r3, r3, r0
  424844:	1ac1      	subs	r1, r0, r3
  424846:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  42484a:	f3c3 230f 	ubfx	r3, r3, #8, #16
	sector_memory_adjust *= FREE_BYTES_IN_SECTOR;
	location += sector_memory_adjust;
	location += (mid * MAX_SIZE_OF_PAYLOAD);
  42484e:	eb00 0440 	add.w	r4, r0, r0, lsl #1
  424852:	00a4      	lsls	r4, r4, #2
  424854:	eb04 0483 	add.w	r4, r4, r3, lsl #2

		//if(mid <= 4774)
	  //location += 8192;

	printf("location %ld mid :%d\r\n",location,mid);
  424858:	4621      	mov	r1, r4
  42485a:	4829      	ldr	r0, [pc, #164]	; (424900 <database_send_payload+0xc8>)
  42485c:	4b29      	ldr	r3, [pc, #164]	; (424904 <database_send_payload+0xcc>)
  42485e:	4798      	blx	r3
	uint8_t* ptr = (uint8_t*) &sent_payload;
	uint8_t ret = at25dfx_read(ptr, sizeof(flash),location);
  424860:	4622      	mov	r2, r4
  424862:	210c      	movs	r1, #12
  424864:	a805      	add	r0, sp, #20
  424866:	4b28      	ldr	r3, [pc, #160]	; (424908 <database_send_payload+0xd0>)
  424868:	4798      	blx	r3
	if (ret == AT25_SUCCESS) {
  42486a:	b960      	cbnz	r0, 424886 <database_send_payload+0x4e>
		uint8_t crc_temp = sent_payload.crc;
  42486c:	f89d 401c 	ldrb.w	r4, [sp, #28]
		sent_payload.crc = 0;
  424870:	2300      	movs	r3, #0
  424872:	f88d 301c 	strb.w	r3, [sp, #28]
		sent_payload.crc = crc8_cal(ptr, sizeof(flash));
  424876:	210c      	movs	r1, #12
  424878:	a805      	add	r0, sp, #20
  42487a:	4b24      	ldr	r3, [pc, #144]	; (42490c <database_send_payload+0xd4>)
  42487c:	4798      	blx	r3
  42487e:	f88d 001c 	strb.w	r0, [sp, #28]
		if (crc_temp == sent_payload.crc)
  424882:	4284      	cmp	r4, r0
  424884:	d001      	beq.n	42488a <database_send_payload+0x52>
 			j1939_data_transfer(can_identifier,1);


		}
	}
}
  424886:	b03a      	add	sp, #232	; 0xe8
  424888:	bd10      	pop	{r4, pc}
			sprintf(str,"%ld,%d,%d,%d,%d",sent_payload.epoch_time,sent_payload.log_code,sent_payload.trouble_fire,sent_payload.start_stop,sent_payload.value);
  42488a:	f89d 3018 	ldrb.w	r3, [sp, #24]
  42488e:	f89d 201b 	ldrb.w	r2, [sp, #27]
  424892:	9202      	str	r2, [sp, #8]
  424894:	f89d 201a 	ldrb.w	r2, [sp, #26]
  424898:	9201      	str	r2, [sp, #4]
  42489a:	f89d 2019 	ldrb.w	r2, [sp, #25]
  42489e:	9200      	str	r2, [sp, #0]
  4248a0:	9a05      	ldr	r2, [sp, #20]
  4248a2:	491b      	ldr	r1, [pc, #108]	; (424910 <database_send_payload+0xd8>)
  4248a4:	a808      	add	r0, sp, #32
  4248a6:	4c1b      	ldr	r4, [pc, #108]	; (424914 <database_send_payload+0xdc>)
  4248a8:	47a0      	blx	r4
			printf("%s\r\n",str);
  4248aa:	a908      	add	r1, sp, #32
  4248ac:	481a      	ldr	r0, [pc, #104]	; (424918 <database_send_payload+0xe0>)
  4248ae:	4b15      	ldr	r3, [pc, #84]	; (424904 <database_send_payload+0xcc>)
  4248b0:	4798      	blx	r3
				memset(Read_flash_data,0,sizeof(Read_flash_data));
  4248b2:	4a1a      	ldr	r2, [pc, #104]	; (42491c <database_send_payload+0xe4>)
				Encode_getlog.EpochTime = sent_payload.epoch_time;
  4248b4:	9b05      	ldr	r3, [sp, #20]
  4248b6:	491a      	ldr	r1, [pc, #104]	; (424920 <database_send_payload+0xe8>)
  4248b8:	600b      	str	r3, [r1, #0]
				Encode_getlog.encode_data.G_log_RawData[4]    = Encode_getlog.EpochTime;
  4248ba:	710b      	strb	r3, [r1, #4]
				memcpy(en_getlogArr, Encode_getlog.encode_data.G_log_RawData, 4);
  4248bc:	4919      	ldr	r1, [pc, #100]	; (424924 <database_send_payload+0xec>)
  4248be:	600b      	str	r3, [r1, #0]
			Read_flash_data[0] = en_getlogArr[0];
  4248c0:	7013      	strb	r3, [r2, #0]
			Read_flash_data[1] = en_getlogArr[1];
  4248c2:	f3c3 2107 	ubfx	r1, r3, #8, #8
  4248c6:	7051      	strb	r1, [r2, #1]
			Read_flash_data[2] = en_getlogArr[2];
  4248c8:	f3c3 4107 	ubfx	r1, r3, #16, #8
  4248cc:	7091      	strb	r1, [r2, #2]
			Read_flash_data[3] = en_getlogArr[3];
  4248ce:	0e1b      	lsrs	r3, r3, #24
  4248d0:	70d3      	strb	r3, [r2, #3]
			Read_flash_data[4] = ((sent_payload.log_code << 4) | sent_payload.start_stop );
  4248d2:	f89d 1018 	ldrb.w	r1, [sp, #24]
  4248d6:	f89d 301a 	ldrb.w	r3, [sp, #26]
  4248da:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4248de:	7113      	strb	r3, [r2, #4]
			Read_flash_data[5] = sent_payload.trouble_fire;
  4248e0:	f89d 3019 	ldrb.w	r3, [sp, #25]
  4248e4:	7153      	strb	r3, [r2, #5]
			Read_flash_data[6] = sent_payload.value;
  4248e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
  4248ea:	7193      	strb	r3, [r2, #6]
			Read_flash_data[7] = 5;
  4248ec:	2305      	movs	r3, #5
  4248ee:	71d3      	strb	r3, [r2, #7]
 			j1939_data_transfer(can_identifier,1);
  4248f0:	2101      	movs	r1, #1
  4248f2:	4b0d      	ldr	r3, [pc, #52]	; (424928 <database_send_payload+0xf0>)
  4248f4:	6818      	ldr	r0, [r3, #0]
  4248f6:	4b0d      	ldr	r3, [pc, #52]	; (42492c <database_send_payload+0xf4>)
  4248f8:	4798      	blx	r3
}
  4248fa:	e7c4      	b.n	424886 <database_send_payload+0x4e>
  4248fc:	80601807 	.word	0x80601807
  424900:	0042f56c 	.word	0x0042f56c
  424904:	00426851 	.word	0x00426851
  424908:	00421041 	.word	0x00421041
  42490c:	00424695 	.word	0x00424695
  424910:	0042f584 	.word	0x0042f584
  424914:	00427415 	.word	0x00427415
  424918:	0042f594 	.word	0x0042f594
  42491c:	200016d8 	.word	0x200016d8
  424920:	200016e0 	.word	0x200016e0
  424924:	2000134c 	.word	0x2000134c
  424928:	200010a4 	.word	0x200010a4
  42492c:	00422385 	.word	0x00422385

00424930 <read_flash_mid_param>:


void read_flash_mid_param(void *addr, paloadCount_t *Read_payload_cnt)
{
  424930:	b508      	push	{r3, lr}

  	paloadCount_t *p = (paloadCount_t *)addr;

  	Read_payload_cnt->flash_data_counter    = none_blank(p->flash_data_counter);
  424932:	6803      	ldr	r3, [r0, #0]
  424934:	f1b3 3fff 	cmp.w	r3, #4294967295
  424938:	bf08      	it	eq
  42493a:	2300      	moveq	r3, #0
  42493c:	600b      	str	r3, [r1, #0]
  	Read_payload_cnt->Trigger    = none_blank(p->Trigger);
  42493e:	7903      	ldrb	r3, [r0, #4]
  424940:	710b      	strb	r3, [r1, #4]

  	if (Read_payload_cnt->Trigger == TRIGGER_Payloadcnt_param)
  424942:	2b01      	cmp	r3, #1
	  //	printf("TRIGGER_read_flash_mid_param is Set\r\n");
  	}
  	else
  	{
	  //	printf("TRIGGER_read_flash_mid_param is not Set\r\n");
	  	Read_payload_cnt->flash_data_counter =0;
  424944:	bf1c      	itt	ne
  424946:	2300      	movne	r3, #0
  424948:	600b      	strne	r3, [r1, #0]
  	}

  printf("Read payload cnt %ld\r\n",Read_payload_cnt->flash_data_counter);
  42494a:	6809      	ldr	r1, [r1, #0]
  42494c:	4801      	ldr	r0, [pc, #4]	; (424954 <read_flash_mid_param+0x24>)
  42494e:	4b02      	ldr	r3, [pc, #8]	; (424958 <read_flash_mid_param+0x28>)
  424950:	4798      	blx	r3
  424952:	bd08      	pop	{r3, pc}
  424954:	0042f59c 	.word	0x0042f59c
  424958:	00426851 	.word	0x00426851

0042495c <flash_read_amerex_param>:
}

void flash_read_amerex_param(void *addr, my_data *amerex_param)
{
     my_data *p = (my_data *) addr;
     amerex_param->all_LED_duty    = none_blank(p->all_LED_duty);
  42495c:	8803      	ldrh	r3, [r0, #0]
  42495e:	800b      	strh	r3, [r1, #0]
     amerex_param->fire_LED_duty    = none_blank(p->fire_LED_duty);
  424960:	8843      	ldrh	r3, [r0, #2]
  424962:	804b      	strh	r3, [r1, #2]
     amerex_param->buzzer_duty    = none_blank(p->buzzer_duty);
  424964:	8883      	ldrh	r3, [r0, #4]
  424966:	808b      	strh	r3, [r1, #4]
     amerex_param->trbl_relay_delay    = none_blank(p->trbl_relay_delay);
  424968:	88c3      	ldrh	r3, [r0, #6]
  42496a:	80cb      	strh	r3, [r1, #6]
     amerex_param->fire_relay_delay    = none_blank(p->fire_relay_delay);
  42496c:	8903      	ldrh	r3, [r0, #8]
  42496e:	810b      	strh	r3, [r1, #8]
     amerex_param->actuator_value    = none_blank(p->actuator_value);
  424970:	8943      	ldrh	r3, [r0, #10]
  424972:	814b      	strh	r3, [r1, #10]
     amerex_param->CAN_baud_rate    = none_blank(p->CAN_baud_rate);
  424974:	7b03      	ldrb	r3, [r0, #12]
  424976:	730b      	strb	r3, [r1, #12]
	 amerex_param->Default_trbl_rly_level    = none_blank(p->Default_trbl_rly_level);
  424978:	7b43      	ldrb	r3, [r0, #13]
  42497a:	734b      	strb	r3, [r1, #13]
	 amerex_param->Default_fire_rly_level    = none_blank(p->Default_fire_rly_level);
  42497c:	7b83      	ldrb	r3, [r0, #14]
  42497e:	738b      	strb	r3, [r1, #14]
     amerex_param->Trigger    = none_blank(p->Trigger);
  424980:	7bc3      	ldrb	r3, [r0, #15]
  424982:	73cb      	strb	r3, [r1, #15]

     if (amerex_param->Trigger == TRIGGER_amerex_param)
  424984:	2b01      	cmp	r3, #1
  424986:	d008      	beq.n	42499a <flash_read_amerex_param+0x3e>
{
  424988:	b430      	push	{r4, r5}
	    // printf("TRIGGER_amerex_param is Set\r\n");
     }
     else
     {
	   //  printf("TRIGGER_amerex_param is NOT Set\r\n");
	     amerex_config_data = temp_data;
  42498a:	4d04      	ldr	r5, [pc, #16]	; (42499c <flash_read_amerex_param+0x40>)
  42498c:	4c04      	ldr	r4, [pc, #16]	; (4249a0 <flash_read_amerex_param+0x44>)
  42498e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  424990:	6028      	str	r0, [r5, #0]
  424992:	6069      	str	r1, [r5, #4]
  424994:	60aa      	str	r2, [r5, #8]
  424996:	60eb      	str	r3, [r5, #12]
     }


}
  424998:	bc30      	pop	{r4, r5}
  42499a:	4770      	bx	lr
  42499c:	20001588 	.word	0x20001588
  4249a0:	200000b0 	.word	0x200000b0

004249a4 <Reset_Values>:
 *Parameter : none
 *Return    : Epoch time
 */
void Reset_Values(void)
{
    memset(&log_data,0,sizeof(log_data));
  4249a4:	4b02      	ldr	r3, [pc, #8]	; (4249b0 <Reset_Values+0xc>)
  4249a6:	2200      	movs	r2, #0
  4249a8:	601a      	str	r2, [r3, #0]
  4249aa:	605a      	str	r2, [r3, #4]
  4249ac:	609a      	str	r2, [r3, #8]
  4249ae:	4770      	bx	lr
  4249b0:	20000098 	.word	0x20000098

004249b4 <at25dfx_init>:
  	     t.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
  	     return ((__int64_t)mktime(&t)<1661840105)?0:(__int64_t)mktime(&t); //Time invalid - If less than Tuesday, August 30, 2022 11:45:05 AM
}

 void at25dfx_init()
{
  4249b4:	b508      	push	{r3, lr}
//	at25_status_t status;

	/* Initialize the SerialFlash */
	at25dfx_initialize();
  4249b6:	4b04      	ldr	r3, [pc, #16]	; (4249c8 <at25dfx_init+0x14>)
  4249b8:	4798      	blx	r3

	/* Set the SerialFlash active */
	at25dfx_set_mem_active(AT25DFX_MEM_ID);
  4249ba:	2001      	movs	r0, #1
  4249bc:	4b03      	ldr	r3, [pc, #12]	; (4249cc <at25dfx_init+0x18>)
  4249be:	4798      	blx	r3

	/* Check if the SerialFlash is valid */
	at25dfx_mem_check();
  4249c0:	4b03      	ldr	r3, [pc, #12]	; (4249d0 <at25dfx_init+0x1c>)
  4249c2:	4798      	blx	r3
  4249c4:	bd08      	pop	{r3, pc}
  4249c6:	bf00      	nop
  4249c8:	00420d7d 	.word	0x00420d7d
  4249cc:	00420d8d 	.word	0x00420d8d
  4249d0:	00420d99 	.word	0x00420d99

004249d4 <Test_Button>:
 * Parameter: None
 * Return   : None
 */

void Test_Button(void)
{
  4249d4:	b510      	push	{r4, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4249d6:	4b1f      	ldr	r3, [pc, #124]	; (424a54 <Test_Button+0x80>)
  4249d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

    if((!ioport_get_pin_level(TEST_SW_PIN)) && pri_pwr_trouble_g_b == NO_TROUBLE && (ioport_get_pin_level(ALARM_SILEN_PIN)) && (ioport_get_pin_level(SYS_RESET_SW_PIN)))
  4249da:	f013 0f01 	tst.w	r3, #1
  4249de:	d11b      	bne.n	424a18 <Test_Button+0x44>
  4249e0:	4b1d      	ldr	r3, [pc, #116]	; (424a58 <Test_Button+0x84>)
  4249e2:	781b      	ldrb	r3, [r3, #0]
  4249e4:	b9c3      	cbnz	r3, 424a18 <Test_Button+0x44>
  4249e6:	4b1b      	ldr	r3, [pc, #108]	; (424a54 <Test_Button+0x80>)
  4249e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4249ea:	f013 0f04 	tst.w	r3, #4
  4249ee:	d013      	beq.n	424a18 <Test_Button+0x44>
  4249f0:	4b18      	ldr	r3, [pc, #96]	; (424a54 <Test_Button+0x80>)
  4249f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4249f4:	f013 0f02 	tst.w	r3, #2
  4249f8:	d00e      	beq.n	424a18 <Test_Button+0x44>
    {
        if((count_1ms - test_sw_prev_tick_g_u32) >= SEC_1)
  4249fa:	4b18      	ldr	r3, [pc, #96]	; (424a5c <Test_Button+0x88>)
  4249fc:	681b      	ldr	r3, [r3, #0]
  4249fe:	4a18      	ldr	r2, [pc, #96]	; (424a60 <Test_Button+0x8c>)
  424a00:	6812      	ldr	r2, [r2, #0]
  424a02:	1a9b      	subs	r3, r3, r2
  424a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  424a08:	d30d      	bcc.n	424a26 <Test_Button+0x52>
        {
			   can_disable(CAN0);
  424a0a:	4816      	ldr	r0, [pc, #88]	; (424a64 <Test_Button+0x90>)
  424a0c:	4b16      	ldr	r3, [pc, #88]	; (424a68 <Test_Button+0x94>)
  424a0e:	4798      	blx	r3
             test_sw_pressed_g_b = PRESSED;
  424a10:	2201      	movs	r2, #1
  424a12:	4b16      	ldr	r3, [pc, #88]	; (424a6c <Test_Button+0x98>)
  424a14:	701a      	strb	r2, [r3, #0]
  424a16:	bd10      	pop	{r4, pc}

	    }
    }
    else
    {
        test_sw_prev_tick_g_u32 = count_1ms;
  424a18:	4b10      	ldr	r3, [pc, #64]	; (424a5c <Test_Button+0x88>)
  424a1a:	681a      	ldr	r2, [r3, #0]
  424a1c:	4b10      	ldr	r3, [pc, #64]	; (424a60 <Test_Button+0x8c>)
  424a1e:	601a      	str	r2, [r3, #0]
        if(test_sw_pressed_g_b)
  424a20:	4b12      	ldr	r3, [pc, #72]	; (424a6c <Test_Button+0x98>)
  424a22:	781b      	ldrb	r3, [r3, #0]
  424a24:	b903      	cbnz	r3, 424a28 <Test_Button+0x54>
  424a26:	bd10      	pop	{r4, pc}
        {
			FIRE_LED_PWM_EN(amerex_config_data.fire_LED_duty);
  424a28:	4c11      	ldr	r4, [pc, #68]	; (424a70 <Test_Button+0x9c>)
  424a2a:	78a0      	ldrb	r0, [r4, #2]
  424a2c:	4b11      	ldr	r3, [pc, #68]	; (424a74 <Test_Button+0xa0>)
  424a2e:	4798      	blx	r3
			if(amerex_config_data.CAN_baud_rate != 0u)
  424a30:	7b23      	ldrb	r3, [r4, #12]
  424a32:	b95b      	cbnz	r3, 424a4c <Test_Button+0x78>
			can_enable(CAN0);
			test_sw_pressed_g_b = RELEASED;
  424a34:	2100      	movs	r1, #0
  424a36:	4b0d      	ldr	r3, [pc, #52]	; (424a6c <Test_Button+0x98>)
  424a38:	7019      	strb	r1, [r3, #0]
			buzz_bit =0;
  424a3a:	4b0f      	ldr	r3, [pc, #60]	; (424a78 <Test_Button+0xa4>)
  424a3c:	7019      	strb	r1, [r3, #0]
			value =0;
  424a3e:	4b0f      	ldr	r3, [pc, #60]	; (424a7c <Test_Button+0xa8>)
  424a40:	7019      	strb	r1, [r3, #0]
		//	Buzzer_Beep(OFF);  	   /* if test button released immediately switch OFF buzzer*/
			Buzzer_Freq_Set(BUZZER_FREQ_2KHZ, 0);  /* OFF PWM*/
  424a42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  424a46:	4b0e      	ldr	r3, [pc, #56]	; (424a80 <Test_Button+0xac>)
  424a48:	4798      	blx	r3


        }

    }
}
  424a4a:	e7ec      	b.n	424a26 <Test_Button+0x52>
			can_enable(CAN0);
  424a4c:	4805      	ldr	r0, [pc, #20]	; (424a64 <Test_Button+0x90>)
  424a4e:	4b0d      	ldr	r3, [pc, #52]	; (424a84 <Test_Button+0xb0>)
  424a50:	4798      	blx	r3
  424a52:	e7ef      	b.n	424a34 <Test_Button+0x60>
  424a54:	400e0e00 	.word	0x400e0e00
  424a58:	20000b50 	.word	0x20000b50
  424a5c:	200012f8 	.word	0x200012f8
  424a60:	20001388 	.word	0x20001388
  424a64:	40010000 	.word	0x40010000
  424a68:	00421673 	.word	0x00421673
  424a6c:	20001384 	.word	0x20001384
  424a70:	20001588 	.word	0x20001588
  424a74:	00424491 	.word	0x00424491
  424a78:	200010b4 	.word	0x200010b4
  424a7c:	200010c5 	.word	0x200010c5
  424a80:	00421db9 	.word	0x00421db9
  424a84:	00421669 	.word	0x00421669

00424a88 <Alarm_Silence_Button>:
/* Function : Alarm Silence Button status_check
 * Parameter: None
 * Return   : None
 */
void Alarm_Silence_Button(void)
{
  424a88:	b508      	push	{r3, lr}

    if((any_of_trouble_g_b  && !ioport_get_pin_level(ALARM_SILEN_PIN) && ioport_get_pin_level(TEST_SW_PIN)))	 //  fire_happen_g_b &&
  424a8a:	4b2a      	ldr	r3, [pc, #168]	; (424b34 <Alarm_Silence_Button+0xac>)
  424a8c:	781b      	ldrb	r3, [r3, #0]
  424a8e:	2b00      	cmp	r3, #0
  424a90:	d04a      	beq.n	424b28 <Alarm_Silence_Button+0xa0>
  424a92:	4b29      	ldr	r3, [pc, #164]	; (424b38 <Alarm_Silence_Button+0xb0>)
  424a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  424a96:	f013 0f04 	tst.w	r3, #4
  424a9a:	d145      	bne.n	424b28 <Alarm_Silence_Button+0xa0>
  424a9c:	4b26      	ldr	r3, [pc, #152]	; (424b38 <Alarm_Silence_Button+0xb0>)
  424a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  424aa0:	f013 0f01 	tst.w	r3, #1
  424aa4:	d040      	beq.n	424b28 <Alarm_Silence_Button+0xa0>
    {
        if((((count_1ms - alarm_sil_prev_tick_g_u32) >= msec_200)	&& fire_happen_g_b)  || (((count_1ms - alarm_sil_prev_tick_g_u32) >= SEC_3)	&& !fire_happen_g_b))
  424aa6:	4b25      	ldr	r3, [pc, #148]	; (424b3c <Alarm_Silence_Button+0xb4>)
  424aa8:	681b      	ldr	r3, [r3, #0]
  424aaa:	4a25      	ldr	r2, [pc, #148]	; (424b40 <Alarm_Silence_Button+0xb8>)
  424aac:	6812      	ldr	r2, [r2, #0]
  424aae:	1a9b      	subs	r3, r3, r2
  424ab0:	2bc7      	cmp	r3, #199	; 0xc7
  424ab2:	d91b      	bls.n	424aec <Alarm_Silence_Button+0x64>
  424ab4:	4b23      	ldr	r3, [pc, #140]	; (424b44 <Alarm_Silence_Button+0xbc>)
  424ab6:	781b      	ldrb	r3, [r3, #0]
  424ab8:	b933      	cbnz	r3, 424ac8 <Alarm_Silence_Button+0x40>
  424aba:	4b20      	ldr	r3, [pc, #128]	; (424b3c <Alarm_Silence_Button+0xb4>)
  424abc:	681b      	ldr	r3, [r3, #0]
  424abe:	1a9a      	subs	r2, r3, r2
  424ac0:	f640 33b7 	movw	r3, #2999	; 0xbb7
  424ac4:	429a      	cmp	r2, r3
  424ac6:	d91c      	bls.n	424b02 <Alarm_Silence_Button+0x7a>
        {
			alarm_sil_prev_tick_g_u32 =	count_1ms;
  424ac8:	4b1c      	ldr	r3, [pc, #112]	; (424b3c <Alarm_Silence_Button+0xb4>)
  424aca:	681a      	ldr	r2, [r3, #0]
  424acc:	4b1c      	ldr	r3, [pc, #112]	; (424b40 <Alarm_Silence_Button+0xb8>)
  424ace:	601a      	str	r2, [r3, #0]
            if(!alarm_sil_flag_g_b) /*while pressing first time alone we have to log the data*/
  424ad0:	4b1d      	ldr	r3, [pc, #116]	; (424b48 <Alarm_Silence_Button+0xc0>)
  424ad2:	781b      	ldrb	r3, [r3, #0]
  424ad4:	b1b3      	cbz	r3, 424b04 <Alarm_Silence_Button+0x7c>
                 /*Indicating system reset button pressed*/
                log_data.start_stop = 1u; /*button pressed*/
                NOR_Flash_Log_Data(&log_data);

            }
			 tc_start(TC0,0);
  424ad6:	2100      	movs	r1, #0
  424ad8:	481c      	ldr	r0, [pc, #112]	; (424b4c <Alarm_Silence_Button+0xc4>)
  424ada:	4b1d      	ldr	r3, [pc, #116]	; (424b50 <Alarm_Silence_Button+0xc8>)
  424adc:	4798      	blx	r3
			  printf("Start _timer0\n");
  424ade:	481d      	ldr	r0, [pc, #116]	; (424b54 <Alarm_Silence_Button+0xcc>)
  424ae0:	4b1d      	ldr	r3, [pc, #116]	; (424b58 <Alarm_Silence_Button+0xd0>)
  424ae2:	4798      	blx	r3

            alarm_sil_flag_g_b = PRESSED;
  424ae4:	2201      	movs	r2, #1
  424ae6:	4b18      	ldr	r3, [pc, #96]	; (424b48 <Alarm_Silence_Button+0xc0>)
  424ae8:	701a      	strb	r2, [r3, #0]
  424aea:	bd08      	pop	{r3, pc}
        if((((count_1ms - alarm_sil_prev_tick_g_u32) >= msec_200)	&& fire_happen_g_b)  || (((count_1ms - alarm_sil_prev_tick_g_u32) >= SEC_3)	&& !fire_happen_g_b))
  424aec:	4b13      	ldr	r3, [pc, #76]	; (424b3c <Alarm_Silence_Button+0xb4>)
  424aee:	681b      	ldr	r3, [r3, #0]
  424af0:	1a9a      	subs	r2, r3, r2
  424af2:	f640 33b7 	movw	r3, #2999	; 0xbb7
  424af6:	429a      	cmp	r2, r3
  424af8:	d903      	bls.n	424b02 <Alarm_Silence_Button+0x7a>
  424afa:	4b12      	ldr	r3, [pc, #72]	; (424b44 <Alarm_Silence_Button+0xbc>)
  424afc:	781b      	ldrb	r3, [r3, #0]
  424afe:	2b00      	cmp	r3, #0
  424b00:	d0e2      	beq.n	424ac8 <Alarm_Silence_Button+0x40>
  424b02:	bd08      	pop	{r3, pc}
                Reset_Values();
  424b04:	4b15      	ldr	r3, [pc, #84]	; (424b5c <Alarm_Silence_Button+0xd4>)
  424b06:	4798      	blx	r3
				(fire_happen_g_b == 1u)?(log_data.log_code = 10u):(log_data.log_code = 13u);
  424b08:	4b0e      	ldr	r3, [pc, #56]	; (424b44 <Alarm_Silence_Button+0xbc>)
  424b0a:	781b      	ldrb	r3, [r3, #0]
  424b0c:	b143      	cbz	r3, 424b20 <Alarm_Silence_Button+0x98>
  424b0e:	220a      	movs	r2, #10
  424b10:	4b13      	ldr	r3, [pc, #76]	; (424b60 <Alarm_Silence_Button+0xd8>)
  424b12:	711a      	strb	r2, [r3, #4]
                log_data.start_stop = 1u; /*button pressed*/
  424b14:	4812      	ldr	r0, [pc, #72]	; (424b60 <Alarm_Silence_Button+0xd8>)
  424b16:	2301      	movs	r3, #1
  424b18:	7183      	strb	r3, [r0, #6]
                NOR_Flash_Log_Data(&log_data);
  424b1a:	4b12      	ldr	r3, [pc, #72]	; (424b64 <Alarm_Silence_Button+0xdc>)
  424b1c:	4798      	blx	r3
  424b1e:	e7da      	b.n	424ad6 <Alarm_Silence_Button+0x4e>
				(fire_happen_g_b == 1u)?(log_data.log_code = 10u):(log_data.log_code = 13u);
  424b20:	220d      	movs	r2, #13
  424b22:	4b0f      	ldr	r3, [pc, #60]	; (424b60 <Alarm_Silence_Button+0xd8>)
  424b24:	711a      	strb	r2, [r3, #4]
  424b26:	e7f5      	b.n	424b14 <Alarm_Silence_Button+0x8c>
        }
    }
    else
    {
         alarm_sil_prev_tick_g_u32 =  count_1ms;
  424b28:	4b04      	ldr	r3, [pc, #16]	; (424b3c <Alarm_Silence_Button+0xb4>)
  424b2a:	681a      	ldr	r2, [r3, #0]
  424b2c:	4b04      	ldr	r3, [pc, #16]	; (424b40 <Alarm_Silence_Button+0xb8>)
  424b2e:	601a      	str	r2, [r3, #0]

    }
}
  424b30:	bd08      	pop	{r3, pc}
  424b32:	bf00      	nop
  424b34:	2000138c 	.word	0x2000138c
  424b38:	400e0e00 	.word	0x400e0e00
  424b3c:	200012f8 	.word	0x200012f8
  424b40:	200010c8 	.word	0x200010c8
  424b44:	20000b08 	.word	0x20000b08
  424b48:	20001360 	.word	0x20001360
  424b4c:	40090000 	.word	0x40090000
  424b50:	00421b17 	.word	0x00421b17
  424b54:	0042f5cc 	.word	0x0042f5cc
  424b58:	00426851 	.word	0x00426851
  424b5c:	004249a5 	.word	0x004249a5
  424b60:	20000098 	.word	0x20000098
  424b64:	00424729 	.word	0x00424729

00424b68 <Pressure_Sw>:
  424b68:	4b1f      	ldr	r3, [pc, #124]	; (424be8 <Pressure_Sw+0x80>)
  424b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
{
     static uint32_t press_sw_prev_tick = 0u;
    static uint16_t db_count_sl_u8 = 0u;/*debounce count*/
    static bool prev_state_sl_b = 0u;

 if(ioport_get_pin_level(CYLPRS_SW_Pin))
  424b6c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  424b70:	d029      	beq.n	424bc6 <Pressure_Sw+0x5e>
 {
     db_count_sl_u8++;
  424b72:	4b1e      	ldr	r3, [pc, #120]	; (424bec <Pressure_Sw+0x84>)
  424b74:	881b      	ldrh	r3, [r3, #0]
  424b76:	3301      	adds	r3, #1
  424b78:	b29b      	uxth	r3, r3
     if(db_count_sl_u8 >= DEBOUNCE_COUNT)
  424b7a:	f240 42e1 	movw	r2, #1249	; 0x4e1
  424b7e:	4293      	cmp	r3, r2
  424b80:	d817      	bhi.n	424bb2 <Pressure_Sw+0x4a>
     db_count_sl_u8++;
  424b82:	4a1a      	ldr	r2, [pc, #104]	; (424bec <Pressure_Sw+0x84>)
  424b84:	8013      	strh	r3, [r2, #0]
         pres_sw_trbl_g_b = TROUBLE;
		// printf("Pressure_Sw clear\r\n");
     }
 }

     if(pres_sw_trbl_g_b != prev_state_sl_b)/* Log the data*/
  424b86:	4b1a      	ldr	r3, [pc, #104]	; (424bf0 <Pressure_Sw+0x88>)
  424b88:	781a      	ldrb	r2, [r3, #0]
  424b8a:	4b1a      	ldr	r3, [pc, #104]	; (424bf4 <Pressure_Sw+0x8c>)
  424b8c:	781b      	ldrb	r3, [r3, #0]
  424b8e:	429a      	cmp	r2, r3
  424b90:	d029      	beq.n	424be6 <Pressure_Sw+0x7e>
{
  424b92:	b510      	push	{r4, lr}
     {
         //LOG
         Reset_Values();
  424b94:	4b18      	ldr	r3, [pc, #96]	; (424bf8 <Pressure_Sw+0x90>)
  424b96:	4798      	blx	r3

         log_data.log_code = PRES_SW_TRBL_7_FLASH;
  424b98:	4818      	ldr	r0, [pc, #96]	; (424bfc <Pressure_Sw+0x94>)
  424b9a:	2307      	movs	r3, #7
  424b9c:	7103      	strb	r3, [r0, #4]

         log_data.start_stop = pres_sw_trbl_g_b;
  424b9e:	4c14      	ldr	r4, [pc, #80]	; (424bf0 <Pressure_Sw+0x88>)
  424ba0:	7822      	ldrb	r2, [r4, #0]
  424ba2:	7182      	strb	r2, [r0, #6]

         log_data.trouble_fire = PRES_SW_TRBL_7_FLASH ; /*assign pressure switch trouble code*/
  424ba4:	7143      	strb	r3, [r0, #5]

         NOR_Flash_Log_Data(&log_data);
  424ba6:	4b16      	ldr	r3, [pc, #88]	; (424c00 <Pressure_Sw+0x98>)
  424ba8:	4798      	blx	r3

         prev_state_sl_b = pres_sw_trbl_g_b;
  424baa:	7822      	ldrb	r2, [r4, #0]
  424bac:	4b11      	ldr	r3, [pc, #68]	; (424bf4 <Pressure_Sw+0x8c>)
  424bae:	701a      	strb	r2, [r3, #0]
  424bb0:	bd10      	pop	{r4, pc}
         db_count_sl_u8 = 0u;
  424bb2:	2300      	movs	r3, #0
  424bb4:	4a0d      	ldr	r2, [pc, #52]	; (424bec <Pressure_Sw+0x84>)
  424bb6:	8013      	strh	r3, [r2, #0]
         pres_sw_trbl_g_b = NO_TROUBLE;
  424bb8:	4a0d      	ldr	r2, [pc, #52]	; (424bf0 <Pressure_Sw+0x88>)
  424bba:	7013      	strb	r3, [r2, #0]
         press_sw_prev_tick = count_1ms;
  424bbc:	4b11      	ldr	r3, [pc, #68]	; (424c04 <Pressure_Sw+0x9c>)
  424bbe:	681a      	ldr	r2, [r3, #0]
  424bc0:	4b11      	ldr	r3, [pc, #68]	; (424c08 <Pressure_Sw+0xa0>)
  424bc2:	601a      	str	r2, [r3, #0]
  424bc4:	e7df      	b.n	424b86 <Pressure_Sw+0x1e>
     if((count_1ms - press_sw_prev_tick) >= __10Sec)
  424bc6:	4b0f      	ldr	r3, [pc, #60]	; (424c04 <Pressure_Sw+0x9c>)
  424bc8:	681b      	ldr	r3, [r3, #0]
  424bca:	4a0f      	ldr	r2, [pc, #60]	; (424c08 <Pressure_Sw+0xa0>)
  424bcc:	6812      	ldr	r2, [r2, #0]
  424bce:	1a9b      	subs	r3, r3, r2
  424bd0:	f242 720f 	movw	r2, #9999	; 0x270f
  424bd4:	4293      	cmp	r3, r2
  424bd6:	d9d6      	bls.n	424b86 <Pressure_Sw+0x1e>
		 Get_New_trouble = PRES_SW_TRBL_7_FLASH;
  424bd8:	2207      	movs	r2, #7
  424bda:	4b0c      	ldr	r3, [pc, #48]	; (424c0c <Pressure_Sw+0xa4>)
  424bdc:	701a      	strb	r2, [r3, #0]
         pres_sw_trbl_g_b = TROUBLE;
  424bde:	2201      	movs	r2, #1
  424be0:	4b03      	ldr	r3, [pc, #12]	; (424bf0 <Pressure_Sw+0x88>)
  424be2:	701a      	strb	r2, [r3, #0]
  424be4:	e7cf      	b.n	424b86 <Pressure_Sw+0x1e>
  424be6:	4770      	bx	lr
  424be8:	400e1400 	.word	0x400e1400
  424bec:	20001362 	.word	0x20001362
  424bf0:	20001373 	.word	0x20001373
  424bf4:	20001378 	.word	0x20001378
  424bf8:	004249a5 	.word	0x004249a5
  424bfc:	20000098 	.word	0x20000098
  424c00:	00424729 	.word	0x00424729
  424c04:	200012f8 	.word	0x200012f8
  424c08:	20001374 	.word	0x20001374
  424c0c:	20001088 	.word	0x20001088

00424c10 <FireRly_Rst_For_Vehicle_Strt>:

}
}

 void FireRly_Rst_For_Vehicle_Strt(void)
 {
  424c10:	b508      	push	{r3, lr}
	Fire_Rst_vehicle_start_bit = 2u;
  424c12:	2202      	movs	r2, #2
  424c14:	4b0b      	ldr	r3, [pc, #44]	; (424c44 <FireRly_Rst_For_Vehicle_Strt+0x34>)
  424c16:	701a      	strb	r2, [r3, #0]
	ioport_set_pin_level(RELAY_B,amerex_config_data.Default_fire_rly_level);
  424c18:	4b0b      	ldr	r3, [pc, #44]	; (424c48 <FireRly_Rst_For_Vehicle_Strt+0x38>)
	if (level) {
  424c1a:	7b9b      	ldrb	r3, [r3, #14]
  424c1c:	b96b      	cbnz	r3, 424c3a <FireRly_Rst_For_Vehicle_Strt+0x2a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  424c1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  424c22:	4b0a      	ldr	r3, [pc, #40]	; (424c4c <FireRly_Rst_For_Vehicle_Strt+0x3c>)
  424c24:	635a      	str	r2, [r3, #52]	; 0x34
	Reset_Values();
  424c26:	4b0a      	ldr	r3, [pc, #40]	; (424c50 <FireRly_Rst_For_Vehicle_Strt+0x40>)
  424c28:	4798      	blx	r3
	log_data.log_code = 12u; /*Indicating system reset button pressed*/
  424c2a:	480a      	ldr	r0, [pc, #40]	; (424c54 <FireRly_Rst_For_Vehicle_Strt+0x44>)
  424c2c:	230c      	movs	r3, #12
  424c2e:	7103      	strb	r3, [r0, #4]
	log_data.start_stop = 1u; /*button pressed*/
  424c30:	2301      	movs	r3, #1
  424c32:	7183      	strb	r3, [r0, #6]
	 NOR_Flash_Log_Data(&log_data);
  424c34:	4b08      	ldr	r3, [pc, #32]	; (424c58 <FireRly_Rst_For_Vehicle_Strt+0x48>)
  424c36:	4798      	blx	r3
  424c38:	bd08      	pop	{r3, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  424c3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  424c3e:	4b03      	ldr	r3, [pc, #12]	; (424c4c <FireRly_Rst_For_Vehicle_Strt+0x3c>)
  424c40:	631a      	str	r2, [r3, #48]	; 0x30
  424c42:	e7f0      	b.n	424c26 <FireRly_Rst_For_Vehicle_Strt+0x16>
  424c44:	20001358 	.word	0x20001358
  424c48:	20001588 	.word	0x20001588
  424c4c:	400e0e00 	.word	0x400e0e00
  424c50:	004249a5 	.word	0x004249a5
  424c54:	20000098 	.word	0x20000098
  424c58:	00424729 	.word	0x00424729

00424c5c <System_Reset_Button>:
{
  424c5c:	b510      	push	{r4, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  424c5e:	4b40      	ldr	r3, [pc, #256]	; (424d60 <System_Reset_Button+0x104>)
  424c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
if(!ioport_get_pin_level(SYS_RESET_SW_PIN))
  424c62:	f013 0f02 	tst.w	r3, #2
  424c66:	d15e      	bne.n	424d26 <System_Reset_Button+0xca>
	if((count_1ms - system_reset_prev_tick_g_u32) >= SEC_2)
  424c68:	4b3e      	ldr	r3, [pc, #248]	; (424d64 <System_Reset_Button+0x108>)
  424c6a:	681b      	ldr	r3, [r3, #0]
  424c6c:	4a3e      	ldr	r2, [pc, #248]	; (424d68 <System_Reset_Button+0x10c>)
  424c6e:	6812      	ldr	r2, [r2, #0]
  424c70:	1a9b      	subs	r3, r3, r2
  424c72:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  424c76:	d348      	bcc.n	424d0a <System_Reset_Button+0xae>
		if((!hd1_trouble_g_u8) && (!hd2_trouble_g_u8) && (fire_happen_g_b))// && (manual_sw_trbl_g_b))
  424c78:	4b3c      	ldr	r3, [pc, #240]	; (424d6c <System_Reset_Button+0x110>)
  424c7a:	781b      	ldrb	r3, [r3, #0]
  424c7c:	2b00      	cmp	r3, #0
  424c7e:	d15b      	bne.n	424d38 <System_Reset_Button+0xdc>
  424c80:	4b3b      	ldr	r3, [pc, #236]	; (424d70 <System_Reset_Button+0x114>)
  424c82:	781b      	ldrb	r3, [r3, #0]
  424c84:	2b00      	cmp	r3, #0
  424c86:	d157      	bne.n	424d38 <System_Reset_Button+0xdc>
  424c88:	4b3a      	ldr	r3, [pc, #232]	; (424d74 <System_Reset_Button+0x118>)
  424c8a:	781b      	ldrb	r3, [r3, #0]
  424c8c:	2b00      	cmp	r3, #0
  424c8e:	d053      	beq.n	424d38 <System_Reset_Button+0xdc>
			Fire_Rst_vehicle_start_bit = 0u;
  424c90:	2400      	movs	r4, #0
  424c92:	4b39      	ldr	r3, [pc, #228]	; (424d78 <System_Reset_Button+0x11c>)
  424c94:	701c      	strb	r4, [r3, #0]
			fire_rly_en_vehicle_start_bit = 0u;
  424c96:	4b39      	ldr	r3, [pc, #228]	; (424d7c <System_Reset_Button+0x120>)
  424c98:	701c      	strb	r4, [r3, #0]
			Buzzer_Beep(ON);
  424c9a:	2001      	movs	r0, #1
  424c9c:	4b38      	ldr	r3, [pc, #224]	; (424d80 <System_Reset_Button+0x124>)
  424c9e:	4798      	blx	r3
			fire_happen_g_b = NO_FIRE;
  424ca0:	4b34      	ldr	r3, [pc, #208]	; (424d74 <System_Reset_Button+0x118>)
  424ca2:	701c      	strb	r4, [r3, #0]
			fire_happen_safety_g_b = NO_FIRE;
  424ca4:	4b37      	ldr	r3, [pc, #220]	; (424d84 <System_Reset_Button+0x128>)
  424ca6:	701c      	strb	r4, [r3, #0]
			pulse_flag_g_b = 0u;
  424ca8:	4b37      	ldr	r3, [pc, #220]	; (424d88 <System_Reset_Button+0x12c>)
  424caa:	701c      	strb	r4, [r3, #0]
			alarm_sil_flag_g_b = 0u;
  424cac:	4b37      	ldr	r3, [pc, #220]	; (424d8c <System_Reset_Button+0x130>)
  424cae:	701c      	strb	r4, [r3, #0]
			 tc_stop(TC0,0);
  424cb0:	4621      	mov	r1, r4
  424cb2:	4837      	ldr	r0, [pc, #220]	; (424d90 <System_Reset_Button+0x134>)
  424cb4:	4b37      	ldr	r3, [pc, #220]	; (424d94 <System_Reset_Button+0x138>)
  424cb6:	4798      	blx	r3
			Timer_cnt_msec= 0u;
  424cb8:	4b37      	ldr	r3, [pc, #220]	; (424d98 <System_Reset_Button+0x13c>)
  424cba:	701c      	strb	r4, [r3, #0]
			Timer_cnt_sec= 0u;
  424cbc:	4b37      	ldr	r3, [pc, #220]	; (424d9c <System_Reset_Button+0x140>)
  424cbe:	701c      	strb	r4, [r3, #0]
			hd1_fire_sl_b = 0u;
  424cc0:	4b37      	ldr	r3, [pc, #220]	; (424da0 <System_Reset_Button+0x144>)
  424cc2:	701c      	strb	r4, [r3, #0]
			hd2_fire_sl_b = 0u;
  424cc4:	4b37      	ldr	r3, [pc, #220]	; (424da4 <System_Reset_Button+0x148>)
  424cc6:	701c      	strb	r4, [r3, #0]
			manual_sw_trbl_silence_b =0u;
  424cc8:	4b37      	ldr	r3, [pc, #220]	; (424da8 <System_Reset_Button+0x14c>)
  424cca:	701c      	strb	r4, [r3, #0]
			ioport_set_pin_level(RELAY_B,amerex_config_data.Default_fire_rly_level);
  424ccc:	4b37      	ldr	r3, [pc, #220]	; (424dac <System_Reset_Button+0x150>)
	if (level) {
  424cce:	7b9b      	ldrb	r3, [r3, #14]
  424cd0:	b1b3      	cbz	r3, 424d00 <System_Reset_Button+0xa4>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  424cd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  424cd6:	4b22      	ldr	r3, [pc, #136]	; (424d60 <System_Reset_Button+0x104>)
  424cd8:	631a      	str	r2, [r3, #48]	; 0x30
			Fire_LED(OFF);
  424cda:	2000      	movs	r0, #0
  424cdc:	4b34      	ldr	r3, [pc, #208]	; (424db0 <System_Reset_Button+0x154>)
  424cde:	4798      	blx	r3
			Delay(25);
  424ce0:	2019      	movs	r0, #25
  424ce2:	4b34      	ldr	r3, [pc, #208]	; (424db4 <System_Reset_Button+0x158>)
  424ce4:	4798      	blx	r3
			Buzzer_Beep(OFF);
  424ce6:	2000      	movs	r0, #0
  424ce8:	4b25      	ldr	r3, [pc, #148]	; (424d80 <System_Reset_Button+0x124>)
  424cea:	4798      	blx	r3
			Reset_Values();
  424cec:	4b32      	ldr	r3, [pc, #200]	; (424db8 <System_Reset_Button+0x15c>)
  424cee:	4798      	blx	r3
			log_data.log_code = 9u; /*Indicating system reset button pressed*/
  424cf0:	4832      	ldr	r0, [pc, #200]	; (424dbc <System_Reset_Button+0x160>)
  424cf2:	2309      	movs	r3, #9
  424cf4:	7103      	strb	r3, [r0, #4]
			log_data.start_stop = 1u; /*button pressed*/
  424cf6:	2301      	movs	r3, #1
  424cf8:	7183      	strb	r3, [r0, #6]
			NOR_Flash_Log_Data(&log_data);
  424cfa:	4b31      	ldr	r3, [pc, #196]	; (424dc0 <System_Reset_Button+0x164>)
  424cfc:	4798      	blx	r3
  424cfe:	bd10      	pop	{r4, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  424d00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  424d04:	4b16      	ldr	r3, [pc, #88]	; (424d60 <System_Reset_Button+0x104>)
  424d06:	635a      	str	r2, [r3, #52]	; 0x34
  424d08:	e7e7      	b.n	424cda <System_Reset_Button+0x7e>
	else if ( fire_happen_g_b ==1 && Fire_Rst_vehicle_start_bit ==0 )
  424d0a:	4b1a      	ldr	r3, [pc, #104]	; (424d74 <System_Reset_Button+0x118>)
  424d0c:	781b      	ldrb	r3, [r3, #0]
  424d0e:	b19b      	cbz	r3, 424d38 <System_Reset_Button+0xdc>
  424d10:	4b19      	ldr	r3, [pc, #100]	; (424d78 <System_Reset_Button+0x11c>)
  424d12:	781b      	ldrb	r3, [r3, #0]
  424d14:	b983      	cbnz	r3, 424d38 <System_Reset_Button+0xdc>
		fireRST_prev_tick_g_u32 = count_1ms;
  424d16:	4b13      	ldr	r3, [pc, #76]	; (424d64 <System_Reset_Button+0x108>)
  424d18:	681a      	ldr	r2, [r3, #0]
  424d1a:	4b2a      	ldr	r3, [pc, #168]	; (424dc4 <System_Reset_Button+0x168>)
  424d1c:	601a      	str	r2, [r3, #0]
		Fire_Rst_vehicle_start_bit = 1u;
  424d1e:	2201      	movs	r2, #1
  424d20:	4b15      	ldr	r3, [pc, #84]	; (424d78 <System_Reset_Button+0x11c>)
  424d22:	701a      	strb	r2, [r3, #0]
  424d24:	bd10      	pop	{r4, pc}
	system_reset_prev_tick_g_u32 =  count_1ms;
  424d26:	4b0f      	ldr	r3, [pc, #60]	; (424d64 <System_Reset_Button+0x108>)
  424d28:	681a      	ldr	r2, [r3, #0]
  424d2a:	4b0f      	ldr	r3, [pc, #60]	; (424d68 <System_Reset_Button+0x10c>)
  424d2c:	601a      	str	r2, [r3, #0]
	if (Fire_Rst_vehicle_start_bit == 1u)
  424d2e:	4b12      	ldr	r3, [pc, #72]	; (424d78 <System_Reset_Button+0x11c>)
  424d30:	781b      	ldrb	r3, [r3, #0]
  424d32:	b2db      	uxtb	r3, r3
  424d34:	2b01      	cmp	r3, #1
  424d36:	d000      	beq.n	424d3a <System_Reset_Button+0xde>
  424d38:	bd10      	pop	{r4, pc}
		fireRST_prev_tick_g_u32 = count_1ms - fireRST_prev_tick_g_u32;
  424d3a:	4b0a      	ldr	r3, [pc, #40]	; (424d64 <System_Reset_Button+0x108>)
  424d3c:	681b      	ldr	r3, [r3, #0]
  424d3e:	4a21      	ldr	r2, [pc, #132]	; (424dc4 <System_Reset_Button+0x168>)
  424d40:	6811      	ldr	r1, [r2, #0]
  424d42:	1a5b      	subs	r3, r3, r1
  424d44:	6013      	str	r3, [r2, #0]
			(fireRST_prev_tick_g_u32 >= 50u && fireRST_prev_tick_g_u32 <= 1500u)?(FireRly_Rst_For_Vehicle_Strt()):(Fire_Rst_vehicle_start_bit = 0);
  424d46:	3b32      	subs	r3, #50	; 0x32
  424d48:	f240 52aa 	movw	r2, #1450	; 0x5aa
  424d4c:	4293      	cmp	r3, r2
  424d4e:	d903      	bls.n	424d58 <System_Reset_Button+0xfc>
  424d50:	2200      	movs	r2, #0
  424d52:	4b09      	ldr	r3, [pc, #36]	; (424d78 <System_Reset_Button+0x11c>)
  424d54:	701a      	strb	r2, [r3, #0]
}
  424d56:	e7ef      	b.n	424d38 <System_Reset_Button+0xdc>
			(fireRST_prev_tick_g_u32 >= 50u && fireRST_prev_tick_g_u32 <= 1500u)?(FireRly_Rst_For_Vehicle_Strt()):(Fire_Rst_vehicle_start_bit = 0);
  424d58:	4b1b      	ldr	r3, [pc, #108]	; (424dc8 <System_Reset_Button+0x16c>)
  424d5a:	4798      	blx	r3
  424d5c:	bd10      	pop	{r4, pc}
  424d5e:	bf00      	nop
  424d60:	400e0e00 	.word	0x400e0e00
  424d64:	200012f8 	.word	0x200012f8
  424d68:	2000137c 	.word	0x2000137c
  424d6c:	20000b0c 	.word	0x20000b0c
  424d70:	20000b10 	.word	0x20000b10
  424d74:	20000b08 	.word	0x20000b08
  424d78:	20001358 	.word	0x20001358
  424d7c:	20001368 	.word	0x20001368
  424d80:	00422015 	.word	0x00422015
  424d84:	20000b09 	.word	0x20000b09
  424d88:	200010e0 	.word	0x200010e0
  424d8c:	20001360 	.word	0x20001360
  424d90:	40090000 	.word	0x40090000
  424d94:	00421b1f 	.word	0x00421b1f
  424d98:	200012f3 	.word	0x200012f3
  424d9c:	200012f4 	.word	0x200012f4
  424da0:	20001091 	.word	0x20001091
  424da4:	20001092 	.word	0x20001092
  424da8:	20001372 	.word	0x20001372
  424dac:	20001588 	.word	0x20001588
  424db0:	004241a1 	.word	0x004241a1
  424db4:	0042527d 	.word	0x0042527d
  424db8:	004249a5 	.word	0x004249a5
  424dbc:	20000098 	.word	0x20000098
  424dc0:	00424729 	.word	0x00424729
  424dc4:	20001364 	.word	0x20001364
  424dc8:	00424c11 	.word	0x00424c11

00424dcc <Fire_Switch_Log>:
/* Function : Log the manual switch closed time
 * Parameter: Start / Stop
 * Return   : None
 */
void Fire_Switch_Log(uint32_t log_status)
{
  424dcc:	b510      	push	{r4, lr}
  424dce:	4604      	mov	r4, r0
    Reset_Values();
  424dd0:	4b04      	ldr	r3, [pc, #16]	; (424de4 <Fire_Switch_Log+0x18>)
  424dd2:	4798      	blx	r3

    log_data.log_code = MANUAL_SW_3_FLASH;
  424dd4:	4804      	ldr	r0, [pc, #16]	; (424de8 <Fire_Switch_Log+0x1c>)
  424dd6:	2303      	movs	r3, #3
  424dd8:	7103      	strb	r3, [r0, #4]

    log_data.start_stop = log_status;
  424dda:	7184      	strb	r4, [r0, #6]

  //  log_data.trouble_fire = MANUAL_SW_3_FLASH; /*assign pressure switch trouble code*/

    NOR_Flash_Log_Data(&log_data);
  424ddc:	4b03      	ldr	r3, [pc, #12]	; (424dec <Fire_Switch_Log+0x20>)
  424dde:	4798      	blx	r3
  424de0:	bd10      	pop	{r4, pc}
  424de2:	bf00      	nop
  424de4:	004249a5 	.word	0x004249a5
  424de8:	20000098 	.word	0x20000098
  424dec:	00424729 	.word	0x00424729

00424df0 <Fire_Switch>:
{
  424df0:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  424df2:	4b28      	ldr	r3, [pc, #160]	; (424e94 <Fire_Switch+0xa4>)
  424df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(!ioport_get_pin_level(Fire_input))
  424df6:	f013 0f20 	tst.w	r3, #32
  424dfa:	d127      	bne.n	424e4c <Fire_Switch+0x5c>
						Get_New_trouble = MANUAL_SW_3_FLASH;
  424dfc:	2203      	movs	r2, #3
  424dfe:	4b26      	ldr	r3, [pc, #152]	; (424e98 <Fire_Switch+0xa8>)
  424e00:	701a      	strb	r2, [r3, #0]
						if(!man_sw_reset_state_g_b) /* if manual fire switch closed while system power ON or after fire happened break the loop*/
  424e02:	4b26      	ldr	r3, [pc, #152]	; (424e9c <Fire_Switch+0xac>)
  424e04:	781b      	ldrb	r3, [r3, #0]
  424e06:	b143      	cbz	r3, 424e1a <Fire_Switch+0x2a>
						else if((count_1ms - fire_sw_prev_tick_g_u32) > __500ms)
  424e08:	4b25      	ldr	r3, [pc, #148]	; (424ea0 <Fire_Switch+0xb0>)
  424e0a:	681b      	ldr	r3, [r3, #0]
  424e0c:	4a25      	ldr	r2, [pc, #148]	; (424ea4 <Fire_Switch+0xb4>)
  424e0e:	6812      	ldr	r2, [r2, #0]
  424e10:	1a9b      	subs	r3, r3, r2
  424e12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  424e16:	d806      	bhi.n	424e26 <Fire_Switch+0x36>
  424e18:	bd08      	pop	{r3, pc}
							manual_sw_trbl_silence_b =1u;
  424e1a:	2301      	movs	r3, #1
  424e1c:	4a22      	ldr	r2, [pc, #136]	; (424ea8 <Fire_Switch+0xb8>)
  424e1e:	7013      	strb	r3, [r2, #0]
							manual_sw_trbl_g_b = TROUBLE;
  424e20:	4a22      	ldr	r2, [pc, #136]	; (424eac <Fire_Switch+0xbc>)
  424e22:	7013      	strb	r3, [r2, #0]
  424e24:	bd08      	pop	{r3, pc}
							fire_sw_prev_tick_g_u32 = count_1ms;
  424e26:	4b1e      	ldr	r3, [pc, #120]	; (424ea0 <Fire_Switch+0xb0>)
  424e28:	681a      	ldr	r2, [r3, #0]
  424e2a:	4b1e      	ldr	r3, [pc, #120]	; (424ea4 <Fire_Switch+0xb4>)
  424e2c:	601a      	str	r2, [r3, #0]
							man_sw_reset_state_g_b = 0u;
  424e2e:	2200      	movs	r2, #0
  424e30:	4b1a      	ldr	r3, [pc, #104]	; (424e9c <Fire_Switch+0xac>)
  424e32:	701a      	strb	r2, [r3, #0]
							fire_happen_g_b = FIRE;
  424e34:	2001      	movs	r0, #1
  424e36:	4b1e      	ldr	r3, [pc, #120]	; (424eb0 <Fire_Switch+0xc0>)
  424e38:	7018      	strb	r0, [r3, #0]
							fire_happen_safety_g_b = FIRE;
  424e3a:	4b1e      	ldr	r3, [pc, #120]	; (424eb4 <Fire_Switch+0xc4>)
  424e3c:	7018      	strb	r0, [r3, #0]
							manual_sw_trbl_g_b = TROUBLE;
  424e3e:	4b1b      	ldr	r3, [pc, #108]	; (424eac <Fire_Switch+0xbc>)
  424e40:	7018      	strb	r0, [r3, #0]
							manual_sw_trbl_silence_b =1u;
  424e42:	4b19      	ldr	r3, [pc, #100]	; (424ea8 <Fire_Switch+0xb8>)
  424e44:	7018      	strb	r0, [r3, #0]
							Fire_Switch_Log(1u); /*value 1 indicate the manual actuation switch was closed*/
  424e46:	4b1c      	ldr	r3, [pc, #112]	; (424eb8 <Fire_Switch+0xc8>)
  424e48:	4798      	blx	r3
  424e4a:	bd08      	pop	{r3, pc}
		fire_sw_prev_tick_g_u32 =  count_1ms;
  424e4c:	4b14      	ldr	r3, [pc, #80]	; (424ea0 <Fire_Switch+0xb0>)
  424e4e:	681a      	ldr	r2, [r3, #0]
  424e50:	4b14      	ldr	r3, [pc, #80]	; (424ea4 <Fire_Switch+0xb4>)
  424e52:	601a      	str	r2, [r3, #0]
		if(!man_sw_reset_state_g_b)
  424e54:	4b11      	ldr	r3, [pc, #68]	; (424e9c <Fire_Switch+0xac>)
  424e56:	781b      	ldrb	r3, [r3, #0]
  424e58:	2b00      	cmp	r3, #0
  424e5a:	d1dd      	bne.n	424e18 <Fire_Switch+0x28>
			sw_rel_count_sl_u8++;
  424e5c:	4b17      	ldr	r3, [pc, #92]	; (424ebc <Fire_Switch+0xcc>)
  424e5e:	781b      	ldrb	r3, [r3, #0]
  424e60:	3301      	adds	r3, #1
  424e62:	b2db      	uxtb	r3, r3
			if(sw_rel_count_sl_u8 > 200u)
  424e64:	2bc8      	cmp	r3, #200	; 0xc8
  424e66:	d90e      	bls.n	424e86 <Fire_Switch+0x96>
				sw_rel_count_sl_u8 = 0u;
  424e68:	2300      	movs	r3, #0
  424e6a:	4a14      	ldr	r2, [pc, #80]	; (424ebc <Fire_Switch+0xcc>)
  424e6c:	7013      	strb	r3, [r2, #0]
				man_sw_reset_state_g_b = 1u;
  424e6e:	2101      	movs	r1, #1
  424e70:	4a0a      	ldr	r2, [pc, #40]	; (424e9c <Fire_Switch+0xac>)
  424e72:	7011      	strb	r1, [r2, #0]
				manual_sw_trbl_g_b = NO_TROUBLE;
  424e74:	4a0d      	ldr	r2, [pc, #52]	; (424eac <Fire_Switch+0xbc>)
  424e76:	7013      	strb	r3, [r2, #0]
				if(!system_reset_sl_b)
  424e78:	4b11      	ldr	r3, [pc, #68]	; (424ec0 <Fire_Switch+0xd0>)
  424e7a:	781b      	ldrb	r3, [r3, #0]
  424e7c:	b133      	cbz	r3, 424e8c <Fire_Switch+0x9c>
				system_reset_sl_b = 0u;
  424e7e:	2200      	movs	r2, #0
  424e80:	4b0f      	ldr	r3, [pc, #60]	; (424ec0 <Fire_Switch+0xd0>)
  424e82:	701a      	strb	r2, [r3, #0]
}
  424e84:	e7c8      	b.n	424e18 <Fire_Switch+0x28>
			sw_rel_count_sl_u8++;
  424e86:	4a0d      	ldr	r2, [pc, #52]	; (424ebc <Fire_Switch+0xcc>)
  424e88:	7013      	strb	r3, [r2, #0]
  424e8a:	bd08      	pop	{r3, pc}
					Fire_Switch_Log(0u); /*value 0 indicate the manual actuation switch was change to normal state*/
  424e8c:	2000      	movs	r0, #0
  424e8e:	4b0a      	ldr	r3, [pc, #40]	; (424eb8 <Fire_Switch+0xc8>)
  424e90:	4798      	blx	r3
  424e92:	e7f4      	b.n	424e7e <Fire_Switch+0x8e>
  424e94:	400e0e00 	.word	0x400e0e00
  424e98:	20001088 	.word	0x20001088
  424e9c:	20001370 	.word	0x20001370
  424ea0:	200012f8 	.word	0x200012f8
  424ea4:	2000136c 	.word	0x2000136c
  424ea8:	20001372 	.word	0x20001372
  424eac:	20001371 	.word	0x20001371
  424eb0:	20000b08 	.word	0x20000b08
  424eb4:	20000b09 	.word	0x20000b09
  424eb8:	00424dcd 	.word	0x00424dcd
  424ebc:	20001379 	.word	0x20001379
  424ec0:	200000c0 	.word	0x200000c0

00424ec4 <Enter_DFU_mode>:
  424ec4:	4b49      	ldr	r3, [pc, #292]	; (424fec <Enter_DFU_mode+0x128>)
  424ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}

void Enter_DFU_mode()
{

	if(( !ioport_get_pin_level(SYS_RESET_SW_PIN)) && (!ioport_get_pin_level(TEST_SW_PIN)))
  424ec8:	f013 0f02 	tst.w	r3, #2
  424ecc:	d104      	bne.n	424ed8 <Enter_DFU_mode+0x14>
  424ece:	4b47      	ldr	r3, [pc, #284]	; (424fec <Enter_DFU_mode+0x128>)
  424ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  424ed2:	f013 0f01 	tst.w	r3, #1
  424ed6:	d004      	beq.n	424ee2 <Enter_DFU_mode+0x1e>
		}
	}

	else
	{
		UpdateDFU_tick_g_u32 =  count_1ms;
  424ed8:	4b45      	ldr	r3, [pc, #276]	; (424ff0 <Enter_DFU_mode+0x12c>)
  424eda:	681a      	ldr	r2, [r3, #0]
  424edc:	4b45      	ldr	r3, [pc, #276]	; (424ff4 <Enter_DFU_mode+0x130>)
  424ede:	601a      	str	r2, [r3, #0]
	}

}
  424ee0:	4770      	bx	lr
{
  424ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		wdt_restart(WDT);
  424ee6:	4844      	ldr	r0, [pc, #272]	; (424ff8 <Enter_DFU_mode+0x134>)
  424ee8:	4b44      	ldr	r3, [pc, #272]	; (424ffc <Enter_DFU_mode+0x138>)
  424eea:	4798      	blx	r3
		if((count_1ms - UpdateDFU_tick_g_u32) >= SEC_3)
  424eec:	4b40      	ldr	r3, [pc, #256]	; (424ff0 <Enter_DFU_mode+0x12c>)
  424eee:	681b      	ldr	r3, [r3, #0]
  424ef0:	4a40      	ldr	r2, [pc, #256]	; (424ff4 <Enter_DFU_mode+0x130>)
  424ef2:	6812      	ldr	r2, [r2, #0]
  424ef4:	1a9b      	subs	r3, r3, r2
  424ef6:	f640 32b7 	movw	r2, #2999	; 0xbb7
  424efa:	4293      	cmp	r3, r2
  424efc:	d974      	bls.n	424fe8 <Enter_DFU_mode+0x124>
			ota_start =1;
  424efe:	2201      	movs	r2, #1
  424f00:	4b3f      	ldr	r3, [pc, #252]	; (425000 <Enter_DFU_mode+0x13c>)
  424f02:	701a      	strb	r2, [r3, #0]
			reset_mailbox_conf(&tx_mailbox);
  424f04:	4c3f      	ldr	r4, [pc, #252]	; (425004 <Enter_DFU_mode+0x140>)
  424f06:	4620      	mov	r0, r4
  424f08:	4b3f      	ldr	r3, [pc, #252]	; (425008 <Enter_DFU_mode+0x144>)
  424f0a:	4798      	blx	r3
	 					tx_mailbox.ul_mb_idx = CAN_COMM_TXMB_ID;
  424f0c:	2305      	movs	r3, #5
  424f0e:	6023      	str	r3, [r4, #0]
	 					tx_mailbox.uc_obj_type = CAN_MB_TX_MODE;
  424f10:	2303      	movs	r3, #3
  424f12:	7123      	strb	r3, [r4, #4]
	 					tx_mailbox.uc_tx_prio = CAN_TX_PRIO;
  424f14:	230f      	movs	r3, #15
  424f16:	71e3      	strb	r3, [r4, #7]
	 					tx_mailbox.uc_id_ver = 0;
  424f18:	2500      	movs	r5, #0
  424f1a:	7165      	strb	r5, [r4, #5]
	 					tx_mailbox.ul_id_msk = 0;
  424f1c:	60e5      	str	r5, [r4, #12]
	 					can_mailbox_init(CAN0, &tx_mailbox);
  424f1e:	4621      	mov	r1, r4
  424f20:	483a      	ldr	r0, [pc, #232]	; (42500c <Enter_DFU_mode+0x148>)
  424f22:	4b3b      	ldr	r3, [pc, #236]	; (425010 <Enter_DFU_mode+0x14c>)
  424f24:	4798      	blx	r3
			SysNormal_LED(OFF);
  424f26:	4628      	mov	r0, r5
  424f28:	4b3a      	ldr	r3, [pc, #232]	; (425014 <Enter_DFU_mode+0x150>)
  424f2a:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  424f2c:	4b3a      	ldr	r3, [pc, #232]	; (425018 <Enter_DFU_mode+0x154>)
  424f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  424f32:	635a      	str	r2, [r3, #52]	; 0x34
  424f34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  424f38:	635a      	str	r2, [r3, #52]	; 0x34
  424f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  424f3e:	635a      	str	r2, [r3, #52]	; 0x34
  424f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
  424f44:	635a      	str	r2, [r3, #52]	; 0x34
  424f46:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  424f4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  424f4e:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  424f50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  424f54:	631a      	str	r2, [r3, #48]	; 0x30
			DFU_auto_exit_prev_tick_g_u32 = count_1ms;
  424f56:	4b26      	ldr	r3, [pc, #152]	; (424ff0 <Enter_DFU_mode+0x12c>)
  424f58:	681a      	ldr	r2, [r3, #0]
  424f5a:	4b30      	ldr	r3, [pc, #192]	; (42501c <Enter_DFU_mode+0x158>)
  424f5c:	601a      	str	r2, [r3, #0]
			printf("enter CAN_DFU \r\n");
  424f5e:	4830      	ldr	r0, [pc, #192]	; (425020 <Enter_DFU_mode+0x15c>)
  424f60:	4b30      	ldr	r3, [pc, #192]	; (425024 <Enter_DFU_mode+0x160>)
  424f62:	4798      	blx	r3
			wdt_restart(WDT);
  424f64:	4e24      	ldr	r6, [pc, #144]	; (424ff8 <Enter_DFU_mode+0x134>)
  424f66:	4f21      	ldr	r7, [pc, #132]	; (424fec <Enter_DFU_mode+0x128>)
			rstc_start_software_reset(RSTC);
  424f68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 42503c <Enter_DFU_mode+0x178>
			wdt_restart(WDT);
  424f6c:	4d23      	ldr	r5, [pc, #140]	; (424ffc <Enter_DFU_mode+0x138>)
			if (g_ul_recv_status == 1u)
  424f6e:	4c2e      	ldr	r4, [pc, #184]	; (425028 <Enter_DFU_mode+0x164>)
  424f70:	e002      	b.n	424f78 <Enter_DFU_mode+0xb4>
  424f72:	6823      	ldr	r3, [r4, #0]
  424f74:	2b01      	cmp	r3, #1
  424f76:	d02f      	beq.n	424fd8 <Enter_DFU_mode+0x114>
			wdt_restart(WDT);
  424f78:	4630      	mov	r0, r6
  424f7a:	47a8      	blx	r5
			if((count_1ms - DFU_auto_exit_prev_tick_g_u32) > 10000ul ) //__20_SEC  __20_SEC
  424f7c:	4b1c      	ldr	r3, [pc, #112]	; (424ff0 <Enter_DFU_mode+0x12c>)
  424f7e:	681b      	ldr	r3, [r3, #0]
  424f80:	4a26      	ldr	r2, [pc, #152]	; (42501c <Enter_DFU_mode+0x158>)
  424f82:	6812      	ldr	r2, [r2, #0]
  424f84:	1a9b      	subs	r3, r3, r2
  424f86:	f242 7210 	movw	r2, #10000	; 0x2710
  424f8a:	4293      	cmp	r3, r2
  424f8c:	d9f1      	bls.n	424f72 <Enter_DFU_mode+0xae>
  424f8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  424f92:	633b      	str	r3, [r7, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  424f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  424f98:	637b      	str	r3, [r7, #52]	; 0x34
			printf("DFU_auto_exit \r\n");
  424f9a:	4824      	ldr	r0, [pc, #144]	; (42502c <Enter_DFU_mode+0x168>)
  424f9c:	4b21      	ldr	r3, [pc, #132]	; (425024 <Enter_DFU_mode+0x160>)
  424f9e:	4798      	blx	r3
			Small_Beep(100u);
  424fa0:	2064      	movs	r0, #100	; 0x64
  424fa2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 425040 <Enter_DFU_mode+0x17c>
  424fa6:	47d0      	blx	sl
			Delay(1000u);
  424fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  424fac:	f8df 9094 	ldr.w	r9, [pc, #148]	; 425044 <Enter_DFU_mode+0x180>
  424fb0:	47c8      	blx	r9
			Small_Beep(100u);
  424fb2:	2064      	movs	r0, #100	; 0x64
  424fb4:	47d0      	blx	sl
			Delay(1000u);
  424fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  424fba:	47c8      	blx	r9
			Small_Beep(100u);
  424fbc:	2064      	movs	r0, #100	; 0x64
  424fbe:	47d0      	blx	sl
			Delay(1000u);
  424fc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  424fc4:	47c8      	blx	r9
			Small_Beep(100u);
  424fc6:	2064      	movs	r0, #100	; 0x64
  424fc8:	47d0      	blx	sl
			Delay(1000u);
  424fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  424fce:	47c8      	blx	r9
			rstc_start_software_reset(RSTC);
  424fd0:	4640      	mov	r0, r8
  424fd2:	4b17      	ldr	r3, [pc, #92]	; (425030 <Enter_DFU_mode+0x16c>)
  424fd4:	4798      	blx	r3
  424fd6:	e7cc      	b.n	424f72 <Enter_DFU_mode+0xae>
			wdt_restart(WDT);
  424fd8:	4630      	mov	r0, r6
  424fda:	47a8      	blx	r5
			DFU_callback_Fun(&rx_mailbox);
  424fdc:	4815      	ldr	r0, [pc, #84]	; (425034 <Enter_DFU_mode+0x170>)
  424fde:	4b16      	ldr	r3, [pc, #88]	; (425038 <Enter_DFU_mode+0x174>)
  424fe0:	4798      	blx	r3
			g_ul_recv_status =0;
  424fe2:	2300      	movs	r3, #0
  424fe4:	6023      	str	r3, [r4, #0]
  424fe6:	e7c7      	b.n	424f78 <Enter_DFU_mode+0xb4>
  424fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  424fec:	400e0e00 	.word	0x400e0e00
  424ff0:	200012f8 	.word	0x200012f8
  424ff4:	2000135c 	.word	0x2000135c
  424ff8:	400e1850 	.word	0x400e1850
  424ffc:	00421da5 	.word	0x00421da5
  425000:	2000131c 	.word	0x2000131c
  425004:	20001644 	.word	0x20001644
  425008:	00422231 	.word	0x00422231
  42500c:	40010000 	.word	0x40010000
  425010:	004216b7 	.word	0x004216b7
  425014:	00423d9d 	.word	0x00423d9d
  425018:	400e1000 	.word	0x400e1000
  42501c:	20001354 	.word	0x20001354
  425020:	0042f5dc 	.word	0x0042f5dc
  425024:	00426851 	.word	0x00426851
  425028:	20001318 	.word	0x20001318
  42502c:	0042f5f0 	.word	0x0042f5f0
  425030:	004219c1 	.word	0x004219c1
  425034:	20001678 	.word	0x20001678
  425038:	004236e1 	.word	0x004236e1
  42503c:	400e1800 	.word	0x400e1800
  425040:	00422211 	.word	0x00422211
  425044:	0042527d 	.word	0x0042527d

00425048 <Enter_Backup_mode>:



void Enter_Backup_mode()
{
  425048:	b508      	push	{r3, lr}
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  42504a:	4b13      	ldr	r3, [pc, #76]	; (425098 <Enter_Backup_mode+0x50>)
  42504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	 if(( !ioport_get_pin_level(ALARM_SILEN_PIN)) && (!ioport_get_pin_level(TEST_SW_PIN)) && pri_pwr_trouble_g_b == TROUBLE)
  42504e:	f013 0f04 	tst.w	r3, #4
  425052:	d11b      	bne.n	42508c <Enter_Backup_mode+0x44>
  425054:	4b10      	ldr	r3, [pc, #64]	; (425098 <Enter_Backup_mode+0x50>)
  425056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  425058:	f013 0f01 	tst.w	r3, #1
  42505c:	d116      	bne.n	42508c <Enter_Backup_mode+0x44>
  42505e:	4b0f      	ldr	r3, [pc, #60]	; (42509c <Enter_Backup_mode+0x54>)
  425060:	781b      	ldrb	r3, [r3, #0]
  425062:	b19b      	cbz	r3, 42508c <Enter_Backup_mode+0x44>
	 {
		        if((count_1ms - system_shutdown_tick_g_u32) >= SEC_2)
  425064:	4b0e      	ldr	r3, [pc, #56]	; (4250a0 <Enter_Backup_mode+0x58>)
  425066:	681b      	ldr	r3, [r3, #0]
  425068:	4a0e      	ldr	r2, [pc, #56]	; (4250a4 <Enter_Backup_mode+0x5c>)
  42506a:	6812      	ldr	r2, [r2, #0]
  42506c:	1a9b      	subs	r3, r3, r2
  42506e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  425072:	d30f      	bcc.n	425094 <Enter_Backup_mode+0x4c>
		        {


					Reset_Values();
  425074:	4b0c      	ldr	r3, [pc, #48]	; (4250a8 <Enter_Backup_mode+0x60>)
  425076:	4798      	blx	r3
					log_data.log_code = 15u; /*Indicating system reset button pressed*/
  425078:	480c      	ldr	r0, [pc, #48]	; (4250ac <Enter_Backup_mode+0x64>)
  42507a:	230f      	movs	r3, #15
  42507c:	7103      	strb	r3, [r0, #4]
					//log_data.start_stop = 1u; /*button pressed*/
					NOR_Flash_Log_Data(&log_data);
  42507e:	4b0c      	ldr	r3, [pc, #48]	; (4250b0 <Enter_Backup_mode+0x68>)
  425080:	4798      	blx	r3
					windup_Music();
  425082:	4b0c      	ldr	r3, [pc, #48]	; (4250b4 <Enter_Backup_mode+0x6c>)
  425084:	4798      	blx	r3
					freq_test_backup_mode();
  425086:	4b0c      	ldr	r3, [pc, #48]	; (4250b8 <Enter_Backup_mode+0x70>)
  425088:	4798      	blx	r3
  42508a:	bd08      	pop	{r3, pc}
				}
 	 }
 	      else
	      {
		      system_shutdown_tick_g_u32 =  count_1ms;
  42508c:	4b04      	ldr	r3, [pc, #16]	; (4250a0 <Enter_Backup_mode+0x58>)
  42508e:	681a      	ldr	r2, [r3, #0]
  425090:	4b04      	ldr	r3, [pc, #16]	; (4250a4 <Enter_Backup_mode+0x5c>)
  425092:	601a      	str	r2, [r3, #0]
  425094:	bd08      	pop	{r3, pc}
  425096:	bf00      	nop
  425098:	400e0e00 	.word	0x400e0e00
  42509c:	20000b50 	.word	0x20000b50
  4250a0:	200012f8 	.word	0x200012f8
  4250a4:	20001380 	.word	0x20001380
  4250a8:	004249a5 	.word	0x004249a5
  4250ac:	20000098 	.word	0x20000098
  4250b0:	00424729 	.word	0x00424729
  4250b4:	00421f4d 	.word	0x00421f4d
  4250b8:	004262ed 	.word	0x004262ed

004250bc <Update_Master_Clock>:
	      }

}

void Update_Master_Clock(void)
{
  4250bc:	b510      	push	{r4, lr}
  4250be:	b084      	sub	sp, #16

	if( pri_pwr_trouble_g_b == TROUBLE && Master_Clock_bit == 0)
  4250c0:	4b42      	ldr	r3, [pc, #264]	; (4251cc <Update_Master_Clock+0x110>)
  4250c2:	781b      	ldrb	r3, [r3, #0]
  4250c4:	2b00      	cmp	r3, #0
  4250c6:	d047      	beq.n	425158 <Update_Master_Clock+0x9c>
  4250c8:	4b41      	ldr	r3, [pc, #260]	; (4251d0 <Update_Master_Clock+0x114>)
  4250ca:	781b      	ldrb	r3, [r3, #0]
  4250cc:	2b00      	cmp	r3, #0
  4250ce:	d177      	bne.n	4251c0 <Update_Master_Clock+0x104>
	{
		if((count_1ms - Clock_prev_tick_g_u32) >= 10u)//
  4250d0:	4b40      	ldr	r3, [pc, #256]	; (4251d4 <Update_Master_Clock+0x118>)
  4250d2:	681b      	ldr	r3, [r3, #0]
  4250d4:	4a40      	ldr	r2, [pc, #256]	; (4251d8 <Update_Master_Clock+0x11c>)
  4250d6:	6812      	ldr	r2, [r2, #0]
  4250d8:	1a9b      	subs	r3, r3, r2
  4250da:	2b09      	cmp	r3, #9
  4250dc:	d974      	bls.n	4251c8 <Update_Master_Clock+0x10c>
		{
			Master_Clock_bit = 1;
  4250de:	2301      	movs	r3, #1
  4250e0:	4a3b      	ldr	r2, [pc, #236]	; (4251d0 <Update_Master_Clock+0x114>)
  4250e2:	7013      	strb	r3, [r2, #0]
			Freq_selec_bit = 1;
  4250e4:	4a3d      	ldr	r2, [pc, #244]	; (4251dc <Update_Master_Clock+0x120>)
  4250e6:	7013      	strb	r3, [r2, #0]
			pmc_switch_mck_to_sclk(PMC_MCKR_PRES_CLK_1);
  4250e8:	2000      	movs	r0, #0
  4250ea:	4b3d      	ldr	r3, [pc, #244]	; (4251e0 <Update_Master_Clock+0x124>)
  4250ec:	4798      	blx	r3
			/* Switch mainck to fast RC */
			pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4250ee:	2010      	movs	r0, #16
  4250f0:	4b3c      	ldr	r3, [pc, #240]	; (4251e4 <Update_Master_Clock+0x128>)
  4250f2:	4798      	blx	r3
			pmc_switch_mainck_to_fastrc( CKGR_MOR_MOSCRCF_4_MHz);
  4250f4:	2000      	movs	r0, #0
  4250f6:	4b3c      	ldr	r3, [pc, #240]	; (4251e8 <Update_Master_Clock+0x12c>)
  4250f8:	4798      	blx	r3
			pmc_switch_mck_to_mainck(PMC_MCKR_PRES_CLK_1);
  4250fa:	2000      	movs	r0, #0
  4250fc:	4b3b      	ldr	r3, [pc, #236]	; (4251ec <Update_Master_Clock+0x130>)
  4250fe:	4798      	blx	r3
			while (!pmc_osc_is_ready_fastrc());        // wait until oscillator is ready
  425100:	4c3b      	ldr	r4, [pc, #236]	; (4251f0 <Update_Master_Clock+0x134>)
  425102:	47a0      	blx	r4
  425104:	2800      	cmp	r0, #0
  425106:	d0fc      	beq.n	425102 <Update_Master_Clock+0x46>
			pmc_osc_disable_xtal(0);
  425108:	2000      	movs	r0, #0
  42510a:	4b3a      	ldr	r3, [pc, #232]	; (4251f4 <Update_Master_Clock+0x138>)
  42510c:	4798      	blx	r3
 			pmc_disable_pllack();
  42510e:	4b3a      	ldr	r3, [pc, #232]	; (4251f8 <Update_Master_Clock+0x13c>)
  425110:	4798      	blx	r3
					#ifdef Debug_enable
					const sam_uart_opt_t uart_console_settings = {4000000UL, 19200UL,UART_MR_PAR_NO};
  425112:	4a3a      	ldr	r2, [pc, #232]	; (4251fc <Update_Master_Clock+0x140>)
  425114:	ab01      	add	r3, sp, #4
  425116:	ca07      	ldmia	r2, {r0, r1, r2}
  425118:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					uart_init(CONSOLE_UART, &uart_console_settings);
  42511c:	4619      	mov	r1, r3
  42511e:	4838      	ldr	r0, [pc, #224]	; (425200 <Update_Master_Clock+0x144>)
  425120:	4b38      	ldr	r3, [pc, #224]	; (425204 <Update_Master_Clock+0x148>)
  425122:	4798      	blx	r3
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  425124:	4b38      	ldr	r3, [pc, #224]	; (425208 <Update_Master_Clock+0x14c>)
  425126:	f640 729f 	movw	r2, #3999	; 0xf9f
  42512a:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  42512c:	21f0      	movs	r1, #240	; 0xf0
  42512e:	4a37      	ldr	r2, [pc, #220]	; (42520c <Update_Master_Clock+0x150>)
  425130:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  425134:	2200      	movs	r2, #0
  425136:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  425138:	2207      	movs	r2, #7
  42513a:	601a      	str	r2, [r3, #0]
					#endif
			SysTick_Config(4000UL);
			configure_i2c_master();
  42513c:	4b34      	ldr	r3, [pc, #208]	; (425210 <Update_Master_Clock+0x154>)
  42513e:	4798      	blx	r3
			adc_init();
  425140:	4b34      	ldr	r3, [pc, #208]	; (425214 <Update_Master_Clock+0x158>)
  425142:	4798      	blx	r3
			clock_setting.ul_mck =  4000000UL;
  425144:	4934      	ldr	r1, [pc, #208]	; (425218 <Update_Master_Clock+0x15c>)
  425146:	4b35      	ldr	r3, [pc, #212]	; (42521c <Update_Master_Clock+0x160>)
  425148:	608b      	str	r3, [r1, #8]
			clock_setting.ul_clkb =  PWM_VALUE_25_KHZ* PERIOD_VALUE;
  42514a:	4b35      	ldr	r3, [pc, #212]	; (425220 <Update_Master_Clock+0x164>)
  42514c:	604b      	str	r3, [r1, #4]
			pwm_init(PWM, &clock_setting);
  42514e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  425152:	4b34      	ldr	r3, [pc, #208]	; (425224 <Update_Master_Clock+0x168>)
  425154:	4798      	blx	r3
  425156:	e037      	b.n	4251c8 <Update_Master_Clock+0x10c>

				//Timer0_init();
 		}
	}

 	else if	( pri_pwr_trouble_g_b == NO_TROUBLE && Master_Clock_bit == 1)
  425158:	4b1d      	ldr	r3, [pc, #116]	; (4251d0 <Update_Master_Clock+0x114>)
  42515a:	781b      	ldrb	r3, [r3, #0]
  42515c:	2b00      	cmp	r3, #0
  42515e:	d02f      	beq.n	4251c0 <Update_Master_Clock+0x104>
      {
		  		if((count_1ms - Clock_prev_tick_g_u32) >= 10u)
  425160:	4b1c      	ldr	r3, [pc, #112]	; (4251d4 <Update_Master_Clock+0x118>)
  425162:	681b      	ldr	r3, [r3, #0]
  425164:	4a1c      	ldr	r2, [pc, #112]	; (4251d8 <Update_Master_Clock+0x11c>)
  425166:	6812      	ldr	r2, [r2, #0]
  425168:	1a9b      	subs	r3, r3, r2
  42516a:	2b09      	cmp	r3, #9
  42516c:	d92c      	bls.n	4251c8 <Update_Master_Clock+0x10c>
		  		{
					Master_Clock_bit = 0;
  42516e:	2400      	movs	r4, #0
  425170:	4b17      	ldr	r3, [pc, #92]	; (4251d0 <Update_Master_Clock+0x114>)
  425172:	701c      	strb	r4, [r3, #0]
					//printf("Master_Clock_bit : %d\r\n",Master_Clock_bit);
					Freq_selec_bit = 0;
  425174:	4b19      	ldr	r3, [pc, #100]	; (4251dc <Update_Master_Clock+0x120>)
  425176:	701c      	strb	r4, [r3, #0]
					struct genclk_config gcfg;
					sysclk_init();
  425178:	4b2b      	ldr	r3, [pc, #172]	; (425228 <Update_Master_Clock+0x16c>)
  42517a:	4798      	blx	r3

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg, uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
  42517c:	4b2b      	ldr	r3, [pc, #172]	; (42522c <Update_Master_Clock+0x170>)
  42517e:	2212      	movs	r2, #18
  425180:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
  425182:	4620      	mov	r0, r4
  425184:	4b2a      	ldr	r3, [pc, #168]	; (425230 <Update_Master_Clock+0x174>)
  425186:	4798      	blx	r3
					genclk_config_set_source(&gcfg, GENCLK_PCK_SRC_PLLACK);
					genclk_config_set_divider(&gcfg, GENCLK_PCK_PRES_2);
					genclk_enable(&gcfg, GENCLK_PCK_0);
						#ifdef Debug_enable
						const sam_uart_opt_t uart_console_settings = {60000000UL, 115200UL,UART_MR_PAR_NO};
  425188:	ab01      	add	r3, sp, #4
  42518a:	4a2a      	ldr	r2, [pc, #168]	; (425234 <Update_Master_Clock+0x178>)
  42518c:	ca07      	ldmia	r2, {r0, r1, r2}
  42518e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						uart_init(CONSOLE_UART, &uart_console_settings);
  425192:	4619      	mov	r1, r3
  425194:	481a      	ldr	r0, [pc, #104]	; (425200 <Update_Master_Clock+0x144>)
  425196:	4b1b      	ldr	r3, [pc, #108]	; (425204 <Update_Master_Clock+0x148>)
  425198:	4798      	blx	r3
						#endif
					Systick_Config(60000UL);
  42519a:	f64e 2060 	movw	r0, #60000	; 0xea60
  42519e:	2100      	movs	r1, #0
  4251a0:	4b25      	ldr	r3, [pc, #148]	; (425238 <Update_Master_Clock+0x17c>)
  4251a2:	4798      	blx	r3
					configure_i2c_master();
  4251a4:	4b1a      	ldr	r3, [pc, #104]	; (425210 <Update_Master_Clock+0x154>)
  4251a6:	4798      	blx	r3
					adc_init();
  4251a8:	4b1a      	ldr	r3, [pc, #104]	; (425214 <Update_Master_Clock+0x158>)
  4251aa:	4798      	blx	r3
					clock_setting.ul_mck = sysclk_get_cpu_hz();
  4251ac:	491a      	ldr	r1, [pc, #104]	; (425218 <Update_Master_Clock+0x15c>)
  4251ae:	4b23      	ldr	r3, [pc, #140]	; (42523c <Update_Master_Clock+0x180>)
  4251b0:	608b      	str	r3, [r1, #8]
					clock_setting.ul_clkb =  PWM_VALUE_25_KHZ* PERIOD_VALUE;
  4251b2:	4b1b      	ldr	r3, [pc, #108]	; (425220 <Update_Master_Clock+0x164>)
  4251b4:	604b      	str	r3, [r1, #4]
					pwm_init(PWM, &clock_setting);
  4251b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4251ba:	4b1a      	ldr	r3, [pc, #104]	; (425224 <Update_Master_Clock+0x168>)
  4251bc:	4798      	blx	r3
  4251be:	e003      	b.n	4251c8 <Update_Master_Clock+0x10c>
						//Timer0_init();
				}
 		}
	else
	{
	Clock_prev_tick_g_u32 = count_1ms;
  4251c0:	4b04      	ldr	r3, [pc, #16]	; (4251d4 <Update_Master_Clock+0x118>)
  4251c2:	681a      	ldr	r2, [r3, #0]
  4251c4:	4b04      	ldr	r3, [pc, #16]	; (4251d8 <Update_Master_Clock+0x11c>)
  4251c6:	601a      	str	r2, [r3, #0]
	}



  4251c8:	b004      	add	sp, #16
  4251ca:	bd10      	pop	{r4, pc}
  4251cc:	20000b50 	.word	0x20000b50
  4251d0:	2000135a 	.word	0x2000135a
  4251d4:	200012f8 	.word	0x200012f8
  4251d8:	20001350 	.word	0x20001350
  4251dc:	20001359 	.word	0x20001359
  4251e0:	00425721 	.word	0x00425721
  4251e4:	00425895 	.word	0x00425895
  4251e8:	00425849 	.word	0x00425849
  4251ec:	00425781 	.word	0x00425781
  4251f0:	004258d1 	.word	0x004258d1
  4251f4:	004258e1 	.word	0x004258e1
  4251f8:	00425921 	.word	0x00425921
  4251fc:	0042f5b4 	.word	0x0042f5b4
  425200:	400e0600 	.word	0x400e0600
  425204:	00421d1d 	.word	0x00421d1d
  425208:	e000e010 	.word	0xe000e010
  42520c:	e000ed00 	.word	0xe000ed00
  425210:	004234c1 	.word	0x004234c1
  425214:	004201e1 	.word	0x004201e1
  425218:	2000148c 	.word	0x2000148c
  42521c:	003d0900 	.word	0x003d0900
  425220:	002625a0 	.word	0x002625a0
  425224:	00425a25 	.word	0x00425a25
  425228:	00425671 	.word	0x00425671
  42522c:	400e0400 	.word	0x400e0400
  425230:	00425995 	.word	0x00425995
  425234:	0042f5c0 	.word	0x0042f5c0
  425238:	00425255 	.word	0x00425255
  42523c:	03938700 	.word	0x03938700

00425240 <Pherperial_clock_Enable>:
 #include "main_header.h"



void Pherperial_clock_Enable()
{
  425240:	b510      	push	{r4, lr}
pmc_enable_periph_clk(ID_PIOA);
  425242:	2009      	movs	r0, #9
  425244:	4c02      	ldr	r4, [pc, #8]	; (425250 <Pherperial_clock_Enable+0x10>)
  425246:	47a0      	blx	r4
pmc_enable_periph_clk(ID_PIOB);
  425248:	200a      	movs	r0, #10
  42524a:	47a0      	blx	r4
  42524c:	bd10      	pop	{r4, pc}
  42524e:	bf00      	nop
  425250:	00425941 	.word	0x00425941

00425254 <Systick_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  425254:	3801      	subs	r0, #1
  425256:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  42525a:	d209      	bcs.n	425270 <Systick_Config+0x1c>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  42525c:	4b05      	ldr	r3, [pc, #20]	; (425274 <Systick_Config+0x20>)
  42525e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  425260:	21f0      	movs	r1, #240	; 0xf0
  425262:	4a05      	ldr	r2, [pc, #20]	; (425278 <Systick_Config+0x24>)
  425264:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  425268:	2200      	movs	r2, #0
  42526a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  42526c:	2207      	movs	r2, #7
  42526e:	601a      	str	r2, [r3, #0]
  425270:	4770      	bx	lr
  425272:	bf00      	nop
  425274:	e000e010 	.word	0xe000e010
  425278:	e000ed00 	.word	0xe000ed00

0042527c <Delay>:
 * Parameter: Specifies the delay (1 count = 1ms)
 * Return   : None
 */
void Delay(uint32_t count)
{
    uint32_t prev_count = count_1ms;
  42527c:	4b06      	ldr	r3, [pc, #24]	; (425298 <Delay+0x1c>)
  42527e:	681a      	ldr	r2, [r3, #0]
    while(count)
  425280:	4601      	mov	r1, r0
  425282:	b140      	cbz	r0, 425296 <Delay+0x1a>
    {
         if((count_1ms - prev_count) >= count)
  425284:	681b      	ldr	r3, [r3, #0]
  425286:	1a9b      	subs	r3, r3, r2
  425288:	4298      	cmp	r0, r3
  42528a:	d904      	bls.n	425296 <Delay+0x1a>
  42528c:	4802      	ldr	r0, [pc, #8]	; (425298 <Delay+0x1c>)
  42528e:	6803      	ldr	r3, [r0, #0]
  425290:	1a9b      	subs	r3, r3, r2
  425292:	4299      	cmp	r1, r3
  425294:	d8fb      	bhi.n	42528e <Delay+0x12>
  425296:	4770      	bx	lr
  425298:	200012f8 	.word	0x200012f8

0042529c <LED_BUZZER_SUPPLY_enable>:
 * \param p_component Pointer to LED_BUZZER control structure.
 */
void LED_BUZZER_SUPPLY_enable(Power_Enable_index *p_component)
{
	/* Raise EN pin of LED_BUZZER_CTRL to High Level (Vcc). */
	 ioport_set_pin_level(p_component->pio_main_enable_idx, EN_HIGH);
  42529c:	7802      	ldrb	r2, [r0, #0]
	return pin >> 5;
  42529e:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4252a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4252a4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4252a8:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  4252aa:	f002 021f 	and.w	r2, r2, #31
  4252ae:	2101      	movs	r1, #1
  4252b0:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4252b4:	631a      	str	r2, [r3, #48]	; 0x30
  4252b6:	4770      	bx	lr

004252b8 <Capacitor_Bank_Charge_enable>:



void Capacitor_Bank_Charge_enable(Power_Enable_index *p_component)
{
ioport_set_pin_level(p_component->pio_Capacitor_Bank_Charge_idx,EN_HIGH );
  4252b8:	7882      	ldrb	r2, [r0, #2]
	return pin >> 5;
  4252ba:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4252bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4252c0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4252c4:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  4252c6:	f002 021f 	and.w	r2, r2, #31
  4252ca:	2101      	movs	r1, #1
  4252cc:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4252d0:	631a      	str	r2, [r3, #48]	; 0x30
  4252d2:	4770      	bx	lr

004252d4 <Capacitor_Bank_Charge_disable>:
 p_component->pio_Capacitor_Bank_Charge_idx = pin_idx;
}

void Capacitor_Bank_Charge_disable(Power_Enable_index *p_component)
{
ioport_set_pin_level(p_component->pio_Capacitor_Bank_Charge_idx, EN_LOW);
  4252d4:	7882      	ldrb	r2, [r0, #2]
	return pin >> 5;
  4252d6:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4252d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4252dc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4252e0:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  4252e2:	f002 021f 	and.w	r2, r2, #31
  4252e6:	2101      	movs	r1, #1
  4252e8:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4252ec:	635a      	str	r2, [r3, #52]	; 0x34
  4252ee:	4770      	bx	lr

004252f0 <HeatDetector_enable>:
}


void HeatDetector_enable(Power_Enable_index *p_component)
{
	ioport_set_pin_level(p_component->pio_HeatDetectorEnable_idx, EN_HIGH);
  4252f0:	78c2      	ldrb	r2, [r0, #3]
	return pin >> 5;
  4252f2:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4252f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4252f8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4252fc:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  4252fe:	f002 021f 	and.w	r2, r2, #31
  425302:	2101      	movs	r1, #1
  425304:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  425308:	631a      	str	r2, [r3, #48]	; 0x30
  42530a:	4770      	bx	lr

0042530c <Act_HealthMonitor_enable>:
	ioport_set_pin_level(p_component->pio_SecondaryPowerPack_NiMHEnable, EN_LOW);
}

void Act_HealthMonitor_enable(Power_Enable_index *p_component)
{
	ioport_set_pin_level(p_component->pio_ActuatorHealthMonitorEnable, EN_HIGH);
  42530c:	7982      	ldrb	r2, [r0, #6]
	return pin >> 5;
  42530e:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  425310:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  425314:	f203 7307 	addw	r3, r3, #1799	; 0x707
  425318:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  42531a:	f002 021f 	and.w	r2, r2, #31
  42531e:	2101      	movs	r1, #1
  425320:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  425324:	631a      	str	r2, [r3, #48]	; 0x30
  425326:	4770      	bx	lr

00425328 <VoltMeasurement_enable>:
}


void VoltMeasurement_enable(Power_Enable_index *p_component)
{
	ioport_set_pin_level(p_component->pio_VoltageMeasureEnable, EN_HIGH);
  425328:	79c2      	ldrb	r2, [r0, #7]
	return pin >> 5;
  42532a:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  42532c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  425330:	f203 7307 	addw	r3, r3, #1799	; 0x707
  425334:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  425336:	f002 021f 	and.w	r2, r2, #31
  42533a:	2101      	movs	r1, #1
  42533c:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  425340:	631a      	str	r2, [r3, #48]	; 0x30
  425342:	4770      	bx	lr

00425344 <RtcFlash_enable>:
}


void RtcFlash_enable(Power_Enable_index *p_component)
{
	ioport_set_pin_level(p_component->pio_RTC_FlashEnable_idx, EN_HIGH);
  425344:	7a02      	ldrb	r2, [r0, #8]
	return pin >> 5;
  425346:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  425348:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  42534c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  425350:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  425352:	f002 021f 	and.w	r2, r2, #31
  425356:	2101      	movs	r1, #1
  425358:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  42535c:	631a      	str	r2, [r3, #48]	; 0x30
  42535e:	4770      	bx	lr

00425360 <Pherperial_Power_Enable>:
{
  425360:	b510      	push	{r4, lr}
	p_component->pio_main_enable_idx = pin_idx;
  425362:	4c13      	ldr	r4, [pc, #76]	; (4253b0 <Pherperial_Power_Enable+0x50>)
  425364:	236e      	movs	r3, #110	; 0x6e
  425366:	7023      	strb	r3, [r4, #0]
LED_BUZZER_SUPPLY_enable(&Activate_PIN);
  425368:	4620      	mov	r0, r4
  42536a:	4b12      	ldr	r3, [pc, #72]	; (4253b4 <Pherperial_Power_Enable+0x54>)
  42536c:	4798      	blx	r3
 p_component->pio_Capacitor_Bank_Charge_idx = pin_idx;
  42536e:	2370      	movs	r3, #112	; 0x70
  425370:	70a3      	strb	r3, [r4, #2]
	p_component->pio_HeatDetectorEnable_idx = pin_idx;
  425372:	2367      	movs	r3, #103	; 0x67
  425374:	70e3      	strb	r3, [r4, #3]
HeatDetector_enable(&Activate_PIN);
  425376:	4620      	mov	r0, r4
  425378:	4b0f      	ldr	r3, [pc, #60]	; (4253b8 <Pherperial_Power_Enable+0x58>)
  42537a:	4798      	blx	r3
	p_component->pio_ActuatorHealthMonitorEnable = pin_idx;
  42537c:	2366      	movs	r3, #102	; 0x66
  42537e:	71a3      	strb	r3, [r4, #6]
Act_HealthMonitor_enable(&Activate_PIN);
  425380:	4620      	mov	r0, r4
  425382:	4b0e      	ldr	r3, [pc, #56]	; (4253bc <Pherperial_Power_Enable+0x5c>)
  425384:	4798      	blx	r3
	p_component->pio_VoltageMeasureEnable = pin_idx;
  425386:	237c      	movs	r3, #124	; 0x7c
  425388:	71e3      	strb	r3, [r4, #7]
VoltMeasurement_enable(&Activate_PIN);
  42538a:	4620      	mov	r0, r4
  42538c:	4b0c      	ldr	r3, [pc, #48]	; (4253c0 <Pherperial_Power_Enable+0x60>)
  42538e:	4798      	blx	r3
}

void RtcFlash_set(Power_Enable_index *p_component, uint8_t pin_idx)
{
	p_component->pio_RTC_FlashEnable_idx = pin_idx;
  425390:	2371      	movs	r3, #113	; 0x71
  425392:	7223      	strb	r3, [r4, #8]
RtcFlash_enable(&Activate_PIN);
  425394:	4620      	mov	r0, r4
  425396:	4b0b      	ldr	r3, [pc, #44]	; (4253c4 <Pherperial_Power_Enable+0x64>)
  425398:	4798      	blx	r3
  42539a:	4b0b      	ldr	r3, [pc, #44]	; (4253c8 <Pherperial_Power_Enable+0x68>)
  42539c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4253a0:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4253a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4253a6:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4253a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4253ac:	631a      	str	r2, [r3, #48]	; 0x30
  4253ae:	bd10      	pop	{r4, pc}
  4253b0:	20001478 	.word	0x20001478
  4253b4:	0042529d 	.word	0x0042529d
  4253b8:	004252f1 	.word	0x004252f1
  4253bc:	0042530d 	.word	0x0042530d
  4253c0:	00425329 	.word	0x00425329
  4253c4:	00425345 	.word	0x00425345
  4253c8:	400e1400 	.word	0x400e1400

004253cc <Check_any_Trbl>:
 * Return   : None
 */

void Check_any_Trbl(void)
{
    if(pri_pwr_trouble_g_b || sec_pwr_trouble_g_b || hd1_trouble_g_u8 || hd2_trouble_g_u8 || actuator_trbl_g_u8 || manual_sw_trbl_g_b || pres_sw_trbl_g_b || fire_happen_g_b)
  4253cc:	4b10      	ldr	r3, [pc, #64]	; (425410 <Check_any_Trbl+0x44>)
  4253ce:	781b      	ldrb	r3, [r3, #0]
  4253d0:	b9d3      	cbnz	r3, 425408 <Check_any_Trbl+0x3c>
  4253d2:	4b10      	ldr	r3, [pc, #64]	; (425414 <Check_any_Trbl+0x48>)
  4253d4:	781b      	ldrb	r3, [r3, #0]
  4253d6:	b9bb      	cbnz	r3, 425408 <Check_any_Trbl+0x3c>
  4253d8:	4b0f      	ldr	r3, [pc, #60]	; (425418 <Check_any_Trbl+0x4c>)
  4253da:	781b      	ldrb	r3, [r3, #0]
  4253dc:	b9a3      	cbnz	r3, 425408 <Check_any_Trbl+0x3c>
  4253de:	4b0f      	ldr	r3, [pc, #60]	; (42541c <Check_any_Trbl+0x50>)
  4253e0:	781b      	ldrb	r3, [r3, #0]
  4253e2:	b98b      	cbnz	r3, 425408 <Check_any_Trbl+0x3c>
  4253e4:	4b0e      	ldr	r3, [pc, #56]	; (425420 <Check_any_Trbl+0x54>)
  4253e6:	781b      	ldrb	r3, [r3, #0]
  4253e8:	b973      	cbnz	r3, 425408 <Check_any_Trbl+0x3c>
  4253ea:	4b0e      	ldr	r3, [pc, #56]	; (425424 <Check_any_Trbl+0x58>)
  4253ec:	781b      	ldrb	r3, [r3, #0]
  4253ee:	b95b      	cbnz	r3, 425408 <Check_any_Trbl+0x3c>
  4253f0:	4b0d      	ldr	r3, [pc, #52]	; (425428 <Check_any_Trbl+0x5c>)
  4253f2:	781b      	ldrb	r3, [r3, #0]
  4253f4:	b943      	cbnz	r3, 425408 <Check_any_Trbl+0x3c>
  4253f6:	4b0d      	ldr	r3, [pc, #52]	; (42542c <Check_any_Trbl+0x60>)
  4253f8:	781b      	ldrb	r3, [r3, #0]
  4253fa:	b92b      	cbnz	r3, 425408 <Check_any_Trbl+0x3c>

         any_of_trouble_g_b = TROUBLE;
    }
    else
    {
        any_of_trouble_g_b = NO_TROUBLE;
  4253fc:	2300      	movs	r3, #0
  4253fe:	4a0c      	ldr	r2, [pc, #48]	; (425430 <Check_any_Trbl+0x64>)
  425400:	7013      	strb	r3, [r2, #0]
		Get_New_trouble  = NO_TROUBLE;
  425402:	4a0c      	ldr	r2, [pc, #48]	; (425434 <Check_any_Trbl+0x68>)
  425404:	7013      	strb	r3, [r2, #0]
  425406:	4770      	bx	lr
         any_of_trouble_g_b = TROUBLE;
  425408:	2201      	movs	r2, #1
  42540a:	4b09      	ldr	r3, [pc, #36]	; (425430 <Check_any_Trbl+0x64>)
  42540c:	701a      	strb	r2, [r3, #0]
  42540e:	4770      	bx	lr
  425410:	20000b50 	.word	0x20000b50
  425414:	20001068 	.word	0x20001068
  425418:	20000b0c 	.word	0x20000b0c
  42541c:	20000b10 	.word	0x20000b10
  425420:	20000af1 	.word	0x20000af1
  425424:	20001371 	.word	0x20001371
  425428:	20001373 	.word	0x20001373
  42542c:	20000b08 	.word	0x20000b08
  425430:	2000138c 	.word	0x2000138c
  425434:	20001088 	.word	0x20001088

00425438 <Trbl_Fire_Iso_Output_Reset>:
 * Parameter: None
 * Return   : None
 */

void Trbl_Fire_Iso_Output_Reset(void)
{
  425438:	b508      	push	{r3, lr}
static uint32_t trouble_prev_tick_ls_u32 = 0u;

     if(trbl_iso_out_g_b)
  42543a:	4b20      	ldr	r3, [pc, #128]	; (4254bc <Trbl_Fire_Iso_Output_Reset+0x84>)
  42543c:	781b      	ldrb	r3, [r3, #0]
  42543e:	2b00      	cmp	r3, #0
  425440:	d03b      	beq.n	4254ba <Trbl_Fire_Iso_Output_Reset+0x82>
    {

       if((!any_of_trouble_g_b) && !ioport_get_pin_level(SYS_RESET_SW_PIN))
  425442:	4b1f      	ldr	r3, [pc, #124]	; (4254c0 <Trbl_Fire_Iso_Output_Reset+0x88>)
  425444:	781b      	ldrb	r3, [r3, #0]
  425446:	2b00      	cmp	r3, #0
  425448:	d133      	bne.n	4254b2 <Trbl_Fire_Iso_Output_Reset+0x7a>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  42544a:	4b1e      	ldr	r3, [pc, #120]	; (4254c4 <Trbl_Fire_Iso_Output_Reset+0x8c>)
  42544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  42544e:	f013 0f02 	tst.w	r3, #2
  425452:	d12e      	bne.n	4254b2 <Trbl_Fire_Iso_Output_Reset+0x7a>
       {
          if((count_1ms -  trouble_prev_tick_ls_u32) >= SEC_2)
  425454:	4b1c      	ldr	r3, [pc, #112]	; (4254c8 <Trbl_Fire_Iso_Output_Reset+0x90>)
  425456:	681b      	ldr	r3, [r3, #0]
  425458:	4a1c      	ldr	r2, [pc, #112]	; (4254cc <Trbl_Fire_Iso_Output_Reset+0x94>)
  42545a:	6812      	ldr	r2, [r2, #0]
  42545c:	1a9b      	subs	r3, r3, r2
  42545e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  425462:	d32a      	bcc.n	4254ba <Trbl_Fire_Iso_Output_Reset+0x82>
              {
                Buzzer_Beep(ON);
  425464:	2001      	movs	r0, #1
  425466:	4b1a      	ldr	r3, [pc, #104]	; (4254d0 <Trbl_Fire_Iso_Output_Reset+0x98>)
  425468:	4798      	blx	r3
                trbl_iso_out_g_b = NO_TROUBLE;
  42546a:	2300      	movs	r3, #0
  42546c:	4a13      	ldr	r2, [pc, #76]	; (4254bc <Trbl_Fire_Iso_Output_Reset+0x84>)
  42546e:	7013      	strb	r3, [r2, #0]
                fire_iso_out_g_b = NO_TROUBLE;
  425470:	4a18      	ldr	r2, [pc, #96]	; (4254d4 <Trbl_Fire_Iso_Output_Reset+0x9c>)
  425472:	7013      	strb	r3, [r2, #0]
               // Port_Expander_Write(RELAY_A | RELAY_B,OFF);
				ioport_set_pin_level(RELAY_A,amerex_config_data.Default_fire_rly_level);
  425474:	4b18      	ldr	r3, [pc, #96]	; (4254d8 <Trbl_Fire_Iso_Output_Reset+0xa0>)
	if (level) {
  425476:	7b9b      	ldrb	r3, [r3, #14]
  425478:	b18b      	cbz	r3, 42549e <Trbl_Fire_Iso_Output_Reset+0x66>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  42547a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  42547e:	4b11      	ldr	r3, [pc, #68]	; (4254c4 <Trbl_Fire_Iso_Output_Reset+0x8c>)
  425480:	631a      	str	r2, [r3, #48]	; 0x30
				ioport_set_pin_level(RELAY_B,amerex_config_data.Default_trbl_rly_level);
  425482:	4b15      	ldr	r3, [pc, #84]	; (4254d8 <Trbl_Fire_Iso_Output_Reset+0xa0>)
	if (level) {
  425484:	7b5b      	ldrb	r3, [r3, #13]
  425486:	b17b      	cbz	r3, 4254a8 <Trbl_Fire_Iso_Output_Reset+0x70>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  425488:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  42548c:	4b0d      	ldr	r3, [pc, #52]	; (4254c4 <Trbl_Fire_Iso_Output_Reset+0x8c>)
  42548e:	631a      	str	r2, [r3, #48]	; 0x30
                Delay(25);
  425490:	2019      	movs	r0, #25
  425492:	4b12      	ldr	r3, [pc, #72]	; (4254dc <Trbl_Fire_Iso_Output_Reset+0xa4>)
  425494:	4798      	blx	r3
                Buzzer_Beep(OFF);
  425496:	2000      	movs	r0, #0
  425498:	4b0d      	ldr	r3, [pc, #52]	; (4254d0 <Trbl_Fire_Iso_Output_Reset+0x98>)
  42549a:	4798      	blx	r3
  42549c:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  42549e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4254a2:	4b08      	ldr	r3, [pc, #32]	; (4254c4 <Trbl_Fire_Iso_Output_Reset+0x8c>)
  4254a4:	635a      	str	r2, [r3, #52]	; 0x34
  4254a6:	e7ec      	b.n	425482 <Trbl_Fire_Iso_Output_Reset+0x4a>
  4254a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4254ac:	4b05      	ldr	r3, [pc, #20]	; (4254c4 <Trbl_Fire_Iso_Output_Reset+0x8c>)
  4254ae:	635a      	str	r2, [r3, #52]	; 0x34
  4254b0:	e7ee      	b.n	425490 <Trbl_Fire_Iso_Output_Reset+0x58>
              }
       }
       else
       {
           trouble_prev_tick_ls_u32 = count_1ms;
  4254b2:	4b05      	ldr	r3, [pc, #20]	; (4254c8 <Trbl_Fire_Iso_Output_Reset+0x90>)
  4254b4:	681a      	ldr	r2, [r3, #0]
  4254b6:	4b05      	ldr	r3, [pc, #20]	; (4254cc <Trbl_Fire_Iso_Output_Reset+0x94>)
  4254b8:	601a      	str	r2, [r3, #0]
  4254ba:	bd08      	pop	{r3, pc}
  4254bc:	20001394 	.word	0x20001394
  4254c0:	2000138c 	.word	0x2000138c
  4254c4:	400e0e00 	.word	0x400e0e00
  4254c8:	200012f8 	.word	0x200012f8
  4254cc:	2000139c 	.word	0x2000139c
  4254d0:	00422015 	.word	0x00422015
  4254d4:	2000138d 	.word	0x2000138d
  4254d8:	20001588 	.word	0x20001588
  4254dc:	0042527d 	.word	0x0042527d

004254e0 <Fire_Iso_Output>:
void Fire_Iso_Output(void)
{
static uint32_t fire_iso_prev_tick_ls_u32 = 0u;
        uint32_t Fire_Rly=0;

    if(fire_happen_g_b && Fire_Rst_vehicle_start_bit!=2 )
  4254e0:	4b19      	ldr	r3, [pc, #100]	; (425548 <Fire_Iso_Output+0x68>)
  4254e2:	781b      	ldrb	r3, [r3, #0]
  4254e4:	2b00      	cmp	r3, #0
  4254e6:	d02a      	beq.n	42553e <Fire_Iso_Output+0x5e>
  4254e8:	4b18      	ldr	r3, [pc, #96]	; (42554c <Fire_Iso_Output+0x6c>)
  4254ea:	781b      	ldrb	r3, [r3, #0]
  4254ec:	b2db      	uxtb	r3, r3
  4254ee:	2b02      	cmp	r3, #2
  4254f0:	d025      	beq.n	42553e <Fire_Iso_Output+0x5e>
    {

	    (fire_rly_en_vehicle_start_bit == 0) ? (Fire_Rly =  amerex_config_data.fire_relay_delay) : (Fire_Rly =  5000u);
  4254f2:	4b17      	ldr	r3, [pc, #92]	; (425550 <Fire_Iso_Output+0x70>)
  4254f4:	781b      	ldrb	r3, [r3, #0]
  4254f6:	b9d3      	cbnz	r3, 42552e <Fire_Iso_Output+0x4e>
  4254f8:	4b16      	ldr	r3, [pc, #88]	; (425554 <Fire_Iso_Output+0x74>)
  4254fa:	891a      	ldrh	r2, [r3, #8]
        if((count_1ms - fire_iso_prev_tick_ls_u32) >= Fire_Rly)
  4254fc:	4b16      	ldr	r3, [pc, #88]	; (425558 <Fire_Iso_Output+0x78>)
  4254fe:	681b      	ldr	r3, [r3, #0]
  425500:	4916      	ldr	r1, [pc, #88]	; (42555c <Fire_Iso_Output+0x7c>)
  425502:	6809      	ldr	r1, [r1, #0]
  425504:	1a5b      	subs	r3, r3, r1
  425506:	429a      	cmp	r2, r3
  425508:	d81d      	bhi.n	425546 <Fire_Iso_Output+0x66>
        {
			fire_rly_en_vehicle_start_bit = 0;
  42550a:	2200      	movs	r2, #0
  42550c:	4b10      	ldr	r3, [pc, #64]	; (425550 <Fire_Iso_Output+0x70>)
  42550e:	701a      	strb	r2, [r3, #0]
            fire_iso_prev_tick_ls_u32 =  count_1ms;
  425510:	4b11      	ldr	r3, [pc, #68]	; (425558 <Fire_Iso_Output+0x78>)
  425512:	681a      	ldr	r2, [r3, #0]
  425514:	4b11      	ldr	r3, [pc, #68]	; (42555c <Fire_Iso_Output+0x7c>)
  425516:	601a      	str	r2, [r3, #0]
            /*Port_Expander_Write(RELAY_B,ON);*/
			ioport_set_pin_level(RELAY_B,!amerex_config_data.Default_fire_rly_level); //ioport_set_pin_level(RELAY_B,1); // amerex_config_data.Default_rly_level
  425518:	4b0e      	ldr	r3, [pc, #56]	; (425554 <Fire_Iso_Output+0x74>)
	if (level) {
  42551a:	7b9b      	ldrb	r3, [r3, #14]
  42551c:	b953      	cbnz	r3, 425534 <Fire_Iso_Output+0x54>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  42551e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  425522:	4b0f      	ldr	r3, [pc, #60]	; (425560 <Fire_Iso_Output+0x80>)
  425524:	631a      	str	r2, [r3, #48]	; 0x30
            fire_iso_out_g_b = ON;
  425526:	2201      	movs	r2, #1
  425528:	4b0e      	ldr	r3, [pc, #56]	; (425564 <Fire_Iso_Output+0x84>)
  42552a:	701a      	strb	r2, [r3, #0]
  42552c:	4770      	bx	lr
  42552e:	f241 3288 	movw	r2, #5000	; 0x1388
  425532:	e7e3      	b.n	4254fc <Fire_Iso_Output+0x1c>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  425534:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  425538:	4b09      	ldr	r3, [pc, #36]	; (425560 <Fire_Iso_Output+0x80>)
  42553a:	635a      	str	r2, [r3, #52]	; 0x34
  42553c:	e7f3      	b.n	425526 <Fire_Iso_Output+0x46>
        }
    }
    else
    {
        fire_iso_prev_tick_ls_u32 =  count_1ms;
  42553e:	4b06      	ldr	r3, [pc, #24]	; (425558 <Fire_Iso_Output+0x78>)
  425540:	681a      	ldr	r2, [r3, #0]
  425542:	4b06      	ldr	r3, [pc, #24]	; (42555c <Fire_Iso_Output+0x7c>)
  425544:	601a      	str	r2, [r3, #0]
  425546:	4770      	bx	lr
  425548:	20000b08 	.word	0x20000b08
  42554c:	20001358 	.word	0x20001358
  425550:	20001368 	.word	0x20001368
  425554:	20001588 	.word	0x20001588
  425558:	200012f8 	.word	0x200012f8
  42555c:	20001390 	.word	0x20001390
  425560:	400e0e00 	.word	0x400e0e00
  425564:	2000138d 	.word	0x2000138d

00425568 <Trouble_Iso_Output>:
 */
void Trouble_Iso_Output(void)
{
static uint32_t trbl_iso_prev_tick_ls_u32 = 0u;

    if(any_of_trouble_g_b)
  425568:	4b12      	ldr	r3, [pc, #72]	; (4255b4 <Trouble_Iso_Output+0x4c>)
  42556a:	781b      	ldrb	r3, [r3, #0]
  42556c:	b1e3      	cbz	r3, 4255a8 <Trouble_Iso_Output+0x40>
    {
        if((count_1ms - trbl_iso_prev_tick_ls_u32) >= amerex_config_data.trbl_relay_delay)
  42556e:	4b12      	ldr	r3, [pc, #72]	; (4255b8 <Trouble_Iso_Output+0x50>)
  425570:	681b      	ldr	r3, [r3, #0]
  425572:	4a12      	ldr	r2, [pc, #72]	; (4255bc <Trouble_Iso_Output+0x54>)
  425574:	6812      	ldr	r2, [r2, #0]
  425576:	1a9b      	subs	r3, r3, r2
  425578:	4a11      	ldr	r2, [pc, #68]	; (4255c0 <Trouble_Iso_Output+0x58>)
  42557a:	88d2      	ldrh	r2, [r2, #6]
  42557c:	4293      	cmp	r3, r2
  42557e:	d317      	bcc.n	4255b0 <Trouble_Iso_Output+0x48>
        {
            trbl_iso_prev_tick_ls_u32 =  count_1ms;
  425580:	4b0d      	ldr	r3, [pc, #52]	; (4255b8 <Trouble_Iso_Output+0x50>)
  425582:	681a      	ldr	r2, [r3, #0]
  425584:	4b0d      	ldr	r3, [pc, #52]	; (4255bc <Trouble_Iso_Output+0x54>)
  425586:	601a      	str	r2, [r3, #0]
           /* Port_Expander_Write(RELAY_A,ON);*/
		   	ioport_set_pin_level(RELAY_A,!amerex_config_data.Default_trbl_rly_level);
  425588:	4b0d      	ldr	r3, [pc, #52]	; (4255c0 <Trouble_Iso_Output+0x58>)
	if (level) {
  42558a:	7b5b      	ldrb	r3, [r3, #13]
  42558c:	b93b      	cbnz	r3, 42559e <Trouble_Iso_Output+0x36>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  42558e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  425592:	4b0c      	ldr	r3, [pc, #48]	; (4255c4 <Trouble_Iso_Output+0x5c>)
  425594:	631a      	str	r2, [r3, #48]	; 0x30
            trbl_iso_out_g_b = ON;
  425596:	2201      	movs	r2, #1
  425598:	4b0b      	ldr	r3, [pc, #44]	; (4255c8 <Trouble_Iso_Output+0x60>)
  42559a:	701a      	strb	r2, [r3, #0]
  42559c:	4770      	bx	lr
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  42559e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4255a2:	4b08      	ldr	r3, [pc, #32]	; (4255c4 <Trouble_Iso_Output+0x5c>)
  4255a4:	635a      	str	r2, [r3, #52]	; 0x34
  4255a6:	e7f6      	b.n	425596 <Trouble_Iso_Output+0x2e>
        }
    }
    else
    {
        trbl_iso_prev_tick_ls_u32 =  count_1ms;
  4255a8:	4b03      	ldr	r3, [pc, #12]	; (4255b8 <Trouble_Iso_Output+0x50>)
  4255aa:	681a      	ldr	r2, [r3, #0]
  4255ac:	4b03      	ldr	r3, [pc, #12]	; (4255bc <Trouble_Iso_Output+0x54>)
  4255ae:	601a      	str	r2, [r3, #0]
  4255b0:	4770      	bx	lr
  4255b2:	bf00      	nop
  4255b4:	2000138c 	.word	0x2000138c
  4255b8:	200012f8 	.word	0x200012f8
  4255bc:	20001398 	.word	0x20001398
  4255c0:	20001588 	.word	0x20001588
  4255c4:	400e0e00 	.word	0x400e0e00
  4255c8:	20001394 	.word	0x20001394

004255cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4255cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4255d0:	4681      	mov	r9, r0
  4255d2:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4255d4:	4b12      	ldr	r3, [pc, #72]	; (425620 <pio_handler_process+0x54>)
  4255d6:	4798      	blx	r3
  4255d8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4255da:	4648      	mov	r0, r9
  4255dc:	4b11      	ldr	r3, [pc, #68]	; (425624 <pio_handler_process+0x58>)
  4255de:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4255e0:	4005      	ands	r5, r0
  4255e2:	d013      	beq.n	42560c <pio_handler_process+0x40>
  4255e4:	4c10      	ldr	r4, [pc, #64]	; (425628 <pio_handler_process+0x5c>)
  4255e6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4255ea:	e003      	b.n	4255f4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4255ec:	42b4      	cmp	r4, r6
  4255ee:	d00d      	beq.n	42560c <pio_handler_process+0x40>
  4255f0:	3410      	adds	r4, #16
		while (status != 0) {
  4255f2:	b15d      	cbz	r5, 42560c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4255f4:	6820      	ldr	r0, [r4, #0]
  4255f6:	42b8      	cmp	r0, r7
  4255f8:	d1f8      	bne.n	4255ec <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4255fa:	6861      	ldr	r1, [r4, #4]
  4255fc:	4229      	tst	r1, r5
  4255fe:	d0f5      	beq.n	4255ec <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  425600:	68e3      	ldr	r3, [r4, #12]
  425602:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  425604:	6863      	ldr	r3, [r4, #4]
  425606:	ea25 0503 	bic.w	r5, r5, r3
  42560a:	e7ef      	b.n	4255ec <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  42560c:	4b07      	ldr	r3, [pc, #28]	; (42562c <pio_handler_process+0x60>)
  42560e:	681b      	ldr	r3, [r3, #0]
  425610:	b123      	cbz	r3, 42561c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  425612:	4b07      	ldr	r3, [pc, #28]	; (425630 <pio_handler_process+0x64>)
  425614:	681b      	ldr	r3, [r3, #0]
  425616:	b10b      	cbz	r3, 42561c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  425618:	4648      	mov	r0, r9
  42561a:	4798      	blx	r3
  42561c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  425620:	00425719 	.word	0x00425719
  425624:	0042571d 	.word	0x0042571d
  425628:	200013a0 	.word	0x200013a0
  42562c:	200016e8 	.word	0x200016e8
  425630:	20001410 	.word	0x20001410

00425634 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  425634:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  425636:	2109      	movs	r1, #9
  425638:	4801      	ldr	r0, [pc, #4]	; (425640 <PIOA_Handler+0xc>)
  42563a:	4b02      	ldr	r3, [pc, #8]	; (425644 <PIOA_Handler+0x10>)
  42563c:	4798      	blx	r3
  42563e:	bd08      	pop	{r3, pc}
  425640:	400e0e00 	.word	0x400e0e00
  425644:	004255cd 	.word	0x004255cd

00425648 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  425648:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  42564a:	210a      	movs	r1, #10
  42564c:	4801      	ldr	r0, [pc, #4]	; (425654 <PIOB_Handler+0xc>)
  42564e:	4b02      	ldr	r3, [pc, #8]	; (425658 <PIOB_Handler+0x10>)
  425650:	4798      	blx	r3
  425652:	bd08      	pop	{r3, pc}
  425654:	400e1000 	.word	0x400e1000
  425658:	004255cd 	.word	0x004255cd

0042565c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  42565c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  42565e:	210c      	movs	r1, #12
  425660:	4801      	ldr	r0, [pc, #4]	; (425668 <PIOD_Handler+0xc>)
  425662:	4b02      	ldr	r3, [pc, #8]	; (42566c <PIOD_Handler+0x10>)
  425664:	4798      	blx	r3
  425666:	bd08      	pop	{r3, pc}
  425668:	400e1400 	.word	0x400e1400
  42566c:	004255cd 	.word	0x004255cd

00425670 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  425670:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  425672:	480e      	ldr	r0, [pc, #56]	; (4256ac <sysclk_init+0x3c>)
  425674:	4b0e      	ldr	r3, [pc, #56]	; (4256b0 <sysclk_init+0x40>)
  425676:	4798      	blx	r3
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  425678:	2020      	movs	r0, #32
  42567a:	4b0e      	ldr	r3, [pc, #56]	; (4256b4 <sysclk_init+0x44>)
  42567c:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  42567e:	4c0e      	ldr	r4, [pc, #56]	; (4256b8 <sysclk_init+0x48>)
  425680:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  425682:	2800      	cmp	r0, #0
  425684:	d0fc      	beq.n	425680 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  425686:	4b0d      	ldr	r3, [pc, #52]	; (4256bc <sysclk_init+0x4c>)
  425688:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  42568a:	4a0d      	ldr	r2, [pc, #52]	; (4256c0 <sysclk_init+0x50>)
  42568c:	4b0d      	ldr	r3, [pc, #52]	; (4256c4 <sysclk_init+0x54>)
  42568e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  425690:	4c0d      	ldr	r4, [pc, #52]	; (4256c8 <sysclk_init+0x58>)
  425692:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  425694:	2800      	cmp	r0, #0
  425696:	d0fc      	beq.n	425692 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  425698:	2010      	movs	r0, #16
  42569a:	4b0c      	ldr	r3, [pc, #48]	; (4256cc <sysclk_init+0x5c>)
  42569c:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  42569e:	4b0c      	ldr	r3, [pc, #48]	; (4256d0 <sysclk_init+0x60>)
  4256a0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4256a2:	480c      	ldr	r0, [pc, #48]	; (4256d4 <sysclk_init+0x64>)
  4256a4:	4b02      	ldr	r3, [pc, #8]	; (4256b0 <sysclk_init+0x40>)
  4256a6:	4798      	blx	r3
  4256a8:	bd10      	pop	{r4, pc}
  4256aa:	bf00      	nop
  4256ac:	07270e00 	.word	0x07270e00
  4256b0:	00426121 	.word	0x00426121
  4256b4:	00425849 	.word	0x00425849
  4256b8:	00425911 	.word	0x00425911
  4256bc:	00425921 	.word	0x00425921
  4256c0:	20093f01 	.word	0x20093f01
  4256c4:	400e0400 	.word	0x400e0400
  4256c8:	00425931 	.word	0x00425931
  4256cc:	004257e5 	.word	0x004257e5
  4256d0:	00426015 	.word	0x00426015
  4256d4:	03938700 	.word	0x03938700

004256d8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4256d8:	b90a      	cbnz	r2, 4256de <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4256da:	6601      	str	r1, [r0, #96]	; 0x60
  4256dc:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4256de:	6641      	str	r1, [r0, #100]	; 0x64
  4256e0:	4770      	bx	lr

004256e2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4256e2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4256e4:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4256e8:	bf14      	ite	ne
  4256ea:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4256ec:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4256ee:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4256f2:	bf14      	ite	ne
  4256f4:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  4256f6:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  4256f8:	f012 0f02 	tst.w	r2, #2
  4256fc:	d107      	bne.n	42570e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4256fe:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  425702:	bf18      	it	ne
  425704:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  425708:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  42570a:	6001      	str	r1, [r0, #0]
  42570c:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  42570e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  425712:	e7f9      	b.n	425708 <pio_set_input+0x26>

00425714 <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
  425714:	6381      	str	r1, [r0, #56]	; 0x38
  425716:	4770      	bx	lr

00425718 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  425718:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  42571a:	4770      	bx	lr

0042571c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  42571c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  42571e:	4770      	bx	lr

00425720 <pmc_switch_mck_to_sclk>:
 */
uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  425720:	4b16      	ldr	r3, [pc, #88]	; (42577c <pmc_switch_mck_to_sclk+0x5c>)
  425722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  425724:	f022 0203 	bic.w	r2, r2, #3
  425728:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_SLOW_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  42572a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  42572c:	f013 0f08 	tst.w	r3, #8
  425730:	d10a      	bne.n	425748 <pmc_switch_mck_to_sclk+0x28>
  425732:	f44f 6300 	mov.w	r3, #2048	; 0x800
  425736:	4911      	ldr	r1, [pc, #68]	; (42577c <pmc_switch_mck_to_sclk+0x5c>)
  425738:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  42573a:	f012 0f08 	tst.w	r2, #8
  42573e:	d103      	bne.n	425748 <pmc_switch_mck_to_sclk+0x28>
			--ul_timeout) {
		if (ul_timeout == 0) {
  425740:	3b01      	subs	r3, #1
  425742:	d1f9      	bne.n	425738 <pmc_switch_mck_to_sclk+0x18>
			return 1;
  425744:	2001      	movs	r0, #1
  425746:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  425748:	4a0c      	ldr	r2, [pc, #48]	; (42577c <pmc_switch_mck_to_sclk+0x5c>)
  42574a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  42574c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  425750:	4318      	orrs	r0, r3
  425752:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  425754:	6e93      	ldr	r3, [r2, #104]	; 0x68
  425756:	f013 0f08 	tst.w	r3, #8
  42575a:	d10a      	bne.n	425772 <pmc_switch_mck_to_sclk+0x52>
  42575c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  425760:	4906      	ldr	r1, [pc, #24]	; (42577c <pmc_switch_mck_to_sclk+0x5c>)
  425762:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  425764:	f012 0f08 	tst.w	r2, #8
  425768:	d105      	bne.n	425776 <pmc_switch_mck_to_sclk+0x56>
			--ul_timeout) {
		if (ul_timeout == 0) {
  42576a:	3b01      	subs	r3, #1
  42576c:	d1f9      	bne.n	425762 <pmc_switch_mck_to_sclk+0x42>
			return 1;
  42576e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  425770:	4770      	bx	lr
	return 0;
  425772:	2000      	movs	r0, #0
  425774:	4770      	bx	lr
  425776:	2000      	movs	r0, #0
  425778:	4770      	bx	lr
  42577a:	bf00      	nop
  42577c:	400e0400 	.word	0x400e0400

00425780 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  425780:	4a17      	ldr	r2, [pc, #92]	; (4257e0 <pmc_switch_mck_to_mainck+0x60>)
  425782:	6b13      	ldr	r3, [r2, #48]	; 0x30
  425784:	f023 0303 	bic.w	r3, r3, #3
  425788:	f043 0301 	orr.w	r3, r3, #1
  42578c:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  42578e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  425790:	f013 0f08 	tst.w	r3, #8
  425794:	d10a      	bne.n	4257ac <pmc_switch_mck_to_mainck+0x2c>
  425796:	f44f 6300 	mov.w	r3, #2048	; 0x800
  42579a:	4911      	ldr	r1, [pc, #68]	; (4257e0 <pmc_switch_mck_to_mainck+0x60>)
  42579c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  42579e:	f012 0f08 	tst.w	r2, #8
  4257a2:	d103      	bne.n	4257ac <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4257a4:	3b01      	subs	r3, #1
  4257a6:	d1f9      	bne.n	42579c <pmc_switch_mck_to_mainck+0x1c>
			return 1;
  4257a8:	2001      	movs	r0, #1
  4257aa:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4257ac:	4a0c      	ldr	r2, [pc, #48]	; (4257e0 <pmc_switch_mck_to_mainck+0x60>)
  4257ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4257b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4257b4:	4318      	orrs	r0, r3
  4257b6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4257b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4257ba:	f013 0f08 	tst.w	r3, #8
  4257be:	d10a      	bne.n	4257d6 <pmc_switch_mck_to_mainck+0x56>
  4257c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4257c4:	4906      	ldr	r1, [pc, #24]	; (4257e0 <pmc_switch_mck_to_mainck+0x60>)
  4257c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4257c8:	f012 0f08 	tst.w	r2, #8
  4257cc:	d105      	bne.n	4257da <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4257ce:	3b01      	subs	r3, #1
  4257d0:	d1f9      	bne.n	4257c6 <pmc_switch_mck_to_mainck+0x46>
			return 1;
  4257d2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4257d4:	4770      	bx	lr
	return 0;
  4257d6:	2000      	movs	r0, #0
  4257d8:	4770      	bx	lr
  4257da:	2000      	movs	r0, #0
  4257dc:	4770      	bx	lr
  4257de:	bf00      	nop
  4257e0:	400e0400 	.word	0x400e0400

004257e4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4257e4:	4a17      	ldr	r2, [pc, #92]	; (425844 <pmc_switch_mck_to_pllack+0x60>)
  4257e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4257e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4257ec:	4318      	orrs	r0, r3
  4257ee:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4257f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4257f2:	f013 0f08 	tst.w	r3, #8
  4257f6:	d10a      	bne.n	42580e <pmc_switch_mck_to_pllack+0x2a>
  4257f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4257fc:	4911      	ldr	r1, [pc, #68]	; (425844 <pmc_switch_mck_to_pllack+0x60>)
  4257fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  425800:	f012 0f08 	tst.w	r2, #8
  425804:	d103      	bne.n	42580e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  425806:	3b01      	subs	r3, #1
  425808:	d1f9      	bne.n	4257fe <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  42580a:	2001      	movs	r0, #1
  42580c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  42580e:	4a0d      	ldr	r2, [pc, #52]	; (425844 <pmc_switch_mck_to_pllack+0x60>)
  425810:	6b13      	ldr	r3, [r2, #48]	; 0x30
  425812:	f023 0303 	bic.w	r3, r3, #3
  425816:	f043 0302 	orr.w	r3, r3, #2
  42581a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  42581c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  42581e:	f013 0f08 	tst.w	r3, #8
  425822:	d10a      	bne.n	42583a <pmc_switch_mck_to_pllack+0x56>
  425824:	f44f 6300 	mov.w	r3, #2048	; 0x800
  425828:	4906      	ldr	r1, [pc, #24]	; (425844 <pmc_switch_mck_to_pllack+0x60>)
  42582a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  42582c:	f012 0f08 	tst.w	r2, #8
  425830:	d105      	bne.n	42583e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  425832:	3b01      	subs	r3, #1
  425834:	d1f9      	bne.n	42582a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  425836:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  425838:	4770      	bx	lr
	return 0;
  42583a:	2000      	movs	r0, #0
  42583c:	4770      	bx	lr
  42583e:	2000      	movs	r0, #0
  425840:	4770      	bx	lr
  425842:	bf00      	nop
  425844:	400e0400 	.word	0x400e0400

00425848 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  425848:	4911      	ldr	r1, [pc, #68]	; (425890 <pmc_switch_mainck_to_fastrc+0x48>)
  42584a:	6a0a      	ldr	r2, [r1, #32]
  42584c:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  425850:	f042 0208 	orr.w	r2, r2, #8
  425854:	620a      	str	r2, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  425856:	460a      	mov	r2, r1
  425858:	6e93      	ldr	r3, [r2, #104]	; 0x68
  42585a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  42585e:	d0fb      	beq.n	425858 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  425860:	4a0b      	ldr	r2, [pc, #44]	; (425890 <pmc_switch_mainck_to_fastrc+0x48>)
  425862:	6a13      	ldr	r3, [r2, #32]
  425864:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  425868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  42586c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  425870:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  425872:	6210      	str	r0, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  425874:	6e93      	ldr	r3, [r2, #104]	; 0x68
  425876:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  42587a:	d0fb      	beq.n	425874 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  42587c:	4a04      	ldr	r2, [pc, #16]	; (425890 <pmc_switch_mainck_to_fastrc+0x48>)
  42587e:	6a13      	ldr	r3, [r2, #32]
  425880:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  425884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  425888:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  42588c:	6213      	str	r3, [r2, #32]
  42588e:	4770      	bx	lr
  425890:	400e0400 	.word	0x400e0400

00425894 <pmc_osc_enable_fastrc>:
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  425894:	490d      	ldr	r1, [pc, #52]	; (4258cc <pmc_osc_enable_fastrc+0x38>)
  425896:	6a0a      	ldr	r2, [r1, #32]
  425898:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  42589c:	f042 0208 	orr.w	r2, r2, #8
  4258a0:	620a      	str	r2, [r1, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4258a2:	460a      	mov	r2, r1
  4258a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4258a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4258aa:	d0fb      	beq.n	4258a4 <pmc_osc_enable_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4258ac:	4a07      	ldr	r2, [pc, #28]	; (4258cc <pmc_osc_enable_fastrc+0x38>)
  4258ae:	6a13      	ldr	r3, [r2, #32]
  4258b0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4258b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
  4258b8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4258bc:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4258be:	6210      	str	r0, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4258c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4258c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4258c6:	d0fb      	beq.n	4258c0 <pmc_osc_enable_fastrc+0x2c>
}
  4258c8:	4770      	bx	lr
  4258ca:	bf00      	nop
  4258cc:	400e0400 	.word	0x400e0400

004258d0 <pmc_osc_is_ready_fastrc>:
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
  4258d0:	4b02      	ldr	r3, [pc, #8]	; (4258dc <pmc_osc_is_ready_fastrc+0xc>)
  4258d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4258d4:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
  4258d8:	4770      	bx	lr
  4258da:	bf00      	nop
  4258dc:	400e0400 	.word	0x400e0400

004258e0 <pmc_osc_disable_xtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_osc_disable_xtal(uint32_t ul_bypass)
{
	/* Disable xtal oscillator */
	if (ul_bypass) {
  4258e0:	b948      	cbnz	r0, 4258f6 <pmc_osc_disable_xtal+0x16>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4258e2:	4a0a      	ldr	r2, [pc, #40]	; (42590c <pmc_osc_disable_xtal+0x2c>)
  4258e4:	6a13      	ldr	r3, [r2, #32]
  4258e6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4258ea:	f023 0301 	bic.w	r3, r3, #1
  4258ee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4258f2:	6213      	str	r3, [r2, #32]
  4258f4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4258f6:	4a05      	ldr	r2, [pc, #20]	; (42590c <pmc_osc_disable_xtal+0x2c>)
  4258f8:	6a13      	ldr	r3, [r2, #32]
  4258fa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4258fe:	f023 0302 	bic.w	r3, r3, #2
  425902:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  425906:	6213      	str	r3, [r2, #32]
  425908:	4770      	bx	lr
  42590a:	bf00      	nop
  42590c:	400e0400 	.word	0x400e0400

00425910 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  425910:	4b02      	ldr	r3, [pc, #8]	; (42591c <pmc_osc_is_ready_mainck+0xc>)
  425912:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  425914:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  425918:	4770      	bx	lr
  42591a:	bf00      	nop
  42591c:	400e0400 	.word	0x400e0400

00425920 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  425920:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  425924:	4b01      	ldr	r3, [pc, #4]	; (42592c <pmc_disable_pllack+0xc>)
  425926:	629a      	str	r2, [r3, #40]	; 0x28
  425928:	4770      	bx	lr
  42592a:	bf00      	nop
  42592c:	400e0400 	.word	0x400e0400

00425930 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  425930:	4b02      	ldr	r3, [pc, #8]	; (42593c <pmc_is_locked_pllack+0xc>)
  425932:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  425934:	f000 0002 	and.w	r0, r0, #2
  425938:	4770      	bx	lr
  42593a:	bf00      	nop
  42593c:	400e0400 	.word	0x400e0400

00425940 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  425940:	282f      	cmp	r0, #47	; 0x2f
  425942:	d81e      	bhi.n	425982 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  425944:	281f      	cmp	r0, #31
  425946:	d80c      	bhi.n	425962 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  425948:	4b11      	ldr	r3, [pc, #68]	; (425990 <pmc_enable_periph_clk+0x50>)
  42594a:	699a      	ldr	r2, [r3, #24]
  42594c:	2301      	movs	r3, #1
  42594e:	4083      	lsls	r3, r0
  425950:	4393      	bics	r3, r2
  425952:	d018      	beq.n	425986 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  425954:	2301      	movs	r3, #1
  425956:	fa03 f000 	lsl.w	r0, r3, r0
  42595a:	4b0d      	ldr	r3, [pc, #52]	; (425990 <pmc_enable_periph_clk+0x50>)
  42595c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  42595e:	2000      	movs	r0, #0
  425960:	4770      	bx	lr
		ul_id -= 32;
  425962:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  425964:	4b0a      	ldr	r3, [pc, #40]	; (425990 <pmc_enable_periph_clk+0x50>)
  425966:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  42596a:	2301      	movs	r3, #1
  42596c:	4083      	lsls	r3, r0
  42596e:	4393      	bics	r3, r2
  425970:	d00b      	beq.n	42598a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  425972:	2301      	movs	r3, #1
  425974:	fa03 f000 	lsl.w	r0, r3, r0
  425978:	4b05      	ldr	r3, [pc, #20]	; (425990 <pmc_enable_periph_clk+0x50>)
  42597a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  42597e:	2000      	movs	r0, #0
  425980:	4770      	bx	lr
		return 1;
  425982:	2001      	movs	r0, #1
  425984:	4770      	bx	lr
	return 0;
  425986:	2000      	movs	r0, #0
  425988:	4770      	bx	lr
  42598a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  42598c:	4770      	bx	lr
  42598e:	bf00      	nop
  425990:	400e0400 	.word	0x400e0400

00425994 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  425994:	f44f 7380 	mov.w	r3, #256	; 0x100
  425998:	fa03 f000 	lsl.w	r0, r3, r0
  42599c:	4b01      	ldr	r3, [pc, #4]	; (4259a4 <pmc_enable_pck+0x10>)
  42599e:	6018      	str	r0, [r3, #0]
  4259a0:	4770      	bx	lr
  4259a2:	bf00      	nop
  4259a4:	400e0400 	.word	0x400e0400

004259a8 <pmc_enable_backupmode>:
#if (SAM4C || SAM4CM || SAM4CP)
	uint32_t tmp = SUPC->SUPC_MR & ~(SUPC_MR_BUPPOREN | SUPC_MR_KEY_Msk);
	SUPC->SUPC_MR = tmp | SUPC_MR_KEY_PASSWD;
	while (SUPC->SUPC_SR & SUPC_SR_BUPPORS);
#endif
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
  4259a8:	4a06      	ldr	r2, [pc, #24]	; (4259c4 <pmc_enable_backupmode+0x1c>)
  4259aa:	6913      	ldr	r3, [r2, #16]
  4259ac:	f043 0304 	orr.w	r3, r3, #4
  4259b0:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4259b2:	4b05      	ldr	r3, [pc, #20]	; (4259c8 <pmc_enable_backupmode+0x20>)
  4259b4:	4a05      	ldr	r2, [pc, #20]	; (4259cc <pmc_enable_backupmode+0x24>)
  4259b6:	601a      	str	r2, [r3, #0]
	uint32_t ul_dummy = SUPC->SUPC_MR;
  4259b8:	689b      	ldr	r3, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
  4259ba:	f3bf 8f4f 	dsb	sy
	UNUSED(ul_dummy);
	__DSB();
	__WFE();
  4259be:	bf20      	wfe
	__WFI();
  4259c0:	bf30      	wfi
  4259c2:	4770      	bx	lr
  4259c4:	e000ed00 	.word	0xe000ed00
  4259c8:	400e1810 	.word	0x400e1810
  4259cc:	a5000004 	.word	0xa5000004

004259d0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4259d0:	b4f0      	push	{r4, r5, r6, r7}
  4259d2:	b08c      	sub	sp, #48	; 0x30
  4259d4:	4607      	mov	r7, r0
  4259d6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4259d8:	ac01      	add	r4, sp, #4
  4259da:	4d11      	ldr	r5, [pc, #68]	; (425a20 <pwm_clocks_generate+0x50>)
  4259dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4259de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4259e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4259e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4259e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4259e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4259ec:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4259ee:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4259f0:	f852 0b04 	ldr.w	r0, [r2], #4
  4259f4:	fbb6 f0f0 	udiv	r0, r6, r0
  4259f8:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4259fc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  425a00:	d907      	bls.n	425a12 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  425a02:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  425a04:	2b0b      	cmp	r3, #11
  425a06:	d1f3      	bne.n	4259f0 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  425a08:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  425a0c:	b00c      	add	sp, #48	; 0x30
  425a0e:	bcf0      	pop	{r4, r5, r6, r7}
  425a10:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  425a12:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  425a14:	bf94      	ite	ls
  425a16:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  425a1a:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  425a1e:	e7f5      	b.n	425a0c <pwm_clocks_generate+0x3c>
  425a20:	0042f604 	.word	0x0042f604

00425a24 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  425a24:	b570      	push	{r4, r5, r6, lr}
  425a26:	4606      	mov	r6, r0
  425a28:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  425a2a:	680c      	ldr	r4, [r1, #0]
  425a2c:	b144      	cbz	r4, 425a40 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  425a2e:	6889      	ldr	r1, [r1, #8]
  425a30:	4620      	mov	r0, r4
  425a32:	4b0c      	ldr	r3, [pc, #48]	; (425a64 <pwm_init+0x40>)
  425a34:	4798      	blx	r3
  425a36:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  425a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
  425a3c:	4298      	cmp	r0, r3
  425a3e:	d00c      	beq.n	425a5a <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  425a40:	6868      	ldr	r0, [r5, #4]
  425a42:	b140      	cbz	r0, 425a56 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  425a44:	68a9      	ldr	r1, [r5, #8]
  425a46:	4b07      	ldr	r3, [pc, #28]	; (425a64 <pwm_init+0x40>)
  425a48:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  425a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  425a4e:	4298      	cmp	r0, r3
  425a50:	d005      	beq.n	425a5e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  425a52:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  425a56:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  425a58:	2400      	movs	r4, #0
}
  425a5a:	4620      	mov	r0, r4
  425a5c:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  425a5e:	4604      	mov	r4, r0
  425a60:	e7fb      	b.n	425a5a <pwm_init+0x36>
  425a62:	bf00      	nop
  425a64:	004259d1 	.word	0x004259d1

00425a68 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  425a68:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  425a6a:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  425a6c:	684b      	ldr	r3, [r1, #4]
  425a6e:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  425a72:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  425a74:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  425a76:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  425a78:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  425a7a:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  425a7c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  425a80:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  425a82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  425a86:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  425a88:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  425a8c:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  425a8e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  425a92:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  425a96:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  425a9a:	68cb      	ldr	r3, [r1, #12]
  425a9c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  425aa0:	690b      	ldr	r3, [r1, #16]
  425aa2:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  425aa6:	7d8b      	ldrb	r3, [r1, #22]
  425aa8:	b13b      	cbz	r3, 425aba <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  425aaa:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  425aac:	8b4b      	ldrh	r3, [r1, #26]
  425aae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  425ab2:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  425ab6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  425aba:	6c85      	ldr	r5, [r0, #72]	; 0x48
  425abc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  425ac0:	4093      	lsls	r3, r2
  425ac2:	43db      	mvns	r3, r3
  425ac4:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  425ac6:	7fcc      	ldrb	r4, [r1, #31]
  425ac8:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  425acc:	7f8c      	ldrb	r4, [r1, #30]
  425ace:	4094      	lsls	r4, r2
  425ad0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  425ad4:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  425ad6:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  425ad8:	6c44      	ldr	r4, [r0, #68]	; 0x44
  425ada:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  425adc:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  425ae0:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  425ae4:	f891 4020 	ldrb.w	r4, [r1, #32]
  425ae8:	4094      	lsls	r4, r2
  425aea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  425aee:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  425af0:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  425af2:	2301      	movs	r3, #1
  425af4:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  425af6:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  425afa:	2c00      	cmp	r4, #0
  425afc:	d043      	beq.n	425b86 <pwm_channel_init+0x11e>
		p_pwm->PWM_SCM |= channel;
  425afe:	6a04      	ldr	r4, [r0, #32]
  425b00:	431c      	orrs	r4, r3
  425b02:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  425b04:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  425b08:	2c02      	cmp	r4, #2
  425b0a:	d041      	beq.n	425b90 <pwm_channel_init+0x128>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  425b0c:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  425b10:	43dc      	mvns	r4, r3
  425b12:	4025      	ands	r5, r4
  425b14:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  425b18:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
  425b1c:	2d01      	cmp	r5, #1
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  425b1e:	bf07      	ittee	eq
  425b20:	6e84      	ldreq	r4, [r0, #104]	; 0x68
  425b22:	431c      	orreq	r4, r3
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  425b24:	6e85      	ldrne	r5, [r0, #104]	; 0x68
  425b26:	402c      	andne	r4, r5
  425b28:	6684      	str	r4, [r0, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  425b2a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  425b2e:	2c02      	cmp	r4, #2
  425b30:	d034      	beq.n	425b9c <pwm_channel_init+0x134>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  425b32:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  425b36:	041b      	lsls	r3, r3, #16
  425b38:	43dc      	mvns	r4, r3
  425b3a:	4025      	ands	r5, r4
  425b3c:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  425b40:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
  425b44:	2d01      	cmp	r5, #1
  425b46:	d030      	beq.n	425baa <pwm_channel_init+0x142>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  425b48:	6e83      	ldr	r3, [r0, #104]	; 0x68
  425b4a:	401c      	ands	r4, r3
  425b4c:	6684      	str	r4, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  425b4e:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  425b50:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  425b52:	23ff      	movs	r3, #255	; 0xff
  425b54:	4093      	lsls	r3, r2
  425b56:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  425b5a:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  425b5e:	fa03 f202 	lsl.w	r2, r3, r2
  425b62:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  425b64:	66c2      	str	r2, [r0, #108]	; 0x6c
#endif

	ch_num = p_channel->channel;

#if SAM4E
	if (!ch_num) {
  425b66:	680b      	ldr	r3, [r1, #0]
  425b68:	b953      	cbnz	r3, 425b80 <pwm_channel_init+0x118>
		if (p_channel->spread_spectrum_mode ==
  425b6a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
  425b6e:	2b01      	cmp	r3, #1
				PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  425b70:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  425b72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  425b76:	bf08      	it	eq
  425b78:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
					PWM_SSPR_SPRDM;
		} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  425b7c:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  425b80:	2000      	movs	r0, #0
  425b82:	bc70      	pop	{r4, r5, r6}
  425b84:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  425b86:	6a04      	ldr	r4, [r0, #32]
  425b88:	ea24 0403 	bic.w	r4, r4, r3
  425b8c:	6204      	str	r4, [r0, #32]
  425b8e:	e7b9      	b.n	425b04 <pwm_channel_init+0x9c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  425b90:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  425b94:	431c      	orrs	r4, r3
  425b96:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  425b9a:	e7c6      	b.n	425b2a <pwm_channel_init+0xc2>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  425b9c:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  425ba0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
  425ba4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  425ba8:	e7d1      	b.n	425b4e <pwm_channel_init+0xe6>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  425baa:	6e84      	ldr	r4, [r0, #104]	; 0x68
  425bac:	4323      	orrs	r3, r4
  425bae:	6683      	str	r3, [r0, #104]	; 0x68
  425bb0:	e7cd      	b.n	425b4e <pwm_channel_init+0xe6>

00425bb2 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  425bb2:	690b      	ldr	r3, [r1, #16]
  425bb4:	4293      	cmp	r3, r2
  425bb6:	d202      	bcs.n	425bbe <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
  425bb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  425bbc:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
  425bbe:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
  425bc0:	60ca      	str	r2, [r1, #12]
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  425bc2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  425bc6:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
	return 0;
  425bca:	2000      	movs	r0, #0
  425bcc:	4770      	bx	lr

00425bce <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  425bce:	2301      	movs	r3, #1
  425bd0:	fa03 f101 	lsl.w	r1, r3, r1
  425bd4:	6041      	str	r1, [r0, #4]
  425bd6:	4770      	bx	lr

00425bd8 <board_init>:
#endif



void board_init(void)
{
  425bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  425bdc:	2009      	movs	r0, #9
  425bde:	4cd5      	ldr	r4, [pc, #852]	; (425f34 <board_init+0x35c>)
  425be0:	47a0      	blx	r4
  425be2:	200a      	movs	r0, #10
  425be4:	47a0      	blx	r4
  425be6:	200c      	movs	r0, #12
  425be8:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425bea:	4ad3      	ldr	r2, [pc, #844]	; (425f38 <board_init+0x360>)
  425bec:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  425bf0:	6115      	str	r5, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425bf2:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425bf6:	4bd1      	ldr	r3, [pc, #836]	; (425f3c <board_init+0x364>)
  425bf8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  425bfc:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425bfe:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c02:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  425c06:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c08:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c0c:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
  425c10:	f8c3 9010 	str.w	r9, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c14:	f8c3 90a0 	str.w	r9, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c18:	49c9      	ldr	r1, [pc, #804]	; (425f40 <board_init+0x368>)
  425c1a:	f44f 6600 	mov.w	r6, #2048	; 0x800
  425c1e:	610e      	str	r6, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c20:	f8c1 60a0 	str.w	r6, [r1, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c24:	610d      	str	r5, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c26:	f8c1 50a0 	str.w	r5, [r1, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  425c2e:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c30:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c34:	f04f 0e10 	mov.w	lr, #16
  425c38:	f8c2 e010 	str.w	lr, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c3c:	f8c2 e0a0 	str.w	lr, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c40:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  425c44:	610f      	str	r7, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c46:	f8c1 70a0 	str.w	r7, [r1, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c4a:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
  425c4e:	f8c3 c010 	str.w	ip, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c52:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  425c5a:	6110      	str	r0, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c5c:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  425c60:	f04f 0b01 	mov.w	fp, #1
  425c64:	f8c3 b014 	str.w	fp, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c68:	f8c3 b0a0 	str.w	fp, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  425c6c:	2404      	movs	r4, #4
  425c6e:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c70:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  425c74:	f04f 0a02 	mov.w	sl, #2
  425c78:	f8c3 a014 	str.w	sl, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c7c:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c80:	2080      	movs	r0, #128	; 0x80
  425c82:	6110      	str	r0, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c84:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c88:	2040      	movs	r0, #64	; 0x40
  425c8a:	6110      	str	r0, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c8c:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  425c94:	6110      	str	r0, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425c96:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425c9a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  425c9e:	6110      	str	r0, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425ca0:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425ca4:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
  425ca8:	f8c2 8010 	str.w	r8, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425cac:	f8c2 80a0 	str.w	r8, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425cb0:	f8c2 c010 	str.w	ip, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425cb4:	f8c2 c0a0 	str.w	ip, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425cb8:	2008      	movs	r0, #8
  425cba:	6110      	str	r0, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425cbc:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425cc0:	f8c2 b010 	str.w	fp, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425cc4:	f8c2 b0a0 	str.w	fp, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425cc8:	6114      	str	r4, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425cca:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425cce:	f8c2 a010 	str.w	sl, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425cd2:	f8c2 a0a0 	str.w	sl, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425cd6:	f8c3 c010 	str.w	ip, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425cda:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425cde:	f8c3 8010 	str.w	r8, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425ce2:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425ce6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  425cea:	f8c3 c010 	str.w	ip, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425cee:	f8c3 c0a0 	str.w	ip, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  425cf2:	f04f 0820 	mov.w	r8, #32
  425cf6:	f8c3 8014 	str.w	r8, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425cfa:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  425cfe:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
  425d02:	f8c2 a014 	str.w	sl, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425d06:	f8c2 a0a0 	str.w	sl, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425d0a:	f44f 2a00 	mov.w	sl, #524288	; 0x80000
  425d0e:	f8c2 a010 	str.w	sl, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425d12:	f8c2 a0a0 	str.w	sl, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  425d16:	f8c2 9010 	str.w	r9, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425d1a:	f8c2 90a0 	str.w	r9, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  425d1e:	f8c1 8014 	str.w	r8, [r1, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  425d22:	f8c1 80a0 	str.w	r8, [r1, #160]	; 0xa0
		base->PIO_PUDR = mask;
  425d26:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  425d2a:	f8c2 8060 	str.w	r8, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425d2e:	f8c2 8090 	str.w	r8, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  425d32:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  425d36:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425d3a:	f8c2 8080 	str.w	r8, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425d3e:	f8d2 9070 	ldr.w	r9, [r2, #112]	; 0x70
  425d42:	f429 1980 	bic.w	r9, r9, #1048576	; 0x100000
  425d46:	f8c2 9070 	str.w	r9, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425d4a:	f8d2 9074 	ldr.w	r9, [r2, #116]	; 0x74
  425d4e:	f429 1980 	bic.w	r9, r9, #1048576	; 0x100000
  425d52:	f8c2 9074 	str.w	r9, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425d56:	f8c2 8004 	str.w	r8, [r2, #4]
		base->PIO_PUDR = mask;
  425d5a:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
  425d5e:	f8c2 8060 	str.w	r8, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425d62:	f8c2 8090 	str.w	r8, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  425d66:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  425d6a:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425d6e:	f8c2 8080 	str.w	r8, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425d72:	f8d2 9070 	ldr.w	r9, [r2, #112]	; 0x70
  425d76:	f429 1900 	bic.w	r9, r9, #2097152	; 0x200000
  425d7a:	f8c2 9070 	str.w	r9, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425d7e:	f8d2 9074 	ldr.w	r9, [r2, #116]	; 0x74
  425d82:	f429 1900 	bic.w	r9, r9, #2097152	; 0x200000
  425d86:	f8c2 9074 	str.w	r9, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425d8a:	f8c2 8004 	str.w	r8, [r2, #4]
		base->PIO_PUDR = mask;
  425d8e:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
  425d92:	f8c2 8060 	str.w	r8, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425d96:	f8c2 8090 	str.w	r8, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  425d9a:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  425d9e:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425da2:	f8c2 8080 	str.w	r8, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425da6:	f8d2 9070 	ldr.w	r9, [r2, #112]	; 0x70
  425daa:	f429 0980 	bic.w	r9, r9, #4194304	; 0x400000
  425dae:	f8c2 9070 	str.w	r9, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425db2:	f8d2 9074 	ldr.w	r9, [r2, #116]	; 0x74
  425db6:	f429 0980 	bic.w	r9, r9, #4194304	; 0x400000
  425dba:	f8c2 9074 	str.w	r9, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425dbe:	f8c2 8004 	str.w	r8, [r2, #4]
		base->PIO_PUDR = mask;
  425dc2:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425dc6:	f8c2 c090 	str.w	ip, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  425dca:	f8c2 c054 	str.w	ip, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  425dce:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425dd2:	f8c2 c080 	str.w	ip, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425dd6:	f8d2 8070 	ldr.w	r8, [r2, #112]	; 0x70
  425dda:	f428 0800 	bic.w	r8, r8, #8388608	; 0x800000
  425dde:	f8c2 8070 	str.w	r8, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425de2:	f8d2 8074 	ldr.w	r8, [r2, #116]	; 0x74
  425de6:	f428 0800 	bic.w	r8, r8, #8388608	; 0x800000
  425dea:	f8c2 8074 	str.w	r8, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425dee:	f8c2 c004 	str.w	ip, [r2, #4]
		base->PIO_PUDR = mask;
  425df2:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425df4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  425df8:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  425dfa:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425dfc:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  425e02:	f022 0208 	bic.w	r2, r2, #8
  425e06:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425e08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  425e0a:	f022 0208 	bic.w	r2, r2, #8
  425e0e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425e10:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  425e12:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425e16:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  425e1a:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  425e1e:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425e22:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425e26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  425e28:	f022 0210 	bic.w	r2, r2, #16
  425e2c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425e2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  425e30:	f022 0210 	bic.w	r2, r2, #16
  425e34:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425e36:	f8c3 e004 	str.w	lr, [r3, #4]
		base->PIO_PUDR = mask;
  425e3a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  425e3e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  425e44:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  425e46:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425e4c:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  425e50:	f42e 6ec0 	bic.w	lr, lr, #1536	; 0x600
  425e54:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425e58:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  425e5c:	f42e 6ec0 	bic.w	lr, lr, #1536	; 0x600
  425e60:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425e64:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  425e66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  425e6a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425e6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  425e70:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  425e72:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425e78:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  425e7c:	f42e 5e80 	bic.w	lr, lr, #4096	; 0x1000
  425e80:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425e84:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  425e88:	f42e 5e80 	bic.w	lr, lr, #4096	; 0x1000
  425e8c:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425e90:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  425e92:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425e94:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  425e98:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  425e9a:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425e9c:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425ea0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  425ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  425ea6:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425ea8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  425eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  425eae:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425eb0:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  425eb2:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425eb4:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  425eb8:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  425eba:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425ebc:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425ec0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  425ec2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  425ec6:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425ec8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  425eca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  425ece:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425ed0:	605d      	str	r5, [r3, #4]
		base->PIO_PUDR = mask;
  425ed2:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425ed4:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  425ed8:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  425eda:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425edc:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425ee0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  425ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  425ee6:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425ee8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  425eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  425eee:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425ef0:	605e      	str	r6, [r3, #4]
		base->PIO_PUDR = mask;
  425ef2:	6608      	str	r0, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425ef4:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  425ef8:	6548      	str	r0, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  425efa:	6248      	str	r0, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425efc:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425f00:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  425f02:	f023 0308 	bic.w	r3, r3, #8
  425f06:	670b      	str	r3, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425f08:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  425f0a:	f023 0308 	bic.w	r3, r3, #8
  425f0e:	674b      	str	r3, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425f10:	6048      	str	r0, [r1, #4]
		base->PIO_PUDR = mask;
  425f12:	660c      	str	r4, [r1, #96]	; 0x60
		base->PIO_PPDDR = mask;
  425f14:	f8c1 4090 	str.w	r4, [r1, #144]	; 0x90
		base->PIO_MDDR = mask;
  425f18:	654c      	str	r4, [r1, #84]	; 0x54
		base->PIO_IFDR = mask;
  425f1a:	624c      	str	r4, [r1, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  425f1c:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  425f20:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  425f22:	f023 0304 	bic.w	r3, r3, #4
  425f26:	670b      	str	r3, [r1, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  425f28:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  425f2a:	f023 0304 	bic.w	r3, r3, #4
  425f2e:	674b      	str	r3, [r1, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  425f30:	604c      	str	r4, [r1, #4]
  425f32:	e007      	b.n	425f44 <board_init+0x36c>
  425f34:	00425941 	.word	0x00425941
  425f38:	400e1400 	.word	0x400e1400
  425f3c:	400e0e00 	.word	0x400e0e00
  425f40:	400e1000 	.word	0x400e1000
  425f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00425f48 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  425f48:	e7fe      	b.n	425f48 <Dummy_Handler>
	...

00425f4c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  425f4c:	b500      	push	{lr}
  425f4e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  425f50:	4b25      	ldr	r3, [pc, #148]	; (425fe8 <Reset_Handler+0x9c>)
  425f52:	4a26      	ldr	r2, [pc, #152]	; (425fec <Reset_Handler+0xa0>)
  425f54:	429a      	cmp	r2, r3
  425f56:	d010      	beq.n	425f7a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  425f58:	4b25      	ldr	r3, [pc, #148]	; (425ff0 <Reset_Handler+0xa4>)
  425f5a:	4a23      	ldr	r2, [pc, #140]	; (425fe8 <Reset_Handler+0x9c>)
  425f5c:	429a      	cmp	r2, r3
  425f5e:	d20c      	bcs.n	425f7a <Reset_Handler+0x2e>
  425f60:	3b01      	subs	r3, #1
  425f62:	1a9b      	subs	r3, r3, r2
  425f64:	f023 0303 	bic.w	r3, r3, #3
  425f68:	3304      	adds	r3, #4
  425f6a:	4413      	add	r3, r2
  425f6c:	491f      	ldr	r1, [pc, #124]	; (425fec <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  425f6e:	f851 0b04 	ldr.w	r0, [r1], #4
  425f72:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  425f76:	429a      	cmp	r2, r3
  425f78:	d1f9      	bne.n	425f6e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  425f7a:	4b1e      	ldr	r3, [pc, #120]	; (425ff4 <Reset_Handler+0xa8>)
  425f7c:	4a1e      	ldr	r2, [pc, #120]	; (425ff8 <Reset_Handler+0xac>)
  425f7e:	429a      	cmp	r2, r3
  425f80:	d20a      	bcs.n	425f98 <Reset_Handler+0x4c>
  425f82:	3b01      	subs	r3, #1
  425f84:	1a9b      	subs	r3, r3, r2
  425f86:	f023 0303 	bic.w	r3, r3, #3
  425f8a:	3304      	adds	r3, #4
  425f8c:	4413      	add	r3, r2
		*pDest++ = 0;
  425f8e:	2100      	movs	r1, #0
  425f90:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  425f94:	4293      	cmp	r3, r2
  425f96:	d1fb      	bne.n	425f90 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  425f98:	4a18      	ldr	r2, [pc, #96]	; (425ffc <Reset_Handler+0xb0>)
  425f9a:	4b19      	ldr	r3, [pc, #100]	; (426000 <Reset_Handler+0xb4>)
  425f9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  425fa0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  425fa2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  425fa6:	fab3 f383 	clz	r3, r3
  425faa:	095b      	lsrs	r3, r3, #5
  425fac:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  425fae:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  425fb0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  425fb4:	2200      	movs	r2, #0
  425fb6:	4b13      	ldr	r3, [pc, #76]	; (426004 <Reset_Handler+0xb8>)
  425fb8:	701a      	strb	r2, [r3, #0]
	return flags;
  425fba:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  425fbc:	4a12      	ldr	r2, [pc, #72]	; (426008 <Reset_Handler+0xbc>)
  425fbe:	6813      	ldr	r3, [r2, #0]
  425fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  425fc4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  425fc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  425fca:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  425fce:	b129      	cbz	r1, 425fdc <Reset_Handler+0x90>
		cpu_irq_enable();
  425fd0:	2201      	movs	r2, #1
  425fd2:	4b0c      	ldr	r3, [pc, #48]	; (426004 <Reset_Handler+0xb8>)
  425fd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  425fd6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  425fda:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  425fdc:	4b0b      	ldr	r3, [pc, #44]	; (42600c <Reset_Handler+0xc0>)
  425fde:	4798      	blx	r3

	/* Branch to main function */
	main();
  425fe0:	4b0b      	ldr	r3, [pc, #44]	; (426010 <Reset_Handler+0xc4>)
  425fe2:	4798      	blx	r3
  425fe4:	e7fe      	b.n	425fe4 <Reset_Handler+0x98>
  425fe6:	bf00      	nop
  425fe8:	20000000 	.word	0x20000000
  425fec:	0042fa40 	.word	0x0042fa40
  425ff0:	20000ac4 	.word	0x20000ac4
  425ff4:	2000173c 	.word	0x2000173c
  425ff8:	20000ac4 	.word	0x20000ac4
  425ffc:	e000ed00 	.word	0xe000ed00
  426000:	00420000 	.word	0x00420000
  426004:	200000c1 	.word	0x200000c1
  426008:	e000ed88 	.word	0xe000ed88
  42600c:	00426801 	.word	0x00426801
  426010:	004263ad 	.word	0x004263ad

00426014 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  426014:	4b3b      	ldr	r3, [pc, #236]	; (426104 <SystemCoreClockUpdate+0xf0>)
  426016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  426018:	f003 0303 	and.w	r3, r3, #3
  42601c:	2b01      	cmp	r3, #1
  42601e:	d01d      	beq.n	42605c <SystemCoreClockUpdate+0x48>
  426020:	b183      	cbz	r3, 426044 <SystemCoreClockUpdate+0x30>
  426022:	2b02      	cmp	r3, #2
  426024:	d036      	beq.n	426094 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  426026:	4b37      	ldr	r3, [pc, #220]	; (426104 <SystemCoreClockUpdate+0xf0>)
  426028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  42602a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  42602e:	2b70      	cmp	r3, #112	; 0x70
  426030:	d05f      	beq.n	4260f2 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  426032:	4b34      	ldr	r3, [pc, #208]	; (426104 <SystemCoreClockUpdate+0xf0>)
  426034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  426036:	4934      	ldr	r1, [pc, #208]	; (426108 <SystemCoreClockUpdate+0xf4>)
  426038:	f3c2 1202 	ubfx	r2, r2, #4, #3
  42603c:	680b      	ldr	r3, [r1, #0]
  42603e:	40d3      	lsrs	r3, r2
  426040:	600b      	str	r3, [r1, #0]
  426042:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  426044:	4b31      	ldr	r3, [pc, #196]	; (42610c <SystemCoreClockUpdate+0xf8>)
  426046:	695b      	ldr	r3, [r3, #20]
  426048:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  42604c:	bf14      	ite	ne
  42604e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  426052:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  426056:	4b2c      	ldr	r3, [pc, #176]	; (426108 <SystemCoreClockUpdate+0xf4>)
  426058:	601a      	str	r2, [r3, #0]
  42605a:	e7e4      	b.n	426026 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  42605c:	4b29      	ldr	r3, [pc, #164]	; (426104 <SystemCoreClockUpdate+0xf0>)
  42605e:	6a1b      	ldr	r3, [r3, #32]
  426060:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  426064:	d003      	beq.n	42606e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  426066:	4a2a      	ldr	r2, [pc, #168]	; (426110 <SystemCoreClockUpdate+0xfc>)
  426068:	4b27      	ldr	r3, [pc, #156]	; (426108 <SystemCoreClockUpdate+0xf4>)
  42606a:	601a      	str	r2, [r3, #0]
  42606c:	e7db      	b.n	426026 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  42606e:	4a29      	ldr	r2, [pc, #164]	; (426114 <SystemCoreClockUpdate+0x100>)
  426070:	4b25      	ldr	r3, [pc, #148]	; (426108 <SystemCoreClockUpdate+0xf4>)
  426072:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  426074:	4b23      	ldr	r3, [pc, #140]	; (426104 <SystemCoreClockUpdate+0xf0>)
  426076:	6a1b      	ldr	r3, [r3, #32]
  426078:	f003 0370 	and.w	r3, r3, #112	; 0x70
  42607c:	2b10      	cmp	r3, #16
  42607e:	d005      	beq.n	42608c <SystemCoreClockUpdate+0x78>
  426080:	2b20      	cmp	r3, #32
  426082:	d1d0      	bne.n	426026 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  426084:	4a22      	ldr	r2, [pc, #136]	; (426110 <SystemCoreClockUpdate+0xfc>)
  426086:	4b20      	ldr	r3, [pc, #128]	; (426108 <SystemCoreClockUpdate+0xf4>)
  426088:	601a      	str	r2, [r3, #0]
				break;
  42608a:	e7cc      	b.n	426026 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  42608c:	4a22      	ldr	r2, [pc, #136]	; (426118 <SystemCoreClockUpdate+0x104>)
  42608e:	4b1e      	ldr	r3, [pc, #120]	; (426108 <SystemCoreClockUpdate+0xf4>)
  426090:	601a      	str	r2, [r3, #0]
				break;
  426092:	e7c8      	b.n	426026 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  426094:	4b1b      	ldr	r3, [pc, #108]	; (426104 <SystemCoreClockUpdate+0xf0>)
  426096:	6a1b      	ldr	r3, [r3, #32]
  426098:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  42609c:	d016      	beq.n	4260cc <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  42609e:	4a1c      	ldr	r2, [pc, #112]	; (426110 <SystemCoreClockUpdate+0xfc>)
  4260a0:	4b19      	ldr	r3, [pc, #100]	; (426108 <SystemCoreClockUpdate+0xf4>)
  4260a2:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4260a4:	4b17      	ldr	r3, [pc, #92]	; (426104 <SystemCoreClockUpdate+0xf0>)
  4260a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4260a8:	f003 0303 	and.w	r3, r3, #3
  4260ac:	2b02      	cmp	r3, #2
  4260ae:	d1ba      	bne.n	426026 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4260b0:	4a14      	ldr	r2, [pc, #80]	; (426104 <SystemCoreClockUpdate+0xf0>)
  4260b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4260b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4260b6:	4814      	ldr	r0, [pc, #80]	; (426108 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4260b8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4260bc:	6803      	ldr	r3, [r0, #0]
  4260be:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4260c2:	b2d2      	uxtb	r2, r2
  4260c4:	fbb3 f3f2 	udiv	r3, r3, r2
  4260c8:	6003      	str	r3, [r0, #0]
  4260ca:	e7ac      	b.n	426026 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4260cc:	4a11      	ldr	r2, [pc, #68]	; (426114 <SystemCoreClockUpdate+0x100>)
  4260ce:	4b0e      	ldr	r3, [pc, #56]	; (426108 <SystemCoreClockUpdate+0xf4>)
  4260d0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4260d2:	4b0c      	ldr	r3, [pc, #48]	; (426104 <SystemCoreClockUpdate+0xf0>)
  4260d4:	6a1b      	ldr	r3, [r3, #32]
  4260d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4260da:	2b10      	cmp	r3, #16
  4260dc:	d005      	beq.n	4260ea <SystemCoreClockUpdate+0xd6>
  4260de:	2b20      	cmp	r3, #32
  4260e0:	d1e0      	bne.n	4260a4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4260e2:	4a0b      	ldr	r2, [pc, #44]	; (426110 <SystemCoreClockUpdate+0xfc>)
  4260e4:	4b08      	ldr	r3, [pc, #32]	; (426108 <SystemCoreClockUpdate+0xf4>)
  4260e6:	601a      	str	r2, [r3, #0]
				break;
  4260e8:	e7dc      	b.n	4260a4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4260ea:	4a0b      	ldr	r2, [pc, #44]	; (426118 <SystemCoreClockUpdate+0x104>)
  4260ec:	4b06      	ldr	r3, [pc, #24]	; (426108 <SystemCoreClockUpdate+0xf4>)
  4260ee:	601a      	str	r2, [r3, #0]
				break;
  4260f0:	e7d8      	b.n	4260a4 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4260f2:	4a05      	ldr	r2, [pc, #20]	; (426108 <SystemCoreClockUpdate+0xf4>)
  4260f4:	6813      	ldr	r3, [r2, #0]
  4260f6:	4909      	ldr	r1, [pc, #36]	; (42611c <SystemCoreClockUpdate+0x108>)
  4260f8:	fba1 1303 	umull	r1, r3, r1, r3
  4260fc:	085b      	lsrs	r3, r3, #1
  4260fe:	6013      	str	r3, [r2, #0]
  426100:	4770      	bx	lr
  426102:	bf00      	nop
  426104:	400e0400 	.word	0x400e0400
  426108:	200000c4 	.word	0x200000c4
  42610c:	400e1810 	.word	0x400e1810
  426110:	00b71b00 	.word	0x00b71b00
  426114:	003d0900 	.word	0x003d0900
  426118:	007a1200 	.word	0x007a1200
  42611c:	aaaaaaab 	.word	0xaaaaaaab

00426120 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  426120:	4b12      	ldr	r3, [pc, #72]	; (42616c <system_init_flash+0x4c>)
  426122:	4298      	cmp	r0, r3
  426124:	d911      	bls.n	42614a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  426126:	4b12      	ldr	r3, [pc, #72]	; (426170 <system_init_flash+0x50>)
  426128:	4298      	cmp	r0, r3
  42612a:	d913      	bls.n	426154 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  42612c:	4b11      	ldr	r3, [pc, #68]	; (426174 <system_init_flash+0x54>)
  42612e:	4298      	cmp	r0, r3
  426130:	d914      	bls.n	42615c <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  426132:	4b11      	ldr	r3, [pc, #68]	; (426178 <system_init_flash+0x58>)
  426134:	4298      	cmp	r0, r3
  426136:	d915      	bls.n	426164 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  426138:	4b10      	ldr	r3, [pc, #64]	; (42617c <system_init_flash+0x5c>)
  42613a:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  42613c:	bf94      	ite	ls
  42613e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  426142:	4a0f      	ldrhi	r2, [pc, #60]	; (426180 <system_init_flash+0x60>)
  426144:	4b0f      	ldr	r3, [pc, #60]	; (426184 <system_init_flash+0x64>)
  426146:	601a      	str	r2, [r3, #0]
  426148:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  42614a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  42614e:	4b0d      	ldr	r3, [pc, #52]	; (426184 <system_init_flash+0x64>)
  426150:	601a      	str	r2, [r3, #0]
  426152:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  426154:	4a0c      	ldr	r2, [pc, #48]	; (426188 <system_init_flash+0x68>)
  426156:	4b0b      	ldr	r3, [pc, #44]	; (426184 <system_init_flash+0x64>)
  426158:	601a      	str	r2, [r3, #0]
  42615a:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  42615c:	4a0b      	ldr	r2, [pc, #44]	; (42618c <system_init_flash+0x6c>)
  42615e:	4b09      	ldr	r3, [pc, #36]	; (426184 <system_init_flash+0x64>)
  426160:	601a      	str	r2, [r3, #0]
  426162:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  426164:	4a0a      	ldr	r2, [pc, #40]	; (426190 <system_init_flash+0x70>)
  426166:	4b07      	ldr	r3, [pc, #28]	; (426184 <system_init_flash+0x64>)
  426168:	601a      	str	r2, [r3, #0]
  42616a:	4770      	bx	lr
  42616c:	01312cff 	.word	0x01312cff
  426170:	026259ff 	.word	0x026259ff
  426174:	039386ff 	.word	0x039386ff
  426178:	04c4b3ff 	.word	0x04c4b3ff
  42617c:	05f5e0ff 	.word	0x05f5e0ff
  426180:	04000500 	.word	0x04000500
  426184:	400e0a00 	.word	0x400e0a00
  426188:	04000100 	.word	0x04000100
  42618c:	04000200 	.word	0x04000200
  426190:	04000300 	.word	0x04000300

00426194 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  426194:	4b0a      	ldr	r3, [pc, #40]	; (4261c0 <_sbrk+0x2c>)
  426196:	681b      	ldr	r3, [r3, #0]
  426198:	b153      	cbz	r3, 4261b0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  42619a:	4b09      	ldr	r3, [pc, #36]	; (4261c0 <_sbrk+0x2c>)
  42619c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  42619e:	181a      	adds	r2, r3, r0
  4261a0:	4908      	ldr	r1, [pc, #32]	; (4261c4 <_sbrk+0x30>)
  4261a2:	4291      	cmp	r1, r2
  4261a4:	db08      	blt.n	4261b8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4261a6:	4610      	mov	r0, r2
  4261a8:	4a05      	ldr	r2, [pc, #20]	; (4261c0 <_sbrk+0x2c>)
  4261aa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4261ac:	4618      	mov	r0, r3
  4261ae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4261b0:	4a05      	ldr	r2, [pc, #20]	; (4261c8 <_sbrk+0x34>)
  4261b2:	4b03      	ldr	r3, [pc, #12]	; (4261c0 <_sbrk+0x2c>)
  4261b4:	601a      	str	r2, [r3, #0]
  4261b6:	e7f0      	b.n	42619a <_sbrk+0x6>
		return (caddr_t) -1;	
  4261b8:	f04f 30ff 	mov.w	r0, #4294967295
}
  4261bc:	4770      	bx	lr
  4261be:	bf00      	nop
  4261c0:	20001414 	.word	0x20001414
  4261c4:	2001fffc 	.word	0x2001fffc
  4261c8:	20004740 	.word	0x20004740

004261cc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4261cc:	f04f 30ff 	mov.w	r0, #4294967295
  4261d0:	4770      	bx	lr

004261d2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4261d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4261d6:	604b      	str	r3, [r1, #4]

	return 0;
}
  4261d8:	2000      	movs	r0, #0
  4261da:	4770      	bx	lr

004261dc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4261dc:	2001      	movs	r0, #1
  4261de:	4770      	bx	lr

004261e0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4261e0:	2000      	movs	r0, #0
  4261e2:	4770      	bx	lr

004261e4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4261e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4261e6:	b083      	sub	sp, #12
  4261e8:	4605      	mov	r5, r0
  4261ea:	460c      	mov	r4, r1
	uint32_t val = 0;
  4261ec:	2300      	movs	r3, #0
  4261ee:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4261f0:	4b18      	ldr	r3, [pc, #96]	; (426254 <usart_serial_getchar+0x70>)
  4261f2:	4298      	cmp	r0, r3
  4261f4:	d00a      	beq.n	42620c <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4261f6:	4b18      	ldr	r3, [pc, #96]	; (426258 <usart_serial_getchar+0x74>)
  4261f8:	4298      	cmp	r0, r3
  4261fa:	d00f      	beq.n	42621c <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4261fc:	4b17      	ldr	r3, [pc, #92]	; (42625c <usart_serial_getchar+0x78>)
  4261fe:	4298      	cmp	r0, r3
  426200:	d014      	beq.n	42622c <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  426202:	4b17      	ldr	r3, [pc, #92]	; (426260 <usart_serial_getchar+0x7c>)
  426204:	429d      	cmp	r5, r3
  426206:	d01b      	beq.n	426240 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  426208:	b003      	add	sp, #12
  42620a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  42620c:	461f      	mov	r7, r3
  42620e:	4e15      	ldr	r6, [pc, #84]	; (426264 <usart_serial_getchar+0x80>)
  426210:	4621      	mov	r1, r4
  426212:	4638      	mov	r0, r7
  426214:	47b0      	blx	r6
  426216:	2800      	cmp	r0, #0
  426218:	d1fa      	bne.n	426210 <usart_serial_getchar+0x2c>
  42621a:	e7f2      	b.n	426202 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  42621c:	461e      	mov	r6, r3
  42621e:	4d11      	ldr	r5, [pc, #68]	; (426264 <usart_serial_getchar+0x80>)
  426220:	4621      	mov	r1, r4
  426222:	4630      	mov	r0, r6
  426224:	47a8      	blx	r5
  426226:	2800      	cmp	r0, #0
  426228:	d1fa      	bne.n	426220 <usart_serial_getchar+0x3c>
  42622a:	e7ed      	b.n	426208 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  42622c:	461e      	mov	r6, r3
  42622e:	4d0e      	ldr	r5, [pc, #56]	; (426268 <usart_serial_getchar+0x84>)
  426230:	a901      	add	r1, sp, #4
  426232:	4630      	mov	r0, r6
  426234:	47a8      	blx	r5
  426236:	2800      	cmp	r0, #0
  426238:	d1fa      	bne.n	426230 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  42623a:	9b01      	ldr	r3, [sp, #4]
  42623c:	7023      	strb	r3, [r4, #0]
  42623e:	e7e3      	b.n	426208 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  426240:	461e      	mov	r6, r3
  426242:	4d09      	ldr	r5, [pc, #36]	; (426268 <usart_serial_getchar+0x84>)
  426244:	a901      	add	r1, sp, #4
  426246:	4630      	mov	r0, r6
  426248:	47a8      	blx	r5
  42624a:	2800      	cmp	r0, #0
  42624c:	d1fa      	bne.n	426244 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  42624e:	9b01      	ldr	r3, [sp, #4]
  426250:	7023      	strb	r3, [r4, #0]
}
  426252:	e7d9      	b.n	426208 <usart_serial_getchar+0x24>
  426254:	400e0600 	.word	0x400e0600
  426258:	40060600 	.word	0x40060600
  42625c:	400a0000 	.word	0x400a0000
  426260:	400a4000 	.word	0x400a4000
  426264:	00421d65 	.word	0x00421d65
  426268:	00421d8b 	.word	0x00421d8b

0042626c <usart_serial_putchar>:
{
  42626c:	b570      	push	{r4, r5, r6, lr}
  42626e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  426270:	4b18      	ldr	r3, [pc, #96]	; (4262d4 <usart_serial_putchar+0x68>)
  426272:	4298      	cmp	r0, r3
  426274:	d00a      	beq.n	42628c <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  426276:	4b18      	ldr	r3, [pc, #96]	; (4262d8 <usart_serial_putchar+0x6c>)
  426278:	4298      	cmp	r0, r3
  42627a:	d010      	beq.n	42629e <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  42627c:	4b17      	ldr	r3, [pc, #92]	; (4262dc <usart_serial_putchar+0x70>)
  42627e:	4298      	cmp	r0, r3
  426280:	d016      	beq.n	4262b0 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  426282:	4b17      	ldr	r3, [pc, #92]	; (4262e0 <usart_serial_putchar+0x74>)
  426284:	4298      	cmp	r0, r3
  426286:	d01c      	beq.n	4262c2 <usart_serial_putchar+0x56>
	return 0;
  426288:	2000      	movs	r0, #0
}
  42628a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  42628c:	461e      	mov	r6, r3
  42628e:	4d15      	ldr	r5, [pc, #84]	; (4262e4 <usart_serial_putchar+0x78>)
  426290:	4621      	mov	r1, r4
  426292:	4630      	mov	r0, r6
  426294:	47a8      	blx	r5
  426296:	2800      	cmp	r0, #0
  426298:	d1fa      	bne.n	426290 <usart_serial_putchar+0x24>
		return 1;
  42629a:	2001      	movs	r0, #1
  42629c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  42629e:	461e      	mov	r6, r3
  4262a0:	4d10      	ldr	r5, [pc, #64]	; (4262e4 <usart_serial_putchar+0x78>)
  4262a2:	4621      	mov	r1, r4
  4262a4:	4630      	mov	r0, r6
  4262a6:	47a8      	blx	r5
  4262a8:	2800      	cmp	r0, #0
  4262aa:	d1fa      	bne.n	4262a2 <usart_serial_putchar+0x36>
		return 1;
  4262ac:	2001      	movs	r0, #1
  4262ae:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4262b0:	461e      	mov	r6, r3
  4262b2:	4d0d      	ldr	r5, [pc, #52]	; (4262e8 <usart_serial_putchar+0x7c>)
  4262b4:	4621      	mov	r1, r4
  4262b6:	4630      	mov	r0, r6
  4262b8:	47a8      	blx	r5
  4262ba:	2800      	cmp	r0, #0
  4262bc:	d1fa      	bne.n	4262b4 <usart_serial_putchar+0x48>
		return 1;
  4262be:	2001      	movs	r0, #1
  4262c0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4262c2:	461e      	mov	r6, r3
  4262c4:	4d08      	ldr	r5, [pc, #32]	; (4262e8 <usart_serial_putchar+0x7c>)
  4262c6:	4621      	mov	r1, r4
  4262c8:	4630      	mov	r0, r6
  4262ca:	47a8      	blx	r5
  4262cc:	2800      	cmp	r0, #0
  4262ce:	d1fa      	bne.n	4262c6 <usart_serial_putchar+0x5a>
		return 1;
  4262d0:	2001      	movs	r0, #1
  4262d2:	bd70      	pop	{r4, r5, r6, pc}
  4262d4:	400e0600 	.word	0x400e0600
  4262d8:	40060600 	.word	0x40060600
  4262dc:	400a0000 	.word	0x400a0000
  4262e0:	400a4000 	.word	0x400a4000
  4262e4:	00421d55 	.word	0x00421d55
  4262e8:	00421d77 	.word	0x00421d77

004262ec <freq_test_backup_mode>:
 /** Wakeup pin for backup mode: Touchscreen controller IRQ pin */
 #define WAKEUP_BACKUP_INPUT_ID  (1u << 13)


 void freq_test_backup_mode()
 {
  4262ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

			SysNormal_LED(OFF);
  4262ee:	2000      	movs	r0, #0
  4262f0:	4b22      	ldr	r3, [pc, #136]	; (42637c <freq_test_backup_mode+0x90>)
  4262f2:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4262f4:	4c22      	ldr	r4, [pc, #136]	; (426380 <freq_test_backup_mode+0x94>)
  4262f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4262fa:	6363      	str	r3, [r4, #52]	; 0x34
  4262fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  426300:	6362      	str	r2, [r4, #52]	; 0x34
  426302:	2280      	movs	r2, #128	; 0x80
  426304:	6362      	str	r2, [r4, #52]	; 0x34
  426306:	2240      	movs	r2, #64	; 0x40
  426308:	6362      	str	r2, [r4, #52]	; 0x34
  42630a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  42630e:	6362      	str	r2, [r4, #52]	; 0x34
  426310:	4d1c      	ldr	r5, [pc, #112]	; (426384 <freq_test_backup_mode+0x98>)
  426312:	f44f 6200 	mov.w	r2, #2048	; 0x800
  426316:	636a      	str	r2, [r5, #52]	; 0x34
  426318:	636b      	str	r3, [r5, #52]	; 0x34
  42631a:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  42631e:	636e      	str	r6, [r5, #52]	; 0x34
  426320:	f44f 6380 	mov.w	r3, #1024	; 0x400
  426324:	636b      	str	r3, [r5, #52]	; 0x34
  426326:	4f18      	ldr	r7, [pc, #96]	; (426388 <freq_test_backup_mode+0x9c>)
  426328:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  42632c:	637b      	str	r3, [r7, #52]	; 0x34
			ioport_set_pin_level(Trouble_LED,0);
			ioport_set_pin_level(SEC_PWR_LED,0);
			ioport_set_pin_level(Amerex_R,0);

			/* Disable PIO pull-up for PB10(USB_DDM), PB11(USB_DDP) */
			pio_pull_up(PIOB, (0x3 << 10), 0);
  42632e:	2200      	movs	r2, #0
  426330:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  426334:	4628      	mov	r0, r5
  426336:	4b15      	ldr	r3, [pc, #84]	; (42638c <freq_test_backup_mode+0xa0>)
  426338:	4798      	blx	r3


			pio_set_input(PIOA, 0xFFFFFFFF, PIO_OPENDRAIN);
  42633a:	2204      	movs	r2, #4
  42633c:	f04f 31ff 	mov.w	r1, #4294967295
  426340:	4638      	mov	r0, r7
  426342:	4f13      	ldr	r7, [pc, #76]	; (426390 <freq_test_backup_mode+0xa4>)
  426344:	47b8      	blx	r7
			pio_set_input(PIOB, 0xFFFFFFFF, PIO_OPENDRAIN);
  426346:	2204      	movs	r2, #4
  426348:	f04f 31ff 	mov.w	r1, #4294967295
  42634c:	4628      	mov	r0, r5
  42634e:	47b8      	blx	r7
			pio_set_input(PIOD, 0xFFFDFFFF, PIO_OPENDRAIN);
  426350:	2204      	movs	r2, #4
  426352:	f46f 3100 	mvn.w	r1, #131072	; 0x20000
  426356:	4620      	mov	r0, r4
  426358:	47b8      	blx	r7

			// 		/* Enable the PIO for wake-up */
			supc_set_wakeup_inputs(SUPC, WAKEUP_BACKUP_INPUT_ID, WAKEUP_BACKUP_INPUT_ID);
  42635a:	4632      	mov	r2, r6
  42635c:	4631      	mov	r1, r6
  42635e:	480d      	ldr	r0, [pc, #52]	; (426394 <freq_test_backup_mode+0xa8>)
  426360:	4b0d      	ldr	r3, [pc, #52]	; (426398 <freq_test_backup_mode+0xac>)
  426362:	4798      	blx	r3

			/* Switch MCK to slow clock  */
			pmc_switch_mck_to_sclk(PMC_MCKR_PRES_CLK_1);	 // 	  PMC_MCKR_PRES_CLK_4
  426364:	2000      	movs	r0, #0
  426366:	4b0d      	ldr	r3, [pc, #52]	; (42639c <freq_test_backup_mode+0xb0>)
  426368:	4798      	blx	r3

			/* Disable unused clock to save power */
			pmc_osc_disable_xtal(0);
  42636a:	2000      	movs	r0, #0
  42636c:	4b0c      	ldr	r3, [pc, #48]	; (4263a0 <freq_test_backup_mode+0xb4>)
  42636e:	4798      	blx	r3
			//example_disable_pll();
			pmc_disable_pllack();
  426370:	4b0c      	ldr	r3, [pc, #48]	; (4263a4 <freq_test_backup_mode+0xb8>)
  426372:	4798      	blx	r3
			/* Enter into backup mode */
			pmc_enable_backupmode();
  426374:	4b0c      	ldr	r3, [pc, #48]	; (4263a8 <freq_test_backup_mode+0xbc>)
  426376:	4798      	blx	r3
  426378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42637a:	bf00      	nop
  42637c:	00423d9d 	.word	0x00423d9d
  426380:	400e1400 	.word	0x400e1400
  426384:	400e1000 	.word	0x400e1000
  426388:	400e0e00 	.word	0x400e0e00
  42638c:	004256d9 	.word	0x004256d9
  426390:	004256e3 	.word	0x004256e3
  426394:	400e1810 	.word	0x400e1810
  426398:	00421af7 	.word	0x00421af7
  42639c:	00425721 	.word	0x00425721
  4263a0:	004258e1 	.word	0x004258e1
  4263a4:	00425921 	.word	0x00425921
  4263a8:	004259a9 	.word	0x004259a9

004263ac <main>:

 uint32_t setUNIX_Time=	1704774450;


int main (void)
{
  4263ac:	b580      	push	{r7, lr}
  4263ae:	b084      	sub	sp, #16


			 sysclk_init();
  4263b0:	4b75      	ldr	r3, [pc, #468]	; (426588 <main+0x1dc>)
  4263b2:	4798      	blx	r3
			  /* Disable the watchdog */
		     //Watchdog_Config(WDT_3SEC);
			WDT->WDT_MR = WDT_MR_WDDIS;
  4263b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4263b8:	4b74      	ldr	r3, [pc, #464]	; (42658c <main+0x1e0>)
  4263ba:	605a      	str	r2, [r3, #4]
			 board_init();
  4263bc:	4b74      	ldr	r3, [pc, #464]	; (426590 <main+0x1e4>)
  4263be:	4798      	blx	r3
  4263c0:	2007      	movs	r0, #7
  4263c2:	4c74      	ldr	r4, [pc, #464]	; (426594 <main+0x1e8>)
  4263c4:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4263c6:	4d74      	ldr	r5, [pc, #464]	; (426598 <main+0x1ec>)
  4263c8:	4b74      	ldr	r3, [pc, #464]	; (42659c <main+0x1f0>)
  4263ca:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4263cc:	4a74      	ldr	r2, [pc, #464]	; (4265a0 <main+0x1f4>)
  4263ce:	4b75      	ldr	r3, [pc, #468]	; (4265a4 <main+0x1f8>)
  4263d0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4263d2:	4a75      	ldr	r2, [pc, #468]	; (4265a8 <main+0x1fc>)
  4263d4:	4b75      	ldr	r3, [pc, #468]	; (4265ac <main+0x200>)
  4263d6:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4263d8:	4b75      	ldr	r3, [pc, #468]	; (4265b0 <main+0x204>)
  4263da:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  4263dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4263e0:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  4263e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4263e6:	9303      	str	r3, [sp, #12]
  4263e8:	2007      	movs	r0, #7
  4263ea:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
  4263ec:	a901      	add	r1, sp, #4
  4263ee:	4628      	mov	r0, r5
  4263f0:	4b70      	ldr	r3, [pc, #448]	; (4265b4 <main+0x208>)
  4263f2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4263f4:	4e70      	ldr	r6, [pc, #448]	; (4265b8 <main+0x20c>)
  4263f6:	6833      	ldr	r3, [r6, #0]
  4263f8:	2100      	movs	r1, #0
  4263fa:	6898      	ldr	r0, [r3, #8]
  4263fc:	4d6f      	ldr	r5, [pc, #444]	; (4265bc <main+0x210>)
  4263fe:	47a8      	blx	r5
	setbuf(stdin, NULL);
  426400:	6833      	ldr	r3, [r6, #0]
  426402:	2100      	movs	r1, #0
  426404:	6858      	ldr	r0, [r3, #4]
  426406:	47a8      	blx	r5
			configure_console();
			matrix_set_system_io(0xC20);
  426408:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  42640c:	4b6c      	ldr	r3, [pc, #432]	; (4265c0 <main+0x214>)
  42640e:	4798      	blx	r3
			Pherperial_clock_Enable();
  426410:	4b6c      	ldr	r3, [pc, #432]	; (4265c4 <main+0x218>)
  426412:	4798      	blx	r3
			Systick_Config(60000U);
  426414:	f64e 2060 	movw	r0, #60000	; 0xea60
  426418:	2100      	movs	r1, #0
  42641a:	4b6b      	ldr	r3, [pc, #428]	; (4265c8 <main+0x21c>)
  42641c:	4798      	blx	r3
			Pherperial_Power_Enable();
  42641e:	4b6b      	ldr	r3, [pc, #428]	; (4265cc <main+0x220>)
  426420:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  426422:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  426426:	4b6a      	ldr	r3, [pc, #424]	; (4265d0 <main+0x224>)
  426428:	631a      	str	r2, [r3, #48]	; 0x30
			ioport_set_pin_level((PIO_PD17_IDX), 1);
			pmc_enable_periph_clk(ID_CAN0);
  42642a:	2025      	movs	r0, #37	; 0x25
  42642c:	47a0      	blx	r4
		     Delay(100u);
  42642e:	2064      	movs	r0, #100	; 0x64
  426430:	4b68      	ldr	r3, [pc, #416]	; (4265d4 <main+0x228>)
  426432:	4798      	blx	r3
			 configure_i2c_master();
  426434:	4b68      	ldr	r3, [pc, #416]	; (4265d8 <main+0x22c>)
  426436:	4798      	blx	r3
			at25dfx_init();
  426438:	4b68      	ldr	r3, [pc, #416]	; (4265dc <main+0x230>)
  42643a:	4798      	blx	r3
			memory_init();
  42643c:	4b68      	ldr	r3, [pc, #416]	; (4265e0 <main+0x234>)
  42643e:	4798      	blx	r3
			flash_read_amerex_param((void *)Amerex_config(0), &amerex_config_data);
  426440:	4968      	ldr	r1, [pc, #416]	; (4265e4 <main+0x238>)
  426442:	4869      	ldr	r0, [pc, #420]	; (4265e8 <main+0x23c>)
  426444:	4b69      	ldr	r3, [pc, #420]	; (4265ec <main+0x240>)
  426446:	4798      	blx	r3
			read_flash_mid_param((void *)flash_mid_param(0), &payload_cnt); //payload_cnt
  426448:	4969      	ldr	r1, [pc, #420]	; (4265f0 <main+0x244>)
  42644a:	486a      	ldr	r0, [pc, #424]	; (4265f4 <main+0x248>)
  42644c:	4b6a      	ldr	r3, [pc, #424]	; (4265f8 <main+0x24c>)
  42644e:	4798      	blx	r3
			Fire_LED_Count(); /*update the Fading count values*/
  426450:	4b6a      	ldr	r3, [pc, #424]	; (4265fc <main+0x250>)
  426452:	4798      	blx	r3
			PWM_Init();
  426454:	4b6a      	ldr	r3, [pc, #424]	; (426600 <main+0x254>)
  426456:	4798      	blx	r3
			adc_init();
  426458:	4b6a      	ldr	r3, [pc, #424]	; (426604 <main+0x258>)
  42645a:	4798      	blx	r3
			CAN_Open();
  42645c:	4b6a      	ldr	r3, [pc, #424]	; (426608 <main+0x25c>)
  42645e:	4798      	blx	r3
			Startup_Music();
  426460:	4b6a      	ldr	r3, [pc, #424]	; (42660c <main+0x260>)
  426462:	4798      	blx	r3
		    Timer0_init();
  426464:	4b6a      	ldr	r3, [pc, #424]	; (426610 <main+0x264>)
  426466:	4798      	blx	r3
		//	at25dfx_erase_block_OTA(0);
		   	hd1_prev_tick_g_u32 = count_1ms;
  426468:	4b6a      	ldr	r3, [pc, #424]	; (426614 <main+0x268>)
  42646a:	6819      	ldr	r1, [r3, #0]
  42646c:	4a6a      	ldr	r2, [pc, #424]	; (426618 <main+0x26c>)
  42646e:	6011      	str	r1, [r2, #0]
			hd2_prev_tick_g_u32 = count_1ms;
  426470:	6819      	ldr	r1, [r3, #0]
  426472:	4a6a      	ldr	r2, [pc, #424]	; (42661c <main+0x270>)
  426474:	6011      	str	r1, [r2, #0]
			system_reset_prev_tick_g_u32 = count_1ms;
  426476:	6819      	ldr	r1, [r3, #0]
  426478:	4a69      	ldr	r2, [pc, #420]	; (426620 <main+0x274>)
  42647a:	6011      	str	r1, [r2, #0]
			sec_pwr_prev_tick_g_u32 = count_1ms;
  42647c:	6819      	ldr	r1, [r3, #0]
  42647e:	4a69      	ldr	r2, [pc, #420]	; (426624 <main+0x278>)
  426480:	6011      	str	r1, [r2, #0]
			pri_pwr_prev_tick_g_u32 = count_1ms;
  426482:	6819      	ldr	r1, [r3, #0]
  426484:	4a68      	ldr	r2, [pc, #416]	; (426628 <main+0x27c>)
  426486:	6011      	str	r1, [r2, #0]
			system_shutdown_tick_g_u32 = count_1ms;
  426488:	6819      	ldr	r1, [r3, #0]
  42648a:	4a68      	ldr	r2, [pc, #416]	; (42662c <main+0x280>)
  42648c:	6011      	str	r1, [r2, #0]
			Clock_prev_tick_g_u32 =  count_1ms;
  42648e:	6819      	ldr	r1, [r3, #0]
  426490:	4a67      	ldr	r2, [pc, #412]	; (426630 <main+0x284>)
  426492:	6011      	str	r1, [r2, #0]
			adc_prev_tick_g_u32 =  count_1ms;
  426494:	6819      	ldr	r1, [r3, #0]
  426496:	4a67      	ldr	r2, [pc, #412]	; (426634 <main+0x288>)
  426498:	6011      	str	r1, [r2, #0]
			buzzer_prev_tick_g_u32 =  count_1ms;
  42649a:	681a      	ldr	r2, [r3, #0]
  42649c:	4b66      	ldr	r3, [pc, #408]	; (426638 <main+0x28c>)
  42649e:	601a      	str	r2, [r3, #0]
			fire_rly_en_vehicle_start_bit=0u;
  4264a0:	2300      	movs	r3, #0
  4264a2:	4a66      	ldr	r2, [pc, #408]	; (42663c <main+0x290>)
  4264a4:	7013      	strb	r3, [r2, #0]
			Fire_Rst_vehicle_start_bit=0u;
  4264a6:	4a66      	ldr	r2, [pc, #408]	; (426640 <main+0x294>)
  4264a8:	7013      	strb	r3, [r2, #0]
			//RV3028_Set_TimeStamp (setUNIX_Time);
		    #ifdef Debug_enable
			 printf("Time at Bootup : %lu\r\n", RV3028_GetTime(&_RTC));
  4264aa:	4866      	ldr	r0, [pc, #408]	; (426644 <main+0x298>)
  4264ac:	4b66      	ldr	r3, [pc, #408]	; (426648 <main+0x29c>)
  4264ae:	4798      	blx	r3
  4264b0:	4601      	mov	r1, r0
  4264b2:	4866      	ldr	r0, [pc, #408]	; (42664c <main+0x2a0>)
  4264b4:	4b66      	ldr	r3, [pc, #408]	; (426650 <main+0x2a4>)
  4264b6:	4798      	blx	r3


	while(1)
	{

				(test_sw_pressed_g_b == 1) ? (Amerex_configuration()):(Amerex_application());
  4264b8:	4d66      	ldr	r5, [pc, #408]	; (426654 <main+0x2a8>)
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4264ba:	4e45      	ldr	r6, [pc, #276]	; (4265d0 <main+0x224>)
				wdt_restart(WDT);
  4264bc:	4c33      	ldr	r4, [pc, #204]	; (42658c <main+0x1e0>)
  4264be:	e028      	b.n	426512 <main+0x166>
  4264c0:	2310      	movs	r3, #16
  4264c2:	6373      	str	r3, [r6, #52]	; 0x34
							if(ALEDS_bit == 15)
  4264c4:	4b64      	ldr	r3, [pc, #400]	; (426658 <main+0x2ac>)
  4264c6:	781b      	ldrb	r3, [r3, #0]
  4264c8:	b2db      	uxtb	r3, r3
  4264ca:	2b0f      	cmp	r3, #15
  4264cc:	d04e      	beq.n	42656c <main+0x1c0>
					 if((count_1ms - buzzer_fire_output_test_g_32) > 600u)
  4264ce:	4b51      	ldr	r3, [pc, #324]	; (426614 <main+0x268>)
  4264d0:	681b      	ldr	r3, [r3, #0]
  4264d2:	4a62      	ldr	r2, [pc, #392]	; (42665c <main+0x2b0>)
  4264d4:	6812      	ldr	r2, [r2, #0]
  4264d6:	1a9b      	subs	r3, r3, r2
  4264d8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
  4264dc:	d914      	bls.n	426508 <main+0x15c>
							buzzer_fire_output_test_g_32 = count_1ms;
  4264de:	4b4d      	ldr	r3, [pc, #308]	; (426614 <main+0x268>)
  4264e0:	681a      	ldr	r2, [r3, #0]
  4264e2:	4b5e      	ldr	r3, [pc, #376]	; (42665c <main+0x2b0>)
  4264e4:	601a      	str	r2, [r3, #0]
							buzz_bit = !buzz_bit;
  4264e6:	4a5e      	ldr	r2, [pc, #376]	; (426660 <main+0x2b4>)
  4264e8:	7813      	ldrb	r3, [r2, #0]
  4264ea:	fab3 f383 	clz	r3, r3
  4264ee:	095b      	lsrs	r3, r3, #5
  4264f0:	7013      	strb	r3, [r2, #0]
							if(buzz_bit == 0)
  4264f2:	7813      	ldrb	r3, [r2, #0]
  4264f4:	2b00      	cmp	r3, #0
  4264f6:	d03d      	beq.n	426574 <main+0x1c8>
							Buzzer_Freq_Set(BUZZER_FREQ_2_5KHZ, Default_buzz_Duty);
  4264f8:	2132      	movs	r1, #50	; 0x32
  4264fa:	f640 10c4 	movw	r0, #2500	; 0x9c4
  4264fe:	4b59      	ldr	r3, [pc, #356]	; (426664 <main+0x2b8>)
  426500:	4798      	blx	r3
							FIRE_LED_PWM_EN(5)	;
  426502:	2005      	movs	r0, #5
  426504:	4b58      	ldr	r3, [pc, #352]	; (426668 <main+0x2bc>)
  426506:	4798      	blx	r3
			Configuration();
  426508:	4b58      	ldr	r3, [pc, #352]	; (42666c <main+0x2c0>)
  42650a:	4798      	blx	r3
				wdt_restart(WDT);
  42650c:	4620      	mov	r0, r4
  42650e:	4b58      	ldr	r3, [pc, #352]	; (426670 <main+0x2c4>)
  426510:	4798      	blx	r3
				(test_sw_pressed_g_b == 1) ? (Amerex_configuration()):(Amerex_application());
  426512:	782b      	ldrb	r3, [r5, #0]
  426514:	2b00      	cmp	r3, #0
  426516:	f000 80b7 	beq.w	426688 <main+0x2dc>
			Test_Button();
  42651a:	4b56      	ldr	r3, [pc, #344]	; (426674 <main+0x2c8>)
  42651c:	4798      	blx	r3
					 if((count_1ms - all_output_test_g_32) >1u)
  42651e:	4b3d      	ldr	r3, [pc, #244]	; (426614 <main+0x268>)
  426520:	681b      	ldr	r3, [r3, #0]
  426522:	4a55      	ldr	r2, [pc, #340]	; (426678 <main+0x2cc>)
  426524:	6812      	ldr	r2, [r2, #0]
  426526:	1a9b      	subs	r3, r3, r2
  426528:	2b01      	cmp	r3, #1
  42652a:	d9d0      	bls.n	4264ce <main+0x122>
							all_output_test_g_32 = count_1ms;
  42652c:	4b39      	ldr	r3, [pc, #228]	; (426614 <main+0x268>)
  42652e:	681a      	ldr	r2, [r3, #0]
  426530:	4b51      	ldr	r3, [pc, #324]	; (426678 <main+0x2cc>)
  426532:	601a      	str	r2, [r3, #0]
							fire_bit =!fire_bit;
  426534:	4f51      	ldr	r7, [pc, #324]	; (42667c <main+0x2d0>)
  426536:	783b      	ldrb	r3, [r7, #0]
  426538:	fab3 f383 	clz	r3, r3
  42653c:	095b      	lsrs	r3, r3, #5
  42653e:	703b      	strb	r3, [r7, #0]
							pio_sync_output_write(PIOB,1<<ALEDS_bit);
  426540:	f8df 8114 	ldr.w	r8, [pc, #276]	; 426658 <main+0x2ac>
  426544:	f898 3000 	ldrb.w	r3, [r8]
  426548:	b2db      	uxtb	r3, r3
  42654a:	2101      	movs	r1, #1
  42654c:	4099      	lsls	r1, r3
  42654e:	484c      	ldr	r0, [pc, #304]	; (426680 <main+0x2d4>)
  426550:	4b4c      	ldr	r3, [pc, #304]	; (426684 <main+0x2d8>)
  426552:	4798      	blx	r3
							ALEDS_bit++;
  426554:	f898 3000 	ldrb.w	r3, [r8]
  426558:	3301      	adds	r3, #1
  42655a:	b2db      	uxtb	r3, r3
  42655c:	f888 3000 	strb.w	r3, [r8]
							ioport_set_pin_level(sys_normal,fire_bit);
  426560:	783b      	ldrb	r3, [r7, #0]
	if (level) {
  426562:	2b00      	cmp	r3, #0
  426564:	d0ac      	beq.n	4264c0 <main+0x114>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  426566:	2310      	movs	r3, #16
  426568:	6333      	str	r3, [r6, #48]	; 0x30
  42656a:	e7ab      	b.n	4264c4 <main+0x118>
							ALEDS_bit = 10;
  42656c:	220a      	movs	r2, #10
  42656e:	4b3a      	ldr	r3, [pc, #232]	; (426658 <main+0x2ac>)
  426570:	701a      	strb	r2, [r3, #0]
  426572:	e7ac      	b.n	4264ce <main+0x122>
							Buzzer_Freq_Set(BUZZER_FREQ_2_5KHZ, 0);
  426574:	2100      	movs	r1, #0
  426576:	f640 10c4 	movw	r0, #2500	; 0x9c4
  42657a:	4b3a      	ldr	r3, [pc, #232]	; (426664 <main+0x2b8>)
  42657c:	4798      	blx	r3
							FIRE_LED_PWM_EN(50);
  42657e:	2032      	movs	r0, #50	; 0x32
  426580:	4b39      	ldr	r3, [pc, #228]	; (426668 <main+0x2bc>)
  426582:	4798      	blx	r3
  426584:	e7c0      	b.n	426508 <main+0x15c>
  426586:	bf00      	nop
  426588:	00425671 	.word	0x00425671
  42658c:	400e1850 	.word	0x400e1850
  426590:	00425bd9 	.word	0x00425bd9
  426594:	00425941 	.word	0x00425941
  426598:	400e0600 	.word	0x400e0600
  42659c:	200015b0 	.word	0x200015b0
  4265a0:	0042626d 	.word	0x0042626d
  4265a4:	200015ac 	.word	0x200015ac
  4265a8:	004261e5 	.word	0x004261e5
  4265ac:	200015a8 	.word	0x200015a8
  4265b0:	03938700 	.word	0x03938700
  4265b4:	00421d1d 	.word	0x00421d1d
  4265b8:	200000c8 	.word	0x200000c8
  4265bc:	00427275 	.word	0x00427275
  4265c0:	00421991 	.word	0x00421991
  4265c4:	00425241 	.word	0x00425241
  4265c8:	00425255 	.word	0x00425255
  4265cc:	00425361 	.word	0x00425361
  4265d0:	400e1400 	.word	0x400e1400
  4265d4:	0042527d 	.word	0x0042527d
  4265d8:	004234c1 	.word	0x004234c1
  4265dc:	004249b5 	.word	0x004249b5
  4265e0:	004242d5 	.word	0x004242d5
  4265e4:	20001588 	.word	0x20001588
  4265e8:	00471000 	.word	0x00471000
  4265ec:	0042495d 	.word	0x0042495d
  4265f0:	20001510 	.word	0x20001510
  4265f4:	00472000 	.word	0x00472000
  4265f8:	00424931 	.word	0x00424931
  4265fc:	004228fd 	.word	0x004228fd
  426600:	004243c9 	.word	0x004243c9
  426604:	004201e1 	.word	0x004201e1
  426608:	00422631 	.word	0x00422631
  42660c:	00421e55 	.word	0x00421e55
  426610:	00423c4d 	.word	0x00423c4d
  426614:	200012f8 	.word	0x200012f8
  426618:	200010d4 	.word	0x200010d4
  42661c:	200010dc 	.word	0x200010dc
  426620:	2000137c 	.word	0x2000137c
  426624:	20001064 	.word	0x20001064
  426628:	20000b4c 	.word	0x20000b4c
  42662c:	20001380 	.word	0x20001380
  426630:	20001350 	.word	0x20001350
  426634:	20000af4 	.word	0x20000af4
  426638:	2000108c 	.word	0x2000108c
  42663c:	20001368 	.word	0x20001368
  426640:	20001358 	.word	0x20001358
  426644:	20001564 	.word	0x20001564
  426648:	0042456d 	.word	0x0042456d
  42664c:	0042f484 	.word	0x0042f484
  426650:	00426851 	.word	0x00426851
  426654:	20001384 	.word	0x20001384
  426658:	20000094 	.word	0x20000094
  42665c:	200010b8 	.word	0x200010b8
  426660:	200010b4 	.word	0x200010b4
  426664:	00421db9 	.word	0x00421db9
  426668:	00424491 	.word	0x00424491
  42666c:	00422925 	.word	0x00422925
  426670:	00421da5 	.word	0x00421da5
  426674:	004249d5 	.word	0x004249d5
  426678:	200010ac 	.word	0x200010ac
  42667c:	200010be 	.word	0x200010be
  426680:	400e1000 	.word	0x400e1000
  426684:	00425715 	.word	0x00425715
			if((count_1ms - adc_prev_tick_g_u32) >= 10u) /*Take an ADC sample for every 10ms*/
  426688:	4b32      	ldr	r3, [pc, #200]	; (426754 <main+0x3a8>)
  42668a:	681b      	ldr	r3, [r3, #0]
  42668c:	4a32      	ldr	r2, [pc, #200]	; (426758 <main+0x3ac>)
  42668e:	6812      	ldr	r2, [r2, #0]
  426690:	1a9b      	subs	r3, r3, r2
  426692:	2b09      	cmp	r3, #9
  426694:	d906      	bls.n	4266a4 <main+0x2f8>
	afec->AFEC_CR = AFEC_CR_START;
  426696:	2202      	movs	r2, #2
  426698:	4b30      	ldr	r3, [pc, #192]	; (42675c <main+0x3b0>)
  42669a:	601a      	str	r2, [r3, #0]
				adc_prev_tick_g_u32 = count_1ms;
  42669c:	4b2d      	ldr	r3, [pc, #180]	; (426754 <main+0x3a8>)
  42669e:	681a      	ldr	r2, [r3, #0]
  4266a0:	4b2d      	ldr	r3, [pc, #180]	; (426758 <main+0x3ac>)
  4266a2:	601a      	str	r2, [r3, #0]
  4266a4:	2202      	movs	r2, #2
  4266a6:	4b2e      	ldr	r3, [pc, #184]	; (426760 <main+0x3b4>)
  4266a8:	601a      	str	r2, [r3, #0]
			System_Normal_Ind();
  4266aa:	4b2e      	ldr	r3, [pc, #184]	; (426764 <main+0x3b8>)
  4266ac:	4798      	blx	r3
			Secondary_pwr_Ind();
  4266ae:	4b2e      	ldr	r3, [pc, #184]	; (426768 <main+0x3bc>)
  4266b0:	4798      	blx	r3
			Trouble_Ind();
  4266b2:	4b2e      	ldr	r3, [pc, #184]	; (42676c <main+0x3c0>)
  4266b4:	4798      	blx	r3
			System_Reset_Ind();
  4266b6:	4b2e      	ldr	r3, [pc, #184]	; (426770 <main+0x3c4>)
  4266b8:	4798      	blx	r3
			Alarm_Sil_Ind();
  4266ba:	4b2e      	ldr	r3, [pc, #184]	; (426774 <main+0x3c8>)
  4266bc:	4798      	blx	r3
			Fire_Ind();
  4266be:	4b2e      	ldr	r3, [pc, #184]	; (426778 <main+0x3cc>)
  4266c0:	4798      	blx	r3
			Buzzer_indication();
  4266c2:	4b2e      	ldr	r3, [pc, #184]	; (42677c <main+0x3d0>)
  4266c4:	4798      	blx	r3
			System_Reset_Button();
  4266c6:	4b2e      	ldr	r3, [pc, #184]	; (426780 <main+0x3d4>)
  4266c8:	4798      	blx	r3
			Alarm_Silence_Button();
  4266ca:	4b2e      	ldr	r3, [pc, #184]	; (426784 <main+0x3d8>)
  4266cc:	4798      	blx	r3
			Test_Button();
  4266ce:	4b2e      	ldr	r3, [pc, #184]	; (426788 <main+0x3dc>)
  4266d0:	4798      	blx	r3
			Fire_Switch();
  4266d2:	4b2e      	ldr	r3, [pc, #184]	; (42678c <main+0x3e0>)
  4266d4:	4798      	blx	r3
			Enter_Backup_mode();
  4266d6:	4b2e      	ldr	r3, [pc, #184]	; (426790 <main+0x3e4>)
  4266d8:	4798      	blx	r3
			Check_Heat_Detector_Trbl();
  4266da:	4b2e      	ldr	r3, [pc, #184]	; (426794 <main+0x3e8>)
  4266dc:	4798      	blx	r3
			Pressure_Sw();
  4266de:	4b2e      	ldr	r3, [pc, #184]	; (426798 <main+0x3ec>)
  4266e0:	4798      	blx	r3
			Check_Power_Trbl();
  4266e2:	4b2e      	ldr	r3, [pc, #184]	; (42679c <main+0x3f0>)
  4266e4:	4798      	blx	r3
			Check_any_Trbl();
  4266e6:	4b2e      	ldr	r3, [pc, #184]	; (4267a0 <main+0x3f4>)
  4266e8:	4798      	blx	r3
			Actuator_HM();
  4266ea:	4b2e      	ldr	r3, [pc, #184]	; (4267a4 <main+0x3f8>)
  4266ec:	4798      	blx	r3
			Actuator_Pulse();
  4266ee:	4b2e      	ldr	r3, [pc, #184]	; (4267a8 <main+0x3fc>)
  4266f0:	4798      	blx	r3
			Trbl_Fire_Iso_Output_Reset();
  4266f2:	4b2e      	ldr	r3, [pc, #184]	; (4267ac <main+0x400>)
  4266f4:	4798      	blx	r3
			Fire_Iso_Output();
  4266f6:	4b2e      	ldr	r3, [pc, #184]	; (4267b0 <main+0x404>)
  4266f8:	4798      	blx	r3
			Trouble_Iso_Output();
  4266fa:	4b2e      	ldr	r3, [pc, #184]	; (4267b4 <main+0x408>)
  4266fc:	4798      	blx	r3
			Fire_sound_retry_by_Timer();
  4266fe:	4b2e      	ldr	r3, [pc, #184]	; (4267b8 <main+0x40c>)
  426700:	4798      	blx	r3
			Super_CAP_Charge_enable_disable();
  426702:	4b2e      	ldr	r3, [pc, #184]	; (4267bc <main+0x410>)
  426704:	4798      	blx	r3
			primary_pwr_vol_g_u16 =PRI_volt();
  426706:	4b2e      	ldr	r3, [pc, #184]	; (4267c0 <main+0x414>)
  426708:	4798      	blx	r3
  42670a:	4b2e      	ldr	r3, [pc, #184]	; (4267c4 <main+0x418>)
  42670c:	6018      	str	r0, [r3, #0]
			sec_pwr_vol_g_u16= SEC_volt();
  42670e:	4b2e      	ldr	r3, [pc, #184]	; (4267c8 <main+0x41c>)
  426710:	4798      	blx	r3
  426712:	4b2e      	ldr	r3, [pc, #184]	; (4267cc <main+0x420>)
  426714:	8018      	strh	r0, [r3, #0]
			hd1_measured_g_u16=HD1_volt();
  426716:	4b2e      	ldr	r3, [pc, #184]	; (4267d0 <main+0x424>)
  426718:	4798      	blx	r3
  42671a:	4b2e      	ldr	r3, [pc, #184]	; (4267d4 <main+0x428>)
  42671c:	8018      	strh	r0, [r3, #0]
			hd2_measured_g_u16=HD2_volt();
  42671e:	4b2e      	ldr	r3, [pc, #184]	; (4267d8 <main+0x42c>)
  426720:	4798      	blx	r3
  426722:	4b2e      	ldr	r3, [pc, #184]	; (4267dc <main+0x430>)
  426724:	8018      	strh	r0, [r3, #0]
			super_capVolt_g_u16= SUPER_CAP_Volt();
  426726:	4b2e      	ldr	r3, [pc, #184]	; (4267e0 <main+0x434>)
  426728:	4798      	blx	r3
  42672a:	4b2e      	ldr	r3, [pc, #184]	; (4267e4 <main+0x438>)
  42672c:	8018      	strh	r0, [r3, #0]
			CAN_process();
  42672e:	4b2e      	ldr	r3, [pc, #184]	; (4267e8 <main+0x43c>)
  426730:	4798      	blx	r3
			Update_Master_Clock();
  426732:	4b2e      	ldr	r3, [pc, #184]	; (4267ec <main+0x440>)
  426734:	4798      	blx	r3
			Enter_DFU_mode();
  426736:	4b2e      	ldr	r3, [pc, #184]	; (4267f0 <main+0x444>)
  426738:	4798      	blx	r3
			if (g_ul_recv_status == 1)
  42673a:	4b2e      	ldr	r3, [pc, #184]	; (4267f4 <main+0x448>)
  42673c:	681b      	ldr	r3, [r3, #0]
  42673e:	2b01      	cmp	r3, #1
  426740:	f47f aee4 	bne.w	42650c <main+0x160>
				 decode_can_msg(&rx_mailbox);
  426744:	482c      	ldr	r0, [pc, #176]	; (4267f8 <main+0x44c>)
  426746:	4b2d      	ldr	r3, [pc, #180]	; (4267fc <main+0x450>)
  426748:	4798      	blx	r3
				 g_ul_recv_status=0;
  42674a:	2200      	movs	r2, #0
  42674c:	4b29      	ldr	r3, [pc, #164]	; (4267f4 <main+0x448>)
  42674e:	601a      	str	r2, [r3, #0]
  426750:	e6dc      	b.n	42650c <main+0x160>
  426752:	bf00      	nop
  426754:	200012f8 	.word	0x200012f8
  426758:	20000af4 	.word	0x20000af4
  42675c:	400b0000 	.word	0x400b0000
  426760:	400b4000 	.word	0x400b4000
  426764:	00423d61 	.word	0x00423d61
  426768:	00423e71 	.word	0x00423e71
  42676c:	00424089 	.word	0x00424089
  426770:	00424169 	.word	0x00424169
  426774:	00423d3d 	.word	0x00423d3d
  426778:	00424245 	.word	0x00424245
  42677c:	004220f9 	.word	0x004220f9
  426780:	00424c5d 	.word	0x00424c5d
  426784:	00424a89 	.word	0x00424a89
  426788:	004249d5 	.word	0x004249d5
  42678c:	00424df1 	.word	0x00424df1
  426790:	00425049 	.word	0x00425049
  426794:	00422fe5 	.word	0x00422fe5
  426798:	00424b69 	.word	0x00424b69
  42679c:	00420a39 	.word	0x00420a39
  4267a0:	004253cd 	.word	0x004253cd
  4267a4:	00420719 	.word	0x00420719
  4267a8:	00422f29 	.word	0x00422f29
  4267ac:	00425439 	.word	0x00425439
  4267b0:	004254e1 	.word	0x004254e1
  4267b4:	00425569 	.word	0x00425569
  4267b8:	00423315 	.word	0x00423315
  4267bc:	00420bed 	.word	0x00420bed
  4267c0:	00420589 	.word	0x00420589
  4267c4:	20000b54 	.word	0x20000b54
  4267c8:	00420531 	.word	0x00420531
  4267cc:	2000106a 	.word	0x2000106a
  4267d0:	004204d9 	.word	0x004204d9
  4267d4:	20000b0a 	.word	0x20000b0a
  4267d8:	00420481 	.word	0x00420481
  4267dc:	20000b0e 	.word	0x20000b0e
  4267e0:	00420655 	.word	0x00420655
  4267e4:	2000106c 	.word	0x2000106c
  4267e8:	00422511 	.word	0x00422511
  4267ec:	004250bd 	.word	0x004250bd
  4267f0:	00424ec5 	.word	0x00424ec5
  4267f4:	20001318 	.word	0x20001318
  4267f8:	20001678 	.word	0x20001678
  4267fc:	00423551 	.word	0x00423551

00426800 <__libc_init_array>:
  426800:	b570      	push	{r4, r5, r6, lr}
  426802:	4e0f      	ldr	r6, [pc, #60]	; (426840 <__libc_init_array+0x40>)
  426804:	4d0f      	ldr	r5, [pc, #60]	; (426844 <__libc_init_array+0x44>)
  426806:	1b76      	subs	r6, r6, r5
  426808:	10b6      	asrs	r6, r6, #2
  42680a:	bf18      	it	ne
  42680c:	2400      	movne	r4, #0
  42680e:	d005      	beq.n	42681c <__libc_init_array+0x1c>
  426810:	3401      	adds	r4, #1
  426812:	f855 3b04 	ldr.w	r3, [r5], #4
  426816:	4798      	blx	r3
  426818:	42a6      	cmp	r6, r4
  42681a:	d1f9      	bne.n	426810 <__libc_init_array+0x10>
  42681c:	4e0a      	ldr	r6, [pc, #40]	; (426848 <__libc_init_array+0x48>)
  42681e:	4d0b      	ldr	r5, [pc, #44]	; (42684c <__libc_init_array+0x4c>)
  426820:	1b76      	subs	r6, r6, r5
  426822:	f009 f8f7 	bl	42fa14 <_init>
  426826:	10b6      	asrs	r6, r6, #2
  426828:	bf18      	it	ne
  42682a:	2400      	movne	r4, #0
  42682c:	d006      	beq.n	42683c <__libc_init_array+0x3c>
  42682e:	3401      	adds	r4, #1
  426830:	f855 3b04 	ldr.w	r3, [r5], #4
  426834:	4798      	blx	r3
  426836:	42a6      	cmp	r6, r4
  426838:	d1f9      	bne.n	42682e <__libc_init_array+0x2e>
  42683a:	bd70      	pop	{r4, r5, r6, pc}
  42683c:	bd70      	pop	{r4, r5, r6, pc}
  42683e:	bf00      	nop
  426840:	0042fa20 	.word	0x0042fa20
  426844:	0042fa20 	.word	0x0042fa20
  426848:	0042fa28 	.word	0x0042fa28
  42684c:	0042fa20 	.word	0x0042fa20

00426850 <iprintf>:
  426850:	b40f      	push	{r0, r1, r2, r3}
  426852:	b500      	push	{lr}
  426854:	4907      	ldr	r1, [pc, #28]	; (426874 <iprintf+0x24>)
  426856:	b083      	sub	sp, #12
  426858:	ab04      	add	r3, sp, #16
  42685a:	6808      	ldr	r0, [r1, #0]
  42685c:	f853 2b04 	ldr.w	r2, [r3], #4
  426860:	6881      	ldr	r1, [r0, #8]
  426862:	9301      	str	r3, [sp, #4]
  426864:	f002 fad4 	bl	428e10 <_vfiprintf_r>
  426868:	b003      	add	sp, #12
  42686a:	f85d eb04 	ldr.w	lr, [sp], #4
  42686e:	b004      	add	sp, #16
  426870:	4770      	bx	lr
  426872:	bf00      	nop
  426874:	200000c8 	.word	0x200000c8

00426878 <localtime>:
  426878:	4b02      	ldr	r3, [pc, #8]	; (426884 <localtime+0xc>)
  42687a:	6819      	ldr	r1, [r3, #0]
  42687c:	317c      	adds	r1, #124	; 0x7c
  42687e:	f000 b803 	b.w	426888 <localtime_r>
  426882:	bf00      	nop
  426884:	200000c8 	.word	0x200000c8

00426888 <localtime_r>:
  426888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42688c:	460c      	mov	r4, r1
  42688e:	4607      	mov	r7, r0
  426890:	f004 fe84 	bl	42b59c <__gettzinfo>
  426894:	4621      	mov	r1, r4
  426896:	4680      	mov	r8, r0
  426898:	4638      	mov	r0, r7
  42689a:	f004 fe83 	bl	42b5a4 <gmtime_r>
  42689e:	6946      	ldr	r6, [r0, #20]
  4268a0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
  4268a4:	07b1      	lsls	r1, r6, #30
  4268a6:	4604      	mov	r4, r0
  4268a8:	f000 80b9 	beq.w	426a1e <localtime_r+0x196>
  4268ac:	17f5      	asrs	r5, r6, #31
  4268ae:	4b7f      	ldr	r3, [pc, #508]	; (426aac <localtime_r+0x224>)
  4268b0:	fb83 2306 	smull	r2, r3, r3, r6
  4268b4:	ebc5 15e3 	rsb	r5, r5, r3, asr #7
  4268b8:	f44f 73c8 	mov.w	r3, #400	; 0x190
  4268bc:	fb03 6515 	mls	r5, r3, r5, r6
  4268c0:	2d00      	cmp	r5, #0
  4268c2:	bf0c      	ite	eq
  4268c4:	2530      	moveq	r5, #48	; 0x30
  4268c6:	2500      	movne	r5, #0
  4268c8:	4b79      	ldr	r3, [pc, #484]	; (426ab0 <localtime_r+0x228>)
  4268ca:	441d      	add	r5, r3
  4268cc:	f002 f8b8 	bl	428a40 <__tz_lock>
  4268d0:	f002 f8c2 	bl	428a58 <_tzset_unlocked>
  4268d4:	4b77      	ldr	r3, [pc, #476]	; (426ab4 <localtime_r+0x22c>)
  4268d6:	681b      	ldr	r3, [r3, #0]
  4268d8:	b343      	cbz	r3, 42692c <localtime_r+0xa4>
  4268da:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4268de:	429e      	cmp	r6, r3
  4268e0:	d005      	beq.n	4268ee <localtime_r+0x66>
  4268e2:	4630      	mov	r0, r6
  4268e4:	f001 ffea 	bl	4288bc <__tzcalc_limits>
  4268e8:	2800      	cmp	r0, #0
  4268ea:	f000 80a6 	beq.w	426a3a <localtime_r+0x1b2>
  4268ee:	f8d8 3000 	ldr.w	r3, [r8]
  4268f2:	b983      	cbnz	r3, 426916 <localtime_r+0x8e>
  4268f4:	683b      	ldr	r3, [r7, #0]
  4268f6:	f8d8 201c 	ldr.w	r2, [r8, #28]
  4268fa:	4293      	cmp	r3, r2
  4268fc:	f280 80a1 	bge.w	426a42 <localtime_r+0x1ba>
  426900:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
  426904:	4293      	cmp	r3, r2
  426906:	bfb4      	ite	lt
  426908:	2301      	movlt	r3, #1
  42690a:	2300      	movge	r3, #0
  42690c:	6223      	str	r3, [r4, #32]
  42690e:	da0e      	bge.n	42692e <localtime_r+0xa6>
  426910:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
  426914:	e00d      	b.n	426932 <localtime_r+0xaa>
  426916:	683b      	ldr	r3, [r7, #0]
  426918:	f8d8 201c 	ldr.w	r2, [r8, #28]
  42691c:	4293      	cmp	r3, r2
  42691e:	db04      	blt.n	42692a <localtime_r+0xa2>
  426920:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
  426924:	4293      	cmp	r3, r2
  426926:	f2c0 808c 	blt.w	426a42 <localtime_r+0x1ba>
  42692a:	2300      	movs	r3, #0
  42692c:	6223      	str	r3, [r4, #32]
  42692e:	f8d8 6020 	ldr.w	r6, [r8, #32]
  426932:	4a61      	ldr	r2, [pc, #388]	; (426ab8 <localtime_r+0x230>)
  426934:	4f61      	ldr	r7, [pc, #388]	; (426abc <localtime_r+0x234>)
  426936:	68a1      	ldr	r1, [r4, #8]
  426938:	fb82 3206 	smull	r3, r2, r2, r6
  42693c:	4432      	add	r2, r6
  42693e:	17f3      	asrs	r3, r6, #31
  426940:	12d2      	asrs	r2, r2, #11
  426942:	1ad0      	subs	r0, r2, r3
  426944:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
  426948:	fb0e 6010 	mls	r0, lr, r0, r6
  42694c:	fb87 6700 	smull	r6, r7, r7, r0
  426950:	183e      	adds	r6, r7, r0
  426952:	17c7      	asrs	r7, r0, #31
  426954:	ebc7 1766 	rsb	r7, r7, r6, asr #5
  426958:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
  42695c:	6826      	ldr	r6, [r4, #0]
  42695e:	1ad3      	subs	r3, r2, r3
  426960:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
  426964:	6862      	ldr	r2, [r4, #4]
  426966:	1a30      	subs	r0, r6, r0
  426968:	1acb      	subs	r3, r1, r3
  42696a:	1bd2      	subs	r2, r2, r7
  42696c:	283b      	cmp	r0, #59	; 0x3b
  42696e:	e884 000d 	stmia.w	r4, {r0, r2, r3}
  426972:	dd4d      	ble.n	426a10 <localtime_r+0x188>
  426974:	3201      	adds	r2, #1
  426976:	383c      	subs	r0, #60	; 0x3c
  426978:	e884 0005 	stmia.w	r4, {r0, r2}
  42697c:	2a3b      	cmp	r2, #59	; 0x3b
  42697e:	dd40      	ble.n	426a02 <localtime_r+0x17a>
  426980:	3301      	adds	r3, #1
  426982:	3a3c      	subs	r2, #60	; 0x3c
  426984:	60a3      	str	r3, [r4, #8]
  426986:	6062      	str	r2, [r4, #4]
  426988:	2b17      	cmp	r3, #23
  42698a:	dd1d      	ble.n	4269c8 <localtime_r+0x140>
  42698c:	69a2      	ldr	r2, [r4, #24]
  42698e:	69e1      	ldr	r1, [r4, #28]
  426990:	3201      	adds	r2, #1
  426992:	2a06      	cmp	r2, #6
  426994:	bfc8      	it	gt
  426996:	2200      	movgt	r2, #0
  426998:	61a2      	str	r2, [r4, #24]
  42699a:	68e2      	ldr	r2, [r4, #12]
  42699c:	3101      	adds	r1, #1
  42699e:	61e1      	str	r1, [r4, #28]
  4269a0:	3b18      	subs	r3, #24
  4269a2:	3201      	adds	r2, #1
  4269a4:	6921      	ldr	r1, [r4, #16]
  4269a6:	60a3      	str	r3, [r4, #8]
  4269a8:	60e2      	str	r2, [r4, #12]
  4269aa:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
  4269ae:	429a      	cmp	r2, r3
  4269b0:	dd05      	ble.n	4269be <localtime_r+0x136>
  4269b2:	3101      	adds	r1, #1
  4269b4:	1ad2      	subs	r2, r2, r3
  4269b6:	290c      	cmp	r1, #12
  4269b8:	60e2      	str	r2, [r4, #12]
  4269ba:	d045      	beq.n	426a48 <localtime_r+0x1c0>
  4269bc:	6121      	str	r1, [r4, #16]
  4269be:	f002 f845 	bl	428a4c <__tz_unlock>
  4269c2:	4620      	mov	r0, r4
  4269c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4269c8:	2b00      	cmp	r3, #0
  4269ca:	daf8      	bge.n	4269be <localtime_r+0x136>
  4269cc:	69a2      	ldr	r2, [r4, #24]
  4269ce:	69e1      	ldr	r1, [r4, #28]
  4269d0:	3a01      	subs	r2, #1
  4269d2:	bf48      	it	mi
  4269d4:	2206      	movmi	r2, #6
  4269d6:	61a2      	str	r2, [r4, #24]
  4269d8:	68e2      	ldr	r2, [r4, #12]
  4269da:	3901      	subs	r1, #1
  4269dc:	3318      	adds	r3, #24
  4269de:	3a01      	subs	r2, #1
  4269e0:	61e1      	str	r1, [r4, #28]
  4269e2:	60a3      	str	r3, [r4, #8]
  4269e4:	60e2      	str	r2, [r4, #12]
  4269e6:	2a00      	cmp	r2, #0
  4269e8:	d1e9      	bne.n	4269be <localtime_r+0x136>
  4269ea:	6923      	ldr	r3, [r4, #16]
  4269ec:	3b01      	subs	r3, #1
  4269ee:	d432      	bmi.n	426a56 <localtime_r+0x1ce>
  4269f0:	6123      	str	r3, [r4, #16]
  4269f2:	009b      	lsls	r3, r3, #2
  4269f4:	58eb      	ldr	r3, [r5, r3]
  4269f6:	60e3      	str	r3, [r4, #12]
  4269f8:	f002 f828 	bl	428a4c <__tz_unlock>
  4269fc:	4620      	mov	r0, r4
  4269fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  426a02:	2a00      	cmp	r2, #0
  426a04:	dac0      	bge.n	426988 <localtime_r+0x100>
  426a06:	3b01      	subs	r3, #1
  426a08:	323c      	adds	r2, #60	; 0x3c
  426a0a:	60a3      	str	r3, [r4, #8]
  426a0c:	6062      	str	r2, [r4, #4]
  426a0e:	e7bb      	b.n	426988 <localtime_r+0x100>
  426a10:	2800      	cmp	r0, #0
  426a12:	dab3      	bge.n	42697c <localtime_r+0xf4>
  426a14:	3a01      	subs	r2, #1
  426a16:	303c      	adds	r0, #60	; 0x3c
  426a18:	e884 0005 	stmia.w	r4, {r0, r2}
  426a1c:	e7ae      	b.n	42697c <localtime_r+0xf4>
  426a1e:	4b23      	ldr	r3, [pc, #140]	; (426aac <localtime_r+0x224>)
  426a20:	17f5      	asrs	r5, r6, #31
  426a22:	fb83 2306 	smull	r2, r3, r3, r6
  426a26:	ebc5 1363 	rsb	r3, r5, r3, asr #5
  426a2a:	2264      	movs	r2, #100	; 0x64
  426a2c:	fb02 6313 	mls	r3, r2, r3, r6
  426a30:	2b00      	cmp	r3, #0
  426a32:	f43f af3c 	beq.w	4268ae <localtime_r+0x26>
  426a36:	2530      	movs	r5, #48	; 0x30
  426a38:	e746      	b.n	4268c8 <localtime_r+0x40>
  426a3a:	f04f 33ff 	mov.w	r3, #4294967295
  426a3e:	6223      	str	r3, [r4, #32]
  426a40:	e775      	b.n	42692e <localtime_r+0xa6>
  426a42:	2301      	movs	r3, #1
  426a44:	6223      	str	r3, [r4, #32]
  426a46:	e763      	b.n	426910 <localtime_r+0x88>
  426a48:	6963      	ldr	r3, [r4, #20]
  426a4a:	2200      	movs	r2, #0
  426a4c:	3301      	adds	r3, #1
  426a4e:	6163      	str	r3, [r4, #20]
  426a50:	6122      	str	r2, [r4, #16]
  426a52:	61e2      	str	r2, [r4, #28]
  426a54:	e7b3      	b.n	4269be <localtime_r+0x136>
  426a56:	6963      	ldr	r3, [r4, #20]
  426a58:	1e5a      	subs	r2, r3, #1
  426a5a:	210b      	movs	r1, #11
  426a5c:	6162      	str	r2, [r4, #20]
  426a5e:	0792      	lsls	r2, r2, #30
  426a60:	6121      	str	r1, [r4, #16]
  426a62:	d013      	beq.n	426a8c <localtime_r+0x204>
  426a64:	f203 726b 	addw	r2, r3, #1899	; 0x76b
  426a68:	17d3      	asrs	r3, r2, #31
  426a6a:	4910      	ldr	r1, [pc, #64]	; (426aac <localtime_r+0x224>)
  426a6c:	fb81 0102 	smull	r0, r1, r1, r2
  426a70:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
  426a74:	f44f 71c8 	mov.w	r1, #400	; 0x190
  426a78:	fb01 2313 	mls	r3, r1, r3, r2
  426a7c:	fab3 f383 	clz	r3, r3
  426a80:	095b      	lsrs	r3, r3, #5
  426a82:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
  426a86:	61e3      	str	r3, [r4, #28]
  426a88:	232c      	movs	r3, #44	; 0x2c
  426a8a:	e7b3      	b.n	4269f4 <localtime_r+0x16c>
  426a8c:	4907      	ldr	r1, [pc, #28]	; (426aac <localtime_r+0x224>)
  426a8e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
  426a92:	fb81 3102 	smull	r3, r1, r1, r2
  426a96:	17d3      	asrs	r3, r2, #31
  426a98:	ebc3 1161 	rsb	r1, r3, r1, asr #5
  426a9c:	2064      	movs	r0, #100	; 0x64
  426a9e:	fb00 2111 	mls	r1, r0, r1, r2
  426aa2:	2900      	cmp	r1, #0
  426aa4:	d0e1      	beq.n	426a6a <localtime_r+0x1e2>
  426aa6:	f240 136d 	movw	r3, #365	; 0x16d
  426aaa:	e7ec      	b.n	426a86 <localtime_r+0x1fe>
  426aac:	51eb851f 	.word	0x51eb851f
  426ab0:	0042f694 	.word	0x0042f694
  426ab4:	20001434 	.word	0x20001434
  426ab8:	91a2b3c5 	.word	0x91a2b3c5
  426abc:	88888889 	.word	0x88888889

00426ac0 <memcpy>:
  426ac0:	4684      	mov	ip, r0
  426ac2:	ea41 0300 	orr.w	r3, r1, r0
  426ac6:	f013 0303 	ands.w	r3, r3, #3
  426aca:	d16d      	bne.n	426ba8 <memcpy+0xe8>
  426acc:	3a40      	subs	r2, #64	; 0x40
  426ace:	d341      	bcc.n	426b54 <memcpy+0x94>
  426ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  426ad4:	f840 3b04 	str.w	r3, [r0], #4
  426ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  426adc:	f840 3b04 	str.w	r3, [r0], #4
  426ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  426ae4:	f840 3b04 	str.w	r3, [r0], #4
  426ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  426aec:	f840 3b04 	str.w	r3, [r0], #4
  426af0:	f851 3b04 	ldr.w	r3, [r1], #4
  426af4:	f840 3b04 	str.w	r3, [r0], #4
  426af8:	f851 3b04 	ldr.w	r3, [r1], #4
  426afc:	f840 3b04 	str.w	r3, [r0], #4
  426b00:	f851 3b04 	ldr.w	r3, [r1], #4
  426b04:	f840 3b04 	str.w	r3, [r0], #4
  426b08:	f851 3b04 	ldr.w	r3, [r1], #4
  426b0c:	f840 3b04 	str.w	r3, [r0], #4
  426b10:	f851 3b04 	ldr.w	r3, [r1], #4
  426b14:	f840 3b04 	str.w	r3, [r0], #4
  426b18:	f851 3b04 	ldr.w	r3, [r1], #4
  426b1c:	f840 3b04 	str.w	r3, [r0], #4
  426b20:	f851 3b04 	ldr.w	r3, [r1], #4
  426b24:	f840 3b04 	str.w	r3, [r0], #4
  426b28:	f851 3b04 	ldr.w	r3, [r1], #4
  426b2c:	f840 3b04 	str.w	r3, [r0], #4
  426b30:	f851 3b04 	ldr.w	r3, [r1], #4
  426b34:	f840 3b04 	str.w	r3, [r0], #4
  426b38:	f851 3b04 	ldr.w	r3, [r1], #4
  426b3c:	f840 3b04 	str.w	r3, [r0], #4
  426b40:	f851 3b04 	ldr.w	r3, [r1], #4
  426b44:	f840 3b04 	str.w	r3, [r0], #4
  426b48:	f851 3b04 	ldr.w	r3, [r1], #4
  426b4c:	f840 3b04 	str.w	r3, [r0], #4
  426b50:	3a40      	subs	r2, #64	; 0x40
  426b52:	d2bd      	bcs.n	426ad0 <memcpy+0x10>
  426b54:	3230      	adds	r2, #48	; 0x30
  426b56:	d311      	bcc.n	426b7c <memcpy+0xbc>
  426b58:	f851 3b04 	ldr.w	r3, [r1], #4
  426b5c:	f840 3b04 	str.w	r3, [r0], #4
  426b60:	f851 3b04 	ldr.w	r3, [r1], #4
  426b64:	f840 3b04 	str.w	r3, [r0], #4
  426b68:	f851 3b04 	ldr.w	r3, [r1], #4
  426b6c:	f840 3b04 	str.w	r3, [r0], #4
  426b70:	f851 3b04 	ldr.w	r3, [r1], #4
  426b74:	f840 3b04 	str.w	r3, [r0], #4
  426b78:	3a10      	subs	r2, #16
  426b7a:	d2ed      	bcs.n	426b58 <memcpy+0x98>
  426b7c:	320c      	adds	r2, #12
  426b7e:	d305      	bcc.n	426b8c <memcpy+0xcc>
  426b80:	f851 3b04 	ldr.w	r3, [r1], #4
  426b84:	f840 3b04 	str.w	r3, [r0], #4
  426b88:	3a04      	subs	r2, #4
  426b8a:	d2f9      	bcs.n	426b80 <memcpy+0xc0>
  426b8c:	3204      	adds	r2, #4
  426b8e:	d008      	beq.n	426ba2 <memcpy+0xe2>
  426b90:	07d2      	lsls	r2, r2, #31
  426b92:	bf1c      	itt	ne
  426b94:	f811 3b01 	ldrbne.w	r3, [r1], #1
  426b98:	f800 3b01 	strbne.w	r3, [r0], #1
  426b9c:	d301      	bcc.n	426ba2 <memcpy+0xe2>
  426b9e:	880b      	ldrh	r3, [r1, #0]
  426ba0:	8003      	strh	r3, [r0, #0]
  426ba2:	4660      	mov	r0, ip
  426ba4:	4770      	bx	lr
  426ba6:	bf00      	nop
  426ba8:	2a08      	cmp	r2, #8
  426baa:	d313      	bcc.n	426bd4 <memcpy+0x114>
  426bac:	078b      	lsls	r3, r1, #30
  426bae:	d08d      	beq.n	426acc <memcpy+0xc>
  426bb0:	f010 0303 	ands.w	r3, r0, #3
  426bb4:	d08a      	beq.n	426acc <memcpy+0xc>
  426bb6:	f1c3 0304 	rsb	r3, r3, #4
  426bba:	1ad2      	subs	r2, r2, r3
  426bbc:	07db      	lsls	r3, r3, #31
  426bbe:	bf1c      	itt	ne
  426bc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  426bc4:	f800 3b01 	strbne.w	r3, [r0], #1
  426bc8:	d380      	bcc.n	426acc <memcpy+0xc>
  426bca:	f831 3b02 	ldrh.w	r3, [r1], #2
  426bce:	f820 3b02 	strh.w	r3, [r0], #2
  426bd2:	e77b      	b.n	426acc <memcpy+0xc>
  426bd4:	3a04      	subs	r2, #4
  426bd6:	d3d9      	bcc.n	426b8c <memcpy+0xcc>
  426bd8:	3a01      	subs	r2, #1
  426bda:	f811 3b01 	ldrb.w	r3, [r1], #1
  426bde:	f800 3b01 	strb.w	r3, [r0], #1
  426be2:	d2f9      	bcs.n	426bd8 <memcpy+0x118>
  426be4:	780b      	ldrb	r3, [r1, #0]
  426be6:	7003      	strb	r3, [r0, #0]
  426be8:	784b      	ldrb	r3, [r1, #1]
  426bea:	7043      	strb	r3, [r0, #1]
  426bec:	788b      	ldrb	r3, [r1, #2]
  426bee:	7083      	strb	r3, [r0, #2]
  426bf0:	4660      	mov	r0, ip
  426bf2:	4770      	bx	lr

00426bf4 <memset>:
  426bf4:	b470      	push	{r4, r5, r6}
  426bf6:	0786      	lsls	r6, r0, #30
  426bf8:	d046      	beq.n	426c88 <memset+0x94>
  426bfa:	1e54      	subs	r4, r2, #1
  426bfc:	2a00      	cmp	r2, #0
  426bfe:	d041      	beq.n	426c84 <memset+0x90>
  426c00:	b2ca      	uxtb	r2, r1
  426c02:	4603      	mov	r3, r0
  426c04:	e002      	b.n	426c0c <memset+0x18>
  426c06:	f114 34ff 	adds.w	r4, r4, #4294967295
  426c0a:	d33b      	bcc.n	426c84 <memset+0x90>
  426c0c:	f803 2b01 	strb.w	r2, [r3], #1
  426c10:	079d      	lsls	r5, r3, #30
  426c12:	d1f8      	bne.n	426c06 <memset+0x12>
  426c14:	2c03      	cmp	r4, #3
  426c16:	d92e      	bls.n	426c76 <memset+0x82>
  426c18:	b2cd      	uxtb	r5, r1
  426c1a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  426c1e:	2c0f      	cmp	r4, #15
  426c20:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  426c24:	d919      	bls.n	426c5a <memset+0x66>
  426c26:	f103 0210 	add.w	r2, r3, #16
  426c2a:	4626      	mov	r6, r4
  426c2c:	3e10      	subs	r6, #16
  426c2e:	2e0f      	cmp	r6, #15
  426c30:	f842 5c10 	str.w	r5, [r2, #-16]
  426c34:	f842 5c0c 	str.w	r5, [r2, #-12]
  426c38:	f842 5c08 	str.w	r5, [r2, #-8]
  426c3c:	f842 5c04 	str.w	r5, [r2, #-4]
  426c40:	f102 0210 	add.w	r2, r2, #16
  426c44:	d8f2      	bhi.n	426c2c <memset+0x38>
  426c46:	f1a4 0210 	sub.w	r2, r4, #16
  426c4a:	f022 020f 	bic.w	r2, r2, #15
  426c4e:	f004 040f 	and.w	r4, r4, #15
  426c52:	3210      	adds	r2, #16
  426c54:	2c03      	cmp	r4, #3
  426c56:	4413      	add	r3, r2
  426c58:	d90d      	bls.n	426c76 <memset+0x82>
  426c5a:	461e      	mov	r6, r3
  426c5c:	4622      	mov	r2, r4
  426c5e:	3a04      	subs	r2, #4
  426c60:	2a03      	cmp	r2, #3
  426c62:	f846 5b04 	str.w	r5, [r6], #4
  426c66:	d8fa      	bhi.n	426c5e <memset+0x6a>
  426c68:	1f22      	subs	r2, r4, #4
  426c6a:	f022 0203 	bic.w	r2, r2, #3
  426c6e:	3204      	adds	r2, #4
  426c70:	4413      	add	r3, r2
  426c72:	f004 0403 	and.w	r4, r4, #3
  426c76:	b12c      	cbz	r4, 426c84 <memset+0x90>
  426c78:	b2c9      	uxtb	r1, r1
  426c7a:	441c      	add	r4, r3
  426c7c:	f803 1b01 	strb.w	r1, [r3], #1
  426c80:	429c      	cmp	r4, r3
  426c82:	d1fb      	bne.n	426c7c <memset+0x88>
  426c84:	bc70      	pop	{r4, r5, r6}
  426c86:	4770      	bx	lr
  426c88:	4614      	mov	r4, r2
  426c8a:	4603      	mov	r3, r0
  426c8c:	e7c2      	b.n	426c14 <memset+0x20>
  426c8e:	bf00      	nop

00426c90 <validate_structure>:
  426c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  426c94:	6801      	ldr	r1, [r0, #0]
  426c96:	293b      	cmp	r1, #59	; 0x3b
  426c98:	b082      	sub	sp, #8
  426c9a:	4604      	mov	r4, r0
  426c9c:	f200 80b6 	bhi.w	426e0c <validate_structure+0x17c>
  426ca0:	6841      	ldr	r1, [r0, #4]
  426ca2:	293b      	cmp	r1, #59	; 0x3b
  426ca4:	f200 80a5 	bhi.w	426df2 <validate_structure+0x162>
  426ca8:	68a1      	ldr	r1, [r4, #8]
  426caa:	2917      	cmp	r1, #23
  426cac:	f200 8094 	bhi.w	426dd8 <validate_structure+0x148>
  426cb0:	6921      	ldr	r1, [r4, #16]
  426cb2:	290b      	cmp	r1, #11
  426cb4:	f200 8083 	bhi.w	426dbe <validate_structure+0x12e>
  426cb8:	6963      	ldr	r3, [r4, #20]
  426cba:	079f      	lsls	r7, r3, #30
  426cbc:	d133      	bne.n	426d26 <validate_structure+0x96>
  426cbe:	4874      	ldr	r0, [pc, #464]	; (426e90 <validate_structure+0x200>)
  426cc0:	17da      	asrs	r2, r3, #31
  426cc2:	fb80 6503 	smull	r6, r5, r0, r3
  426cc6:	ebc2 1265 	rsb	r2, r2, r5, asr #5
  426cca:	2564      	movs	r5, #100	; 0x64
  426ccc:	fb05 3212 	mls	r2, r5, r2, r3
  426cd0:	2a00      	cmp	r2, #0
  426cd2:	d064      	beq.n	426d9e <validate_structure+0x10e>
  426cd4:	68e3      	ldr	r3, [r4, #12]
  426cd6:	4d6f      	ldr	r5, [pc, #444]	; (426e94 <validate_structure+0x204>)
  426cd8:	2b00      	cmp	r3, #0
  426cda:	f04f 061d 	mov.w	r6, #29
  426cde:	dc27      	bgt.n	426d30 <validate_structure+0xa0>
  426ce0:	4f6b      	ldr	r7, [pc, #428]	; (426e90 <validate_structure+0x200>)
  426ce2:	f04f 0e64 	mov.w	lr, #100	; 0x64
  426ce6:	f44f 7cc8 	mov.w	ip, #400	; 0x190
  426cea:	e007      	b.n	426cfc <validate_structure+0x6c>
  426cec:	2901      	cmp	r1, #1
  426cee:	bf14      	ite	ne
  426cf0:	f855 2021 	ldrne.w	r2, [r5, r1, lsl #2]
  426cf4:	4632      	moveq	r2, r6
  426cf6:	4413      	add	r3, r2
  426cf8:	2b00      	cmp	r3, #0
  426cfa:	dc37      	bgt.n	426d6c <validate_structure+0xdc>
  426cfc:	f111 31ff 	adds.w	r1, r1, #4294967295
  426d00:	d2f4      	bcs.n	426cec <validate_structure+0x5c>
  426d02:	6961      	ldr	r1, [r4, #20]
  426d04:	1e4a      	subs	r2, r1, #1
  426d06:	0796      	lsls	r6, r2, #30
  426d08:	6162      	str	r2, [r4, #20]
  426d0a:	f040 808c 	bne.w	426e26 <validate_structure+0x196>
  426d0e:	fb87 0602 	smull	r0, r6, r7, r2
  426d12:	17d0      	asrs	r0, r2, #31
  426d14:	ebc0 1066 	rsb	r0, r0, r6, asr #5
  426d18:	fb0e 2210 	mls	r2, lr, r0, r2
  426d1c:	2a00      	cmp	r2, #0
  426d1e:	f000 8086 	beq.w	426e2e <validate_structure+0x19e>
  426d22:	261d      	movs	r6, #29
  426d24:	e080      	b.n	426e28 <validate_structure+0x198>
  426d26:	261c      	movs	r6, #28
  426d28:	68e3      	ldr	r3, [r4, #12]
  426d2a:	4d5a      	ldr	r5, [pc, #360]	; (426e94 <validate_structure+0x204>)
  426d2c:	2b00      	cmp	r3, #0
  426d2e:	ddd7      	ble.n	426ce0 <validate_structure+0x50>
  426d30:	f8df e15c 	ldr.w	lr, [pc, #348]	; 426e90 <validate_structure+0x200>
  426d34:	2700      	movs	r7, #0
  426d36:	f04f 0c64 	mov.w	ip, #100	; 0x64
  426d3a:	f44f 78c8 	mov.w	r8, #400	; 0x190
  426d3e:	1c4a      	adds	r2, r1, #1
  426d40:	e00b      	b.n	426d5a <validate_structure+0xca>
  426d42:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
  426d46:	4298      	cmp	r0, r3
  426d48:	eba3 0300 	sub.w	r3, r3, r0
  426d4c:	da10      	bge.n	426d70 <validate_structure+0xe0>
  426d4e:	2a0c      	cmp	r2, #12
  426d50:	60e3      	str	r3, [r4, #12]
  426d52:	6122      	str	r2, [r4, #16]
  426d54:	d00f      	beq.n	426d76 <validate_structure+0xe6>
  426d56:	3101      	adds	r1, #1
  426d58:	3201      	adds	r2, #1
  426d5a:	2901      	cmp	r1, #1
  426d5c:	d1f1      	bne.n	426d42 <validate_structure+0xb2>
  426d5e:	429e      	cmp	r6, r3
  426d60:	eba3 0306 	sub.w	r3, r3, r6
  426d64:	da04      	bge.n	426d70 <validate_structure+0xe0>
  426d66:	60e3      	str	r3, [r4, #12]
  426d68:	6122      	str	r2, [r4, #16]
  426d6a:	e7f4      	b.n	426d56 <validate_structure+0xc6>
  426d6c:	6121      	str	r1, [r4, #16]
  426d6e:	60e3      	str	r3, [r4, #12]
  426d70:	b002      	add	sp, #8
  426d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  426d76:	6961      	ldr	r1, [r4, #20]
  426d78:	6127      	str	r7, [r4, #16]
  426d7a:	1c4a      	adds	r2, r1, #1
  426d7c:	0790      	lsls	r0, r2, #30
  426d7e:	6162      	str	r2, [r4, #20]
  426d80:	d002      	beq.n	426d88 <validate_structure+0xf8>
  426d82:	261c      	movs	r6, #28
  426d84:	2100      	movs	r1, #0
  426d86:	e7da      	b.n	426d3e <validate_structure+0xae>
  426d88:	fb8e 0602 	smull	r0, r6, lr, r2
  426d8c:	17d0      	asrs	r0, r2, #31
  426d8e:	ebc0 1066 	rsb	r0, r0, r6, asr #5
  426d92:	fb0c 2210 	mls	r2, ip, r0, r2
  426d96:	2a00      	cmp	r2, #0
  426d98:	d057      	beq.n	426e4a <validate_structure+0x1ba>
  426d9a:	261d      	movs	r6, #29
  426d9c:	e7f2      	b.n	426d84 <validate_structure+0xf4>
  426d9e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
  426da2:	fb80 2003 	smull	r2, r0, r0, r3
  426da6:	17da      	asrs	r2, r3, #31
  426da8:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
  426dac:	f44f 72c8 	mov.w	r2, #400	; 0x190
  426db0:	fb02 3310 	mls	r3, r2, r0, r3
  426db4:	2b00      	cmp	r3, #0
  426db6:	bf14      	ite	ne
  426db8:	261c      	movne	r6, #28
  426dba:	261d      	moveq	r6, #29
  426dbc:	e7b4      	b.n	426d28 <validate_structure+0x98>
  426dbe:	220c      	movs	r2, #12
  426dc0:	4668      	mov	r0, sp
  426dc2:	f002 ff23 	bl	429c0c <div>
  426dc6:	6963      	ldr	r3, [r4, #20]
  426dc8:	9a00      	ldr	r2, [sp, #0]
  426dca:	9901      	ldr	r1, [sp, #4]
  426dcc:	4413      	add	r3, r2
  426dce:	2900      	cmp	r1, #0
  426dd0:	6163      	str	r3, [r4, #20]
  426dd2:	db57      	blt.n	426e84 <validate_structure+0x1f4>
  426dd4:	6121      	str	r1, [r4, #16]
  426dd6:	e770      	b.n	426cba <validate_structure+0x2a>
  426dd8:	2218      	movs	r2, #24
  426dda:	4668      	mov	r0, sp
  426ddc:	f002 ff16 	bl	429c0c <div>
  426de0:	e89d 0006 	ldmia.w	sp, {r1, r2}
  426de4:	68e3      	ldr	r3, [r4, #12]
  426de6:	2a00      	cmp	r2, #0
  426de8:	440b      	add	r3, r1
  426dea:	60e3      	str	r3, [r4, #12]
  426dec:	db45      	blt.n	426e7a <validate_structure+0x1ea>
  426dee:	60a2      	str	r2, [r4, #8]
  426df0:	e75e      	b.n	426cb0 <validate_structure+0x20>
  426df2:	223c      	movs	r2, #60	; 0x3c
  426df4:	4668      	mov	r0, sp
  426df6:	f002 ff09 	bl	429c0c <div>
  426dfa:	68a2      	ldr	r2, [r4, #8]
  426dfc:	9900      	ldr	r1, [sp, #0]
  426dfe:	9b01      	ldr	r3, [sp, #4]
  426e00:	4411      	add	r1, r2
  426e02:	2b00      	cmp	r3, #0
  426e04:	60a1      	str	r1, [r4, #8]
  426e06:	db33      	blt.n	426e70 <validate_structure+0x1e0>
  426e08:	6063      	str	r3, [r4, #4]
  426e0a:	e74e      	b.n	426caa <validate_structure+0x1a>
  426e0c:	223c      	movs	r2, #60	; 0x3c
  426e0e:	4668      	mov	r0, sp
  426e10:	f002 fefc 	bl	429c0c <div>
  426e14:	e89d 000c 	ldmia.w	sp, {r2, r3}
  426e18:	6861      	ldr	r1, [r4, #4]
  426e1a:	2b00      	cmp	r3, #0
  426e1c:	4411      	add	r1, r2
  426e1e:	6061      	str	r1, [r4, #4]
  426e20:	db21      	blt.n	426e66 <validate_structure+0x1d6>
  426e22:	6023      	str	r3, [r4, #0]
  426e24:	e73d      	b.n	426ca2 <validate_structure+0x12>
  426e26:	261c      	movs	r6, #28
  426e28:	210b      	movs	r1, #11
  426e2a:	221f      	movs	r2, #31
  426e2c:	e763      	b.n	426cf6 <validate_structure+0x66>
  426e2e:	f201 716b 	addw	r1, r1, #1899	; 0x76b
  426e32:	fb87 2001 	smull	r2, r0, r7, r1
  426e36:	17ca      	asrs	r2, r1, #31
  426e38:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
  426e3c:	fb0c 1112 	mls	r1, ip, r2, r1
  426e40:	2900      	cmp	r1, #0
  426e42:	bf14      	ite	ne
  426e44:	261c      	movne	r6, #28
  426e46:	261d      	moveq	r6, #29
  426e48:	e7ee      	b.n	426e28 <validate_structure+0x198>
  426e4a:	f201 716d 	addw	r1, r1, #1901	; 0x76d
  426e4e:	fb8e 2001 	smull	r2, r0, lr, r1
  426e52:	17ca      	asrs	r2, r1, #31
  426e54:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
  426e58:	fb08 1112 	mls	r1, r8, r2, r1
  426e5c:	2900      	cmp	r1, #0
  426e5e:	bf14      	ite	ne
  426e60:	261c      	movne	r6, #28
  426e62:	261d      	moveq	r6, #29
  426e64:	e78e      	b.n	426d84 <validate_structure+0xf4>
  426e66:	333c      	adds	r3, #60	; 0x3c
  426e68:	3901      	subs	r1, #1
  426e6a:	6023      	str	r3, [r4, #0]
  426e6c:	6061      	str	r1, [r4, #4]
  426e6e:	e718      	b.n	426ca2 <validate_structure+0x12>
  426e70:	333c      	adds	r3, #60	; 0x3c
  426e72:	3901      	subs	r1, #1
  426e74:	6063      	str	r3, [r4, #4]
  426e76:	60a1      	str	r1, [r4, #8]
  426e78:	e717      	b.n	426caa <validate_structure+0x1a>
  426e7a:	3218      	adds	r2, #24
  426e7c:	3b01      	subs	r3, #1
  426e7e:	60a2      	str	r2, [r4, #8]
  426e80:	60e3      	str	r3, [r4, #12]
  426e82:	e715      	b.n	426cb0 <validate_structure+0x20>
  426e84:	310c      	adds	r1, #12
  426e86:	3b01      	subs	r3, #1
  426e88:	6121      	str	r1, [r4, #16]
  426e8a:	6163      	str	r3, [r4, #20]
  426e8c:	e715      	b.n	426cba <validate_structure+0x2a>
  426e8e:	bf00      	nop
  426e90:	51eb851f 	.word	0x51eb851f
  426e94:	0042f634 	.word	0x0042f634

00426e98 <mktime>:
  426e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  426e9c:	4606      	mov	r6, r0
  426e9e:	f004 fb7d 	bl	42b59c <__gettzinfo>
  426ea2:	4680      	mov	r8, r0
  426ea4:	4630      	mov	r0, r6
  426ea6:	f7ff fef3 	bl	426c90 <validate_structure>
  426eaa:	4dce      	ldr	r5, [pc, #824]	; (4271e4 <mktime+0x34c>)
  426eac:	6934      	ldr	r4, [r6, #16]
  426eae:	6873      	ldr	r3, [r6, #4]
  426eb0:	6831      	ldr	r1, [r6, #0]
  426eb2:	68f2      	ldr	r2, [r6, #12]
  426eb4:	68b0      	ldr	r0, [r6, #8]
  426eb6:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
  426eba:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  426ebe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  426ec2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
  426ec6:	3a01      	subs	r2, #1
  426ec8:	2c01      	cmp	r4, #1
  426eca:	fb0e 3e00 	mla	lr, lr, r0, r3
  426ece:	4415      	add	r5, r2
  426ed0:	6971      	ldr	r1, [r6, #20]
  426ed2:	dd02      	ble.n	426eda <mktime+0x42>
  426ed4:	0788      	lsls	r0, r1, #30
  426ed6:	f000 80c8 	beq.w	42706a <mktime+0x1d2>
  426eda:	f501 531c 	add.w	r3, r1, #9984	; 0x2700
  426ede:	3310      	adds	r3, #16
  426ee0:	f644 6220 	movw	r2, #20000	; 0x4e20
  426ee4:	4293      	cmp	r3, r2
  426ee6:	61f5      	str	r5, [r6, #28]
  426ee8:	f200 8179 	bhi.w	4271de <mktime+0x346>
  426eec:	2946      	cmp	r1, #70	; 0x46
  426eee:	f300 8093 	bgt.w	427018 <mktime+0x180>
  426ef2:	f000 80f0 	beq.w	4270d6 <mktime+0x23e>
  426ef6:	2945      	cmp	r1, #69	; 0x45
  426ef8:	f000 817e 	beq.w	4271f8 <mktime+0x360>
  426efc:	48ba      	ldr	r0, [pc, #744]	; (4271e8 <mktime+0x350>)
  426efe:	2445      	movs	r4, #69	; 0x45
  426f00:	f240 196d 	movw	r9, #365	; 0x16d
  426f04:	2764      	movs	r7, #100	; 0x64
  426f06:	f44f 7cc8 	mov.w	ip, #400	; 0x190
  426f0a:	e016      	b.n	426f3a <mktime+0xa2>
  426f0c:	f204 7a6c 	addw	sl, r4, #1900	; 0x76c
  426f10:	fb80 2b0a 	smull	r2, fp, r0, sl
  426f14:	ea4f 72ea 	mov.w	r2, sl, asr #31
  426f18:	ebc2 12eb 	rsb	r2, r2, fp, asr #7
  426f1c:	fb0c a212 	mls	r2, ip, r2, sl
  426f20:	2b00      	cmp	r3, #0
  426f22:	f040 80d1 	bne.w	4270c8 <mktime+0x230>
  426f26:	2a00      	cmp	r2, #0
  426f28:	bf14      	ite	ne
  426f2a:	464b      	movne	r3, r9
  426f2c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
  426f30:	3c01      	subs	r4, #1
  426f32:	42a1      	cmp	r1, r4
  426f34:	eba5 0503 	sub.w	r5, r5, r3
  426f38:	d010      	beq.n	426f5c <mktime+0xc4>
  426f3a:	fb80 2304 	smull	r2, r3, r0, r4
  426f3e:	17e2      	asrs	r2, r4, #31
  426f40:	ebc2 1363 	rsb	r3, r2, r3, asr #5
  426f44:	f014 0f03 	tst.w	r4, #3
  426f48:	fb07 4313 	mls	r3, r7, r3, r4
  426f4c:	d0de      	beq.n	426f0c <mktime+0x74>
  426f4e:	3c01      	subs	r4, #1
  426f50:	f240 136d 	movw	r3, #365	; 0x16d
  426f54:	42a1      	cmp	r1, r4
  426f56:	eba5 0503 	sub.w	r5, r5, r3
  426f5a:	d1ee      	bne.n	426f3a <mktime+0xa2>
  426f5c:	07a1      	lsls	r1, r4, #30
  426f5e:	f040 80e7 	bne.w	427130 <mktime+0x298>
  426f62:	4aa1      	ldr	r2, [pc, #644]	; (4271e8 <mktime+0x350>)
  426f64:	17e3      	asrs	r3, r4, #31
  426f66:	fb82 0104 	smull	r0, r1, r2, r4
  426f6a:	ebc3 1361 	rsb	r3, r3, r1, asr #5
  426f6e:	2164      	movs	r1, #100	; 0x64
  426f70:	fb01 4313 	mls	r3, r1, r3, r4
  426f74:	2b00      	cmp	r3, #0
  426f76:	f040 80f1 	bne.w	42715c <mktime+0x2c4>
  426f7a:	f204 716c 	addw	r1, r4, #1900	; 0x76c
  426f7e:	fb82 3201 	smull	r3, r2, r2, r1
  426f82:	17cb      	asrs	r3, r1, #31
  426f84:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
  426f88:	f44f 73c8 	mov.w	r3, #400	; 0x190
  426f8c:	fb03 1312 	mls	r3, r3, r2, r1
  426f90:	2b00      	cmp	r3, #0
  426f92:	f240 136d 	movw	r3, #365	; 0x16d
  426f96:	bf08      	it	eq
  426f98:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
  426f9c:	1aed      	subs	r5, r5, r3
  426f9e:	4f93      	ldr	r7, [pc, #588]	; (4271ec <mktime+0x354>)
  426fa0:	fb07 e705 	mla	r7, r7, r5, lr
  426fa4:	f001 fd4c 	bl	428a40 <__tz_lock>
  426fa8:	f001 fd56 	bl	428a58 <_tzset_unlocked>
  426fac:	4b90      	ldr	r3, [pc, #576]	; (4271f0 <mktime+0x358>)
  426fae:	f8d3 9000 	ldr.w	r9, [r3]
  426fb2:	f1b9 0f00 	cmp.w	r9, #0
  426fb6:	f000 808a 	beq.w	4270ce <mktime+0x236>
  426fba:	6a33      	ldr	r3, [r6, #32]
  426fbc:	6970      	ldr	r0, [r6, #20]
  426fbe:	f8d8 2004 	ldr.w	r2, [r8, #4]
  426fc2:	2b01      	cmp	r3, #1
  426fc4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
  426fc8:	bfa8      	it	ge
  426fca:	2301      	movge	r3, #1
  426fcc:	4290      	cmp	r0, r2
  426fce:	4699      	mov	r9, r3
  426fd0:	d05a      	beq.n	427088 <mktime+0x1f0>
  426fd2:	f001 fc73 	bl	4288bc <__tzcalc_limits>
  426fd6:	2800      	cmp	r0, #0
  426fd8:	d156      	bne.n	427088 <mktime+0x1f0>
  426fda:	f1b9 0f01 	cmp.w	r9, #1
  426fde:	f040 80b8 	bne.w	427152 <mktime+0x2ba>
  426fe2:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
  426fe6:	468a      	mov	sl, r1
  426fe8:	4457      	add	r7, sl
  426fea:	f04f 0901 	mov.w	r9, #1
  426fee:	f001 fd2d 	bl	428a4c <__tz_unlock>
  426ff2:	4b80      	ldr	r3, [pc, #512]	; (4271f4 <mktime+0x35c>)
  426ff4:	f8c6 9020 	str.w	r9, [r6, #32]
  426ff8:	3504      	adds	r5, #4
  426ffa:	fb83 2305 	smull	r2, r3, r3, r5
  426ffe:	195a      	adds	r2, r3, r5
  427000:	17eb      	asrs	r3, r5, #31
  427002:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  427006:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  42700a:	1aeb      	subs	r3, r5, r3
  42700c:	bf48      	it	mi
  42700e:	3307      	addmi	r3, #7
  427010:	61b3      	str	r3, [r6, #24]
  427012:	4638      	mov	r0, r7
  427014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  427018:	4873      	ldr	r0, [pc, #460]	; (4271e8 <mktime+0x350>)
  42701a:	2446      	movs	r4, #70	; 0x46
  42701c:	f240 196d 	movw	r9, #365	; 0x16d
  427020:	2764      	movs	r7, #100	; 0x64
  427022:	f44f 7cc8 	mov.w	ip, #400	; 0x190
  427026:	e013      	b.n	427050 <mktime+0x1b8>
  427028:	f204 7a6c 	addw	sl, r4, #1900	; 0x76c
  42702c:	fb80 2b0a 	smull	r2, fp, r0, sl
  427030:	ea4f 72ea 	mov.w	r2, sl, asr #31
  427034:	ebc2 12eb 	rsb	r2, r2, fp, asr #7
  427038:	fb0c a212 	mls	r2, ip, r2, sl
  42703c:	bb0b      	cbnz	r3, 427082 <mktime+0x1ea>
  42703e:	2a00      	cmp	r2, #0
  427040:	bf14      	ite	ne
  427042:	464b      	movne	r3, r9
  427044:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
  427048:	3401      	adds	r4, #1
  42704a:	42a1      	cmp	r1, r4
  42704c:	441d      	add	r5, r3
  42704e:	d0a6      	beq.n	426f9e <mktime+0x106>
  427050:	fb80 2304 	smull	r2, r3, r0, r4
  427054:	17e2      	asrs	r2, r4, #31
  427056:	ebc2 1363 	rsb	r3, r2, r3, asr #5
  42705a:	f014 0f03 	tst.w	r4, #3
  42705e:	fb07 4313 	mls	r3, r7, r3, r4
  427062:	d0e1      	beq.n	427028 <mktime+0x190>
  427064:	f240 136d 	movw	r3, #365	; 0x16d
  427068:	e7ee      	b.n	427048 <mktime+0x1b0>
  42706a:	4a5f      	ldr	r2, [pc, #380]	; (4271e8 <mktime+0x350>)
  42706c:	17cb      	asrs	r3, r1, #31
  42706e:	fb82 4001 	smull	r4, r0, r2, r1
  427072:	ebc3 1360 	rsb	r3, r3, r0, asr #5
  427076:	2064      	movs	r0, #100	; 0x64
  427078:	fb00 1313 	mls	r3, r0, r3, r1
  42707c:	b36b      	cbz	r3, 4270da <mktime+0x242>
  42707e:	3501      	adds	r5, #1
  427080:	e72b      	b.n	426eda <mktime+0x42>
  427082:	f44f 73b7 	mov.w	r3, #366	; 0x16e
  427086:	e7df      	b.n	427048 <mktime+0x1b0>
  427088:	f8d8 2020 	ldr.w	r2, [r8, #32]
  42708c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
  427090:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
  427094:	eba3 0c02 	sub.w	ip, r3, r2
  427098:	4567      	cmp	r7, ip
  42709a:	4610      	mov	r0, r2
  42709c:	468a      	mov	sl, r1
  42709e:	db02      	blt.n	4270a6 <mktime+0x20e>
  4270a0:	1a5b      	subs	r3, r3, r1
  4270a2:	429f      	cmp	r7, r3
  4270a4:	db99      	blt.n	426fda <mktime+0x142>
  4270a6:	f8d8 301c 	ldr.w	r3, [r8, #28]
  4270aa:	eba3 0e01 	sub.w	lr, r3, r1
  4270ae:	f8d8 3000 	ldr.w	r3, [r8]
  4270b2:	b30b      	cbz	r3, 4270f8 <mktime+0x260>
  4270b4:	4577      	cmp	r7, lr
  4270b6:	da3e      	bge.n	427136 <mktime+0x29e>
  4270b8:	f1b9 0f00 	cmp.w	r9, #0
  4270bc:	f280 80cf 	bge.w	42725e <mktime+0x3c6>
  4270c0:	f04f 0900 	mov.w	r9, #0
  4270c4:	4407      	add	r7, r0
  4270c6:	e792      	b.n	426fee <mktime+0x156>
  4270c8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
  4270cc:	e730      	b.n	426f30 <mktime+0x98>
  4270ce:	f8d8 0020 	ldr.w	r0, [r8, #32]
  4270d2:	4407      	add	r7, r0
  4270d4:	e78b      	b.n	426fee <mktime+0x156>
  4270d6:	460c      	mov	r4, r1
  4270d8:	e761      	b.n	426f9e <mktime+0x106>
  4270da:	f201 706c 	addw	r0, r1, #1900	; 0x76c
  4270de:	fb82 3200 	smull	r3, r2, r2, r0
  4270e2:	17c3      	asrs	r3, r0, #31
  4270e4:	ebc3 12e2 	rsb	r2, r3, r2, asr #7
  4270e8:	f44f 73c8 	mov.w	r3, #400	; 0x190
  4270ec:	fb03 0212 	mls	r2, r3, r2, r0
  4270f0:	2a00      	cmp	r2, #0
  4270f2:	f47f aef2 	bne.w	426eda <mktime+0x42>
  4270f6:	e7c2      	b.n	42707e <mktime+0x1e6>
  4270f8:	4577      	cmp	r7, lr
  4270fa:	db1c      	blt.n	427136 <mktime+0x29e>
  4270fc:	f1b9 0f00 	cmp.w	r9, #0
  427100:	f6ff af72 	blt.w	426fe8 <mktime+0x150>
  427104:	f47f af6f 	bne.w	426fe6 <mktime+0x14e>
  427108:	1a51      	subs	r1, r2, r1
  42710a:	6833      	ldr	r3, [r6, #0]
  42710c:	f8d6 900c 	ldr.w	r9, [r6, #12]
  427110:	440b      	add	r3, r1
  427112:	6033      	str	r3, [r6, #0]
  427114:	4630      	mov	r0, r6
  427116:	440f      	add	r7, r1
  427118:	f7ff fdba 	bl	426c90 <validate_structure>
  42711c:	68f3      	ldr	r3, [r6, #12]
  42711e:	ebb3 0309 	subs.w	r3, r3, r9
  427122:	bf18      	it	ne
  427124:	f04f 0901 	movne.w	r9, #1
  427128:	d12e      	bne.n	427188 <mktime+0x2f0>
  42712a:	f8d8 a03c 	ldr.w	sl, [r8, #60]	; 0x3c
  42712e:	e75b      	b.n	426fe8 <mktime+0x150>
  427130:	f240 136d 	movw	r3, #365	; 0x16d
  427134:	e732      	b.n	426f9c <mktime+0x104>
  427136:	4567      	cmp	r7, ip
  427138:	bfac      	ite	ge
  42713a:	2300      	movge	r3, #0
  42713c:	2301      	movlt	r3, #1
  42713e:	f1b9 0f00 	cmp.w	r9, #0
  427142:	db04      	blt.n	42714e <mktime+0x2b6>
  427144:	ea83 0909 	eor.w	r9, r3, r9
  427148:	f1b9 0f01 	cmp.w	r9, #1
  42714c:	d009      	beq.n	427162 <mktime+0x2ca>
  42714e:	4699      	mov	r9, r3
  427150:	e743      	b.n	426fda <mktime+0x142>
  427152:	f8d8 2020 	ldr.w	r2, [r8, #32]
  427156:	4610      	mov	r0, r2
  427158:	4407      	add	r7, r0
  42715a:	e748      	b.n	426fee <mktime+0x156>
  42715c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
  427160:	e71c      	b.n	426f9c <mktime+0x104>
  427162:	1a51      	subs	r1, r2, r1
  427164:	2b00      	cmp	r3, #0
  427166:	d1d0      	bne.n	42710a <mktime+0x272>
  427168:	6833      	ldr	r3, [r6, #0]
  42716a:	f8d6 900c 	ldr.w	r9, [r6, #12]
  42716e:	1a5b      	subs	r3, r3, r1
  427170:	6033      	str	r3, [r6, #0]
  427172:	4630      	mov	r0, r6
  427174:	1a7f      	subs	r7, r7, r1
  427176:	f7ff fd8b 	bl	426c90 <validate_structure>
  42717a:	68f3      	ldr	r3, [r6, #12]
  42717c:	ebb3 0909 	subs.w	r9, r3, r9
  427180:	d0a5      	beq.n	4270ce <mktime+0x236>
  427182:	464b      	mov	r3, r9
  427184:	f04f 0900 	mov.w	r9, #0
  427188:	2b01      	cmp	r3, #1
  42718a:	dd3c      	ble.n	427206 <mktime+0x36e>
  42718c:	f04f 33ff 	mov.w	r3, #4294967295
  427190:	69f2      	ldr	r2, [r6, #28]
  427192:	441d      	add	r5, r3
  427194:	189b      	adds	r3, r3, r2
  427196:	d43a      	bmi.n	42720e <mktime+0x376>
  427198:	07a2      	lsls	r2, r4, #30
  42719a:	d131      	bne.n	427200 <mktime+0x368>
  42719c:	4912      	ldr	r1, [pc, #72]	; (4271e8 <mktime+0x350>)
  42719e:	17e2      	asrs	r2, r4, #31
  4271a0:	fb81 e004 	smull	lr, r0, r1, r4
  4271a4:	ebc2 1260 	rsb	r2, r2, r0, asr #5
  4271a8:	2064      	movs	r0, #100	; 0x64
  4271aa:	fb00 4212 	mls	r2, r0, r2, r4
  4271ae:	2a00      	cmp	r2, #0
  4271b0:	d14c      	bne.n	42724c <mktime+0x3b4>
  4271b2:	f204 746c 	addw	r4, r4, #1900	; 0x76c
  4271b6:	fb81 2104 	smull	r2, r1, r1, r4
  4271ba:	17e2      	asrs	r2, r4, #31
  4271bc:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
  4271c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
  4271c4:	fb01 4212 	mls	r2, r1, r2, r4
  4271c8:	2a00      	cmp	r2, #0
  4271ca:	f240 126d 	movw	r2, #365	; 0x16d
  4271ce:	bf08      	it	eq
  4271d0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
  4271d4:	429a      	cmp	r2, r3
  4271d6:	bfd8      	it	le
  4271d8:	1a9b      	suble	r3, r3, r2
  4271da:	61f3      	str	r3, [r6, #28]
  4271dc:	e6fd      	b.n	426fda <mktime+0x142>
  4271de:	f04f 37ff 	mov.w	r7, #4294967295
  4271e2:	e716      	b.n	427012 <mktime+0x17a>
  4271e4:	0042f664 	.word	0x0042f664
  4271e8:	51eb851f 	.word	0x51eb851f
  4271ec:	00015180 	.word	0x00015180
  4271f0:	20001434 	.word	0x20001434
  4271f4:	92492493 	.word	0x92492493
  4271f8:	460c      	mov	r4, r1
  4271fa:	f240 136d 	movw	r3, #365	; 0x16d
  4271fe:	e6cd      	b.n	426f9c <mktime+0x104>
  427200:	f240 126d 	movw	r2, #365	; 0x16d
  427204:	e7e6      	b.n	4271d4 <mktime+0x33c>
  427206:	1c9a      	adds	r2, r3, #2
  427208:	bfd8      	it	le
  42720a:	2301      	movle	r3, #1
  42720c:	e7c0      	b.n	427190 <mktime+0x2f8>
  42720e:	1e61      	subs	r1, r4, #1
  427210:	0788      	lsls	r0, r1, #30
  427212:	d11e      	bne.n	427252 <mktime+0x3ba>
  427214:	4a16      	ldr	r2, [pc, #88]	; (427270 <mktime+0x3d8>)
  427216:	17cb      	asrs	r3, r1, #31
  427218:	fb82 e001 	smull	lr, r0, r2, r1
  42721c:	ebc3 1360 	rsb	r3, r3, r0, asr #5
  427220:	2064      	movs	r0, #100	; 0x64
  427222:	fb00 1313 	mls	r3, r0, r3, r1
  427226:	b9bb      	cbnz	r3, 427258 <mktime+0x3c0>
  427228:	f204 746b 	addw	r4, r4, #1899	; 0x76b
  42722c:	fb82 3204 	smull	r3, r2, r2, r4
  427230:	17e3      	asrs	r3, r4, #31
  427232:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
  427236:	f44f 72c8 	mov.w	r2, #400	; 0x190
  42723a:	fb02 4313 	mls	r3, r2, r3, r4
  42723e:	2b00      	cmp	r3, #0
  427240:	f240 136d 	movw	r3, #365	; 0x16d
  427244:	bf18      	it	ne
  427246:	f44f 73b6 	movne.w	r3, #364	; 0x16c
  42724a:	e7c6      	b.n	4271da <mktime+0x342>
  42724c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
  427250:	e7c0      	b.n	4271d4 <mktime+0x33c>
  427252:	f44f 73b6 	mov.w	r3, #364	; 0x16c
  427256:	e7c0      	b.n	4271da <mktime+0x342>
  427258:	f240 136d 	movw	r3, #365	; 0x16d
  42725c:	e7bd      	b.n	4271da <mktime+0x342>
  42725e:	f1b9 0f01 	cmp.w	r9, #1
  427262:	d003      	beq.n	42726c <mktime+0x3d4>
  427264:	f04f 0900 	mov.w	r9, #0
  427268:	4610      	mov	r0, r2
  42726a:	e775      	b.n	427158 <mktime+0x2c0>
  42726c:	1a51      	subs	r1, r2, r1
  42726e:	e77b      	b.n	427168 <mktime+0x2d0>
  427270:	51eb851f 	.word	0x51eb851f

00427274 <setbuf>:
  427274:	2900      	cmp	r1, #0
  427276:	bf0c      	ite	eq
  427278:	2202      	moveq	r2, #2
  42727a:	2200      	movne	r2, #0
  42727c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  427280:	f000 b800 	b.w	427284 <setvbuf>

00427284 <setvbuf>:
  427284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  427288:	4c61      	ldr	r4, [pc, #388]	; (427410 <setvbuf+0x18c>)
  42728a:	6825      	ldr	r5, [r4, #0]
  42728c:	b083      	sub	sp, #12
  42728e:	4604      	mov	r4, r0
  427290:	460f      	mov	r7, r1
  427292:	4690      	mov	r8, r2
  427294:	461e      	mov	r6, r3
  427296:	b115      	cbz	r5, 42729e <setvbuf+0x1a>
  427298:	6bab      	ldr	r3, [r5, #56]	; 0x38
  42729a:	2b00      	cmp	r3, #0
  42729c:	d064      	beq.n	427368 <setvbuf+0xe4>
  42729e:	f1b8 0f02 	cmp.w	r8, #2
  4272a2:	d006      	beq.n	4272b2 <setvbuf+0x2e>
  4272a4:	f1b8 0f01 	cmp.w	r8, #1
  4272a8:	f200 809f 	bhi.w	4273ea <setvbuf+0x166>
  4272ac:	2e00      	cmp	r6, #0
  4272ae:	f2c0 809c 	blt.w	4273ea <setvbuf+0x166>
  4272b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4272b4:	07d8      	lsls	r0, r3, #31
  4272b6:	d534      	bpl.n	427322 <setvbuf+0x9e>
  4272b8:	4621      	mov	r1, r4
  4272ba:	4628      	mov	r0, r5
  4272bc:	f003 fd22 	bl	42ad04 <_fflush_r>
  4272c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4272c2:	b141      	cbz	r1, 4272d6 <setvbuf+0x52>
  4272c4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4272c8:	4299      	cmp	r1, r3
  4272ca:	d002      	beq.n	4272d2 <setvbuf+0x4e>
  4272cc:	4628      	mov	r0, r5
  4272ce:	f003 fe97 	bl	42b000 <_free_r>
  4272d2:	2300      	movs	r3, #0
  4272d4:	6323      	str	r3, [r4, #48]	; 0x30
  4272d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4272da:	2200      	movs	r2, #0
  4272dc:	61a2      	str	r2, [r4, #24]
  4272de:	6062      	str	r2, [r4, #4]
  4272e0:	061a      	lsls	r2, r3, #24
  4272e2:	d43a      	bmi.n	42735a <setvbuf+0xd6>
  4272e4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4272e8:	f023 0303 	bic.w	r3, r3, #3
  4272ec:	f1b8 0f02 	cmp.w	r8, #2
  4272f0:	81a3      	strh	r3, [r4, #12]
  4272f2:	d01d      	beq.n	427330 <setvbuf+0xac>
  4272f4:	ab01      	add	r3, sp, #4
  4272f6:	466a      	mov	r2, sp
  4272f8:	4621      	mov	r1, r4
  4272fa:	4628      	mov	r0, r5
  4272fc:	f004 fa76 	bl	42b7ec <__swhatbuf_r>
  427300:	89a3      	ldrh	r3, [r4, #12]
  427302:	4318      	orrs	r0, r3
  427304:	81a0      	strh	r0, [r4, #12]
  427306:	2e00      	cmp	r6, #0
  427308:	d132      	bne.n	427370 <setvbuf+0xec>
  42730a:	9e00      	ldr	r6, [sp, #0]
  42730c:	4630      	mov	r0, r6
  42730e:	f004 fae5 	bl	42b8dc <malloc>
  427312:	4607      	mov	r7, r0
  427314:	2800      	cmp	r0, #0
  427316:	d06b      	beq.n	4273f0 <setvbuf+0x16c>
  427318:	89a3      	ldrh	r3, [r4, #12]
  42731a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  42731e:	81a3      	strh	r3, [r4, #12]
  427320:	e028      	b.n	427374 <setvbuf+0xf0>
  427322:	89a3      	ldrh	r3, [r4, #12]
  427324:	0599      	lsls	r1, r3, #22
  427326:	d4c7      	bmi.n	4272b8 <setvbuf+0x34>
  427328:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42732a:	f004 fa59 	bl	42b7e0 <__retarget_lock_acquire_recursive>
  42732e:	e7c3      	b.n	4272b8 <setvbuf+0x34>
  427330:	2500      	movs	r5, #0
  427332:	6e61      	ldr	r1, [r4, #100]	; 0x64
  427334:	2600      	movs	r6, #0
  427336:	f104 0243 	add.w	r2, r4, #67	; 0x43
  42733a:	f043 0302 	orr.w	r3, r3, #2
  42733e:	2001      	movs	r0, #1
  427340:	60a6      	str	r6, [r4, #8]
  427342:	07ce      	lsls	r6, r1, #31
  427344:	81a3      	strh	r3, [r4, #12]
  427346:	6022      	str	r2, [r4, #0]
  427348:	6122      	str	r2, [r4, #16]
  42734a:	6160      	str	r0, [r4, #20]
  42734c:	d401      	bmi.n	427352 <setvbuf+0xce>
  42734e:	0598      	lsls	r0, r3, #22
  427350:	d53e      	bpl.n	4273d0 <setvbuf+0x14c>
  427352:	4628      	mov	r0, r5
  427354:	b003      	add	sp, #12
  427356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  42735a:	6921      	ldr	r1, [r4, #16]
  42735c:	4628      	mov	r0, r5
  42735e:	f003 fe4f 	bl	42b000 <_free_r>
  427362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  427366:	e7bd      	b.n	4272e4 <setvbuf+0x60>
  427368:	4628      	mov	r0, r5
  42736a:	f003 fd23 	bl	42adb4 <__sinit>
  42736e:	e796      	b.n	42729e <setvbuf+0x1a>
  427370:	2f00      	cmp	r7, #0
  427372:	d0cb      	beq.n	42730c <setvbuf+0x88>
  427374:	6bab      	ldr	r3, [r5, #56]	; 0x38
  427376:	2b00      	cmp	r3, #0
  427378:	d033      	beq.n	4273e2 <setvbuf+0x15e>
  42737a:	9b00      	ldr	r3, [sp, #0]
  42737c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  427380:	6027      	str	r7, [r4, #0]
  427382:	429e      	cmp	r6, r3
  427384:	bf1c      	itt	ne
  427386:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  42738a:	81a2      	strhne	r2, [r4, #12]
  42738c:	f1b8 0f01 	cmp.w	r8, #1
  427390:	bf04      	itt	eq
  427392:	f042 0201 	orreq.w	r2, r2, #1
  427396:	81a2      	strheq	r2, [r4, #12]
  427398:	b292      	uxth	r2, r2
  42739a:	f012 0308 	ands.w	r3, r2, #8
  42739e:	6127      	str	r7, [r4, #16]
  4273a0:	6166      	str	r6, [r4, #20]
  4273a2:	d00e      	beq.n	4273c2 <setvbuf+0x13e>
  4273a4:	07d1      	lsls	r1, r2, #31
  4273a6:	d51a      	bpl.n	4273de <setvbuf+0x15a>
  4273a8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4273aa:	4276      	negs	r6, r6
  4273ac:	2300      	movs	r3, #0
  4273ae:	f015 0501 	ands.w	r5, r5, #1
  4273b2:	61a6      	str	r6, [r4, #24]
  4273b4:	60a3      	str	r3, [r4, #8]
  4273b6:	d009      	beq.n	4273cc <setvbuf+0x148>
  4273b8:	2500      	movs	r5, #0
  4273ba:	4628      	mov	r0, r5
  4273bc:	b003      	add	sp, #12
  4273be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4273c2:	60a3      	str	r3, [r4, #8]
  4273c4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4273c6:	f015 0501 	ands.w	r5, r5, #1
  4273ca:	d1f5      	bne.n	4273b8 <setvbuf+0x134>
  4273cc:	0593      	lsls	r3, r2, #22
  4273ce:	d4c0      	bmi.n	427352 <setvbuf+0xce>
  4273d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4273d2:	f004 fa09 	bl	42b7e8 <__retarget_lock_release_recursive>
  4273d6:	4628      	mov	r0, r5
  4273d8:	b003      	add	sp, #12
  4273da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4273de:	60a6      	str	r6, [r4, #8]
  4273e0:	e7f0      	b.n	4273c4 <setvbuf+0x140>
  4273e2:	4628      	mov	r0, r5
  4273e4:	f003 fce6 	bl	42adb4 <__sinit>
  4273e8:	e7c7      	b.n	42737a <setvbuf+0xf6>
  4273ea:	f04f 35ff 	mov.w	r5, #4294967295
  4273ee:	e7b0      	b.n	427352 <setvbuf+0xce>
  4273f0:	f8dd 9000 	ldr.w	r9, [sp]
  4273f4:	45b1      	cmp	r9, r6
  4273f6:	d004      	beq.n	427402 <setvbuf+0x17e>
  4273f8:	4648      	mov	r0, r9
  4273fa:	f004 fa6f 	bl	42b8dc <malloc>
  4273fe:	4607      	mov	r7, r0
  427400:	b920      	cbnz	r0, 42740c <setvbuf+0x188>
  427402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  427406:	f04f 35ff 	mov.w	r5, #4294967295
  42740a:	e792      	b.n	427332 <setvbuf+0xae>
  42740c:	464e      	mov	r6, r9
  42740e:	e783      	b.n	427318 <setvbuf+0x94>
  427410:	200000c8 	.word	0x200000c8

00427414 <sprintf>:
  427414:	b40e      	push	{r1, r2, r3}
  427416:	b5f0      	push	{r4, r5, r6, r7, lr}
  427418:	b09c      	sub	sp, #112	; 0x70
  42741a:	ab21      	add	r3, sp, #132	; 0x84
  42741c:	490f      	ldr	r1, [pc, #60]	; (42745c <sprintf+0x48>)
  42741e:	f853 2b04 	ldr.w	r2, [r3], #4
  427422:	9301      	str	r3, [sp, #4]
  427424:	4605      	mov	r5, r0
  427426:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  42742a:	6808      	ldr	r0, [r1, #0]
  42742c:	9502      	str	r5, [sp, #8]
  42742e:	f44f 7702 	mov.w	r7, #520	; 0x208
  427432:	f64f 76ff 	movw	r6, #65535	; 0xffff
  427436:	a902      	add	r1, sp, #8
  427438:	9506      	str	r5, [sp, #24]
  42743a:	f8ad 7014 	strh.w	r7, [sp, #20]
  42743e:	9404      	str	r4, [sp, #16]
  427440:	9407      	str	r4, [sp, #28]
  427442:	f8ad 6016 	strh.w	r6, [sp, #22]
  427446:	f000 f80b 	bl	427460 <_svfprintf_r>
  42744a:	9b02      	ldr	r3, [sp, #8]
  42744c:	2200      	movs	r2, #0
  42744e:	701a      	strb	r2, [r3, #0]
  427450:	b01c      	add	sp, #112	; 0x70
  427452:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  427456:	b003      	add	sp, #12
  427458:	4770      	bx	lr
  42745a:	bf00      	nop
  42745c:	200000c8 	.word	0x200000c8

00427460 <_svfprintf_r>:
  427460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  427464:	b0c3      	sub	sp, #268	; 0x10c
  427466:	460c      	mov	r4, r1
  427468:	910b      	str	r1, [sp, #44]	; 0x2c
  42746a:	4692      	mov	sl, r2
  42746c:	930f      	str	r3, [sp, #60]	; 0x3c
  42746e:	900c      	str	r0, [sp, #48]	; 0x30
  427470:	f004 f9a2 	bl	42b7b8 <_localeconv_r>
  427474:	6803      	ldr	r3, [r0, #0]
  427476:	931a      	str	r3, [sp, #104]	; 0x68
  427478:	4618      	mov	r0, r3
  42747a:	f005 fcc1 	bl	42ce00 <strlen>
  42747e:	89a3      	ldrh	r3, [r4, #12]
  427480:	9019      	str	r0, [sp, #100]	; 0x64
  427482:	0619      	lsls	r1, r3, #24
  427484:	d503      	bpl.n	42748e <_svfprintf_r+0x2e>
  427486:	6923      	ldr	r3, [r4, #16]
  427488:	2b00      	cmp	r3, #0
  42748a:	f001 8003 	beq.w	428494 <_svfprintf_r+0x1034>
  42748e:	2300      	movs	r3, #0
  427490:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  427494:	9313      	str	r3, [sp, #76]	; 0x4c
  427496:	9315      	str	r3, [sp, #84]	; 0x54
  427498:	9314      	str	r3, [sp, #80]	; 0x50
  42749a:	9327      	str	r3, [sp, #156]	; 0x9c
  42749c:	9326      	str	r3, [sp, #152]	; 0x98
  42749e:	9318      	str	r3, [sp, #96]	; 0x60
  4274a0:	931b      	str	r3, [sp, #108]	; 0x6c
  4274a2:	9309      	str	r3, [sp, #36]	; 0x24
  4274a4:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4274a8:	46c8      	mov	r8, r9
  4274aa:	9316      	str	r3, [sp, #88]	; 0x58
  4274ac:	9317      	str	r3, [sp, #92]	; 0x5c
  4274ae:	f89a 3000 	ldrb.w	r3, [sl]
  4274b2:	4654      	mov	r4, sl
  4274b4:	b1e3      	cbz	r3, 4274f0 <_svfprintf_r+0x90>
  4274b6:	2b25      	cmp	r3, #37	; 0x25
  4274b8:	d102      	bne.n	4274c0 <_svfprintf_r+0x60>
  4274ba:	e019      	b.n	4274f0 <_svfprintf_r+0x90>
  4274bc:	2b25      	cmp	r3, #37	; 0x25
  4274be:	d003      	beq.n	4274c8 <_svfprintf_r+0x68>
  4274c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4274c4:	2b00      	cmp	r3, #0
  4274c6:	d1f9      	bne.n	4274bc <_svfprintf_r+0x5c>
  4274c8:	eba4 050a 	sub.w	r5, r4, sl
  4274cc:	b185      	cbz	r5, 4274f0 <_svfprintf_r+0x90>
  4274ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4274d0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4274d2:	f8c8 a000 	str.w	sl, [r8]
  4274d6:	3301      	adds	r3, #1
  4274d8:	442a      	add	r2, r5
  4274da:	2b07      	cmp	r3, #7
  4274dc:	f8c8 5004 	str.w	r5, [r8, #4]
  4274e0:	9227      	str	r2, [sp, #156]	; 0x9c
  4274e2:	9326      	str	r3, [sp, #152]	; 0x98
  4274e4:	dc7f      	bgt.n	4275e6 <_svfprintf_r+0x186>
  4274e6:	f108 0808 	add.w	r8, r8, #8
  4274ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4274ec:	442b      	add	r3, r5
  4274ee:	9309      	str	r3, [sp, #36]	; 0x24
  4274f0:	7823      	ldrb	r3, [r4, #0]
  4274f2:	2b00      	cmp	r3, #0
  4274f4:	d07f      	beq.n	4275f6 <_svfprintf_r+0x196>
  4274f6:	2300      	movs	r3, #0
  4274f8:	461a      	mov	r2, r3
  4274fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4274fe:	4619      	mov	r1, r3
  427500:	930d      	str	r3, [sp, #52]	; 0x34
  427502:	469b      	mov	fp, r3
  427504:	f04f 30ff 	mov.w	r0, #4294967295
  427508:	7863      	ldrb	r3, [r4, #1]
  42750a:	900a      	str	r0, [sp, #40]	; 0x28
  42750c:	f104 0a01 	add.w	sl, r4, #1
  427510:	f10a 0a01 	add.w	sl, sl, #1
  427514:	f1a3 0020 	sub.w	r0, r3, #32
  427518:	2858      	cmp	r0, #88	; 0x58
  42751a:	f200 83c1 	bhi.w	427ca0 <_svfprintf_r+0x840>
  42751e:	e8df f010 	tbh	[pc, r0, lsl #1]
  427522:	0238      	.short	0x0238
  427524:	03bf03bf 	.word	0x03bf03bf
  427528:	03bf0240 	.word	0x03bf0240
  42752c:	03bf03bf 	.word	0x03bf03bf
  427530:	03bf03bf 	.word	0x03bf03bf
  427534:	024503bf 	.word	0x024503bf
  427538:	03bf0203 	.word	0x03bf0203
  42753c:	026b005d 	.word	0x026b005d
  427540:	028603bf 	.word	0x028603bf
  427544:	039d039d 	.word	0x039d039d
  427548:	039d039d 	.word	0x039d039d
  42754c:	039d039d 	.word	0x039d039d
  427550:	039d039d 	.word	0x039d039d
  427554:	03bf039d 	.word	0x03bf039d
  427558:	03bf03bf 	.word	0x03bf03bf
  42755c:	03bf03bf 	.word	0x03bf03bf
  427560:	03bf03bf 	.word	0x03bf03bf
  427564:	03bf03bf 	.word	0x03bf03bf
  427568:	033703bf 	.word	0x033703bf
  42756c:	03bf0357 	.word	0x03bf0357
  427570:	03bf0357 	.word	0x03bf0357
  427574:	03bf03bf 	.word	0x03bf03bf
  427578:	039803bf 	.word	0x039803bf
  42757c:	03bf03bf 	.word	0x03bf03bf
  427580:	03bf03ad 	.word	0x03bf03ad
  427584:	03bf03bf 	.word	0x03bf03bf
  427588:	03bf03bf 	.word	0x03bf03bf
  42758c:	03bf0259 	.word	0x03bf0259
  427590:	031e03bf 	.word	0x031e03bf
  427594:	03bf03bf 	.word	0x03bf03bf
  427598:	03bf03bf 	.word	0x03bf03bf
  42759c:	03bf03bf 	.word	0x03bf03bf
  4275a0:	03bf03bf 	.word	0x03bf03bf
  4275a4:	03bf03bf 	.word	0x03bf03bf
  4275a8:	02db02c6 	.word	0x02db02c6
  4275ac:	03570357 	.word	0x03570357
  4275b0:	028b0357 	.word	0x028b0357
  4275b4:	03bf02db 	.word	0x03bf02db
  4275b8:	029003bf 	.word	0x029003bf
  4275bc:	029d03bf 	.word	0x029d03bf
  4275c0:	02b401cc 	.word	0x02b401cc
  4275c4:	03bf0208 	.word	0x03bf0208
  4275c8:	03bf01e1 	.word	0x03bf01e1
  4275cc:	03bf007e 	.word	0x03bf007e
  4275d0:	020d03bf 	.word	0x020d03bf
  4275d4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4275d6:	930f      	str	r3, [sp, #60]	; 0x3c
  4275d8:	4240      	negs	r0, r0
  4275da:	900d      	str	r0, [sp, #52]	; 0x34
  4275dc:	f04b 0b04 	orr.w	fp, fp, #4
  4275e0:	f89a 3000 	ldrb.w	r3, [sl]
  4275e4:	e794      	b.n	427510 <_svfprintf_r+0xb0>
  4275e6:	aa25      	add	r2, sp, #148	; 0x94
  4275e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4275ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4275ec:	f005 fd94 	bl	42d118 <__ssprint_r>
  4275f0:	b940      	cbnz	r0, 427604 <_svfprintf_r+0x1a4>
  4275f2:	46c8      	mov	r8, r9
  4275f4:	e779      	b.n	4274ea <_svfprintf_r+0x8a>
  4275f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4275f8:	b123      	cbz	r3, 427604 <_svfprintf_r+0x1a4>
  4275fa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4275fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4275fe:	aa25      	add	r2, sp, #148	; 0x94
  427600:	f005 fd8a 	bl	42d118 <__ssprint_r>
  427604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  427606:	899b      	ldrh	r3, [r3, #12]
  427608:	f013 0f40 	tst.w	r3, #64	; 0x40
  42760c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42760e:	bf18      	it	ne
  427610:	f04f 33ff 	movne.w	r3, #4294967295
  427614:	9309      	str	r3, [sp, #36]	; 0x24
  427616:	9809      	ldr	r0, [sp, #36]	; 0x24
  427618:	b043      	add	sp, #268	; 0x10c
  42761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42761e:	f01b 0f20 	tst.w	fp, #32
  427622:	9311      	str	r3, [sp, #68]	; 0x44
  427624:	f040 81dd 	bne.w	4279e2 <_svfprintf_r+0x582>
  427628:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  42762a:	f01b 0f10 	tst.w	fp, #16
  42762e:	4613      	mov	r3, r2
  427630:	f040 856e 	bne.w	428110 <_svfprintf_r+0xcb0>
  427634:	f01b 0f40 	tst.w	fp, #64	; 0x40
  427638:	f000 856a 	beq.w	428110 <_svfprintf_r+0xcb0>
  42763c:	8814      	ldrh	r4, [r2, #0]
  42763e:	3204      	adds	r2, #4
  427640:	2500      	movs	r5, #0
  427642:	2301      	movs	r3, #1
  427644:	920f      	str	r2, [sp, #60]	; 0x3c
  427646:	2700      	movs	r7, #0
  427648:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  42764c:	990a      	ldr	r1, [sp, #40]	; 0x28
  42764e:	1c4a      	adds	r2, r1, #1
  427650:	f000 8265 	beq.w	427b1e <_svfprintf_r+0x6be>
  427654:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  427658:	9207      	str	r2, [sp, #28]
  42765a:	ea54 0205 	orrs.w	r2, r4, r5
  42765e:	f040 8264 	bne.w	427b2a <_svfprintf_r+0x6ca>
  427662:	2900      	cmp	r1, #0
  427664:	f040 843c 	bne.w	427ee0 <_svfprintf_r+0xa80>
  427668:	2b00      	cmp	r3, #0
  42766a:	f040 84d7 	bne.w	42801c <_svfprintf_r+0xbbc>
  42766e:	f01b 0301 	ands.w	r3, fp, #1
  427672:	930e      	str	r3, [sp, #56]	; 0x38
  427674:	f000 8604 	beq.w	428280 <_svfprintf_r+0xe20>
  427678:	ae42      	add	r6, sp, #264	; 0x108
  42767a:	2330      	movs	r3, #48	; 0x30
  42767c:	f806 3d41 	strb.w	r3, [r6, #-65]!
  427680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  427682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  427684:	4293      	cmp	r3, r2
  427686:	bfb8      	it	lt
  427688:	4613      	movlt	r3, r2
  42768a:	9308      	str	r3, [sp, #32]
  42768c:	2300      	movs	r3, #0
  42768e:	9312      	str	r3, [sp, #72]	; 0x48
  427690:	b117      	cbz	r7, 427698 <_svfprintf_r+0x238>
  427692:	9b08      	ldr	r3, [sp, #32]
  427694:	3301      	adds	r3, #1
  427696:	9308      	str	r3, [sp, #32]
  427698:	9b07      	ldr	r3, [sp, #28]
  42769a:	f013 0302 	ands.w	r3, r3, #2
  42769e:	9310      	str	r3, [sp, #64]	; 0x40
  4276a0:	d002      	beq.n	4276a8 <_svfprintf_r+0x248>
  4276a2:	9b08      	ldr	r3, [sp, #32]
  4276a4:	3302      	adds	r3, #2
  4276a6:	9308      	str	r3, [sp, #32]
  4276a8:	9b07      	ldr	r3, [sp, #28]
  4276aa:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4276ae:	f040 830e 	bne.w	427cce <_svfprintf_r+0x86e>
  4276b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4276b4:	9a08      	ldr	r2, [sp, #32]
  4276b6:	eba3 0b02 	sub.w	fp, r3, r2
  4276ba:	f1bb 0f00 	cmp.w	fp, #0
  4276be:	f340 8306 	ble.w	427cce <_svfprintf_r+0x86e>
  4276c2:	f1bb 0f10 	cmp.w	fp, #16
  4276c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4276c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4276ca:	dd29      	ble.n	427720 <_svfprintf_r+0x2c0>
  4276cc:	4643      	mov	r3, r8
  4276ce:	4621      	mov	r1, r4
  4276d0:	46a8      	mov	r8, r5
  4276d2:	2710      	movs	r7, #16
  4276d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4276d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4276d8:	e006      	b.n	4276e8 <_svfprintf_r+0x288>
  4276da:	f1ab 0b10 	sub.w	fp, fp, #16
  4276de:	f1bb 0f10 	cmp.w	fp, #16
  4276e2:	f103 0308 	add.w	r3, r3, #8
  4276e6:	dd18      	ble.n	42771a <_svfprintf_r+0x2ba>
  4276e8:	3201      	adds	r2, #1
  4276ea:	48b7      	ldr	r0, [pc, #732]	; (4279c8 <_svfprintf_r+0x568>)
  4276ec:	9226      	str	r2, [sp, #152]	; 0x98
  4276ee:	3110      	adds	r1, #16
  4276f0:	2a07      	cmp	r2, #7
  4276f2:	9127      	str	r1, [sp, #156]	; 0x9c
  4276f4:	e883 0081 	stmia.w	r3, {r0, r7}
  4276f8:	ddef      	ble.n	4276da <_svfprintf_r+0x27a>
  4276fa:	aa25      	add	r2, sp, #148	; 0x94
  4276fc:	4629      	mov	r1, r5
  4276fe:	4620      	mov	r0, r4
  427700:	f005 fd0a 	bl	42d118 <__ssprint_r>
  427704:	2800      	cmp	r0, #0
  427706:	f47f af7d 	bne.w	427604 <_svfprintf_r+0x1a4>
  42770a:	f1ab 0b10 	sub.w	fp, fp, #16
  42770e:	f1bb 0f10 	cmp.w	fp, #16
  427712:	9927      	ldr	r1, [sp, #156]	; 0x9c
  427714:	9a26      	ldr	r2, [sp, #152]	; 0x98
  427716:	464b      	mov	r3, r9
  427718:	dce6      	bgt.n	4276e8 <_svfprintf_r+0x288>
  42771a:	4645      	mov	r5, r8
  42771c:	460c      	mov	r4, r1
  42771e:	4698      	mov	r8, r3
  427720:	3201      	adds	r2, #1
  427722:	4ba9      	ldr	r3, [pc, #676]	; (4279c8 <_svfprintf_r+0x568>)
  427724:	9226      	str	r2, [sp, #152]	; 0x98
  427726:	445c      	add	r4, fp
  427728:	2a07      	cmp	r2, #7
  42772a:	9427      	str	r4, [sp, #156]	; 0x9c
  42772c:	e888 0808 	stmia.w	r8, {r3, fp}
  427730:	f300 8498 	bgt.w	428064 <_svfprintf_r+0xc04>
  427734:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  427738:	f108 0808 	add.w	r8, r8, #8
  42773c:	b177      	cbz	r7, 42775c <_svfprintf_r+0x2fc>
  42773e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427740:	3301      	adds	r3, #1
  427742:	3401      	adds	r4, #1
  427744:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  427748:	2201      	movs	r2, #1
  42774a:	2b07      	cmp	r3, #7
  42774c:	9427      	str	r4, [sp, #156]	; 0x9c
  42774e:	9326      	str	r3, [sp, #152]	; 0x98
  427750:	e888 0006 	stmia.w	r8, {r1, r2}
  427754:	f300 83db 	bgt.w	427f0e <_svfprintf_r+0xaae>
  427758:	f108 0808 	add.w	r8, r8, #8
  42775c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  42775e:	b16b      	cbz	r3, 42777c <_svfprintf_r+0x31c>
  427760:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427762:	3301      	adds	r3, #1
  427764:	3402      	adds	r4, #2
  427766:	a91e      	add	r1, sp, #120	; 0x78
  427768:	2202      	movs	r2, #2
  42776a:	2b07      	cmp	r3, #7
  42776c:	9427      	str	r4, [sp, #156]	; 0x9c
  42776e:	9326      	str	r3, [sp, #152]	; 0x98
  427770:	e888 0006 	stmia.w	r8, {r1, r2}
  427774:	f300 83d6 	bgt.w	427f24 <_svfprintf_r+0xac4>
  427778:	f108 0808 	add.w	r8, r8, #8
  42777c:	2d80      	cmp	r5, #128	; 0x80
  42777e:	f000 8315 	beq.w	427dac <_svfprintf_r+0x94c>
  427782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  427784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  427786:	1a9f      	subs	r7, r3, r2
  427788:	2f00      	cmp	r7, #0
  42778a:	dd36      	ble.n	4277fa <_svfprintf_r+0x39a>
  42778c:	2f10      	cmp	r7, #16
  42778e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427790:	4d8e      	ldr	r5, [pc, #568]	; (4279cc <_svfprintf_r+0x56c>)
  427792:	dd27      	ble.n	4277e4 <_svfprintf_r+0x384>
  427794:	4642      	mov	r2, r8
  427796:	4621      	mov	r1, r4
  427798:	46b0      	mov	r8, r6
  42779a:	f04f 0b10 	mov.w	fp, #16
  42779e:	462e      	mov	r6, r5
  4277a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4277a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4277a4:	e004      	b.n	4277b0 <_svfprintf_r+0x350>
  4277a6:	3f10      	subs	r7, #16
  4277a8:	2f10      	cmp	r7, #16
  4277aa:	f102 0208 	add.w	r2, r2, #8
  4277ae:	dd15      	ble.n	4277dc <_svfprintf_r+0x37c>
  4277b0:	3301      	adds	r3, #1
  4277b2:	3110      	adds	r1, #16
  4277b4:	2b07      	cmp	r3, #7
  4277b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4277b8:	9326      	str	r3, [sp, #152]	; 0x98
  4277ba:	e882 0840 	stmia.w	r2, {r6, fp}
  4277be:	ddf2      	ble.n	4277a6 <_svfprintf_r+0x346>
  4277c0:	aa25      	add	r2, sp, #148	; 0x94
  4277c2:	4629      	mov	r1, r5
  4277c4:	4620      	mov	r0, r4
  4277c6:	f005 fca7 	bl	42d118 <__ssprint_r>
  4277ca:	2800      	cmp	r0, #0
  4277cc:	f47f af1a 	bne.w	427604 <_svfprintf_r+0x1a4>
  4277d0:	3f10      	subs	r7, #16
  4277d2:	2f10      	cmp	r7, #16
  4277d4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4277d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4277d8:	464a      	mov	r2, r9
  4277da:	dce9      	bgt.n	4277b0 <_svfprintf_r+0x350>
  4277dc:	4635      	mov	r5, r6
  4277de:	460c      	mov	r4, r1
  4277e0:	4646      	mov	r6, r8
  4277e2:	4690      	mov	r8, r2
  4277e4:	3301      	adds	r3, #1
  4277e6:	443c      	add	r4, r7
  4277e8:	2b07      	cmp	r3, #7
  4277ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4277ec:	9326      	str	r3, [sp, #152]	; 0x98
  4277ee:	e888 00a0 	stmia.w	r8, {r5, r7}
  4277f2:	f300 8381 	bgt.w	427ef8 <_svfprintf_r+0xa98>
  4277f6:	f108 0808 	add.w	r8, r8, #8
  4277fa:	9b07      	ldr	r3, [sp, #28]
  4277fc:	05df      	lsls	r7, r3, #23
  4277fe:	f100 8268 	bmi.w	427cd2 <_svfprintf_r+0x872>
  427802:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427804:	990e      	ldr	r1, [sp, #56]	; 0x38
  427806:	f8c8 6000 	str.w	r6, [r8]
  42780a:	3301      	adds	r3, #1
  42780c:	440c      	add	r4, r1
  42780e:	2b07      	cmp	r3, #7
  427810:	9427      	str	r4, [sp, #156]	; 0x9c
  427812:	f8c8 1004 	str.w	r1, [r8, #4]
  427816:	9326      	str	r3, [sp, #152]	; 0x98
  427818:	f300 834d 	bgt.w	427eb6 <_svfprintf_r+0xa56>
  42781c:	f108 0808 	add.w	r8, r8, #8
  427820:	9b07      	ldr	r3, [sp, #28]
  427822:	075b      	lsls	r3, r3, #29
  427824:	d53a      	bpl.n	42789c <_svfprintf_r+0x43c>
  427826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  427828:	9a08      	ldr	r2, [sp, #32]
  42782a:	1a9d      	subs	r5, r3, r2
  42782c:	2d00      	cmp	r5, #0
  42782e:	dd35      	ble.n	42789c <_svfprintf_r+0x43c>
  427830:	2d10      	cmp	r5, #16
  427832:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427834:	dd20      	ble.n	427878 <_svfprintf_r+0x418>
  427836:	2610      	movs	r6, #16
  427838:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  42783a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  42783e:	e004      	b.n	42784a <_svfprintf_r+0x3ea>
  427840:	3d10      	subs	r5, #16
  427842:	2d10      	cmp	r5, #16
  427844:	f108 0808 	add.w	r8, r8, #8
  427848:	dd16      	ble.n	427878 <_svfprintf_r+0x418>
  42784a:	3301      	adds	r3, #1
  42784c:	4a5e      	ldr	r2, [pc, #376]	; (4279c8 <_svfprintf_r+0x568>)
  42784e:	9326      	str	r3, [sp, #152]	; 0x98
  427850:	3410      	adds	r4, #16
  427852:	2b07      	cmp	r3, #7
  427854:	9427      	str	r4, [sp, #156]	; 0x9c
  427856:	e888 0044 	stmia.w	r8, {r2, r6}
  42785a:	ddf1      	ble.n	427840 <_svfprintf_r+0x3e0>
  42785c:	aa25      	add	r2, sp, #148	; 0x94
  42785e:	4659      	mov	r1, fp
  427860:	4638      	mov	r0, r7
  427862:	f005 fc59 	bl	42d118 <__ssprint_r>
  427866:	2800      	cmp	r0, #0
  427868:	f47f aecc 	bne.w	427604 <_svfprintf_r+0x1a4>
  42786c:	3d10      	subs	r5, #16
  42786e:	2d10      	cmp	r5, #16
  427870:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  427872:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427874:	46c8      	mov	r8, r9
  427876:	dce8      	bgt.n	42784a <_svfprintf_r+0x3ea>
  427878:	3301      	adds	r3, #1
  42787a:	4a53      	ldr	r2, [pc, #332]	; (4279c8 <_svfprintf_r+0x568>)
  42787c:	9326      	str	r3, [sp, #152]	; 0x98
  42787e:	442c      	add	r4, r5
  427880:	2b07      	cmp	r3, #7
  427882:	9427      	str	r4, [sp, #156]	; 0x9c
  427884:	e888 0024 	stmia.w	r8, {r2, r5}
  427888:	dd08      	ble.n	42789c <_svfprintf_r+0x43c>
  42788a:	aa25      	add	r2, sp, #148	; 0x94
  42788c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  42788e:	980c      	ldr	r0, [sp, #48]	; 0x30
  427890:	f005 fc42 	bl	42d118 <__ssprint_r>
  427894:	2800      	cmp	r0, #0
  427896:	f47f aeb5 	bne.w	427604 <_svfprintf_r+0x1a4>
  42789a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  42789c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42789e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4278a0:	9908      	ldr	r1, [sp, #32]
  4278a2:	428a      	cmp	r2, r1
  4278a4:	bfac      	ite	ge
  4278a6:	189b      	addge	r3, r3, r2
  4278a8:	185b      	addlt	r3, r3, r1
  4278aa:	9309      	str	r3, [sp, #36]	; 0x24
  4278ac:	2c00      	cmp	r4, #0
  4278ae:	f040 830d 	bne.w	427ecc <_svfprintf_r+0xa6c>
  4278b2:	2300      	movs	r3, #0
  4278b4:	9326      	str	r3, [sp, #152]	; 0x98
  4278b6:	46c8      	mov	r8, r9
  4278b8:	e5f9      	b.n	4274ae <_svfprintf_r+0x4e>
  4278ba:	9311      	str	r3, [sp, #68]	; 0x44
  4278bc:	f01b 0320 	ands.w	r3, fp, #32
  4278c0:	f040 81e3 	bne.w	427c8a <_svfprintf_r+0x82a>
  4278c4:	f01b 0210 	ands.w	r2, fp, #16
  4278c8:	f040 842e 	bne.w	428128 <_svfprintf_r+0xcc8>
  4278cc:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4278d0:	f000 842a 	beq.w	428128 <_svfprintf_r+0xcc8>
  4278d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4278d6:	4613      	mov	r3, r2
  4278d8:	460a      	mov	r2, r1
  4278da:	3204      	adds	r2, #4
  4278dc:	880c      	ldrh	r4, [r1, #0]
  4278de:	920f      	str	r2, [sp, #60]	; 0x3c
  4278e0:	2500      	movs	r5, #0
  4278e2:	e6b0      	b.n	427646 <_svfprintf_r+0x1e6>
  4278e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4278e6:	9311      	str	r3, [sp, #68]	; 0x44
  4278e8:	6816      	ldr	r6, [r2, #0]
  4278ea:	2400      	movs	r4, #0
  4278ec:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4278f0:	1d15      	adds	r5, r2, #4
  4278f2:	2e00      	cmp	r6, #0
  4278f4:	f000 86a7 	beq.w	428646 <_svfprintf_r+0x11e6>
  4278f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4278fa:	1c53      	adds	r3, r2, #1
  4278fc:	f000 8609 	beq.w	428512 <_svfprintf_r+0x10b2>
  427900:	4621      	mov	r1, r4
  427902:	4630      	mov	r0, r6
  427904:	f004 fac4 	bl	42be90 <memchr>
  427908:	2800      	cmp	r0, #0
  42790a:	f000 86e1 	beq.w	4286d0 <_svfprintf_r+0x1270>
  42790e:	1b83      	subs	r3, r0, r6
  427910:	930e      	str	r3, [sp, #56]	; 0x38
  427912:	940a      	str	r4, [sp, #40]	; 0x28
  427914:	950f      	str	r5, [sp, #60]	; 0x3c
  427916:	f8cd b01c 	str.w	fp, [sp, #28]
  42791a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  42791e:	9308      	str	r3, [sp, #32]
  427920:	9412      	str	r4, [sp, #72]	; 0x48
  427922:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  427926:	e6b3      	b.n	427690 <_svfprintf_r+0x230>
  427928:	f89a 3000 	ldrb.w	r3, [sl]
  42792c:	2201      	movs	r2, #1
  42792e:	212b      	movs	r1, #43	; 0x2b
  427930:	e5ee      	b.n	427510 <_svfprintf_r+0xb0>
  427932:	f04b 0b20 	orr.w	fp, fp, #32
  427936:	f89a 3000 	ldrb.w	r3, [sl]
  42793a:	e5e9      	b.n	427510 <_svfprintf_r+0xb0>
  42793c:	9311      	str	r3, [sp, #68]	; 0x44
  42793e:	2a00      	cmp	r2, #0
  427940:	f040 8795 	bne.w	42886e <_svfprintf_r+0x140e>
  427944:	4b22      	ldr	r3, [pc, #136]	; (4279d0 <_svfprintf_r+0x570>)
  427946:	9318      	str	r3, [sp, #96]	; 0x60
  427948:	f01b 0f20 	tst.w	fp, #32
  42794c:	f040 8111 	bne.w	427b72 <_svfprintf_r+0x712>
  427950:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  427952:	f01b 0f10 	tst.w	fp, #16
  427956:	4613      	mov	r3, r2
  427958:	f040 83e1 	bne.w	42811e <_svfprintf_r+0xcbe>
  42795c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  427960:	f000 83dd 	beq.w	42811e <_svfprintf_r+0xcbe>
  427964:	3304      	adds	r3, #4
  427966:	8814      	ldrh	r4, [r2, #0]
  427968:	930f      	str	r3, [sp, #60]	; 0x3c
  42796a:	2500      	movs	r5, #0
  42796c:	f01b 0f01 	tst.w	fp, #1
  427970:	f000 810c 	beq.w	427b8c <_svfprintf_r+0x72c>
  427974:	ea54 0305 	orrs.w	r3, r4, r5
  427978:	f000 8108 	beq.w	427b8c <_svfprintf_r+0x72c>
  42797c:	2330      	movs	r3, #48	; 0x30
  42797e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  427982:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  427986:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  42798a:	f04b 0b02 	orr.w	fp, fp, #2
  42798e:	2302      	movs	r3, #2
  427990:	e659      	b.n	427646 <_svfprintf_r+0x1e6>
  427992:	f89a 3000 	ldrb.w	r3, [sl]
  427996:	2900      	cmp	r1, #0
  427998:	f47f adba 	bne.w	427510 <_svfprintf_r+0xb0>
  42799c:	2201      	movs	r2, #1
  42799e:	2120      	movs	r1, #32
  4279a0:	e5b6      	b.n	427510 <_svfprintf_r+0xb0>
  4279a2:	f04b 0b01 	orr.w	fp, fp, #1
  4279a6:	f89a 3000 	ldrb.w	r3, [sl]
  4279aa:	e5b1      	b.n	427510 <_svfprintf_r+0xb0>
  4279ac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4279ae:	6823      	ldr	r3, [r4, #0]
  4279b0:	930d      	str	r3, [sp, #52]	; 0x34
  4279b2:	4618      	mov	r0, r3
  4279b4:	2800      	cmp	r0, #0
  4279b6:	4623      	mov	r3, r4
  4279b8:	f103 0304 	add.w	r3, r3, #4
  4279bc:	f6ff ae0a 	blt.w	4275d4 <_svfprintf_r+0x174>
  4279c0:	930f      	str	r3, [sp, #60]	; 0x3c
  4279c2:	f89a 3000 	ldrb.w	r3, [sl]
  4279c6:	e5a3      	b.n	427510 <_svfprintf_r+0xb0>
  4279c8:	0042f738 	.word	0x0042f738
  4279cc:	0042f748 	.word	0x0042f748
  4279d0:	0042f718 	.word	0x0042f718
  4279d4:	f04b 0b10 	orr.w	fp, fp, #16
  4279d8:	f01b 0f20 	tst.w	fp, #32
  4279dc:	9311      	str	r3, [sp, #68]	; 0x44
  4279de:	f43f ae23 	beq.w	427628 <_svfprintf_r+0x1c8>
  4279e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4279e4:	3507      	adds	r5, #7
  4279e6:	f025 0307 	bic.w	r3, r5, #7
  4279ea:	f103 0208 	add.w	r2, r3, #8
  4279ee:	e9d3 4500 	ldrd	r4, r5, [r3]
  4279f2:	920f      	str	r2, [sp, #60]	; 0x3c
  4279f4:	2301      	movs	r3, #1
  4279f6:	e626      	b.n	427646 <_svfprintf_r+0x1e6>
  4279f8:	f89a 3000 	ldrb.w	r3, [sl]
  4279fc:	2b2a      	cmp	r3, #42	; 0x2a
  4279fe:	f10a 0401 	add.w	r4, sl, #1
  427a02:	f000 8727 	beq.w	428854 <_svfprintf_r+0x13f4>
  427a06:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  427a0a:	2809      	cmp	r0, #9
  427a0c:	46a2      	mov	sl, r4
  427a0e:	f200 86ad 	bhi.w	42876c <_svfprintf_r+0x130c>
  427a12:	2300      	movs	r3, #0
  427a14:	461c      	mov	r4, r3
  427a16:	f81a 3b01 	ldrb.w	r3, [sl], #1
  427a1a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  427a1e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  427a22:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  427a26:	2809      	cmp	r0, #9
  427a28:	d9f5      	bls.n	427a16 <_svfprintf_r+0x5b6>
  427a2a:	940a      	str	r4, [sp, #40]	; 0x28
  427a2c:	e572      	b.n	427514 <_svfprintf_r+0xb4>
  427a2e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  427a32:	f89a 3000 	ldrb.w	r3, [sl]
  427a36:	e56b      	b.n	427510 <_svfprintf_r+0xb0>
  427a38:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  427a3c:	f89a 3000 	ldrb.w	r3, [sl]
  427a40:	e566      	b.n	427510 <_svfprintf_r+0xb0>
  427a42:	f89a 3000 	ldrb.w	r3, [sl]
  427a46:	2b6c      	cmp	r3, #108	; 0x6c
  427a48:	bf03      	ittte	eq
  427a4a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  427a4e:	f04b 0b20 	orreq.w	fp, fp, #32
  427a52:	f10a 0a01 	addeq.w	sl, sl, #1
  427a56:	f04b 0b10 	orrne.w	fp, fp, #16
  427a5a:	e559      	b.n	427510 <_svfprintf_r+0xb0>
  427a5c:	2a00      	cmp	r2, #0
  427a5e:	f040 8711 	bne.w	428884 <_svfprintf_r+0x1424>
  427a62:	f01b 0f20 	tst.w	fp, #32
  427a66:	f040 84f9 	bne.w	42845c <_svfprintf_r+0xffc>
  427a6a:	f01b 0f10 	tst.w	fp, #16
  427a6e:	f040 84ac 	bne.w	4283ca <_svfprintf_r+0xf6a>
  427a72:	f01b 0f40 	tst.w	fp, #64	; 0x40
  427a76:	f000 84a8 	beq.w	4283ca <_svfprintf_r+0xf6a>
  427a7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  427a7c:	6813      	ldr	r3, [r2, #0]
  427a7e:	3204      	adds	r2, #4
  427a80:	920f      	str	r2, [sp, #60]	; 0x3c
  427a82:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  427a86:	801a      	strh	r2, [r3, #0]
  427a88:	e511      	b.n	4274ae <_svfprintf_r+0x4e>
  427a8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  427a8c:	4bb3      	ldr	r3, [pc, #716]	; (427d5c <_svfprintf_r+0x8fc>)
  427a8e:	680c      	ldr	r4, [r1, #0]
  427a90:	9318      	str	r3, [sp, #96]	; 0x60
  427a92:	2230      	movs	r2, #48	; 0x30
  427a94:	2378      	movs	r3, #120	; 0x78
  427a96:	3104      	adds	r1, #4
  427a98:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  427a9c:	9311      	str	r3, [sp, #68]	; 0x44
  427a9e:	f04b 0b02 	orr.w	fp, fp, #2
  427aa2:	910f      	str	r1, [sp, #60]	; 0x3c
  427aa4:	2500      	movs	r5, #0
  427aa6:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  427aaa:	2302      	movs	r3, #2
  427aac:	e5cb      	b.n	427646 <_svfprintf_r+0x1e6>
  427aae:	990f      	ldr	r1, [sp, #60]	; 0x3c
  427ab0:	9311      	str	r3, [sp, #68]	; 0x44
  427ab2:	680a      	ldr	r2, [r1, #0]
  427ab4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  427ab8:	2300      	movs	r3, #0
  427aba:	460a      	mov	r2, r1
  427abc:	461f      	mov	r7, r3
  427abe:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  427ac2:	3204      	adds	r2, #4
  427ac4:	2301      	movs	r3, #1
  427ac6:	9308      	str	r3, [sp, #32]
  427ac8:	f8cd b01c 	str.w	fp, [sp, #28]
  427acc:	970a      	str	r7, [sp, #40]	; 0x28
  427ace:	9712      	str	r7, [sp, #72]	; 0x48
  427ad0:	920f      	str	r2, [sp, #60]	; 0x3c
  427ad2:	930e      	str	r3, [sp, #56]	; 0x38
  427ad4:	ae28      	add	r6, sp, #160	; 0xa0
  427ad6:	e5df      	b.n	427698 <_svfprintf_r+0x238>
  427ad8:	9311      	str	r3, [sp, #68]	; 0x44
  427ada:	2a00      	cmp	r2, #0
  427adc:	f040 86ea 	bne.w	4288b4 <_svfprintf_r+0x1454>
  427ae0:	f01b 0f20 	tst.w	fp, #32
  427ae4:	d15d      	bne.n	427ba2 <_svfprintf_r+0x742>
  427ae6:	f01b 0f10 	tst.w	fp, #16
  427aea:	f040 8308 	bne.w	4280fe <_svfprintf_r+0xc9e>
  427aee:	f01b 0f40 	tst.w	fp, #64	; 0x40
  427af2:	f000 8304 	beq.w	4280fe <_svfprintf_r+0xc9e>
  427af6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  427af8:	f9b1 4000 	ldrsh.w	r4, [r1]
  427afc:	3104      	adds	r1, #4
  427afe:	17e5      	asrs	r5, r4, #31
  427b00:	4622      	mov	r2, r4
  427b02:	462b      	mov	r3, r5
  427b04:	910f      	str	r1, [sp, #60]	; 0x3c
  427b06:	2a00      	cmp	r2, #0
  427b08:	f173 0300 	sbcs.w	r3, r3, #0
  427b0c:	db58      	blt.n	427bc0 <_svfprintf_r+0x760>
  427b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
  427b10:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  427b14:	1c4a      	adds	r2, r1, #1
  427b16:	f04f 0301 	mov.w	r3, #1
  427b1a:	f47f ad9b 	bne.w	427654 <_svfprintf_r+0x1f4>
  427b1e:	ea54 0205 	orrs.w	r2, r4, r5
  427b22:	f000 81df 	beq.w	427ee4 <_svfprintf_r+0xa84>
  427b26:	f8cd b01c 	str.w	fp, [sp, #28]
  427b2a:	2b01      	cmp	r3, #1
  427b2c:	f000 827b 	beq.w	428026 <_svfprintf_r+0xbc6>
  427b30:	2b02      	cmp	r3, #2
  427b32:	f040 8206 	bne.w	427f42 <_svfprintf_r+0xae2>
  427b36:	9818      	ldr	r0, [sp, #96]	; 0x60
  427b38:	464e      	mov	r6, r9
  427b3a:	0923      	lsrs	r3, r4, #4
  427b3c:	f004 010f 	and.w	r1, r4, #15
  427b40:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  427b44:	092a      	lsrs	r2, r5, #4
  427b46:	461c      	mov	r4, r3
  427b48:	4615      	mov	r5, r2
  427b4a:	5c43      	ldrb	r3, [r0, r1]
  427b4c:	f806 3d01 	strb.w	r3, [r6, #-1]!
  427b50:	ea54 0305 	orrs.w	r3, r4, r5
  427b54:	d1f1      	bne.n	427b3a <_svfprintf_r+0x6da>
  427b56:	eba9 0306 	sub.w	r3, r9, r6
  427b5a:	930e      	str	r3, [sp, #56]	; 0x38
  427b5c:	e590      	b.n	427680 <_svfprintf_r+0x220>
  427b5e:	9311      	str	r3, [sp, #68]	; 0x44
  427b60:	2a00      	cmp	r2, #0
  427b62:	f040 86a3 	bne.w	4288ac <_svfprintf_r+0x144c>
  427b66:	4b7e      	ldr	r3, [pc, #504]	; (427d60 <_svfprintf_r+0x900>)
  427b68:	9318      	str	r3, [sp, #96]	; 0x60
  427b6a:	f01b 0f20 	tst.w	fp, #32
  427b6e:	f43f aeef 	beq.w	427950 <_svfprintf_r+0x4f0>
  427b72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  427b74:	3507      	adds	r5, #7
  427b76:	f025 0307 	bic.w	r3, r5, #7
  427b7a:	f103 0208 	add.w	r2, r3, #8
  427b7e:	f01b 0f01 	tst.w	fp, #1
  427b82:	920f      	str	r2, [sp, #60]	; 0x3c
  427b84:	e9d3 4500 	ldrd	r4, r5, [r3]
  427b88:	f47f aef4 	bne.w	427974 <_svfprintf_r+0x514>
  427b8c:	2302      	movs	r3, #2
  427b8e:	e55a      	b.n	427646 <_svfprintf_r+0x1e6>
  427b90:	9311      	str	r3, [sp, #68]	; 0x44
  427b92:	2a00      	cmp	r2, #0
  427b94:	f040 8686 	bne.w	4288a4 <_svfprintf_r+0x1444>
  427b98:	f04b 0b10 	orr.w	fp, fp, #16
  427b9c:	f01b 0f20 	tst.w	fp, #32
  427ba0:	d0a1      	beq.n	427ae6 <_svfprintf_r+0x686>
  427ba2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  427ba4:	3507      	adds	r5, #7
  427ba6:	f025 0507 	bic.w	r5, r5, #7
  427baa:	e9d5 2300 	ldrd	r2, r3, [r5]
  427bae:	2a00      	cmp	r2, #0
  427bb0:	f105 0108 	add.w	r1, r5, #8
  427bb4:	461d      	mov	r5, r3
  427bb6:	f173 0300 	sbcs.w	r3, r3, #0
  427bba:	910f      	str	r1, [sp, #60]	; 0x3c
  427bbc:	4614      	mov	r4, r2
  427bbe:	daa6      	bge.n	427b0e <_svfprintf_r+0x6ae>
  427bc0:	272d      	movs	r7, #45	; 0x2d
  427bc2:	4264      	negs	r4, r4
  427bc4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  427bc8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  427bcc:	2301      	movs	r3, #1
  427bce:	e53d      	b.n	42764c <_svfprintf_r+0x1ec>
  427bd0:	9311      	str	r3, [sp, #68]	; 0x44
  427bd2:	2a00      	cmp	r2, #0
  427bd4:	f040 8662 	bne.w	42889c <_svfprintf_r+0x143c>
  427bd8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  427bda:	3507      	adds	r5, #7
  427bdc:	f025 0307 	bic.w	r3, r5, #7
  427be0:	f103 0208 	add.w	r2, r3, #8
  427be4:	920f      	str	r2, [sp, #60]	; 0x3c
  427be6:	681a      	ldr	r2, [r3, #0]
  427be8:	9215      	str	r2, [sp, #84]	; 0x54
  427bea:	685b      	ldr	r3, [r3, #4]
  427bec:	9314      	str	r3, [sp, #80]	; 0x50
  427bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
  427bf0:	9d15      	ldr	r5, [sp, #84]	; 0x54
  427bf2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  427bf6:	4628      	mov	r0, r5
  427bf8:	4621      	mov	r1, r4
  427bfa:	f04f 32ff 	mov.w	r2, #4294967295
  427bfe:	4b59      	ldr	r3, [pc, #356]	; (427d64 <_svfprintf_r+0x904>)
  427c00:	f007 f9fa 	bl	42eff8 <__aeabi_dcmpun>
  427c04:	2800      	cmp	r0, #0
  427c06:	f040 834a 	bne.w	42829e <_svfprintf_r+0xe3e>
  427c0a:	4628      	mov	r0, r5
  427c0c:	4621      	mov	r1, r4
  427c0e:	f04f 32ff 	mov.w	r2, #4294967295
  427c12:	4b54      	ldr	r3, [pc, #336]	; (427d64 <_svfprintf_r+0x904>)
  427c14:	f007 f9d2 	bl	42efbc <__aeabi_dcmple>
  427c18:	2800      	cmp	r0, #0
  427c1a:	f040 8340 	bne.w	42829e <_svfprintf_r+0xe3e>
  427c1e:	a815      	add	r0, sp, #84	; 0x54
  427c20:	c80d      	ldmia	r0, {r0, r2, r3}
  427c22:	9914      	ldr	r1, [sp, #80]	; 0x50
  427c24:	f007 f9c0 	bl	42efa8 <__aeabi_dcmplt>
  427c28:	2800      	cmp	r0, #0
  427c2a:	f040 8530 	bne.w	42868e <_svfprintf_r+0x122e>
  427c2e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  427c32:	4e4d      	ldr	r6, [pc, #308]	; (427d68 <_svfprintf_r+0x908>)
  427c34:	4b4d      	ldr	r3, [pc, #308]	; (427d6c <_svfprintf_r+0x90c>)
  427c36:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  427c3a:	9007      	str	r0, [sp, #28]
  427c3c:	9811      	ldr	r0, [sp, #68]	; 0x44
  427c3e:	2203      	movs	r2, #3
  427c40:	2100      	movs	r1, #0
  427c42:	9208      	str	r2, [sp, #32]
  427c44:	910a      	str	r1, [sp, #40]	; 0x28
  427c46:	2847      	cmp	r0, #71	; 0x47
  427c48:	bfd8      	it	le
  427c4a:	461e      	movle	r6, r3
  427c4c:	920e      	str	r2, [sp, #56]	; 0x38
  427c4e:	9112      	str	r1, [sp, #72]	; 0x48
  427c50:	e51e      	b.n	427690 <_svfprintf_r+0x230>
  427c52:	f04b 0b08 	orr.w	fp, fp, #8
  427c56:	f89a 3000 	ldrb.w	r3, [sl]
  427c5a:	e459      	b.n	427510 <_svfprintf_r+0xb0>
  427c5c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  427c60:	2300      	movs	r3, #0
  427c62:	461c      	mov	r4, r3
  427c64:	f81a 3b01 	ldrb.w	r3, [sl], #1
  427c68:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  427c6c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  427c70:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  427c74:	2809      	cmp	r0, #9
  427c76:	d9f5      	bls.n	427c64 <_svfprintf_r+0x804>
  427c78:	940d      	str	r4, [sp, #52]	; 0x34
  427c7a:	e44b      	b.n	427514 <_svfprintf_r+0xb4>
  427c7c:	f04b 0b10 	orr.w	fp, fp, #16
  427c80:	9311      	str	r3, [sp, #68]	; 0x44
  427c82:	f01b 0320 	ands.w	r3, fp, #32
  427c86:	f43f ae1d 	beq.w	4278c4 <_svfprintf_r+0x464>
  427c8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  427c8c:	3507      	adds	r5, #7
  427c8e:	f025 0307 	bic.w	r3, r5, #7
  427c92:	f103 0208 	add.w	r2, r3, #8
  427c96:	e9d3 4500 	ldrd	r4, r5, [r3]
  427c9a:	920f      	str	r2, [sp, #60]	; 0x3c
  427c9c:	2300      	movs	r3, #0
  427c9e:	e4d2      	b.n	427646 <_svfprintf_r+0x1e6>
  427ca0:	9311      	str	r3, [sp, #68]	; 0x44
  427ca2:	2a00      	cmp	r2, #0
  427ca4:	f040 85e7 	bne.w	428876 <_svfprintf_r+0x1416>
  427ca8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  427caa:	2a00      	cmp	r2, #0
  427cac:	f43f aca3 	beq.w	4275f6 <_svfprintf_r+0x196>
  427cb0:	2300      	movs	r3, #0
  427cb2:	2101      	movs	r1, #1
  427cb4:	461f      	mov	r7, r3
  427cb6:	9108      	str	r1, [sp, #32]
  427cb8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  427cbc:	f8cd b01c 	str.w	fp, [sp, #28]
  427cc0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  427cc4:	930a      	str	r3, [sp, #40]	; 0x28
  427cc6:	9312      	str	r3, [sp, #72]	; 0x48
  427cc8:	910e      	str	r1, [sp, #56]	; 0x38
  427cca:	ae28      	add	r6, sp, #160	; 0xa0
  427ccc:	e4e4      	b.n	427698 <_svfprintf_r+0x238>
  427cce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  427cd0:	e534      	b.n	42773c <_svfprintf_r+0x2dc>
  427cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  427cd4:	2b65      	cmp	r3, #101	; 0x65
  427cd6:	f340 80a7 	ble.w	427e28 <_svfprintf_r+0x9c8>
  427cda:	a815      	add	r0, sp, #84	; 0x54
  427cdc:	c80d      	ldmia	r0, {r0, r2, r3}
  427cde:	9914      	ldr	r1, [sp, #80]	; 0x50
  427ce0:	f007 f958 	bl	42ef94 <__aeabi_dcmpeq>
  427ce4:	2800      	cmp	r0, #0
  427ce6:	f000 8150 	beq.w	427f8a <_svfprintf_r+0xb2a>
  427cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427cec:	4a20      	ldr	r2, [pc, #128]	; (427d70 <_svfprintf_r+0x910>)
  427cee:	f8c8 2000 	str.w	r2, [r8]
  427cf2:	3301      	adds	r3, #1
  427cf4:	3401      	adds	r4, #1
  427cf6:	2201      	movs	r2, #1
  427cf8:	2b07      	cmp	r3, #7
  427cfa:	9427      	str	r4, [sp, #156]	; 0x9c
  427cfc:	9326      	str	r3, [sp, #152]	; 0x98
  427cfe:	f8c8 2004 	str.w	r2, [r8, #4]
  427d02:	f300 836a 	bgt.w	4283da <_svfprintf_r+0xf7a>
  427d06:	f108 0808 	add.w	r8, r8, #8
  427d0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  427d0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  427d0e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  427d10:	4293      	cmp	r3, r2
  427d12:	db03      	blt.n	427d1c <_svfprintf_r+0x8bc>
  427d14:	9b07      	ldr	r3, [sp, #28]
  427d16:	07dd      	lsls	r5, r3, #31
  427d18:	f57f ad82 	bpl.w	427820 <_svfprintf_r+0x3c0>
  427d1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427d1e:	9919      	ldr	r1, [sp, #100]	; 0x64
  427d20:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  427d22:	f8c8 2000 	str.w	r2, [r8]
  427d26:	3301      	adds	r3, #1
  427d28:	440c      	add	r4, r1
  427d2a:	2b07      	cmp	r3, #7
  427d2c:	f8c8 1004 	str.w	r1, [r8, #4]
  427d30:	9427      	str	r4, [sp, #156]	; 0x9c
  427d32:	9326      	str	r3, [sp, #152]	; 0x98
  427d34:	f300 839e 	bgt.w	428474 <_svfprintf_r+0x1014>
  427d38:	f108 0808 	add.w	r8, r8, #8
  427d3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  427d3e:	1e5e      	subs	r6, r3, #1
  427d40:	2e00      	cmp	r6, #0
  427d42:	f77f ad6d 	ble.w	427820 <_svfprintf_r+0x3c0>
  427d46:	2e10      	cmp	r6, #16
  427d48:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427d4a:	4d0a      	ldr	r5, [pc, #40]	; (427d74 <_svfprintf_r+0x914>)
  427d4c:	f340 81f5 	ble.w	42813a <_svfprintf_r+0xcda>
  427d50:	4622      	mov	r2, r4
  427d52:	2710      	movs	r7, #16
  427d54:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  427d58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  427d5a:	e013      	b.n	427d84 <_svfprintf_r+0x924>
  427d5c:	0042f718 	.word	0x0042f718
  427d60:	0042f704 	.word	0x0042f704
  427d64:	7fefffff 	.word	0x7fefffff
  427d68:	0042f6f8 	.word	0x0042f6f8
  427d6c:	0042f6f4 	.word	0x0042f6f4
  427d70:	0042f734 	.word	0x0042f734
  427d74:	0042f748 	.word	0x0042f748
  427d78:	f108 0808 	add.w	r8, r8, #8
  427d7c:	3e10      	subs	r6, #16
  427d7e:	2e10      	cmp	r6, #16
  427d80:	f340 81da 	ble.w	428138 <_svfprintf_r+0xcd8>
  427d84:	3301      	adds	r3, #1
  427d86:	3210      	adds	r2, #16
  427d88:	2b07      	cmp	r3, #7
  427d8a:	9227      	str	r2, [sp, #156]	; 0x9c
  427d8c:	9326      	str	r3, [sp, #152]	; 0x98
  427d8e:	e888 00a0 	stmia.w	r8, {r5, r7}
  427d92:	ddf1      	ble.n	427d78 <_svfprintf_r+0x918>
  427d94:	aa25      	add	r2, sp, #148	; 0x94
  427d96:	4621      	mov	r1, r4
  427d98:	4658      	mov	r0, fp
  427d9a:	f005 f9bd 	bl	42d118 <__ssprint_r>
  427d9e:	2800      	cmp	r0, #0
  427da0:	f47f ac30 	bne.w	427604 <_svfprintf_r+0x1a4>
  427da4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  427da6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427da8:	46c8      	mov	r8, r9
  427daa:	e7e7      	b.n	427d7c <_svfprintf_r+0x91c>
  427dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  427dae:	9a08      	ldr	r2, [sp, #32]
  427db0:	1a9f      	subs	r7, r3, r2
  427db2:	2f00      	cmp	r7, #0
  427db4:	f77f ace5 	ble.w	427782 <_svfprintf_r+0x322>
  427db8:	2f10      	cmp	r7, #16
  427dba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427dbc:	4db6      	ldr	r5, [pc, #728]	; (428098 <_svfprintf_r+0xc38>)
  427dbe:	dd27      	ble.n	427e10 <_svfprintf_r+0x9b0>
  427dc0:	4642      	mov	r2, r8
  427dc2:	4621      	mov	r1, r4
  427dc4:	46b0      	mov	r8, r6
  427dc6:	f04f 0b10 	mov.w	fp, #16
  427dca:	462e      	mov	r6, r5
  427dcc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  427dce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  427dd0:	e004      	b.n	427ddc <_svfprintf_r+0x97c>
  427dd2:	3f10      	subs	r7, #16
  427dd4:	2f10      	cmp	r7, #16
  427dd6:	f102 0208 	add.w	r2, r2, #8
  427dda:	dd15      	ble.n	427e08 <_svfprintf_r+0x9a8>
  427ddc:	3301      	adds	r3, #1
  427dde:	3110      	adds	r1, #16
  427de0:	2b07      	cmp	r3, #7
  427de2:	9127      	str	r1, [sp, #156]	; 0x9c
  427de4:	9326      	str	r3, [sp, #152]	; 0x98
  427de6:	e882 0840 	stmia.w	r2, {r6, fp}
  427dea:	ddf2      	ble.n	427dd2 <_svfprintf_r+0x972>
  427dec:	aa25      	add	r2, sp, #148	; 0x94
  427dee:	4629      	mov	r1, r5
  427df0:	4620      	mov	r0, r4
  427df2:	f005 f991 	bl	42d118 <__ssprint_r>
  427df6:	2800      	cmp	r0, #0
  427df8:	f47f ac04 	bne.w	427604 <_svfprintf_r+0x1a4>
  427dfc:	3f10      	subs	r7, #16
  427dfe:	2f10      	cmp	r7, #16
  427e00:	9927      	ldr	r1, [sp, #156]	; 0x9c
  427e02:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427e04:	464a      	mov	r2, r9
  427e06:	dce9      	bgt.n	427ddc <_svfprintf_r+0x97c>
  427e08:	4635      	mov	r5, r6
  427e0a:	460c      	mov	r4, r1
  427e0c:	4646      	mov	r6, r8
  427e0e:	4690      	mov	r8, r2
  427e10:	3301      	adds	r3, #1
  427e12:	443c      	add	r4, r7
  427e14:	2b07      	cmp	r3, #7
  427e16:	9427      	str	r4, [sp, #156]	; 0x9c
  427e18:	9326      	str	r3, [sp, #152]	; 0x98
  427e1a:	e888 00a0 	stmia.w	r8, {r5, r7}
  427e1e:	f300 8232 	bgt.w	428286 <_svfprintf_r+0xe26>
  427e22:	f108 0808 	add.w	r8, r8, #8
  427e26:	e4ac      	b.n	427782 <_svfprintf_r+0x322>
  427e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  427e2a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  427e2c:	2b01      	cmp	r3, #1
  427e2e:	f340 81fe 	ble.w	42822e <_svfprintf_r+0xdce>
  427e32:	3701      	adds	r7, #1
  427e34:	3401      	adds	r4, #1
  427e36:	2301      	movs	r3, #1
  427e38:	2f07      	cmp	r7, #7
  427e3a:	9427      	str	r4, [sp, #156]	; 0x9c
  427e3c:	9726      	str	r7, [sp, #152]	; 0x98
  427e3e:	f8c8 6000 	str.w	r6, [r8]
  427e42:	f8c8 3004 	str.w	r3, [r8, #4]
  427e46:	f300 8203 	bgt.w	428250 <_svfprintf_r+0xdf0>
  427e4a:	f108 0808 	add.w	r8, r8, #8
  427e4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  427e50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  427e52:	f8c8 3000 	str.w	r3, [r8]
  427e56:	3701      	adds	r7, #1
  427e58:	4414      	add	r4, r2
  427e5a:	2f07      	cmp	r7, #7
  427e5c:	9427      	str	r4, [sp, #156]	; 0x9c
  427e5e:	9726      	str	r7, [sp, #152]	; 0x98
  427e60:	f8c8 2004 	str.w	r2, [r8, #4]
  427e64:	f300 8200 	bgt.w	428268 <_svfprintf_r+0xe08>
  427e68:	f108 0808 	add.w	r8, r8, #8
  427e6c:	a815      	add	r0, sp, #84	; 0x54
  427e6e:	c80d      	ldmia	r0, {r0, r2, r3}
  427e70:	9914      	ldr	r1, [sp, #80]	; 0x50
  427e72:	f007 f88f 	bl	42ef94 <__aeabi_dcmpeq>
  427e76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  427e78:	2800      	cmp	r0, #0
  427e7a:	f040 8101 	bne.w	428080 <_svfprintf_r+0xc20>
  427e7e:	3b01      	subs	r3, #1
  427e80:	3701      	adds	r7, #1
  427e82:	3601      	adds	r6, #1
  427e84:	441c      	add	r4, r3
  427e86:	2f07      	cmp	r7, #7
  427e88:	9726      	str	r7, [sp, #152]	; 0x98
  427e8a:	9427      	str	r4, [sp, #156]	; 0x9c
  427e8c:	f8c8 6000 	str.w	r6, [r8]
  427e90:	f8c8 3004 	str.w	r3, [r8, #4]
  427e94:	f300 8127 	bgt.w	4280e6 <_svfprintf_r+0xc86>
  427e98:	f108 0808 	add.w	r8, r8, #8
  427e9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  427e9e:	f8c8 2004 	str.w	r2, [r8, #4]
  427ea2:	3701      	adds	r7, #1
  427ea4:	4414      	add	r4, r2
  427ea6:	ab21      	add	r3, sp, #132	; 0x84
  427ea8:	2f07      	cmp	r7, #7
  427eaa:	9427      	str	r4, [sp, #156]	; 0x9c
  427eac:	9726      	str	r7, [sp, #152]	; 0x98
  427eae:	f8c8 3000 	str.w	r3, [r8]
  427eb2:	f77f acb3 	ble.w	42781c <_svfprintf_r+0x3bc>
  427eb6:	aa25      	add	r2, sp, #148	; 0x94
  427eb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  427eba:	980c      	ldr	r0, [sp, #48]	; 0x30
  427ebc:	f005 f92c 	bl	42d118 <__ssprint_r>
  427ec0:	2800      	cmp	r0, #0
  427ec2:	f47f ab9f 	bne.w	427604 <_svfprintf_r+0x1a4>
  427ec6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  427ec8:	46c8      	mov	r8, r9
  427eca:	e4a9      	b.n	427820 <_svfprintf_r+0x3c0>
  427ecc:	aa25      	add	r2, sp, #148	; 0x94
  427ece:	990b      	ldr	r1, [sp, #44]	; 0x2c
  427ed0:	980c      	ldr	r0, [sp, #48]	; 0x30
  427ed2:	f005 f921 	bl	42d118 <__ssprint_r>
  427ed6:	2800      	cmp	r0, #0
  427ed8:	f43f aceb 	beq.w	4278b2 <_svfprintf_r+0x452>
  427edc:	f7ff bb92 	b.w	427604 <_svfprintf_r+0x1a4>
  427ee0:	f8dd b01c 	ldr.w	fp, [sp, #28]
  427ee4:	2b01      	cmp	r3, #1
  427ee6:	f000 8134 	beq.w	428152 <_svfprintf_r+0xcf2>
  427eea:	2b02      	cmp	r3, #2
  427eec:	d125      	bne.n	427f3a <_svfprintf_r+0xada>
  427eee:	f8cd b01c 	str.w	fp, [sp, #28]
  427ef2:	2400      	movs	r4, #0
  427ef4:	2500      	movs	r5, #0
  427ef6:	e61e      	b.n	427b36 <_svfprintf_r+0x6d6>
  427ef8:	aa25      	add	r2, sp, #148	; 0x94
  427efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  427efc:	980c      	ldr	r0, [sp, #48]	; 0x30
  427efe:	f005 f90b 	bl	42d118 <__ssprint_r>
  427f02:	2800      	cmp	r0, #0
  427f04:	f47f ab7e 	bne.w	427604 <_svfprintf_r+0x1a4>
  427f08:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  427f0a:	46c8      	mov	r8, r9
  427f0c:	e475      	b.n	4277fa <_svfprintf_r+0x39a>
  427f0e:	aa25      	add	r2, sp, #148	; 0x94
  427f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  427f12:	980c      	ldr	r0, [sp, #48]	; 0x30
  427f14:	f005 f900 	bl	42d118 <__ssprint_r>
  427f18:	2800      	cmp	r0, #0
  427f1a:	f47f ab73 	bne.w	427604 <_svfprintf_r+0x1a4>
  427f1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  427f20:	46c8      	mov	r8, r9
  427f22:	e41b      	b.n	42775c <_svfprintf_r+0x2fc>
  427f24:	aa25      	add	r2, sp, #148	; 0x94
  427f26:	990b      	ldr	r1, [sp, #44]	; 0x2c
  427f28:	980c      	ldr	r0, [sp, #48]	; 0x30
  427f2a:	f005 f8f5 	bl	42d118 <__ssprint_r>
  427f2e:	2800      	cmp	r0, #0
  427f30:	f47f ab68 	bne.w	427604 <_svfprintf_r+0x1a4>
  427f34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  427f36:	46c8      	mov	r8, r9
  427f38:	e420      	b.n	42777c <_svfprintf_r+0x31c>
  427f3a:	f8cd b01c 	str.w	fp, [sp, #28]
  427f3e:	2400      	movs	r4, #0
  427f40:	2500      	movs	r5, #0
  427f42:	4649      	mov	r1, r9
  427f44:	e000      	b.n	427f48 <_svfprintf_r+0xae8>
  427f46:	4631      	mov	r1, r6
  427f48:	08e2      	lsrs	r2, r4, #3
  427f4a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  427f4e:	08e8      	lsrs	r0, r5, #3
  427f50:	f004 0307 	and.w	r3, r4, #7
  427f54:	4605      	mov	r5, r0
  427f56:	4614      	mov	r4, r2
  427f58:	3330      	adds	r3, #48	; 0x30
  427f5a:	ea54 0205 	orrs.w	r2, r4, r5
  427f5e:	f801 3c01 	strb.w	r3, [r1, #-1]
  427f62:	f101 36ff 	add.w	r6, r1, #4294967295
  427f66:	d1ee      	bne.n	427f46 <_svfprintf_r+0xae6>
  427f68:	9a07      	ldr	r2, [sp, #28]
  427f6a:	07d2      	lsls	r2, r2, #31
  427f6c:	f57f adf3 	bpl.w	427b56 <_svfprintf_r+0x6f6>
  427f70:	2b30      	cmp	r3, #48	; 0x30
  427f72:	f43f adf0 	beq.w	427b56 <_svfprintf_r+0x6f6>
  427f76:	3902      	subs	r1, #2
  427f78:	2330      	movs	r3, #48	; 0x30
  427f7a:	f806 3c01 	strb.w	r3, [r6, #-1]
  427f7e:	eba9 0301 	sub.w	r3, r9, r1
  427f82:	930e      	str	r3, [sp, #56]	; 0x38
  427f84:	460e      	mov	r6, r1
  427f86:	f7ff bb7b 	b.w	427680 <_svfprintf_r+0x220>
  427f8a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  427f8c:	2900      	cmp	r1, #0
  427f8e:	f340 822e 	ble.w	4283ee <_svfprintf_r+0xf8e>
  427f92:	9b12      	ldr	r3, [sp, #72]	; 0x48
  427f94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  427f96:	4293      	cmp	r3, r2
  427f98:	bfa8      	it	ge
  427f9a:	4613      	movge	r3, r2
  427f9c:	2b00      	cmp	r3, #0
  427f9e:	461f      	mov	r7, r3
  427fa0:	dd0d      	ble.n	427fbe <_svfprintf_r+0xb5e>
  427fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427fa4:	f8c8 6000 	str.w	r6, [r8]
  427fa8:	3301      	adds	r3, #1
  427faa:	443c      	add	r4, r7
  427fac:	2b07      	cmp	r3, #7
  427fae:	9427      	str	r4, [sp, #156]	; 0x9c
  427fb0:	f8c8 7004 	str.w	r7, [r8, #4]
  427fb4:	9326      	str	r3, [sp, #152]	; 0x98
  427fb6:	f300 831f 	bgt.w	4285f8 <_svfprintf_r+0x1198>
  427fba:	f108 0808 	add.w	r8, r8, #8
  427fbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  427fc0:	2f00      	cmp	r7, #0
  427fc2:	bfa8      	it	ge
  427fc4:	1bdb      	subge	r3, r3, r7
  427fc6:	2b00      	cmp	r3, #0
  427fc8:	461f      	mov	r7, r3
  427fca:	f340 80d6 	ble.w	42817a <_svfprintf_r+0xd1a>
  427fce:	2f10      	cmp	r7, #16
  427fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  427fd2:	4d31      	ldr	r5, [pc, #196]	; (428098 <_svfprintf_r+0xc38>)
  427fd4:	f340 81ed 	ble.w	4283b2 <_svfprintf_r+0xf52>
  427fd8:	4642      	mov	r2, r8
  427fda:	4621      	mov	r1, r4
  427fdc:	46b0      	mov	r8, r6
  427fde:	f04f 0b10 	mov.w	fp, #16
  427fe2:	462e      	mov	r6, r5
  427fe4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  427fe6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  427fe8:	e004      	b.n	427ff4 <_svfprintf_r+0xb94>
  427fea:	3208      	adds	r2, #8
  427fec:	3f10      	subs	r7, #16
  427fee:	2f10      	cmp	r7, #16
  427ff0:	f340 81db 	ble.w	4283aa <_svfprintf_r+0xf4a>
  427ff4:	3301      	adds	r3, #1
  427ff6:	3110      	adds	r1, #16
  427ff8:	2b07      	cmp	r3, #7
  427ffa:	9127      	str	r1, [sp, #156]	; 0x9c
  427ffc:	9326      	str	r3, [sp, #152]	; 0x98
  427ffe:	e882 0840 	stmia.w	r2, {r6, fp}
  428002:	ddf2      	ble.n	427fea <_svfprintf_r+0xb8a>
  428004:	aa25      	add	r2, sp, #148	; 0x94
  428006:	4629      	mov	r1, r5
  428008:	4620      	mov	r0, r4
  42800a:	f005 f885 	bl	42d118 <__ssprint_r>
  42800e:	2800      	cmp	r0, #0
  428010:	f47f aaf8 	bne.w	427604 <_svfprintf_r+0x1a4>
  428014:	9927      	ldr	r1, [sp, #156]	; 0x9c
  428016:	9b26      	ldr	r3, [sp, #152]	; 0x98
  428018:	464a      	mov	r2, r9
  42801a:	e7e7      	b.n	427fec <_svfprintf_r+0xb8c>
  42801c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42801e:	930e      	str	r3, [sp, #56]	; 0x38
  428020:	464e      	mov	r6, r9
  428022:	f7ff bb2d 	b.w	427680 <_svfprintf_r+0x220>
  428026:	2d00      	cmp	r5, #0
  428028:	bf08      	it	eq
  42802a:	2c0a      	cmpeq	r4, #10
  42802c:	f0c0 808f 	bcc.w	42814e <_svfprintf_r+0xcee>
  428030:	464e      	mov	r6, r9
  428032:	4620      	mov	r0, r4
  428034:	4629      	mov	r1, r5
  428036:	220a      	movs	r2, #10
  428038:	2300      	movs	r3, #0
  42803a:	f007 f81b 	bl	42f074 <__aeabi_uldivmod>
  42803e:	3230      	adds	r2, #48	; 0x30
  428040:	f806 2d01 	strb.w	r2, [r6, #-1]!
  428044:	4620      	mov	r0, r4
  428046:	4629      	mov	r1, r5
  428048:	2300      	movs	r3, #0
  42804a:	220a      	movs	r2, #10
  42804c:	f007 f812 	bl	42f074 <__aeabi_uldivmod>
  428050:	4604      	mov	r4, r0
  428052:	460d      	mov	r5, r1
  428054:	ea54 0305 	orrs.w	r3, r4, r5
  428058:	d1eb      	bne.n	428032 <_svfprintf_r+0xbd2>
  42805a:	eba9 0306 	sub.w	r3, r9, r6
  42805e:	930e      	str	r3, [sp, #56]	; 0x38
  428060:	f7ff bb0e 	b.w	427680 <_svfprintf_r+0x220>
  428064:	aa25      	add	r2, sp, #148	; 0x94
  428066:	990b      	ldr	r1, [sp, #44]	; 0x2c
  428068:	980c      	ldr	r0, [sp, #48]	; 0x30
  42806a:	f005 f855 	bl	42d118 <__ssprint_r>
  42806e:	2800      	cmp	r0, #0
  428070:	f47f aac8 	bne.w	427604 <_svfprintf_r+0x1a4>
  428074:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  428078:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  42807a:	46c8      	mov	r8, r9
  42807c:	f7ff bb5e 	b.w	42773c <_svfprintf_r+0x2dc>
  428080:	1e5e      	subs	r6, r3, #1
  428082:	2e00      	cmp	r6, #0
  428084:	f77f af0a 	ble.w	427e9c <_svfprintf_r+0xa3c>
  428088:	2e10      	cmp	r6, #16
  42808a:	4d03      	ldr	r5, [pc, #12]	; (428098 <_svfprintf_r+0xc38>)
  42808c:	dd22      	ble.n	4280d4 <_svfprintf_r+0xc74>
  42808e:	4622      	mov	r2, r4
  428090:	f04f 0b10 	mov.w	fp, #16
  428094:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  428096:	e006      	b.n	4280a6 <_svfprintf_r+0xc46>
  428098:	0042f748 	.word	0x0042f748
  42809c:	3e10      	subs	r6, #16
  42809e:	2e10      	cmp	r6, #16
  4280a0:	f108 0808 	add.w	r8, r8, #8
  4280a4:	dd15      	ble.n	4280d2 <_svfprintf_r+0xc72>
  4280a6:	3701      	adds	r7, #1
  4280a8:	3210      	adds	r2, #16
  4280aa:	2f07      	cmp	r7, #7
  4280ac:	9227      	str	r2, [sp, #156]	; 0x9c
  4280ae:	9726      	str	r7, [sp, #152]	; 0x98
  4280b0:	e888 0820 	stmia.w	r8, {r5, fp}
  4280b4:	ddf2      	ble.n	42809c <_svfprintf_r+0xc3c>
  4280b6:	aa25      	add	r2, sp, #148	; 0x94
  4280b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4280ba:	4620      	mov	r0, r4
  4280bc:	f005 f82c 	bl	42d118 <__ssprint_r>
  4280c0:	2800      	cmp	r0, #0
  4280c2:	f47f aa9f 	bne.w	427604 <_svfprintf_r+0x1a4>
  4280c6:	3e10      	subs	r6, #16
  4280c8:	2e10      	cmp	r6, #16
  4280ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4280cc:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4280ce:	46c8      	mov	r8, r9
  4280d0:	dce9      	bgt.n	4280a6 <_svfprintf_r+0xc46>
  4280d2:	4614      	mov	r4, r2
  4280d4:	3701      	adds	r7, #1
  4280d6:	4434      	add	r4, r6
  4280d8:	2f07      	cmp	r7, #7
  4280da:	9427      	str	r4, [sp, #156]	; 0x9c
  4280dc:	9726      	str	r7, [sp, #152]	; 0x98
  4280de:	e888 0060 	stmia.w	r8, {r5, r6}
  4280e2:	f77f aed9 	ble.w	427e98 <_svfprintf_r+0xa38>
  4280e6:	aa25      	add	r2, sp, #148	; 0x94
  4280e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4280ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4280ec:	f005 f814 	bl	42d118 <__ssprint_r>
  4280f0:	2800      	cmp	r0, #0
  4280f2:	f47f aa87 	bne.w	427604 <_svfprintf_r+0x1a4>
  4280f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4280f8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4280fa:	46c8      	mov	r8, r9
  4280fc:	e6ce      	b.n	427e9c <_svfprintf_r+0xa3c>
  4280fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  428100:	6814      	ldr	r4, [r2, #0]
  428102:	4613      	mov	r3, r2
  428104:	3304      	adds	r3, #4
  428106:	17e5      	asrs	r5, r4, #31
  428108:	930f      	str	r3, [sp, #60]	; 0x3c
  42810a:	4622      	mov	r2, r4
  42810c:	462b      	mov	r3, r5
  42810e:	e4fa      	b.n	427b06 <_svfprintf_r+0x6a6>
  428110:	3204      	adds	r2, #4
  428112:	681c      	ldr	r4, [r3, #0]
  428114:	920f      	str	r2, [sp, #60]	; 0x3c
  428116:	2301      	movs	r3, #1
  428118:	2500      	movs	r5, #0
  42811a:	f7ff ba94 	b.w	427646 <_svfprintf_r+0x1e6>
  42811e:	681c      	ldr	r4, [r3, #0]
  428120:	3304      	adds	r3, #4
  428122:	930f      	str	r3, [sp, #60]	; 0x3c
  428124:	2500      	movs	r5, #0
  428126:	e421      	b.n	42796c <_svfprintf_r+0x50c>
  428128:	990f      	ldr	r1, [sp, #60]	; 0x3c
  42812a:	460a      	mov	r2, r1
  42812c:	3204      	adds	r2, #4
  42812e:	680c      	ldr	r4, [r1, #0]
  428130:	920f      	str	r2, [sp, #60]	; 0x3c
  428132:	2500      	movs	r5, #0
  428134:	f7ff ba87 	b.w	427646 <_svfprintf_r+0x1e6>
  428138:	4614      	mov	r4, r2
  42813a:	3301      	adds	r3, #1
  42813c:	4434      	add	r4, r6
  42813e:	2b07      	cmp	r3, #7
  428140:	9427      	str	r4, [sp, #156]	; 0x9c
  428142:	9326      	str	r3, [sp, #152]	; 0x98
  428144:	e888 0060 	stmia.w	r8, {r5, r6}
  428148:	f77f ab68 	ble.w	42781c <_svfprintf_r+0x3bc>
  42814c:	e6b3      	b.n	427eb6 <_svfprintf_r+0xa56>
  42814e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  428152:	f8cd b01c 	str.w	fp, [sp, #28]
  428156:	ae42      	add	r6, sp, #264	; 0x108
  428158:	3430      	adds	r4, #48	; 0x30
  42815a:	2301      	movs	r3, #1
  42815c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  428160:	930e      	str	r3, [sp, #56]	; 0x38
  428162:	f7ff ba8d 	b.w	427680 <_svfprintf_r+0x220>
  428166:	aa25      	add	r2, sp, #148	; 0x94
  428168:	990b      	ldr	r1, [sp, #44]	; 0x2c
  42816a:	980c      	ldr	r0, [sp, #48]	; 0x30
  42816c:	f004 ffd4 	bl	42d118 <__ssprint_r>
  428170:	2800      	cmp	r0, #0
  428172:	f47f aa47 	bne.w	427604 <_svfprintf_r+0x1a4>
  428176:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  428178:	46c8      	mov	r8, r9
  42817a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  42817c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  42817e:	429a      	cmp	r2, r3
  428180:	db44      	blt.n	42820c <_svfprintf_r+0xdac>
  428182:	9b07      	ldr	r3, [sp, #28]
  428184:	07d9      	lsls	r1, r3, #31
  428186:	d441      	bmi.n	42820c <_svfprintf_r+0xdac>
  428188:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  42818a:	9812      	ldr	r0, [sp, #72]	; 0x48
  42818c:	1a9a      	subs	r2, r3, r2
  42818e:	1a1d      	subs	r5, r3, r0
  428190:	4295      	cmp	r5, r2
  428192:	bfa8      	it	ge
  428194:	4615      	movge	r5, r2
  428196:	2d00      	cmp	r5, #0
  428198:	dd0e      	ble.n	4281b8 <_svfprintf_r+0xd58>
  42819a:	9926      	ldr	r1, [sp, #152]	; 0x98
  42819c:	f8c8 5004 	str.w	r5, [r8, #4]
  4281a0:	3101      	adds	r1, #1
  4281a2:	4406      	add	r6, r0
  4281a4:	442c      	add	r4, r5
  4281a6:	2907      	cmp	r1, #7
  4281a8:	f8c8 6000 	str.w	r6, [r8]
  4281ac:	9427      	str	r4, [sp, #156]	; 0x9c
  4281ae:	9126      	str	r1, [sp, #152]	; 0x98
  4281b0:	f300 823b 	bgt.w	42862a <_svfprintf_r+0x11ca>
  4281b4:	f108 0808 	add.w	r8, r8, #8
  4281b8:	2d00      	cmp	r5, #0
  4281ba:	bfac      	ite	ge
  4281bc:	1b56      	subge	r6, r2, r5
  4281be:	4616      	movlt	r6, r2
  4281c0:	2e00      	cmp	r6, #0
  4281c2:	f77f ab2d 	ble.w	427820 <_svfprintf_r+0x3c0>
  4281c6:	2e10      	cmp	r6, #16
  4281c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4281ca:	4db0      	ldr	r5, [pc, #704]	; (42848c <_svfprintf_r+0x102c>)
  4281cc:	ddb5      	ble.n	42813a <_svfprintf_r+0xcda>
  4281ce:	4622      	mov	r2, r4
  4281d0:	2710      	movs	r7, #16
  4281d2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4281d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4281d8:	e004      	b.n	4281e4 <_svfprintf_r+0xd84>
  4281da:	f108 0808 	add.w	r8, r8, #8
  4281de:	3e10      	subs	r6, #16
  4281e0:	2e10      	cmp	r6, #16
  4281e2:	dda9      	ble.n	428138 <_svfprintf_r+0xcd8>
  4281e4:	3301      	adds	r3, #1
  4281e6:	3210      	adds	r2, #16
  4281e8:	2b07      	cmp	r3, #7
  4281ea:	9227      	str	r2, [sp, #156]	; 0x9c
  4281ec:	9326      	str	r3, [sp, #152]	; 0x98
  4281ee:	e888 00a0 	stmia.w	r8, {r5, r7}
  4281f2:	ddf2      	ble.n	4281da <_svfprintf_r+0xd7a>
  4281f4:	aa25      	add	r2, sp, #148	; 0x94
  4281f6:	4621      	mov	r1, r4
  4281f8:	4658      	mov	r0, fp
  4281fa:	f004 ff8d 	bl	42d118 <__ssprint_r>
  4281fe:	2800      	cmp	r0, #0
  428200:	f47f aa00 	bne.w	427604 <_svfprintf_r+0x1a4>
  428204:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  428206:	9b26      	ldr	r3, [sp, #152]	; 0x98
  428208:	46c8      	mov	r8, r9
  42820a:	e7e8      	b.n	4281de <_svfprintf_r+0xd7e>
  42820c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  42820e:	9819      	ldr	r0, [sp, #100]	; 0x64
  428210:	991a      	ldr	r1, [sp, #104]	; 0x68
  428212:	f8c8 1000 	str.w	r1, [r8]
  428216:	3301      	adds	r3, #1
  428218:	4404      	add	r4, r0
  42821a:	2b07      	cmp	r3, #7
  42821c:	9427      	str	r4, [sp, #156]	; 0x9c
  42821e:	f8c8 0004 	str.w	r0, [r8, #4]
  428222:	9326      	str	r3, [sp, #152]	; 0x98
  428224:	f300 81f5 	bgt.w	428612 <_svfprintf_r+0x11b2>
  428228:	f108 0808 	add.w	r8, r8, #8
  42822c:	e7ac      	b.n	428188 <_svfprintf_r+0xd28>
  42822e:	9b07      	ldr	r3, [sp, #28]
  428230:	07da      	lsls	r2, r3, #31
  428232:	f53f adfe 	bmi.w	427e32 <_svfprintf_r+0x9d2>
  428236:	3701      	adds	r7, #1
  428238:	3401      	adds	r4, #1
  42823a:	2301      	movs	r3, #1
  42823c:	2f07      	cmp	r7, #7
  42823e:	9427      	str	r4, [sp, #156]	; 0x9c
  428240:	9726      	str	r7, [sp, #152]	; 0x98
  428242:	f8c8 6000 	str.w	r6, [r8]
  428246:	f8c8 3004 	str.w	r3, [r8, #4]
  42824a:	f77f ae25 	ble.w	427e98 <_svfprintf_r+0xa38>
  42824e:	e74a      	b.n	4280e6 <_svfprintf_r+0xc86>
  428250:	aa25      	add	r2, sp, #148	; 0x94
  428252:	990b      	ldr	r1, [sp, #44]	; 0x2c
  428254:	980c      	ldr	r0, [sp, #48]	; 0x30
  428256:	f004 ff5f 	bl	42d118 <__ssprint_r>
  42825a:	2800      	cmp	r0, #0
  42825c:	f47f a9d2 	bne.w	427604 <_svfprintf_r+0x1a4>
  428260:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  428262:	9f26      	ldr	r7, [sp, #152]	; 0x98
  428264:	46c8      	mov	r8, r9
  428266:	e5f2      	b.n	427e4e <_svfprintf_r+0x9ee>
  428268:	aa25      	add	r2, sp, #148	; 0x94
  42826a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  42826c:	980c      	ldr	r0, [sp, #48]	; 0x30
  42826e:	f004 ff53 	bl	42d118 <__ssprint_r>
  428272:	2800      	cmp	r0, #0
  428274:	f47f a9c6 	bne.w	427604 <_svfprintf_r+0x1a4>
  428278:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  42827a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  42827c:	46c8      	mov	r8, r9
  42827e:	e5f5      	b.n	427e6c <_svfprintf_r+0xa0c>
  428280:	464e      	mov	r6, r9
  428282:	f7ff b9fd 	b.w	427680 <_svfprintf_r+0x220>
  428286:	aa25      	add	r2, sp, #148	; 0x94
  428288:	990b      	ldr	r1, [sp, #44]	; 0x2c
  42828a:	980c      	ldr	r0, [sp, #48]	; 0x30
  42828c:	f004 ff44 	bl	42d118 <__ssprint_r>
  428290:	2800      	cmp	r0, #0
  428292:	f47f a9b7 	bne.w	427604 <_svfprintf_r+0x1a4>
  428296:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  428298:	46c8      	mov	r8, r9
  42829a:	f7ff ba72 	b.w	427782 <_svfprintf_r+0x322>
  42829e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4282a0:	4622      	mov	r2, r4
  4282a2:	4620      	mov	r0, r4
  4282a4:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4282a6:	4623      	mov	r3, r4
  4282a8:	4621      	mov	r1, r4
  4282aa:	f006 fea5 	bl	42eff8 <__aeabi_dcmpun>
  4282ae:	2800      	cmp	r0, #0
  4282b0:	f040 8286 	bne.w	4287c0 <_svfprintf_r+0x1360>
  4282b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4282b6:	3301      	adds	r3, #1
  4282b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4282ba:	f023 0320 	bic.w	r3, r3, #32
  4282be:	930e      	str	r3, [sp, #56]	; 0x38
  4282c0:	f000 81e2 	beq.w	428688 <_svfprintf_r+0x1228>
  4282c4:	2b47      	cmp	r3, #71	; 0x47
  4282c6:	f000 811e 	beq.w	428506 <_svfprintf_r+0x10a6>
  4282ca:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4282ce:	9307      	str	r3, [sp, #28]
  4282d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4282d2:	1e1f      	subs	r7, r3, #0
  4282d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4282d6:	9308      	str	r3, [sp, #32]
  4282d8:	bfbb      	ittet	lt
  4282da:	463b      	movlt	r3, r7
  4282dc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4282e0:	2300      	movge	r3, #0
  4282e2:	232d      	movlt	r3, #45	; 0x2d
  4282e4:	9310      	str	r3, [sp, #64]	; 0x40
  4282e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4282e8:	2b66      	cmp	r3, #102	; 0x66
  4282ea:	f000 81bb 	beq.w	428664 <_svfprintf_r+0x1204>
  4282ee:	2b46      	cmp	r3, #70	; 0x46
  4282f0:	f000 80df 	beq.w	4284b2 <_svfprintf_r+0x1052>
  4282f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4282f6:	9a08      	ldr	r2, [sp, #32]
  4282f8:	2b45      	cmp	r3, #69	; 0x45
  4282fa:	bf0c      	ite	eq
  4282fc:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4282fe:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  428300:	a823      	add	r0, sp, #140	; 0x8c
  428302:	a920      	add	r1, sp, #128	; 0x80
  428304:	bf08      	it	eq
  428306:	1c5d      	addeq	r5, r3, #1
  428308:	9004      	str	r0, [sp, #16]
  42830a:	9103      	str	r1, [sp, #12]
  42830c:	a81f      	add	r0, sp, #124	; 0x7c
  42830e:	2102      	movs	r1, #2
  428310:	463b      	mov	r3, r7
  428312:	9002      	str	r0, [sp, #8]
  428314:	9501      	str	r5, [sp, #4]
  428316:	9100      	str	r1, [sp, #0]
  428318:	980c      	ldr	r0, [sp, #48]	; 0x30
  42831a:	f001 fd29 	bl	429d70 <_dtoa_r>
  42831e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  428320:	2b67      	cmp	r3, #103	; 0x67
  428322:	4606      	mov	r6, r0
  428324:	f040 81e0 	bne.w	4286e8 <_svfprintf_r+0x1288>
  428328:	f01b 0f01 	tst.w	fp, #1
  42832c:	f000 8246 	beq.w	4287bc <_svfprintf_r+0x135c>
  428330:	1974      	adds	r4, r6, r5
  428332:	9a16      	ldr	r2, [sp, #88]	; 0x58
  428334:	9808      	ldr	r0, [sp, #32]
  428336:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  428338:	4639      	mov	r1, r7
  42833a:	f006 fe2b 	bl	42ef94 <__aeabi_dcmpeq>
  42833e:	2800      	cmp	r0, #0
  428340:	f040 8165 	bne.w	42860e <_svfprintf_r+0x11ae>
  428344:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  428346:	42a3      	cmp	r3, r4
  428348:	d206      	bcs.n	428358 <_svfprintf_r+0xef8>
  42834a:	2130      	movs	r1, #48	; 0x30
  42834c:	1c5a      	adds	r2, r3, #1
  42834e:	9223      	str	r2, [sp, #140]	; 0x8c
  428350:	7019      	strb	r1, [r3, #0]
  428352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  428354:	429c      	cmp	r4, r3
  428356:	d8f9      	bhi.n	42834c <_svfprintf_r+0xeec>
  428358:	1b9b      	subs	r3, r3, r6
  42835a:	9313      	str	r3, [sp, #76]	; 0x4c
  42835c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  42835e:	2b47      	cmp	r3, #71	; 0x47
  428360:	f000 80e9 	beq.w	428536 <_svfprintf_r+0x10d6>
  428364:	9b11      	ldr	r3, [sp, #68]	; 0x44
  428366:	2b65      	cmp	r3, #101	; 0x65
  428368:	f340 81cd 	ble.w	428706 <_svfprintf_r+0x12a6>
  42836c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  42836e:	2b66      	cmp	r3, #102	; 0x66
  428370:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  428372:	9312      	str	r3, [sp, #72]	; 0x48
  428374:	f000 819e 	beq.w	4286b4 <_svfprintf_r+0x1254>
  428378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  42837a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  42837c:	4619      	mov	r1, r3
  42837e:	4291      	cmp	r1, r2
  428380:	f300 818a 	bgt.w	428698 <_svfprintf_r+0x1238>
  428384:	f01b 0f01 	tst.w	fp, #1
  428388:	f040 8213 	bne.w	4287b2 <_svfprintf_r+0x1352>
  42838c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  428390:	9308      	str	r3, [sp, #32]
  428392:	2367      	movs	r3, #103	; 0x67
  428394:	920e      	str	r2, [sp, #56]	; 0x38
  428396:	9311      	str	r3, [sp, #68]	; 0x44
  428398:	9b10      	ldr	r3, [sp, #64]	; 0x40
  42839a:	2b00      	cmp	r3, #0
  42839c:	f040 80c4 	bne.w	428528 <_svfprintf_r+0x10c8>
  4283a0:	930a      	str	r3, [sp, #40]	; 0x28
  4283a2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4283a6:	f7ff b973 	b.w	427690 <_svfprintf_r+0x230>
  4283aa:	4635      	mov	r5, r6
  4283ac:	460c      	mov	r4, r1
  4283ae:	4646      	mov	r6, r8
  4283b0:	4690      	mov	r8, r2
  4283b2:	3301      	adds	r3, #1
  4283b4:	443c      	add	r4, r7
  4283b6:	2b07      	cmp	r3, #7
  4283b8:	9427      	str	r4, [sp, #156]	; 0x9c
  4283ba:	9326      	str	r3, [sp, #152]	; 0x98
  4283bc:	e888 00a0 	stmia.w	r8, {r5, r7}
  4283c0:	f73f aed1 	bgt.w	428166 <_svfprintf_r+0xd06>
  4283c4:	f108 0808 	add.w	r8, r8, #8
  4283c8:	e6d7      	b.n	42817a <_svfprintf_r+0xd1a>
  4283ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4283cc:	6813      	ldr	r3, [r2, #0]
  4283ce:	3204      	adds	r2, #4
  4283d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4283d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4283d4:	601a      	str	r2, [r3, #0]
  4283d6:	f7ff b86a 	b.w	4274ae <_svfprintf_r+0x4e>
  4283da:	aa25      	add	r2, sp, #148	; 0x94
  4283dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4283de:	980c      	ldr	r0, [sp, #48]	; 0x30
  4283e0:	f004 fe9a 	bl	42d118 <__ssprint_r>
  4283e4:	2800      	cmp	r0, #0
  4283e6:	f47f a90d 	bne.w	427604 <_svfprintf_r+0x1a4>
  4283ea:	46c8      	mov	r8, r9
  4283ec:	e48d      	b.n	427d0a <_svfprintf_r+0x8aa>
  4283ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4283f0:	4a27      	ldr	r2, [pc, #156]	; (428490 <_svfprintf_r+0x1030>)
  4283f2:	f8c8 2000 	str.w	r2, [r8]
  4283f6:	3301      	adds	r3, #1
  4283f8:	3401      	adds	r4, #1
  4283fa:	2201      	movs	r2, #1
  4283fc:	2b07      	cmp	r3, #7
  4283fe:	9427      	str	r4, [sp, #156]	; 0x9c
  428400:	9326      	str	r3, [sp, #152]	; 0x98
  428402:	f8c8 2004 	str.w	r2, [r8, #4]
  428406:	dc72      	bgt.n	4284ee <_svfprintf_r+0x108e>
  428408:	f108 0808 	add.w	r8, r8, #8
  42840c:	b929      	cbnz	r1, 42841a <_svfprintf_r+0xfba>
  42840e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  428410:	b91b      	cbnz	r3, 42841a <_svfprintf_r+0xfba>
  428412:	9b07      	ldr	r3, [sp, #28]
  428414:	07d8      	lsls	r0, r3, #31
  428416:	f57f aa03 	bpl.w	427820 <_svfprintf_r+0x3c0>
  42841a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  42841c:	9819      	ldr	r0, [sp, #100]	; 0x64
  42841e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  428420:	f8c8 2000 	str.w	r2, [r8]
  428424:	3301      	adds	r3, #1
  428426:	4602      	mov	r2, r0
  428428:	4422      	add	r2, r4
  42842a:	2b07      	cmp	r3, #7
  42842c:	9227      	str	r2, [sp, #156]	; 0x9c
  42842e:	f8c8 0004 	str.w	r0, [r8, #4]
  428432:	9326      	str	r3, [sp, #152]	; 0x98
  428434:	f300 818d 	bgt.w	428752 <_svfprintf_r+0x12f2>
  428438:	f108 0808 	add.w	r8, r8, #8
  42843c:	2900      	cmp	r1, #0
  42843e:	f2c0 8165 	blt.w	42870c <_svfprintf_r+0x12ac>
  428442:	9913      	ldr	r1, [sp, #76]	; 0x4c
  428444:	f8c8 6000 	str.w	r6, [r8]
  428448:	3301      	adds	r3, #1
  42844a:	188c      	adds	r4, r1, r2
  42844c:	2b07      	cmp	r3, #7
  42844e:	9427      	str	r4, [sp, #156]	; 0x9c
  428450:	9326      	str	r3, [sp, #152]	; 0x98
  428452:	f8c8 1004 	str.w	r1, [r8, #4]
  428456:	f77f a9e1 	ble.w	42781c <_svfprintf_r+0x3bc>
  42845a:	e52c      	b.n	427eb6 <_svfprintf_r+0xa56>
  42845c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  42845e:	9909      	ldr	r1, [sp, #36]	; 0x24
  428460:	6813      	ldr	r3, [r2, #0]
  428462:	17cd      	asrs	r5, r1, #31
  428464:	4608      	mov	r0, r1
  428466:	3204      	adds	r2, #4
  428468:	4629      	mov	r1, r5
  42846a:	920f      	str	r2, [sp, #60]	; 0x3c
  42846c:	e9c3 0100 	strd	r0, r1, [r3]
  428470:	f7ff b81d 	b.w	4274ae <_svfprintf_r+0x4e>
  428474:	aa25      	add	r2, sp, #148	; 0x94
  428476:	990b      	ldr	r1, [sp, #44]	; 0x2c
  428478:	980c      	ldr	r0, [sp, #48]	; 0x30
  42847a:	f004 fe4d 	bl	42d118 <__ssprint_r>
  42847e:	2800      	cmp	r0, #0
  428480:	f47f a8c0 	bne.w	427604 <_svfprintf_r+0x1a4>
  428484:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  428486:	46c8      	mov	r8, r9
  428488:	e458      	b.n	427d3c <_svfprintf_r+0x8dc>
  42848a:	bf00      	nop
  42848c:	0042f748 	.word	0x0042f748
  428490:	0042f734 	.word	0x0042f734
  428494:	2140      	movs	r1, #64	; 0x40
  428496:	980c      	ldr	r0, [sp, #48]	; 0x30
  428498:	f003 fa30 	bl	42b8fc <_malloc_r>
  42849c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  42849e:	6010      	str	r0, [r2, #0]
  4284a0:	6110      	str	r0, [r2, #16]
  4284a2:	2800      	cmp	r0, #0
  4284a4:	f000 81f2 	beq.w	42888c <_svfprintf_r+0x142c>
  4284a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4284aa:	2340      	movs	r3, #64	; 0x40
  4284ac:	6153      	str	r3, [r2, #20]
  4284ae:	f7fe bfee 	b.w	42748e <_svfprintf_r+0x2e>
  4284b2:	a823      	add	r0, sp, #140	; 0x8c
  4284b4:	a920      	add	r1, sp, #128	; 0x80
  4284b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4284b8:	9004      	str	r0, [sp, #16]
  4284ba:	9103      	str	r1, [sp, #12]
  4284bc:	a81f      	add	r0, sp, #124	; 0x7c
  4284be:	2103      	movs	r1, #3
  4284c0:	9002      	str	r0, [sp, #8]
  4284c2:	9a08      	ldr	r2, [sp, #32]
  4284c4:	9401      	str	r4, [sp, #4]
  4284c6:	463b      	mov	r3, r7
  4284c8:	9100      	str	r1, [sp, #0]
  4284ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4284cc:	f001 fc50 	bl	429d70 <_dtoa_r>
  4284d0:	4625      	mov	r5, r4
  4284d2:	4606      	mov	r6, r0
  4284d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4284d6:	2b46      	cmp	r3, #70	; 0x46
  4284d8:	eb06 0405 	add.w	r4, r6, r5
  4284dc:	f47f af29 	bne.w	428332 <_svfprintf_r+0xed2>
  4284e0:	7833      	ldrb	r3, [r6, #0]
  4284e2:	2b30      	cmp	r3, #48	; 0x30
  4284e4:	f000 8178 	beq.w	4287d8 <_svfprintf_r+0x1378>
  4284e8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4284ea:	442c      	add	r4, r5
  4284ec:	e721      	b.n	428332 <_svfprintf_r+0xed2>
  4284ee:	aa25      	add	r2, sp, #148	; 0x94
  4284f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4284f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4284f4:	f004 fe10 	bl	42d118 <__ssprint_r>
  4284f8:	2800      	cmp	r0, #0
  4284fa:	f47f a883 	bne.w	427604 <_svfprintf_r+0x1a4>
  4284fe:	991f      	ldr	r1, [sp, #124]	; 0x7c
  428500:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  428502:	46c8      	mov	r8, r9
  428504:	e782      	b.n	42840c <_svfprintf_r+0xfac>
  428506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  428508:	2b00      	cmp	r3, #0
  42850a:	bf08      	it	eq
  42850c:	2301      	moveq	r3, #1
  42850e:	930a      	str	r3, [sp, #40]	; 0x28
  428510:	e6db      	b.n	4282ca <_svfprintf_r+0xe6a>
  428512:	4630      	mov	r0, r6
  428514:	940a      	str	r4, [sp, #40]	; 0x28
  428516:	f004 fc73 	bl	42ce00 <strlen>
  42851a:	950f      	str	r5, [sp, #60]	; 0x3c
  42851c:	900e      	str	r0, [sp, #56]	; 0x38
  42851e:	f8cd b01c 	str.w	fp, [sp, #28]
  428522:	4603      	mov	r3, r0
  428524:	f7ff b9f9 	b.w	42791a <_svfprintf_r+0x4ba>
  428528:	272d      	movs	r7, #45	; 0x2d
  42852a:	2300      	movs	r3, #0
  42852c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  428530:	930a      	str	r3, [sp, #40]	; 0x28
  428532:	f7ff b8ae 	b.w	427692 <_svfprintf_r+0x232>
  428536:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  428538:	9312      	str	r3, [sp, #72]	; 0x48
  42853a:	461a      	mov	r2, r3
  42853c:	3303      	adds	r3, #3
  42853e:	db04      	blt.n	42854a <_svfprintf_r+0x10ea>
  428540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  428542:	4619      	mov	r1, r3
  428544:	4291      	cmp	r1, r2
  428546:	f6bf af17 	bge.w	428378 <_svfprintf_r+0xf18>
  42854a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  42854c:	3b02      	subs	r3, #2
  42854e:	9311      	str	r3, [sp, #68]	; 0x44
  428550:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  428554:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  428558:	9b12      	ldr	r3, [sp, #72]	; 0x48
  42855a:	3b01      	subs	r3, #1
  42855c:	2b00      	cmp	r3, #0
  42855e:	931f      	str	r3, [sp, #124]	; 0x7c
  428560:	bfbd      	ittte	lt
  428562:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  428564:	f1c3 0301 	rsblt	r3, r3, #1
  428568:	222d      	movlt	r2, #45	; 0x2d
  42856a:	222b      	movge	r2, #43	; 0x2b
  42856c:	2b09      	cmp	r3, #9
  42856e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  428572:	f340 8116 	ble.w	4287a2 <_svfprintf_r+0x1342>
  428576:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  42857a:	4620      	mov	r0, r4
  42857c:	4dab      	ldr	r5, [pc, #684]	; (42882c <_svfprintf_r+0x13cc>)
  42857e:	e000      	b.n	428582 <_svfprintf_r+0x1122>
  428580:	4610      	mov	r0, r2
  428582:	fb85 1203 	smull	r1, r2, r5, r3
  428586:	17d9      	asrs	r1, r3, #31
  428588:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  42858c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  428590:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  428594:	3230      	adds	r2, #48	; 0x30
  428596:	2909      	cmp	r1, #9
  428598:	f800 2c01 	strb.w	r2, [r0, #-1]
  42859c:	460b      	mov	r3, r1
  42859e:	f100 32ff 	add.w	r2, r0, #4294967295
  4285a2:	dced      	bgt.n	428580 <_svfprintf_r+0x1120>
  4285a4:	3330      	adds	r3, #48	; 0x30
  4285a6:	3802      	subs	r0, #2
  4285a8:	b2d9      	uxtb	r1, r3
  4285aa:	4284      	cmp	r4, r0
  4285ac:	f802 1c01 	strb.w	r1, [r2, #-1]
  4285b0:	f240 8165 	bls.w	42887e <_svfprintf_r+0x141e>
  4285b4:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4285b8:	4613      	mov	r3, r2
  4285ba:	e001      	b.n	4285c0 <_svfprintf_r+0x1160>
  4285bc:	f813 1b01 	ldrb.w	r1, [r3], #1
  4285c0:	f800 1b01 	strb.w	r1, [r0], #1
  4285c4:	42a3      	cmp	r3, r4
  4285c6:	d1f9      	bne.n	4285bc <_svfprintf_r+0x115c>
  4285c8:	3301      	adds	r3, #1
  4285ca:	1a9b      	subs	r3, r3, r2
  4285cc:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4285d0:	4413      	add	r3, r2
  4285d2:	aa21      	add	r2, sp, #132	; 0x84
  4285d4:	1a9b      	subs	r3, r3, r2
  4285d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4285d8:	931b      	str	r3, [sp, #108]	; 0x6c
  4285da:	2a01      	cmp	r2, #1
  4285dc:	4413      	add	r3, r2
  4285de:	930e      	str	r3, [sp, #56]	; 0x38
  4285e0:	f340 8119 	ble.w	428816 <_svfprintf_r+0x13b6>
  4285e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4285e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4285e8:	4413      	add	r3, r2
  4285ea:	930e      	str	r3, [sp, #56]	; 0x38
  4285ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4285f0:	9308      	str	r3, [sp, #32]
  4285f2:	2300      	movs	r3, #0
  4285f4:	9312      	str	r3, [sp, #72]	; 0x48
  4285f6:	e6cf      	b.n	428398 <_svfprintf_r+0xf38>
  4285f8:	aa25      	add	r2, sp, #148	; 0x94
  4285fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4285fc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4285fe:	f004 fd8b 	bl	42d118 <__ssprint_r>
  428602:	2800      	cmp	r0, #0
  428604:	f47e affe 	bne.w	427604 <_svfprintf_r+0x1a4>
  428608:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  42860a:	46c8      	mov	r8, r9
  42860c:	e4d7      	b.n	427fbe <_svfprintf_r+0xb5e>
  42860e:	4623      	mov	r3, r4
  428610:	e6a2      	b.n	428358 <_svfprintf_r+0xef8>
  428612:	aa25      	add	r2, sp, #148	; 0x94
  428614:	990b      	ldr	r1, [sp, #44]	; 0x2c
  428616:	980c      	ldr	r0, [sp, #48]	; 0x30
  428618:	f004 fd7e 	bl	42d118 <__ssprint_r>
  42861c:	2800      	cmp	r0, #0
  42861e:	f47e aff1 	bne.w	427604 <_svfprintf_r+0x1a4>
  428622:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  428624:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  428626:	46c8      	mov	r8, r9
  428628:	e5ae      	b.n	428188 <_svfprintf_r+0xd28>
  42862a:	aa25      	add	r2, sp, #148	; 0x94
  42862c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  42862e:	980c      	ldr	r0, [sp, #48]	; 0x30
  428630:	f004 fd72 	bl	42d118 <__ssprint_r>
  428634:	2800      	cmp	r0, #0
  428636:	f47e afe5 	bne.w	427604 <_svfprintf_r+0x1a4>
  42863a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  42863c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  42863e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  428640:	1a9a      	subs	r2, r3, r2
  428642:	46c8      	mov	r8, r9
  428644:	e5b8      	b.n	4281b8 <_svfprintf_r+0xd58>
  428646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  428648:	9612      	str	r6, [sp, #72]	; 0x48
  42864a:	2b06      	cmp	r3, #6
  42864c:	bf28      	it	cs
  42864e:	2306      	movcs	r3, #6
  428650:	960a      	str	r6, [sp, #40]	; 0x28
  428652:	4637      	mov	r7, r6
  428654:	9308      	str	r3, [sp, #32]
  428656:	950f      	str	r5, [sp, #60]	; 0x3c
  428658:	f8cd b01c 	str.w	fp, [sp, #28]
  42865c:	930e      	str	r3, [sp, #56]	; 0x38
  42865e:	4e74      	ldr	r6, [pc, #464]	; (428830 <_svfprintf_r+0x13d0>)
  428660:	f7ff b816 	b.w	427690 <_svfprintf_r+0x230>
  428664:	a823      	add	r0, sp, #140	; 0x8c
  428666:	a920      	add	r1, sp, #128	; 0x80
  428668:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  42866a:	9004      	str	r0, [sp, #16]
  42866c:	9103      	str	r1, [sp, #12]
  42866e:	a81f      	add	r0, sp, #124	; 0x7c
  428670:	2103      	movs	r1, #3
  428672:	9002      	str	r0, [sp, #8]
  428674:	9a08      	ldr	r2, [sp, #32]
  428676:	9501      	str	r5, [sp, #4]
  428678:	463b      	mov	r3, r7
  42867a:	9100      	str	r1, [sp, #0]
  42867c:	980c      	ldr	r0, [sp, #48]	; 0x30
  42867e:	f001 fb77 	bl	429d70 <_dtoa_r>
  428682:	4606      	mov	r6, r0
  428684:	1944      	adds	r4, r0, r5
  428686:	e72b      	b.n	4284e0 <_svfprintf_r+0x1080>
  428688:	2306      	movs	r3, #6
  42868a:	930a      	str	r3, [sp, #40]	; 0x28
  42868c:	e61d      	b.n	4282ca <_svfprintf_r+0xe6a>
  42868e:	272d      	movs	r7, #45	; 0x2d
  428690:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  428694:	f7ff bacd 	b.w	427c32 <_svfprintf_r+0x7d2>
  428698:	9a19      	ldr	r2, [sp, #100]	; 0x64
  42869a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  42869c:	4413      	add	r3, r2
  42869e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4286a0:	930e      	str	r3, [sp, #56]	; 0x38
  4286a2:	2a00      	cmp	r2, #0
  4286a4:	f340 80b0 	ble.w	428808 <_svfprintf_r+0x13a8>
  4286a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4286ac:	9308      	str	r3, [sp, #32]
  4286ae:	2367      	movs	r3, #103	; 0x67
  4286b0:	9311      	str	r3, [sp, #68]	; 0x44
  4286b2:	e671      	b.n	428398 <_svfprintf_r+0xf38>
  4286b4:	2b00      	cmp	r3, #0
  4286b6:	f340 80c3 	ble.w	428840 <_svfprintf_r+0x13e0>
  4286ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4286bc:	2a00      	cmp	r2, #0
  4286be:	f040 8099 	bne.w	4287f4 <_svfprintf_r+0x1394>
  4286c2:	f01b 0f01 	tst.w	fp, #1
  4286c6:	f040 8095 	bne.w	4287f4 <_svfprintf_r+0x1394>
  4286ca:	9308      	str	r3, [sp, #32]
  4286cc:	930e      	str	r3, [sp, #56]	; 0x38
  4286ce:	e663      	b.n	428398 <_svfprintf_r+0xf38>
  4286d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4286d2:	9308      	str	r3, [sp, #32]
  4286d4:	930e      	str	r3, [sp, #56]	; 0x38
  4286d6:	900a      	str	r0, [sp, #40]	; 0x28
  4286d8:	950f      	str	r5, [sp, #60]	; 0x3c
  4286da:	f8cd b01c 	str.w	fp, [sp, #28]
  4286de:	9012      	str	r0, [sp, #72]	; 0x48
  4286e0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4286e4:	f7fe bfd4 	b.w	427690 <_svfprintf_r+0x230>
  4286e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4286ea:	2b47      	cmp	r3, #71	; 0x47
  4286ec:	f47f ae20 	bne.w	428330 <_svfprintf_r+0xed0>
  4286f0:	f01b 0f01 	tst.w	fp, #1
  4286f4:	f47f aeee 	bne.w	4284d4 <_svfprintf_r+0x1074>
  4286f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4286fa:	1b9b      	subs	r3, r3, r6
  4286fc:	9313      	str	r3, [sp, #76]	; 0x4c
  4286fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  428700:	2b47      	cmp	r3, #71	; 0x47
  428702:	f43f af18 	beq.w	428536 <_svfprintf_r+0x10d6>
  428706:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  428708:	9312      	str	r3, [sp, #72]	; 0x48
  42870a:	e721      	b.n	428550 <_svfprintf_r+0x10f0>
  42870c:	424f      	negs	r7, r1
  42870e:	3110      	adds	r1, #16
  428710:	4d48      	ldr	r5, [pc, #288]	; (428834 <_svfprintf_r+0x13d4>)
  428712:	da2f      	bge.n	428774 <_svfprintf_r+0x1314>
  428714:	2410      	movs	r4, #16
  428716:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  42871a:	e004      	b.n	428726 <_svfprintf_r+0x12c6>
  42871c:	f108 0808 	add.w	r8, r8, #8
  428720:	3f10      	subs	r7, #16
  428722:	2f10      	cmp	r7, #16
  428724:	dd26      	ble.n	428774 <_svfprintf_r+0x1314>
  428726:	3301      	adds	r3, #1
  428728:	3210      	adds	r2, #16
  42872a:	2b07      	cmp	r3, #7
  42872c:	9227      	str	r2, [sp, #156]	; 0x9c
  42872e:	9326      	str	r3, [sp, #152]	; 0x98
  428730:	f8c8 5000 	str.w	r5, [r8]
  428734:	f8c8 4004 	str.w	r4, [r8, #4]
  428738:	ddf0      	ble.n	42871c <_svfprintf_r+0x12bc>
  42873a:	aa25      	add	r2, sp, #148	; 0x94
  42873c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  42873e:	4658      	mov	r0, fp
  428740:	f004 fcea 	bl	42d118 <__ssprint_r>
  428744:	2800      	cmp	r0, #0
  428746:	f47e af5d 	bne.w	427604 <_svfprintf_r+0x1a4>
  42874a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  42874c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  42874e:	46c8      	mov	r8, r9
  428750:	e7e6      	b.n	428720 <_svfprintf_r+0x12c0>
  428752:	aa25      	add	r2, sp, #148	; 0x94
  428754:	990b      	ldr	r1, [sp, #44]	; 0x2c
  428756:	980c      	ldr	r0, [sp, #48]	; 0x30
  428758:	f004 fcde 	bl	42d118 <__ssprint_r>
  42875c:	2800      	cmp	r0, #0
  42875e:	f47e af51 	bne.w	427604 <_svfprintf_r+0x1a4>
  428762:	991f      	ldr	r1, [sp, #124]	; 0x7c
  428764:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  428766:	9b26      	ldr	r3, [sp, #152]	; 0x98
  428768:	46c8      	mov	r8, r9
  42876a:	e667      	b.n	42843c <_svfprintf_r+0xfdc>
  42876c:	2000      	movs	r0, #0
  42876e:	900a      	str	r0, [sp, #40]	; 0x28
  428770:	f7fe bed0 	b.w	427514 <_svfprintf_r+0xb4>
  428774:	3301      	adds	r3, #1
  428776:	443a      	add	r2, r7
  428778:	2b07      	cmp	r3, #7
  42877a:	e888 00a0 	stmia.w	r8, {r5, r7}
  42877e:	9227      	str	r2, [sp, #156]	; 0x9c
  428780:	9326      	str	r3, [sp, #152]	; 0x98
  428782:	f108 0808 	add.w	r8, r8, #8
  428786:	f77f ae5c 	ble.w	428442 <_svfprintf_r+0xfe2>
  42878a:	aa25      	add	r2, sp, #148	; 0x94
  42878c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  42878e:	980c      	ldr	r0, [sp, #48]	; 0x30
  428790:	f004 fcc2 	bl	42d118 <__ssprint_r>
  428794:	2800      	cmp	r0, #0
  428796:	f47e af35 	bne.w	427604 <_svfprintf_r+0x1a4>
  42879a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  42879c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  42879e:	46c8      	mov	r8, r9
  4287a0:	e64f      	b.n	428442 <_svfprintf_r+0xfe2>
  4287a2:	3330      	adds	r3, #48	; 0x30
  4287a4:	2230      	movs	r2, #48	; 0x30
  4287a6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4287aa:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4287ae:	ab22      	add	r3, sp, #136	; 0x88
  4287b0:	e70f      	b.n	4285d2 <_svfprintf_r+0x1172>
  4287b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4287b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4287b6:	4413      	add	r3, r2
  4287b8:	930e      	str	r3, [sp, #56]	; 0x38
  4287ba:	e775      	b.n	4286a8 <_svfprintf_r+0x1248>
  4287bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4287be:	e5cb      	b.n	428358 <_svfprintf_r+0xef8>
  4287c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4287c2:	4e1d      	ldr	r6, [pc, #116]	; (428838 <_svfprintf_r+0x13d8>)
  4287c4:	2b00      	cmp	r3, #0
  4287c6:	bfb6      	itet	lt
  4287c8:	272d      	movlt	r7, #45	; 0x2d
  4287ca:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4287ce:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4287d2:	4b1a      	ldr	r3, [pc, #104]	; (42883c <_svfprintf_r+0x13dc>)
  4287d4:	f7ff ba2f 	b.w	427c36 <_svfprintf_r+0x7d6>
  4287d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4287da:	9808      	ldr	r0, [sp, #32]
  4287dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4287de:	4639      	mov	r1, r7
  4287e0:	f006 fbd8 	bl	42ef94 <__aeabi_dcmpeq>
  4287e4:	2800      	cmp	r0, #0
  4287e6:	f47f ae7f 	bne.w	4284e8 <_svfprintf_r+0x1088>
  4287ea:	f1c5 0501 	rsb	r5, r5, #1
  4287ee:	951f      	str	r5, [sp, #124]	; 0x7c
  4287f0:	442c      	add	r4, r5
  4287f2:	e59e      	b.n	428332 <_svfprintf_r+0xed2>
  4287f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4287f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4287f8:	4413      	add	r3, r2
  4287fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4287fc:	441a      	add	r2, r3
  4287fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  428802:	920e      	str	r2, [sp, #56]	; 0x38
  428804:	9308      	str	r3, [sp, #32]
  428806:	e5c7      	b.n	428398 <_svfprintf_r+0xf38>
  428808:	9b12      	ldr	r3, [sp, #72]	; 0x48
  42880a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  42880c:	f1c3 0301 	rsb	r3, r3, #1
  428810:	441a      	add	r2, r3
  428812:	4613      	mov	r3, r2
  428814:	e7d0      	b.n	4287b8 <_svfprintf_r+0x1358>
  428816:	f01b 0301 	ands.w	r3, fp, #1
  42881a:	9312      	str	r3, [sp, #72]	; 0x48
  42881c:	f47f aee2 	bne.w	4285e4 <_svfprintf_r+0x1184>
  428820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  428822:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  428826:	9308      	str	r3, [sp, #32]
  428828:	e5b6      	b.n	428398 <_svfprintf_r+0xf38>
  42882a:	bf00      	nop
  42882c:	66666667 	.word	0x66666667
  428830:	0042f72c 	.word	0x0042f72c
  428834:	0042f748 	.word	0x0042f748
  428838:	0042f700 	.word	0x0042f700
  42883c:	0042f6fc 	.word	0x0042f6fc
  428840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  428842:	b913      	cbnz	r3, 42884a <_svfprintf_r+0x13ea>
  428844:	f01b 0f01 	tst.w	fp, #1
  428848:	d002      	beq.n	428850 <_svfprintf_r+0x13f0>
  42884a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  42884c:	3301      	adds	r3, #1
  42884e:	e7d4      	b.n	4287fa <_svfprintf_r+0x139a>
  428850:	2301      	movs	r3, #1
  428852:	e73a      	b.n	4286ca <_svfprintf_r+0x126a>
  428854:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  428856:	f89a 3001 	ldrb.w	r3, [sl, #1]
  42885a:	6828      	ldr	r0, [r5, #0]
  42885c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  428860:	900a      	str	r0, [sp, #40]	; 0x28
  428862:	4628      	mov	r0, r5
  428864:	3004      	adds	r0, #4
  428866:	46a2      	mov	sl, r4
  428868:	900f      	str	r0, [sp, #60]	; 0x3c
  42886a:	f7fe be51 	b.w	427510 <_svfprintf_r+0xb0>
  42886e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  428872:	f7ff b867 	b.w	427944 <_svfprintf_r+0x4e4>
  428876:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  42887a:	f7ff ba15 	b.w	427ca8 <_svfprintf_r+0x848>
  42887e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  428882:	e6a6      	b.n	4285d2 <_svfprintf_r+0x1172>
  428884:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  428888:	f7ff b8eb 	b.w	427a62 <_svfprintf_r+0x602>
  42888c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  42888e:	230c      	movs	r3, #12
  428890:	6013      	str	r3, [r2, #0]
  428892:	f04f 33ff 	mov.w	r3, #4294967295
  428896:	9309      	str	r3, [sp, #36]	; 0x24
  428898:	f7fe bebd 	b.w	427616 <_svfprintf_r+0x1b6>
  42889c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4288a0:	f7ff b99a 	b.w	427bd8 <_svfprintf_r+0x778>
  4288a4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4288a8:	f7ff b976 	b.w	427b98 <_svfprintf_r+0x738>
  4288ac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4288b0:	f7ff b959 	b.w	427b66 <_svfprintf_r+0x706>
  4288b4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4288b8:	f7ff b912 	b.w	427ae0 <_svfprintf_r+0x680>

004288bc <__tzcalc_limits>:
  4288bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4288c0:	b083      	sub	sp, #12
  4288c2:	4605      	mov	r5, r0
  4288c4:	f002 fe6a 	bl	42b59c <__gettzinfo>
  4288c8:	f240 73b1 	movw	r3, #1969	; 0x7b1
  4288cc:	429d      	cmp	r5, r3
  4288ce:	f340 8093 	ble.w	4289f8 <__tzcalc_limits+0x13c>
  4288d2:	4c57      	ldr	r4, [pc, #348]	; (428a30 <__tzcalc_limits+0x174>)
  4288d4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 428a3c <__tzcalc_limits+0x180>
  4288d8:	6045      	str	r5, [r0, #4]
  4288da:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
  4288de:	18ee      	adds	r6, r5, r3
  4288e0:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
  4288e4:	fb84 3102 	smull	r3, r1, r4, r2
  4288e8:	10b7      	asrs	r7, r6, #2
  4288ea:	f240 1e6d 	movw	lr, #365	; 0x16d
  4288ee:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
  4288f2:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
  4288f6:	17d2      	asrs	r2, r2, #31
  4288f8:	eb05 030c 	add.w	r3, r5, ip
  4288fc:	fb0e 7606 	mla	r6, lr, r6, r7
  428900:	eba2 1261 	sub.w	r2, r2, r1, asr #5
  428904:	17ef      	asrs	r7, r5, #31
  428906:	fb84 c105 	smull	ip, r1, r4, r5
  42890a:	4416      	add	r6, r2
  42890c:	fb84 e403 	smull	lr, r4, r4, r3
  428910:	f44f 72c8 	mov.w	r2, #400	; 0x190
  428914:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
  428918:	17db      	asrs	r3, r3, #31
  42891a:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
  42891e:	fb02 5e1e 	mls	lr, r2, lr, r5
  428922:	ebc7 1761 	rsb	r7, r7, r1, asr #5
  428926:	2264      	movs	r2, #100	; 0x64
  428928:	441e      	add	r6, r3
  42892a:	f1be 0f00 	cmp.w	lr, #0
  42892e:	bf0c      	ite	eq
  428930:	2330      	moveq	r3, #48	; 0x30
  428932:	2300      	movne	r3, #0
  428934:	fb02 5717 	mls	r7, r2, r7, r5
  428938:	9301      	str	r3, [sp, #4]
  42893a:	f005 0503 	and.w	r5, r5, #3
  42893e:	4604      	mov	r4, r0
  428940:	f100 0c38 	add.w	ip, r0, #56	; 0x38
  428944:	7a23      	ldrb	r3, [r4, #8]
  428946:	2b4a      	cmp	r3, #74	; 0x4a
  428948:	d05a      	beq.n	428a00 <__tzcalc_limits+0x144>
  42894a:	2b44      	cmp	r3, #68	; 0x44
  42894c:	d068      	beq.n	428a20 <__tzcalc_limits+0x164>
  42894e:	2d00      	cmp	r5, #0
  428950:	d04b      	beq.n	4289ea <__tzcalc_limits+0x12e>
  428952:	f8dd 9004 	ldr.w	r9, [sp, #4]
  428956:	68e3      	ldr	r3, [r4, #12]
  428958:	4a36      	ldr	r2, [pc, #216]	; (428a34 <__tzcalc_limits+0x178>)
  42895a:	2b01      	cmp	r3, #1
  42895c:	4491      	add	r9, r2
  42895e:	dd62      	ble.n	428a26 <__tzcalc_limits+0x16a>
  428960:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
  428964:	f1ab 0b02 	sub.w	fp, fp, #2
  428968:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
  42896c:	eb09 0a0b 	add.w	sl, r9, fp
  428970:	f1a9 0304 	sub.w	r3, r9, #4
  428974:	4632      	mov	r2, r6
  428976:	f853 1f04 	ldr.w	r1, [r3, #4]!
  42897a:	459a      	cmp	sl, r3
  42897c:	440a      	add	r2, r1
  42897e:	d1fa      	bne.n	428976 <__tzcalc_limits+0xba>
  428980:	f10b 0b04 	add.w	fp, fp, #4
  428984:	4b2c      	ldr	r3, [pc, #176]	; (428a38 <__tzcalc_limits+0x17c>)
  428986:	f859 900b 	ldr.w	r9, [r9, fp]
  42898a:	1d11      	adds	r1, r2, #4
  42898c:	fb83 a301 	smull	sl, r3, r3, r1
  428990:	440b      	add	r3, r1
  428992:	ea4f 7ae1 	mov.w	sl, r1, asr #31
  428996:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
  42899a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
  42899e:	6963      	ldr	r3, [r4, #20]
  4289a0:	eba1 010a 	sub.w	r1, r1, sl
  4289a4:	1a59      	subs	r1, r3, r1
  4289a6:	6923      	ldr	r3, [r4, #16]
  4289a8:	f103 33ff 	add.w	r3, r3, #4294967295
  4289ac:	bf48      	it	mi
  4289ae:	3107      	addmi	r1, #7
  4289b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  4289b4:	440b      	add	r3, r1
  4289b6:	454b      	cmp	r3, r9
  4289b8:	db02      	blt.n	4289c0 <__tzcalc_limits+0x104>
  4289ba:	3b07      	subs	r3, #7
  4289bc:	454b      	cmp	r3, r9
  4289be:	dafc      	bge.n	4289ba <__tzcalc_limits+0xfe>
  4289c0:	441a      	add	r2, r3
  4289c2:	69a1      	ldr	r1, [r4, #24]
  4289c4:	6a23      	ldr	r3, [r4, #32]
  4289c6:	fb08 1102 	mla	r1, r8, r2, r1
  4289ca:	440b      	add	r3, r1
  4289cc:	f844 3f1c 	str.w	r3, [r4, #28]!
  4289d0:	45a4      	cmp	ip, r4
  4289d2:	d1b7      	bne.n	428944 <__tzcalc_limits+0x88>
  4289d4:	69c3      	ldr	r3, [r0, #28]
  4289d6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  4289d8:	4293      	cmp	r3, r2
  4289da:	bfac      	ite	ge
  4289dc:	2300      	movge	r3, #0
  4289de:	2301      	movlt	r3, #1
  4289e0:	6003      	str	r3, [r0, #0]
  4289e2:	2001      	movs	r0, #1
  4289e4:	b003      	add	sp, #12
  4289e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4289ea:	9b01      	ldr	r3, [sp, #4]
  4289ec:	2f00      	cmp	r7, #0
  4289ee:	bf0c      	ite	eq
  4289f0:	4699      	moveq	r9, r3
  4289f2:	f04f 0930 	movne.w	r9, #48	; 0x30
  4289f6:	e7ae      	b.n	428956 <__tzcalc_limits+0x9a>
  4289f8:	2000      	movs	r0, #0
  4289fa:	b003      	add	sp, #12
  4289fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428a00:	6962      	ldr	r2, [r4, #20]
  428a02:	18b1      	adds	r1, r6, r2
  428a04:	b93d      	cbnz	r5, 428a16 <__tzcalc_limits+0x15a>
  428a06:	b137      	cbz	r7, 428a16 <__tzcalc_limits+0x15a>
  428a08:	2a3b      	cmp	r2, #59	; 0x3b
  428a0a:	bfd4      	ite	le
  428a0c:	2200      	movle	r2, #0
  428a0e:	2201      	movgt	r2, #1
  428a10:	440a      	add	r2, r1
  428a12:	3a01      	subs	r2, #1
  428a14:	e7d5      	b.n	4289c2 <__tzcalc_limits+0x106>
  428a16:	f1be 0f00 	cmp.w	lr, #0
  428a1a:	d0f5      	beq.n	428a08 <__tzcalc_limits+0x14c>
  428a1c:	2200      	movs	r2, #0
  428a1e:	e7f7      	b.n	428a10 <__tzcalc_limits+0x154>
  428a20:	6962      	ldr	r2, [r4, #20]
  428a22:	4432      	add	r2, r6
  428a24:	e7cd      	b.n	4289c2 <__tzcalc_limits+0x106>
  428a26:	4632      	mov	r2, r6
  428a28:	f04f 0b00 	mov.w	fp, #0
  428a2c:	e7aa      	b.n	428984 <__tzcalc_limits+0xc8>
  428a2e:	bf00      	nop
  428a30:	51eb851f 	.word	0x51eb851f
  428a34:	0042f694 	.word	0x0042f694
  428a38:	92492493 	.word	0x92492493
  428a3c:	00015180 	.word	0x00015180

00428a40 <__tz_lock>:
  428a40:	4801      	ldr	r0, [pc, #4]	; (428a48 <__tz_lock+0x8>)
  428a42:	f002 becb 	b.w	42b7dc <__retarget_lock_acquire>
  428a46:	bf00      	nop
  428a48:	20001730 	.word	0x20001730

00428a4c <__tz_unlock>:
  428a4c:	4801      	ldr	r0, [pc, #4]	; (428a54 <__tz_unlock+0x8>)
  428a4e:	f002 bec9 	b.w	42b7e4 <__retarget_lock_release>
  428a52:	bf00      	nop
  428a54:	20001730 	.word	0x20001730

00428a58 <_tzset_unlocked>:
  428a58:	4b01      	ldr	r3, [pc, #4]	; (428a60 <_tzset_unlocked+0x8>)
  428a5a:	6818      	ldr	r0, [r3, #0]
  428a5c:	f000 b802 	b.w	428a64 <_tzset_unlocked_r>
  428a60:	200000c8 	.word	0x200000c8

00428a64 <_tzset_unlocked_r>:
  428a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  428a68:	b08b      	sub	sp, #44	; 0x2c
  428a6a:	4607      	mov	r7, r0
  428a6c:	f002 fd96 	bl	42b59c <__gettzinfo>
  428a70:	49bb      	ldr	r1, [pc, #748]	; (428d60 <_tzset_unlocked_r+0x2fc>)
  428a72:	4dbc      	ldr	r5, [pc, #752]	; (428d64 <_tzset_unlocked_r+0x300>)
  428a74:	4606      	mov	r6, r0
  428a76:	4638      	mov	r0, r7
  428a78:	f002 fd88 	bl	42b58c <_getenv_r>
  428a7c:	4604      	mov	r4, r0
  428a7e:	2800      	cmp	r0, #0
  428a80:	f000 80f7 	beq.w	428c72 <_tzset_unlocked_r+0x20e>
  428a84:	6829      	ldr	r1, [r5, #0]
  428a86:	b131      	cbz	r1, 428a96 <_tzset_unlocked_r+0x32>
  428a88:	f003 ffee 	bl	42ca68 <strcmp>
  428a8c:	b910      	cbnz	r0, 428a94 <_tzset_unlocked_r+0x30>
  428a8e:	b00b      	add	sp, #44	; 0x2c
  428a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428a94:	6829      	ldr	r1, [r5, #0]
  428a96:	4608      	mov	r0, r1
  428a98:	f002 ff28 	bl	42b8ec <free>
  428a9c:	4620      	mov	r0, r4
  428a9e:	f004 f9af 	bl	42ce00 <strlen>
  428aa2:	1c41      	adds	r1, r0, #1
  428aa4:	4638      	mov	r0, r7
  428aa6:	f002 ff29 	bl	42b8fc <_malloc_r>
  428aaa:	6028      	str	r0, [r5, #0]
  428aac:	b110      	cbz	r0, 428ab4 <_tzset_unlocked_r+0x50>
  428aae:	4621      	mov	r1, r4
  428ab0:	f004 f944 	bl	42cd3c <strcpy>
  428ab4:	7823      	ldrb	r3, [r4, #0]
  428ab6:	4aac      	ldr	r2, [pc, #688]	; (428d68 <_tzset_unlocked_r+0x304>)
  428ab8:	49ac      	ldr	r1, [pc, #688]	; (428d6c <_tzset_unlocked_r+0x308>)
  428aba:	2b3a      	cmp	r3, #58	; 0x3a
  428abc:	bf08      	it	eq
  428abe:	3401      	addeq	r4, #1
  428ac0:	ad08      	add	r5, sp, #32
  428ac2:	462b      	mov	r3, r5
  428ac4:	4620      	mov	r0, r4
  428ac6:	f003 ff55 	bl	42c974 <siscanf>
  428aca:	2800      	cmp	r0, #0
  428acc:	dddf      	ble.n	428a8e <_tzset_unlocked_r+0x2a>
  428ace:	9b08      	ldr	r3, [sp, #32]
  428ad0:	5ce2      	ldrb	r2, [r4, r3]
  428ad2:	2a2d      	cmp	r2, #45	; 0x2d
  428ad4:	441c      	add	r4, r3
  428ad6:	f000 80c8 	beq.w	428c6a <_tzset_unlocked_r+0x206>
  428ada:	2a2b      	cmp	r2, #43	; 0x2b
  428adc:	bf08      	it	eq
  428ade:	3401      	addeq	r4, #1
  428ae0:	f04f 0801 	mov.w	r8, #1
  428ae4:	ab06      	add	r3, sp, #24
  428ae6:	9302      	str	r3, [sp, #8]
  428ae8:	f10d 0316 	add.w	r3, sp, #22
  428aec:	2700      	movs	r7, #0
  428aee:	9300      	str	r3, [sp, #0]
  428af0:	9503      	str	r5, [sp, #12]
  428af2:	9501      	str	r5, [sp, #4]
  428af4:	aa05      	add	r2, sp, #20
  428af6:	462b      	mov	r3, r5
  428af8:	499d      	ldr	r1, [pc, #628]	; (428d70 <_tzset_unlocked_r+0x30c>)
  428afa:	f8ad 7016 	strh.w	r7, [sp, #22]
  428afe:	4620      	mov	r0, r4
  428b00:	f8ad 7018 	strh.w	r7, [sp, #24]
  428b04:	f003 ff36 	bl	42c974 <siscanf>
  428b08:	42b8      	cmp	r0, r7
  428b0a:	ddc0      	ble.n	428a8e <_tzset_unlocked_r+0x2a>
  428b0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  428b10:	f8bd 1018 	ldrh.w	r1, [sp, #24]
  428b14:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  428b18:	9808      	ldr	r0, [sp, #32]
  428b1a:	f8df a26c 	ldr.w	sl, [pc, #620]	; 428d88 <_tzset_unlocked_r+0x324>
  428b1e:	f8df 925c 	ldr.w	r9, [pc, #604]	; 428d7c <_tzset_unlocked_r+0x318>
  428b22:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  428b26:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  428b2a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
  428b2e:	fb01 3302 	mla	r3, r1, r2, r3
  428b32:	fb08 f303 	mul.w	r3, r8, r3
  428b36:	6233      	str	r3, [r6, #32]
  428b38:	4404      	add	r4, r0
  428b3a:	4b8b      	ldr	r3, [pc, #556]	; (428d68 <_tzset_unlocked_r+0x304>)
  428b3c:	f8c9 3000 	str.w	r3, [r9]
  428b40:	4620      	mov	r0, r4
  428b42:	4652      	mov	r2, sl
  428b44:	4989      	ldr	r1, [pc, #548]	; (428d6c <_tzset_unlocked_r+0x308>)
  428b46:	462b      	mov	r3, r5
  428b48:	f003 ff14 	bl	42c974 <siscanf>
  428b4c:	42b8      	cmp	r0, r7
  428b4e:	f340 8082 	ble.w	428c56 <_tzset_unlocked_r+0x1f2>
  428b52:	9808      	ldr	r0, [sp, #32]
  428b54:	f8c9 a004 	str.w	sl, [r9, #4]
  428b58:	5c23      	ldrb	r3, [r4, r0]
  428b5a:	2b2d      	cmp	r3, #45	; 0x2d
  428b5c:	4404      	add	r4, r0
  428b5e:	f000 8095 	beq.w	428c8c <_tzset_unlocked_r+0x228>
  428b62:	2b2b      	cmp	r3, #43	; 0x2b
  428b64:	bf08      	it	eq
  428b66:	3401      	addeq	r4, #1
  428b68:	f04f 0801 	mov.w	r8, #1
  428b6c:	ab06      	add	r3, sp, #24
  428b6e:	9302      	str	r3, [sp, #8]
  428b70:	f10d 0316 	add.w	r3, sp, #22
  428b74:	2700      	movs	r7, #0
  428b76:	9300      	str	r3, [sp, #0]
  428b78:	9503      	str	r5, [sp, #12]
  428b7a:	9501      	str	r5, [sp, #4]
  428b7c:	462b      	mov	r3, r5
  428b7e:	aa05      	add	r2, sp, #20
  428b80:	497b      	ldr	r1, [pc, #492]	; (428d70 <_tzset_unlocked_r+0x30c>)
  428b82:	f8ad 7014 	strh.w	r7, [sp, #20]
  428b86:	4620      	mov	r0, r4
  428b88:	f8ad 7016 	strh.w	r7, [sp, #22]
  428b8c:	f8ad 7018 	strh.w	r7, [sp, #24]
  428b90:	9708      	str	r7, [sp, #32]
  428b92:	f003 feef 	bl	42c974 <siscanf>
  428b96:	42b8      	cmp	r0, r7
  428b98:	dd7c      	ble.n	428c94 <_tzset_unlocked_r+0x230>
  428b9a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  428b9e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
  428ba2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  428ba6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  428baa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  428bae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
  428bb2:	fb01 3302 	mla	r3, r1, r2, r3
  428bb6:	fb08 f303 	mul.w	r3, r8, r3
  428bba:	63f3      	str	r3, [r6, #60]	; 0x3c
  428bbc:	9b08      	ldr	r3, [sp, #32]
  428bbe:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 428d8c <_tzset_unlocked_r+0x328>
  428bc2:	441c      	add	r4, r3
  428bc4:	46b0      	mov	r8, r6
  428bc6:	f04f 0a00 	mov.w	sl, #0
  428bca:	7827      	ldrb	r7, [r4, #0]
  428bcc:	2f2c      	cmp	r7, #44	; 0x2c
  428bce:	bf04      	itt	eq
  428bd0:	7867      	ldrbeq	r7, [r4, #1]
  428bd2:	3401      	addeq	r4, #1
  428bd4:	2f4d      	cmp	r7, #77	; 0x4d
  428bd6:	d062      	beq.n	428c9e <_tzset_unlocked_r+0x23a>
  428bd8:	2f4a      	cmp	r7, #74	; 0x4a
  428bda:	bf08      	it	eq
  428bdc:	3401      	addeq	r4, #1
  428bde:	f04f 020a 	mov.w	r2, #10
  428be2:	a909      	add	r1, sp, #36	; 0x24
  428be4:	4620      	mov	r0, r4
  428be6:	bf18      	it	ne
  428be8:	2744      	movne	r7, #68	; 0x44
  428bea:	f004 fa7f 	bl	42d0ec <strtoul>
  428bee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  428bf2:	f8ad 001e 	strh.w	r0, [sp, #30]
  428bf6:	454c      	cmp	r4, r9
  428bf8:	f000 809c 	beq.w	428d34 <_tzset_unlocked_r+0x2d0>
  428bfc:	b280      	uxth	r0, r0
  428bfe:	f8c8 0014 	str.w	r0, [r8, #20]
  428c02:	f888 7008 	strb.w	r7, [r8, #8]
  428c06:	2400      	movs	r4, #0
  428c08:	2302      	movs	r3, #2
  428c0a:	f8ad 3014 	strh.w	r3, [sp, #20]
  428c0e:	f8ad 4016 	strh.w	r4, [sp, #22]
  428c12:	f8ad 4018 	strh.w	r4, [sp, #24]
  428c16:	9408      	str	r4, [sp, #32]
  428c18:	f899 3000 	ldrb.w	r3, [r9]
  428c1c:	2b2f      	cmp	r3, #47	; 0x2f
  428c1e:	d06c      	beq.n	428cfa <_tzset_unlocked_r+0x296>
  428c20:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
  428c24:	f10a 0a01 	add.w	sl, sl, #1
  428c28:	f1ba 0f02 	cmp.w	sl, #2
  428c2c:	f8c8 3018 	str.w	r3, [r8, #24]
  428c30:	444c      	add	r4, r9
  428c32:	f108 081c 	add.w	r8, r8, #28
  428c36:	d1c8      	bne.n	428bca <_tzset_unlocked_r+0x166>
  428c38:	6870      	ldr	r0, [r6, #4]
  428c3a:	f7ff fe3f 	bl	4288bc <__tzcalc_limits>
  428c3e:	6a32      	ldr	r2, [r6, #32]
  428c40:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  428c42:	484c      	ldr	r0, [pc, #304]	; (428d74 <_tzset_unlocked_r+0x310>)
  428c44:	494c      	ldr	r1, [pc, #304]	; (428d78 <_tzset_unlocked_r+0x314>)
  428c46:	1a9b      	subs	r3, r3, r2
  428c48:	bf18      	it	ne
  428c4a:	2301      	movne	r3, #1
  428c4c:	6003      	str	r3, [r0, #0]
  428c4e:	600a      	str	r2, [r1, #0]
  428c50:	b00b      	add	sp, #44	; 0x2c
  428c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428c56:	4948      	ldr	r1, [pc, #288]	; (428d78 <_tzset_unlocked_r+0x314>)
  428c58:	4a46      	ldr	r2, [pc, #280]	; (428d74 <_tzset_unlocked_r+0x310>)
  428c5a:	6a30      	ldr	r0, [r6, #32]
  428c5c:	f8d9 3000 	ldr.w	r3, [r9]
  428c60:	6008      	str	r0, [r1, #0]
  428c62:	6017      	str	r7, [r2, #0]
  428c64:	f8c9 3004 	str.w	r3, [r9, #4]
  428c68:	e711      	b.n	428a8e <_tzset_unlocked_r+0x2a>
  428c6a:	3401      	adds	r4, #1
  428c6c:	f04f 38ff 	mov.w	r8, #4294967295
  428c70:	e738      	b.n	428ae4 <_tzset_unlocked_r+0x80>
  428c72:	4b42      	ldr	r3, [pc, #264]	; (428d7c <_tzset_unlocked_r+0x318>)
  428c74:	493f      	ldr	r1, [pc, #252]	; (428d74 <_tzset_unlocked_r+0x310>)
  428c76:	4e40      	ldr	r6, [pc, #256]	; (428d78 <_tzset_unlocked_r+0x314>)
  428c78:	4a41      	ldr	r2, [pc, #260]	; (428d80 <_tzset_unlocked_r+0x31c>)
  428c7a:	6828      	ldr	r0, [r5, #0]
  428c7c:	6034      	str	r4, [r6, #0]
  428c7e:	600c      	str	r4, [r1, #0]
  428c80:	601a      	str	r2, [r3, #0]
  428c82:	605a      	str	r2, [r3, #4]
  428c84:	f002 fe32 	bl	42b8ec <free>
  428c88:	602c      	str	r4, [r5, #0]
  428c8a:	e700      	b.n	428a8e <_tzset_unlocked_r+0x2a>
  428c8c:	3401      	adds	r4, #1
  428c8e:	f04f 38ff 	mov.w	r8, #4294967295
  428c92:	e76b      	b.n	428b6c <_tzset_unlocked_r+0x108>
  428c94:	6a33      	ldr	r3, [r6, #32]
  428c96:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
  428c9a:	63f3      	str	r3, [r6, #60]	; 0x3c
  428c9c:	e78e      	b.n	428bbc <_tzset_unlocked_r+0x158>
  428c9e:	f10d 021e 	add.w	r2, sp, #30
  428ca2:	ab07      	add	r3, sp, #28
  428ca4:	9202      	str	r2, [sp, #8]
  428ca6:	9300      	str	r3, [sp, #0]
  428ca8:	9503      	str	r5, [sp, #12]
  428caa:	9501      	str	r5, [sp, #4]
  428cac:	462b      	mov	r3, r5
  428cae:	f10d 021a 	add.w	r2, sp, #26
  428cb2:	4659      	mov	r1, fp
  428cb4:	4620      	mov	r0, r4
  428cb6:	f003 fe5d 	bl	42c974 <siscanf>
  428cba:	2803      	cmp	r0, #3
  428cbc:	f47f aee7 	bne.w	428a8e <_tzset_unlocked_r+0x2a>
  428cc0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  428cc4:	1e5a      	subs	r2, r3, #1
  428cc6:	2a0b      	cmp	r2, #11
  428cc8:	f63f aee1 	bhi.w	428a8e <_tzset_unlocked_r+0x2a>
  428ccc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  428cd0:	1e51      	subs	r1, r2, #1
  428cd2:	2904      	cmp	r1, #4
  428cd4:	f63f aedb 	bhi.w	428a8e <_tzset_unlocked_r+0x2a>
  428cd8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
  428cdc:	2906      	cmp	r1, #6
  428cde:	f63f aed6 	bhi.w	428a8e <_tzset_unlocked_r+0x2a>
  428ce2:	f888 7008 	strb.w	r7, [r8, #8]
  428ce6:	f8c8 300c 	str.w	r3, [r8, #12]
  428cea:	f8c8 2010 	str.w	r2, [r8, #16]
  428cee:	f8c8 1014 	str.w	r1, [r8, #20]
  428cf2:	9b08      	ldr	r3, [sp, #32]
  428cf4:	eb04 0903 	add.w	r9, r4, r3
  428cf8:	e785      	b.n	428c06 <_tzset_unlocked_r+0x1a2>
  428cfa:	ab06      	add	r3, sp, #24
  428cfc:	9302      	str	r3, [sp, #8]
  428cfe:	f10d 0316 	add.w	r3, sp, #22
  428d02:	9300      	str	r3, [sp, #0]
  428d04:	aa05      	add	r2, sp, #20
  428d06:	462b      	mov	r3, r5
  428d08:	491e      	ldr	r1, [pc, #120]	; (428d84 <_tzset_unlocked_r+0x320>)
  428d0a:	9503      	str	r5, [sp, #12]
  428d0c:	9501      	str	r5, [sp, #4]
  428d0e:	4648      	mov	r0, r9
  428d10:	f003 fe30 	bl	42c974 <siscanf>
  428d14:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  428d18:	f8bd 1018 	ldrh.w	r1, [sp, #24]
  428d1c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  428d20:	9c08      	ldr	r4, [sp, #32]
  428d22:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
  428d26:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  428d2a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
  428d2e:	fb01 2303 	mla	r3, r1, r3, r2
  428d32:	e777      	b.n	428c24 <_tzset_unlocked_r+0x1c0>
  428d34:	f1ba 0f00 	cmp.w	sl, #0
  428d38:	d009      	beq.n	428d4e <_tzset_unlocked_r+0x2ea>
  428d3a:	224d      	movs	r2, #77	; 0x4d
  428d3c:	230b      	movs	r3, #11
  428d3e:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
  428d42:	62b3      	str	r3, [r6, #40]	; 0x28
  428d44:	2201      	movs	r2, #1
  428d46:	2300      	movs	r3, #0
  428d48:	62f2      	str	r2, [r6, #44]	; 0x2c
  428d4a:	6333      	str	r3, [r6, #48]	; 0x30
  428d4c:	e75b      	b.n	428c06 <_tzset_unlocked_r+0x1a2>
  428d4e:	234d      	movs	r3, #77	; 0x4d
  428d50:	2203      	movs	r2, #3
  428d52:	7233      	strb	r3, [r6, #8]
  428d54:	2302      	movs	r3, #2
  428d56:	f8c6 a014 	str.w	sl, [r6, #20]
  428d5a:	60f2      	str	r2, [r6, #12]
  428d5c:	6133      	str	r3, [r6, #16]
  428d5e:	e752      	b.n	428c06 <_tzset_unlocked_r+0x1a2>
  428d60:	0042f758 	.word	0x0042f758
  428d64:	20001430 	.word	0x20001430
  428d68:	20001424 	.word	0x20001424
  428d6c:	0042f760 	.word	0x0042f760
  428d70:	0042f770 	.word	0x0042f770
  428d74:	20001434 	.word	0x20001434
  428d78:	20001438 	.word	0x20001438
  428d7c:	200004f8 	.word	0x200004f8
  428d80:	0042f75c 	.word	0x0042f75c
  428d84:	0042f798 	.word	0x0042f798
  428d88:	20001418 	.word	0x20001418
  428d8c:	0042f784 	.word	0x0042f784

00428d90 <__sprint_r.part.0>:
  428d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  428d94:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  428d96:	049c      	lsls	r4, r3, #18
  428d98:	4693      	mov	fp, r2
  428d9a:	d52f      	bpl.n	428dfc <__sprint_r.part.0+0x6c>
  428d9c:	6893      	ldr	r3, [r2, #8]
  428d9e:	6812      	ldr	r2, [r2, #0]
  428da0:	b353      	cbz	r3, 428df8 <__sprint_r.part.0+0x68>
  428da2:	460e      	mov	r6, r1
  428da4:	4607      	mov	r7, r0
  428da6:	f102 0908 	add.w	r9, r2, #8
  428daa:	e919 0420 	ldmdb	r9, {r5, sl}
  428dae:	ea5f 089a 	movs.w	r8, sl, lsr #2
  428db2:	d017      	beq.n	428de4 <__sprint_r.part.0+0x54>
  428db4:	3d04      	subs	r5, #4
  428db6:	2400      	movs	r4, #0
  428db8:	e001      	b.n	428dbe <__sprint_r.part.0+0x2e>
  428dba:	45a0      	cmp	r8, r4
  428dbc:	d010      	beq.n	428de0 <__sprint_r.part.0+0x50>
  428dbe:	4632      	mov	r2, r6
  428dc0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  428dc4:	4638      	mov	r0, r7
  428dc6:	f002 f897 	bl	42aef8 <_fputwc_r>
  428dca:	1c43      	adds	r3, r0, #1
  428dcc:	f104 0401 	add.w	r4, r4, #1
  428dd0:	d1f3      	bne.n	428dba <__sprint_r.part.0+0x2a>
  428dd2:	2300      	movs	r3, #0
  428dd4:	f8cb 3008 	str.w	r3, [fp, #8]
  428dd8:	f8cb 3004 	str.w	r3, [fp, #4]
  428ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428de0:	f8db 3008 	ldr.w	r3, [fp, #8]
  428de4:	f02a 0a03 	bic.w	sl, sl, #3
  428de8:	eba3 030a 	sub.w	r3, r3, sl
  428dec:	f8cb 3008 	str.w	r3, [fp, #8]
  428df0:	f109 0908 	add.w	r9, r9, #8
  428df4:	2b00      	cmp	r3, #0
  428df6:	d1d8      	bne.n	428daa <__sprint_r.part.0+0x1a>
  428df8:	2000      	movs	r0, #0
  428dfa:	e7ea      	b.n	428dd2 <__sprint_r.part.0+0x42>
  428dfc:	f002 f9e6 	bl	42b1cc <__sfvwrite_r>
  428e00:	2300      	movs	r3, #0
  428e02:	f8cb 3008 	str.w	r3, [fp, #8]
  428e06:	f8cb 3004 	str.w	r3, [fp, #4]
  428e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428e0e:	bf00      	nop

00428e10 <_vfiprintf_r>:
  428e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  428e14:	b0ad      	sub	sp, #180	; 0xb4
  428e16:	461d      	mov	r5, r3
  428e18:	468b      	mov	fp, r1
  428e1a:	4690      	mov	r8, r2
  428e1c:	9307      	str	r3, [sp, #28]
  428e1e:	9006      	str	r0, [sp, #24]
  428e20:	b118      	cbz	r0, 428e2a <_vfiprintf_r+0x1a>
  428e22:	6b83      	ldr	r3, [r0, #56]	; 0x38
  428e24:	2b00      	cmp	r3, #0
  428e26:	f000 80f3 	beq.w	429010 <_vfiprintf_r+0x200>
  428e2a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  428e2e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  428e32:	07df      	lsls	r7, r3, #31
  428e34:	b281      	uxth	r1, r0
  428e36:	d402      	bmi.n	428e3e <_vfiprintf_r+0x2e>
  428e38:	058e      	lsls	r6, r1, #22
  428e3a:	f140 80fc 	bpl.w	429036 <_vfiprintf_r+0x226>
  428e3e:	048c      	lsls	r4, r1, #18
  428e40:	d40a      	bmi.n	428e58 <_vfiprintf_r+0x48>
  428e42:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  428e46:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  428e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  428e4e:	f8ab 100c 	strh.w	r1, [fp, #12]
  428e52:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  428e56:	b289      	uxth	r1, r1
  428e58:	0708      	lsls	r0, r1, #28
  428e5a:	f140 80b3 	bpl.w	428fc4 <_vfiprintf_r+0x1b4>
  428e5e:	f8db 3010 	ldr.w	r3, [fp, #16]
  428e62:	2b00      	cmp	r3, #0
  428e64:	f000 80ae 	beq.w	428fc4 <_vfiprintf_r+0x1b4>
  428e68:	f001 031a 	and.w	r3, r1, #26
  428e6c:	2b0a      	cmp	r3, #10
  428e6e:	f000 80b5 	beq.w	428fdc <_vfiprintf_r+0x1cc>
  428e72:	2300      	movs	r3, #0
  428e74:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  428e78:	930b      	str	r3, [sp, #44]	; 0x2c
  428e7a:	9311      	str	r3, [sp, #68]	; 0x44
  428e7c:	9310      	str	r3, [sp, #64]	; 0x40
  428e7e:	9303      	str	r3, [sp, #12]
  428e80:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  428e84:	46ca      	mov	sl, r9
  428e86:	f8cd b010 	str.w	fp, [sp, #16]
  428e8a:	f898 3000 	ldrb.w	r3, [r8]
  428e8e:	4644      	mov	r4, r8
  428e90:	b1fb      	cbz	r3, 428ed2 <_vfiprintf_r+0xc2>
  428e92:	2b25      	cmp	r3, #37	; 0x25
  428e94:	d102      	bne.n	428e9c <_vfiprintf_r+0x8c>
  428e96:	e01c      	b.n	428ed2 <_vfiprintf_r+0xc2>
  428e98:	2b25      	cmp	r3, #37	; 0x25
  428e9a:	d003      	beq.n	428ea4 <_vfiprintf_r+0x94>
  428e9c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  428ea0:	2b00      	cmp	r3, #0
  428ea2:	d1f9      	bne.n	428e98 <_vfiprintf_r+0x88>
  428ea4:	eba4 0508 	sub.w	r5, r4, r8
  428ea8:	b19d      	cbz	r5, 428ed2 <_vfiprintf_r+0xc2>
  428eaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  428eac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428eae:	f8ca 8000 	str.w	r8, [sl]
  428eb2:	3301      	adds	r3, #1
  428eb4:	442a      	add	r2, r5
  428eb6:	2b07      	cmp	r3, #7
  428eb8:	f8ca 5004 	str.w	r5, [sl, #4]
  428ebc:	9211      	str	r2, [sp, #68]	; 0x44
  428ebe:	9310      	str	r3, [sp, #64]	; 0x40
  428ec0:	dd7a      	ble.n	428fb8 <_vfiprintf_r+0x1a8>
  428ec2:	2a00      	cmp	r2, #0
  428ec4:	f040 84b0 	bne.w	429828 <_vfiprintf_r+0xa18>
  428ec8:	9b03      	ldr	r3, [sp, #12]
  428eca:	9210      	str	r2, [sp, #64]	; 0x40
  428ecc:	442b      	add	r3, r5
  428ece:	46ca      	mov	sl, r9
  428ed0:	9303      	str	r3, [sp, #12]
  428ed2:	7823      	ldrb	r3, [r4, #0]
  428ed4:	2b00      	cmp	r3, #0
  428ed6:	f000 83e0 	beq.w	42969a <_vfiprintf_r+0x88a>
  428eda:	2000      	movs	r0, #0
  428edc:	f04f 0300 	mov.w	r3, #0
  428ee0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  428ee4:	f104 0801 	add.w	r8, r4, #1
  428ee8:	7862      	ldrb	r2, [r4, #1]
  428eea:	4605      	mov	r5, r0
  428eec:	4606      	mov	r6, r0
  428eee:	4603      	mov	r3, r0
  428ef0:	f04f 34ff 	mov.w	r4, #4294967295
  428ef4:	f108 0801 	add.w	r8, r8, #1
  428ef8:	f1a2 0120 	sub.w	r1, r2, #32
  428efc:	2958      	cmp	r1, #88	; 0x58
  428efe:	f200 82de 	bhi.w	4294be <_vfiprintf_r+0x6ae>
  428f02:	e8df f011 	tbh	[pc, r1, lsl #1]
  428f06:	0221      	.short	0x0221
  428f08:	02dc02dc 	.word	0x02dc02dc
  428f0c:	02dc0229 	.word	0x02dc0229
  428f10:	02dc02dc 	.word	0x02dc02dc
  428f14:	02dc02dc 	.word	0x02dc02dc
  428f18:	028902dc 	.word	0x028902dc
  428f1c:	02dc0295 	.word	0x02dc0295
  428f20:	02bd00a2 	.word	0x02bd00a2
  428f24:	019f02dc 	.word	0x019f02dc
  428f28:	01a401a4 	.word	0x01a401a4
  428f2c:	01a401a4 	.word	0x01a401a4
  428f30:	01a401a4 	.word	0x01a401a4
  428f34:	01a401a4 	.word	0x01a401a4
  428f38:	02dc01a4 	.word	0x02dc01a4
  428f3c:	02dc02dc 	.word	0x02dc02dc
  428f40:	02dc02dc 	.word	0x02dc02dc
  428f44:	02dc02dc 	.word	0x02dc02dc
  428f48:	02dc02dc 	.word	0x02dc02dc
  428f4c:	01b202dc 	.word	0x01b202dc
  428f50:	02dc02dc 	.word	0x02dc02dc
  428f54:	02dc02dc 	.word	0x02dc02dc
  428f58:	02dc02dc 	.word	0x02dc02dc
  428f5c:	02dc02dc 	.word	0x02dc02dc
  428f60:	02dc02dc 	.word	0x02dc02dc
  428f64:	02dc0197 	.word	0x02dc0197
  428f68:	02dc02dc 	.word	0x02dc02dc
  428f6c:	02dc02dc 	.word	0x02dc02dc
  428f70:	02dc019b 	.word	0x02dc019b
  428f74:	025302dc 	.word	0x025302dc
  428f78:	02dc02dc 	.word	0x02dc02dc
  428f7c:	02dc02dc 	.word	0x02dc02dc
  428f80:	02dc02dc 	.word	0x02dc02dc
  428f84:	02dc02dc 	.word	0x02dc02dc
  428f88:	02dc02dc 	.word	0x02dc02dc
  428f8c:	021b025a 	.word	0x021b025a
  428f90:	02dc02dc 	.word	0x02dc02dc
  428f94:	026e02dc 	.word	0x026e02dc
  428f98:	02dc021b 	.word	0x02dc021b
  428f9c:	027302dc 	.word	0x027302dc
  428fa0:	01f502dc 	.word	0x01f502dc
  428fa4:	02090182 	.word	0x02090182
  428fa8:	02dc02d7 	.word	0x02dc02d7
  428fac:	02dc029a 	.word	0x02dc029a
  428fb0:	02dc00a7 	.word	0x02dc00a7
  428fb4:	022e02dc 	.word	0x022e02dc
  428fb8:	f10a 0a08 	add.w	sl, sl, #8
  428fbc:	9b03      	ldr	r3, [sp, #12]
  428fbe:	442b      	add	r3, r5
  428fc0:	9303      	str	r3, [sp, #12]
  428fc2:	e786      	b.n	428ed2 <_vfiprintf_r+0xc2>
  428fc4:	4659      	mov	r1, fp
  428fc6:	9806      	ldr	r0, [sp, #24]
  428fc8:	f000 fdac 	bl	429b24 <__swsetup_r>
  428fcc:	bb18      	cbnz	r0, 429016 <_vfiprintf_r+0x206>
  428fce:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  428fd2:	f001 031a 	and.w	r3, r1, #26
  428fd6:	2b0a      	cmp	r3, #10
  428fd8:	f47f af4b 	bne.w	428e72 <_vfiprintf_r+0x62>
  428fdc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  428fe0:	2b00      	cmp	r3, #0
  428fe2:	f6ff af46 	blt.w	428e72 <_vfiprintf_r+0x62>
  428fe6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  428fea:	07db      	lsls	r3, r3, #31
  428fec:	d405      	bmi.n	428ffa <_vfiprintf_r+0x1ea>
  428fee:	058f      	lsls	r7, r1, #22
  428ff0:	d403      	bmi.n	428ffa <_vfiprintf_r+0x1ea>
  428ff2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  428ff6:	f002 fbf7 	bl	42b7e8 <__retarget_lock_release_recursive>
  428ffa:	462b      	mov	r3, r5
  428ffc:	4642      	mov	r2, r8
  428ffe:	4659      	mov	r1, fp
  429000:	9806      	ldr	r0, [sp, #24]
  429002:	f000 fd4d 	bl	429aa0 <__sbprintf>
  429006:	9003      	str	r0, [sp, #12]
  429008:	9803      	ldr	r0, [sp, #12]
  42900a:	b02d      	add	sp, #180	; 0xb4
  42900c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429010:	f001 fed0 	bl	42adb4 <__sinit>
  429014:	e709      	b.n	428e2a <_vfiprintf_r+0x1a>
  429016:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42901a:	07d9      	lsls	r1, r3, #31
  42901c:	d404      	bmi.n	429028 <_vfiprintf_r+0x218>
  42901e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  429022:	059a      	lsls	r2, r3, #22
  429024:	f140 84aa 	bpl.w	42997c <_vfiprintf_r+0xb6c>
  429028:	f04f 33ff 	mov.w	r3, #4294967295
  42902c:	9303      	str	r3, [sp, #12]
  42902e:	9803      	ldr	r0, [sp, #12]
  429030:	b02d      	add	sp, #180	; 0xb4
  429032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429036:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  42903a:	f002 fbd1 	bl	42b7e0 <__retarget_lock_acquire_recursive>
  42903e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  429042:	b281      	uxth	r1, r0
  429044:	e6fb      	b.n	428e3e <_vfiprintf_r+0x2e>
  429046:	4276      	negs	r6, r6
  429048:	9207      	str	r2, [sp, #28]
  42904a:	f043 0304 	orr.w	r3, r3, #4
  42904e:	f898 2000 	ldrb.w	r2, [r8]
  429052:	e74f      	b.n	428ef4 <_vfiprintf_r+0xe4>
  429054:	9608      	str	r6, [sp, #32]
  429056:	069e      	lsls	r6, r3, #26
  429058:	f100 8450 	bmi.w	4298fc <_vfiprintf_r+0xaec>
  42905c:	9907      	ldr	r1, [sp, #28]
  42905e:	06dd      	lsls	r5, r3, #27
  429060:	460a      	mov	r2, r1
  429062:	f100 83ef 	bmi.w	429844 <_vfiprintf_r+0xa34>
  429066:	0658      	lsls	r0, r3, #25
  429068:	f140 83ec 	bpl.w	429844 <_vfiprintf_r+0xa34>
  42906c:	880e      	ldrh	r6, [r1, #0]
  42906e:	3104      	adds	r1, #4
  429070:	2700      	movs	r7, #0
  429072:	2201      	movs	r2, #1
  429074:	9107      	str	r1, [sp, #28]
  429076:	f04f 0100 	mov.w	r1, #0
  42907a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  42907e:	2500      	movs	r5, #0
  429080:	1c61      	adds	r1, r4, #1
  429082:	f000 8116 	beq.w	4292b2 <_vfiprintf_r+0x4a2>
  429086:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  42908a:	9102      	str	r1, [sp, #8]
  42908c:	ea56 0107 	orrs.w	r1, r6, r7
  429090:	f040 8114 	bne.w	4292bc <_vfiprintf_r+0x4ac>
  429094:	2c00      	cmp	r4, #0
  429096:	f040 835c 	bne.w	429752 <_vfiprintf_r+0x942>
  42909a:	2a00      	cmp	r2, #0
  42909c:	f040 83b7 	bne.w	42980e <_vfiprintf_r+0x9fe>
  4290a0:	f013 0301 	ands.w	r3, r3, #1
  4290a4:	9305      	str	r3, [sp, #20]
  4290a6:	f000 8457 	beq.w	429958 <_vfiprintf_r+0xb48>
  4290aa:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4290ae:	2330      	movs	r3, #48	; 0x30
  4290b0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4290b4:	9b05      	ldr	r3, [sp, #20]
  4290b6:	42a3      	cmp	r3, r4
  4290b8:	bfb8      	it	lt
  4290ba:	4623      	movlt	r3, r4
  4290bc:	9301      	str	r3, [sp, #4]
  4290be:	b10d      	cbz	r5, 4290c4 <_vfiprintf_r+0x2b4>
  4290c0:	3301      	adds	r3, #1
  4290c2:	9301      	str	r3, [sp, #4]
  4290c4:	9b02      	ldr	r3, [sp, #8]
  4290c6:	f013 0302 	ands.w	r3, r3, #2
  4290ca:	9309      	str	r3, [sp, #36]	; 0x24
  4290cc:	d002      	beq.n	4290d4 <_vfiprintf_r+0x2c4>
  4290ce:	9b01      	ldr	r3, [sp, #4]
  4290d0:	3302      	adds	r3, #2
  4290d2:	9301      	str	r3, [sp, #4]
  4290d4:	9b02      	ldr	r3, [sp, #8]
  4290d6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4290da:	930a      	str	r3, [sp, #40]	; 0x28
  4290dc:	f040 8217 	bne.w	42950e <_vfiprintf_r+0x6fe>
  4290e0:	9b08      	ldr	r3, [sp, #32]
  4290e2:	9a01      	ldr	r2, [sp, #4]
  4290e4:	1a9d      	subs	r5, r3, r2
  4290e6:	2d00      	cmp	r5, #0
  4290e8:	f340 8211 	ble.w	42950e <_vfiprintf_r+0x6fe>
  4290ec:	2d10      	cmp	r5, #16
  4290ee:	f340 8490 	ble.w	429a12 <_vfiprintf_r+0xc02>
  4290f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4290f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4290f6:	4ec4      	ldr	r6, [pc, #784]	; (429408 <_vfiprintf_r+0x5f8>)
  4290f8:	46d6      	mov	lr, sl
  4290fa:	2710      	movs	r7, #16
  4290fc:	46a2      	mov	sl, r4
  4290fe:	4619      	mov	r1, r3
  429100:	9c06      	ldr	r4, [sp, #24]
  429102:	e007      	b.n	429114 <_vfiprintf_r+0x304>
  429104:	f101 0c02 	add.w	ip, r1, #2
  429108:	f10e 0e08 	add.w	lr, lr, #8
  42910c:	4601      	mov	r1, r0
  42910e:	3d10      	subs	r5, #16
  429110:	2d10      	cmp	r5, #16
  429112:	dd11      	ble.n	429138 <_vfiprintf_r+0x328>
  429114:	1c48      	adds	r0, r1, #1
  429116:	3210      	adds	r2, #16
  429118:	2807      	cmp	r0, #7
  42911a:	9211      	str	r2, [sp, #68]	; 0x44
  42911c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  429120:	9010      	str	r0, [sp, #64]	; 0x40
  429122:	ddef      	ble.n	429104 <_vfiprintf_r+0x2f4>
  429124:	2a00      	cmp	r2, #0
  429126:	f040 81e4 	bne.w	4294f2 <_vfiprintf_r+0x6e2>
  42912a:	3d10      	subs	r5, #16
  42912c:	2d10      	cmp	r5, #16
  42912e:	4611      	mov	r1, r2
  429130:	f04f 0c01 	mov.w	ip, #1
  429134:	46ce      	mov	lr, r9
  429136:	dced      	bgt.n	429114 <_vfiprintf_r+0x304>
  429138:	4654      	mov	r4, sl
  42913a:	4661      	mov	r1, ip
  42913c:	46f2      	mov	sl, lr
  42913e:	442a      	add	r2, r5
  429140:	2907      	cmp	r1, #7
  429142:	9211      	str	r2, [sp, #68]	; 0x44
  429144:	f8ca 6000 	str.w	r6, [sl]
  429148:	f8ca 5004 	str.w	r5, [sl, #4]
  42914c:	9110      	str	r1, [sp, #64]	; 0x40
  42914e:	f300 82ec 	bgt.w	42972a <_vfiprintf_r+0x91a>
  429152:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  429156:	f10a 0a08 	add.w	sl, sl, #8
  42915a:	1c48      	adds	r0, r1, #1
  42915c:	2d00      	cmp	r5, #0
  42915e:	f040 81de 	bne.w	42951e <_vfiprintf_r+0x70e>
  429162:	9b09      	ldr	r3, [sp, #36]	; 0x24
  429164:	2b00      	cmp	r3, #0
  429166:	f000 81f8 	beq.w	42955a <_vfiprintf_r+0x74a>
  42916a:	3202      	adds	r2, #2
  42916c:	a90e      	add	r1, sp, #56	; 0x38
  42916e:	2302      	movs	r3, #2
  429170:	2807      	cmp	r0, #7
  429172:	9211      	str	r2, [sp, #68]	; 0x44
  429174:	9010      	str	r0, [sp, #64]	; 0x40
  429176:	e88a 000a 	stmia.w	sl, {r1, r3}
  42917a:	f340 81ea 	ble.w	429552 <_vfiprintf_r+0x742>
  42917e:	2a00      	cmp	r2, #0
  429180:	f040 838c 	bne.w	42989c <_vfiprintf_r+0xa8c>
  429184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  429186:	2b80      	cmp	r3, #128	; 0x80
  429188:	f04f 0001 	mov.w	r0, #1
  42918c:	4611      	mov	r1, r2
  42918e:	46ca      	mov	sl, r9
  429190:	f040 81e7 	bne.w	429562 <_vfiprintf_r+0x752>
  429194:	9b08      	ldr	r3, [sp, #32]
  429196:	9d01      	ldr	r5, [sp, #4]
  429198:	1b5e      	subs	r6, r3, r5
  42919a:	2e00      	cmp	r6, #0
  42919c:	f340 81e1 	ble.w	429562 <_vfiprintf_r+0x752>
  4291a0:	2e10      	cmp	r6, #16
  4291a2:	4d9a      	ldr	r5, [pc, #616]	; (42940c <_vfiprintf_r+0x5fc>)
  4291a4:	f340 8450 	ble.w	429a48 <_vfiprintf_r+0xc38>
  4291a8:	46d4      	mov	ip, sl
  4291aa:	2710      	movs	r7, #16
  4291ac:	46a2      	mov	sl, r4
  4291ae:	9c06      	ldr	r4, [sp, #24]
  4291b0:	e007      	b.n	4291c2 <_vfiprintf_r+0x3b2>
  4291b2:	f101 0e02 	add.w	lr, r1, #2
  4291b6:	f10c 0c08 	add.w	ip, ip, #8
  4291ba:	4601      	mov	r1, r0
  4291bc:	3e10      	subs	r6, #16
  4291be:	2e10      	cmp	r6, #16
  4291c0:	dd11      	ble.n	4291e6 <_vfiprintf_r+0x3d6>
  4291c2:	1c48      	adds	r0, r1, #1
  4291c4:	3210      	adds	r2, #16
  4291c6:	2807      	cmp	r0, #7
  4291c8:	9211      	str	r2, [sp, #68]	; 0x44
  4291ca:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4291ce:	9010      	str	r0, [sp, #64]	; 0x40
  4291d0:	ddef      	ble.n	4291b2 <_vfiprintf_r+0x3a2>
  4291d2:	2a00      	cmp	r2, #0
  4291d4:	f040 829d 	bne.w	429712 <_vfiprintf_r+0x902>
  4291d8:	3e10      	subs	r6, #16
  4291da:	2e10      	cmp	r6, #16
  4291dc:	f04f 0e01 	mov.w	lr, #1
  4291e0:	4611      	mov	r1, r2
  4291e2:	46cc      	mov	ip, r9
  4291e4:	dced      	bgt.n	4291c2 <_vfiprintf_r+0x3b2>
  4291e6:	4654      	mov	r4, sl
  4291e8:	46e2      	mov	sl, ip
  4291ea:	4432      	add	r2, r6
  4291ec:	f1be 0f07 	cmp.w	lr, #7
  4291f0:	9211      	str	r2, [sp, #68]	; 0x44
  4291f2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4291f6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4291fa:	f300 8369 	bgt.w	4298d0 <_vfiprintf_r+0xac0>
  4291fe:	f10a 0a08 	add.w	sl, sl, #8
  429202:	f10e 0001 	add.w	r0, lr, #1
  429206:	4671      	mov	r1, lr
  429208:	e1ab      	b.n	429562 <_vfiprintf_r+0x752>
  42920a:	9608      	str	r6, [sp, #32]
  42920c:	f013 0220 	ands.w	r2, r3, #32
  429210:	f040 838c 	bne.w	42992c <_vfiprintf_r+0xb1c>
  429214:	f013 0110 	ands.w	r1, r3, #16
  429218:	f040 831a 	bne.w	429850 <_vfiprintf_r+0xa40>
  42921c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  429220:	f000 8316 	beq.w	429850 <_vfiprintf_r+0xa40>
  429224:	9807      	ldr	r0, [sp, #28]
  429226:	460a      	mov	r2, r1
  429228:	4601      	mov	r1, r0
  42922a:	3104      	adds	r1, #4
  42922c:	8806      	ldrh	r6, [r0, #0]
  42922e:	9107      	str	r1, [sp, #28]
  429230:	2700      	movs	r7, #0
  429232:	e720      	b.n	429076 <_vfiprintf_r+0x266>
  429234:	9608      	str	r6, [sp, #32]
  429236:	f043 0310 	orr.w	r3, r3, #16
  42923a:	e7e7      	b.n	42920c <_vfiprintf_r+0x3fc>
  42923c:	9608      	str	r6, [sp, #32]
  42923e:	f043 0310 	orr.w	r3, r3, #16
  429242:	e708      	b.n	429056 <_vfiprintf_r+0x246>
  429244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  429248:	f898 2000 	ldrb.w	r2, [r8]
  42924c:	e652      	b.n	428ef4 <_vfiprintf_r+0xe4>
  42924e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  429252:	2600      	movs	r6, #0
  429254:	f818 2b01 	ldrb.w	r2, [r8], #1
  429258:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  42925c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  429260:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  429264:	2909      	cmp	r1, #9
  429266:	d9f5      	bls.n	429254 <_vfiprintf_r+0x444>
  429268:	e646      	b.n	428ef8 <_vfiprintf_r+0xe8>
  42926a:	9608      	str	r6, [sp, #32]
  42926c:	2800      	cmp	r0, #0
  42926e:	f040 8408 	bne.w	429a82 <_vfiprintf_r+0xc72>
  429272:	f043 0310 	orr.w	r3, r3, #16
  429276:	069e      	lsls	r6, r3, #26
  429278:	f100 834c 	bmi.w	429914 <_vfiprintf_r+0xb04>
  42927c:	06dd      	lsls	r5, r3, #27
  42927e:	f100 82f3 	bmi.w	429868 <_vfiprintf_r+0xa58>
  429282:	0658      	lsls	r0, r3, #25
  429284:	f140 82f0 	bpl.w	429868 <_vfiprintf_r+0xa58>
  429288:	9d07      	ldr	r5, [sp, #28]
  42928a:	f9b5 6000 	ldrsh.w	r6, [r5]
  42928e:	462a      	mov	r2, r5
  429290:	17f7      	asrs	r7, r6, #31
  429292:	3204      	adds	r2, #4
  429294:	4630      	mov	r0, r6
  429296:	4639      	mov	r1, r7
  429298:	9207      	str	r2, [sp, #28]
  42929a:	2800      	cmp	r0, #0
  42929c:	f171 0200 	sbcs.w	r2, r1, #0
  4292a0:	f2c0 835d 	blt.w	42995e <_vfiprintf_r+0xb4e>
  4292a4:	1c61      	adds	r1, r4, #1
  4292a6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4292aa:	f04f 0201 	mov.w	r2, #1
  4292ae:	f47f aeea 	bne.w	429086 <_vfiprintf_r+0x276>
  4292b2:	ea56 0107 	orrs.w	r1, r6, r7
  4292b6:	f000 824d 	beq.w	429754 <_vfiprintf_r+0x944>
  4292ba:	9302      	str	r3, [sp, #8]
  4292bc:	2a01      	cmp	r2, #1
  4292be:	f000 828c 	beq.w	4297da <_vfiprintf_r+0x9ca>
  4292c2:	2a02      	cmp	r2, #2
  4292c4:	f040 825c 	bne.w	429780 <_vfiprintf_r+0x970>
  4292c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4292ca:	46cb      	mov	fp, r9
  4292cc:	0933      	lsrs	r3, r6, #4
  4292ce:	f006 010f 	and.w	r1, r6, #15
  4292d2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4292d6:	093a      	lsrs	r2, r7, #4
  4292d8:	461e      	mov	r6, r3
  4292da:	4617      	mov	r7, r2
  4292dc:	5c43      	ldrb	r3, [r0, r1]
  4292de:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4292e2:	ea56 0307 	orrs.w	r3, r6, r7
  4292e6:	d1f1      	bne.n	4292cc <_vfiprintf_r+0x4bc>
  4292e8:	eba9 030b 	sub.w	r3, r9, fp
  4292ec:	9305      	str	r3, [sp, #20]
  4292ee:	e6e1      	b.n	4290b4 <_vfiprintf_r+0x2a4>
  4292f0:	2800      	cmp	r0, #0
  4292f2:	f040 83c0 	bne.w	429a76 <_vfiprintf_r+0xc66>
  4292f6:	0699      	lsls	r1, r3, #26
  4292f8:	f100 8367 	bmi.w	4299ca <_vfiprintf_r+0xbba>
  4292fc:	06da      	lsls	r2, r3, #27
  4292fe:	f100 80f1 	bmi.w	4294e4 <_vfiprintf_r+0x6d4>
  429302:	065b      	lsls	r3, r3, #25
  429304:	f140 80ee 	bpl.w	4294e4 <_vfiprintf_r+0x6d4>
  429308:	9a07      	ldr	r2, [sp, #28]
  42930a:	6813      	ldr	r3, [r2, #0]
  42930c:	3204      	adds	r2, #4
  42930e:	9207      	str	r2, [sp, #28]
  429310:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  429314:	801a      	strh	r2, [r3, #0]
  429316:	e5b8      	b.n	428e8a <_vfiprintf_r+0x7a>
  429318:	9807      	ldr	r0, [sp, #28]
  42931a:	4a3d      	ldr	r2, [pc, #244]	; (429410 <_vfiprintf_r+0x600>)
  42931c:	9608      	str	r6, [sp, #32]
  42931e:	920b      	str	r2, [sp, #44]	; 0x2c
  429320:	6806      	ldr	r6, [r0, #0]
  429322:	2278      	movs	r2, #120	; 0x78
  429324:	2130      	movs	r1, #48	; 0x30
  429326:	3004      	adds	r0, #4
  429328:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  42932c:	f043 0302 	orr.w	r3, r3, #2
  429330:	9007      	str	r0, [sp, #28]
  429332:	2700      	movs	r7, #0
  429334:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  429338:	2202      	movs	r2, #2
  42933a:	e69c      	b.n	429076 <_vfiprintf_r+0x266>
  42933c:	9608      	str	r6, [sp, #32]
  42933e:	2800      	cmp	r0, #0
  429340:	d099      	beq.n	429276 <_vfiprintf_r+0x466>
  429342:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429346:	e796      	b.n	429276 <_vfiprintf_r+0x466>
  429348:	f898 2000 	ldrb.w	r2, [r8]
  42934c:	2d00      	cmp	r5, #0
  42934e:	f47f add1 	bne.w	428ef4 <_vfiprintf_r+0xe4>
  429352:	2001      	movs	r0, #1
  429354:	2520      	movs	r5, #32
  429356:	e5cd      	b.n	428ef4 <_vfiprintf_r+0xe4>
  429358:	f043 0301 	orr.w	r3, r3, #1
  42935c:	f898 2000 	ldrb.w	r2, [r8]
  429360:	e5c8      	b.n	428ef4 <_vfiprintf_r+0xe4>
  429362:	9608      	str	r6, [sp, #32]
  429364:	2800      	cmp	r0, #0
  429366:	f040 8393 	bne.w	429a90 <_vfiprintf_r+0xc80>
  42936a:	4929      	ldr	r1, [pc, #164]	; (429410 <_vfiprintf_r+0x600>)
  42936c:	910b      	str	r1, [sp, #44]	; 0x2c
  42936e:	069f      	lsls	r7, r3, #26
  429370:	f100 82e8 	bmi.w	429944 <_vfiprintf_r+0xb34>
  429374:	9807      	ldr	r0, [sp, #28]
  429376:	06de      	lsls	r6, r3, #27
  429378:	4601      	mov	r1, r0
  42937a:	f100 8270 	bmi.w	42985e <_vfiprintf_r+0xa4e>
  42937e:	065d      	lsls	r5, r3, #25
  429380:	f140 826d 	bpl.w	42985e <_vfiprintf_r+0xa4e>
  429384:	3104      	adds	r1, #4
  429386:	8806      	ldrh	r6, [r0, #0]
  429388:	9107      	str	r1, [sp, #28]
  42938a:	2700      	movs	r7, #0
  42938c:	07d8      	lsls	r0, r3, #31
  42938e:	f140 8222 	bpl.w	4297d6 <_vfiprintf_r+0x9c6>
  429392:	ea56 0107 	orrs.w	r1, r6, r7
  429396:	f000 821e 	beq.w	4297d6 <_vfiprintf_r+0x9c6>
  42939a:	2130      	movs	r1, #48	; 0x30
  42939c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4293a0:	f043 0302 	orr.w	r3, r3, #2
  4293a4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4293a8:	2202      	movs	r2, #2
  4293aa:	e664      	b.n	429076 <_vfiprintf_r+0x266>
  4293ac:	9608      	str	r6, [sp, #32]
  4293ae:	2800      	cmp	r0, #0
  4293b0:	f040 836b 	bne.w	429a8a <_vfiprintf_r+0xc7a>
  4293b4:	4917      	ldr	r1, [pc, #92]	; (429414 <_vfiprintf_r+0x604>)
  4293b6:	910b      	str	r1, [sp, #44]	; 0x2c
  4293b8:	e7d9      	b.n	42936e <_vfiprintf_r+0x55e>
  4293ba:	9907      	ldr	r1, [sp, #28]
  4293bc:	9608      	str	r6, [sp, #32]
  4293be:	680a      	ldr	r2, [r1, #0]
  4293c0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4293c4:	f04f 0000 	mov.w	r0, #0
  4293c8:	460a      	mov	r2, r1
  4293ca:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4293ce:	3204      	adds	r2, #4
  4293d0:	2001      	movs	r0, #1
  4293d2:	9001      	str	r0, [sp, #4]
  4293d4:	9207      	str	r2, [sp, #28]
  4293d6:	9005      	str	r0, [sp, #20]
  4293d8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4293dc:	9302      	str	r3, [sp, #8]
  4293de:	2400      	movs	r4, #0
  4293e0:	e670      	b.n	4290c4 <_vfiprintf_r+0x2b4>
  4293e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4293e6:	f898 2000 	ldrb.w	r2, [r8]
  4293ea:	e583      	b.n	428ef4 <_vfiprintf_r+0xe4>
  4293ec:	f898 2000 	ldrb.w	r2, [r8]
  4293f0:	2a6c      	cmp	r2, #108	; 0x6c
  4293f2:	bf03      	ittte	eq
  4293f4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4293f8:	f043 0320 	orreq.w	r3, r3, #32
  4293fc:	f108 0801 	addeq.w	r8, r8, #1
  429400:	f043 0310 	orrne.w	r3, r3, #16
  429404:	e576      	b.n	428ef4 <_vfiprintf_r+0xe4>
  429406:	bf00      	nop
  429408:	0042f7ac 	.word	0x0042f7ac
  42940c:	0042f7bc 	.word	0x0042f7bc
  429410:	0042f718 	.word	0x0042f718
  429414:	0042f704 	.word	0x0042f704
  429418:	9907      	ldr	r1, [sp, #28]
  42941a:	680e      	ldr	r6, [r1, #0]
  42941c:	460a      	mov	r2, r1
  42941e:	2e00      	cmp	r6, #0
  429420:	f102 0204 	add.w	r2, r2, #4
  429424:	f6ff ae0f 	blt.w	429046 <_vfiprintf_r+0x236>
  429428:	9207      	str	r2, [sp, #28]
  42942a:	f898 2000 	ldrb.w	r2, [r8]
  42942e:	e561      	b.n	428ef4 <_vfiprintf_r+0xe4>
  429430:	f898 2000 	ldrb.w	r2, [r8]
  429434:	2001      	movs	r0, #1
  429436:	252b      	movs	r5, #43	; 0x2b
  429438:	e55c      	b.n	428ef4 <_vfiprintf_r+0xe4>
  42943a:	9907      	ldr	r1, [sp, #28]
  42943c:	9608      	str	r6, [sp, #32]
  42943e:	f8d1 b000 	ldr.w	fp, [r1]
  429442:	f04f 0200 	mov.w	r2, #0
  429446:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  42944a:	1d0e      	adds	r6, r1, #4
  42944c:	f1bb 0f00 	cmp.w	fp, #0
  429450:	f000 82e5 	beq.w	429a1e <_vfiprintf_r+0xc0e>
  429454:	1c67      	adds	r7, r4, #1
  429456:	f000 82c4 	beq.w	4299e2 <_vfiprintf_r+0xbd2>
  42945a:	4622      	mov	r2, r4
  42945c:	2100      	movs	r1, #0
  42945e:	4658      	mov	r0, fp
  429460:	9301      	str	r3, [sp, #4]
  429462:	f002 fd15 	bl	42be90 <memchr>
  429466:	9b01      	ldr	r3, [sp, #4]
  429468:	2800      	cmp	r0, #0
  42946a:	f000 82e5 	beq.w	429a38 <_vfiprintf_r+0xc28>
  42946e:	eba0 020b 	sub.w	r2, r0, fp
  429472:	9205      	str	r2, [sp, #20]
  429474:	9607      	str	r6, [sp, #28]
  429476:	9302      	str	r3, [sp, #8]
  429478:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  42947c:	2400      	movs	r4, #0
  42947e:	e619      	b.n	4290b4 <_vfiprintf_r+0x2a4>
  429480:	f898 2000 	ldrb.w	r2, [r8]
  429484:	2a2a      	cmp	r2, #42	; 0x2a
  429486:	f108 0701 	add.w	r7, r8, #1
  42948a:	f000 82e9 	beq.w	429a60 <_vfiprintf_r+0xc50>
  42948e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  429492:	2909      	cmp	r1, #9
  429494:	46b8      	mov	r8, r7
  429496:	f04f 0400 	mov.w	r4, #0
  42949a:	f63f ad2d 	bhi.w	428ef8 <_vfiprintf_r+0xe8>
  42949e:	f818 2b01 	ldrb.w	r2, [r8], #1
  4294a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4294a6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4294aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4294ae:	2909      	cmp	r1, #9
  4294b0:	d9f5      	bls.n	42949e <_vfiprintf_r+0x68e>
  4294b2:	e521      	b.n	428ef8 <_vfiprintf_r+0xe8>
  4294b4:	f043 0320 	orr.w	r3, r3, #32
  4294b8:	f898 2000 	ldrb.w	r2, [r8]
  4294bc:	e51a      	b.n	428ef4 <_vfiprintf_r+0xe4>
  4294be:	9608      	str	r6, [sp, #32]
  4294c0:	2800      	cmp	r0, #0
  4294c2:	f040 82db 	bne.w	429a7c <_vfiprintf_r+0xc6c>
  4294c6:	2a00      	cmp	r2, #0
  4294c8:	f000 80e7 	beq.w	42969a <_vfiprintf_r+0x88a>
  4294cc:	2101      	movs	r1, #1
  4294ce:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4294d2:	f04f 0200 	mov.w	r2, #0
  4294d6:	9101      	str	r1, [sp, #4]
  4294d8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4294dc:	9105      	str	r1, [sp, #20]
  4294de:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4294e2:	e77b      	b.n	4293dc <_vfiprintf_r+0x5cc>
  4294e4:	9a07      	ldr	r2, [sp, #28]
  4294e6:	6813      	ldr	r3, [r2, #0]
  4294e8:	3204      	adds	r2, #4
  4294ea:	9207      	str	r2, [sp, #28]
  4294ec:	9a03      	ldr	r2, [sp, #12]
  4294ee:	601a      	str	r2, [r3, #0]
  4294f0:	e4cb      	b.n	428e8a <_vfiprintf_r+0x7a>
  4294f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4294f4:	9904      	ldr	r1, [sp, #16]
  4294f6:	4620      	mov	r0, r4
  4294f8:	f7ff fc4a 	bl	428d90 <__sprint_r.part.0>
  4294fc:	2800      	cmp	r0, #0
  4294fe:	f040 8139 	bne.w	429774 <_vfiprintf_r+0x964>
  429502:	9910      	ldr	r1, [sp, #64]	; 0x40
  429504:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429506:	f101 0c01 	add.w	ip, r1, #1
  42950a:	46ce      	mov	lr, r9
  42950c:	e5ff      	b.n	42910e <_vfiprintf_r+0x2fe>
  42950e:	9910      	ldr	r1, [sp, #64]	; 0x40
  429510:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429512:	1c48      	adds	r0, r1, #1
  429514:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  429518:	2d00      	cmp	r5, #0
  42951a:	f43f ae22 	beq.w	429162 <_vfiprintf_r+0x352>
  42951e:	3201      	adds	r2, #1
  429520:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  429524:	2101      	movs	r1, #1
  429526:	2807      	cmp	r0, #7
  429528:	9211      	str	r2, [sp, #68]	; 0x44
  42952a:	9010      	str	r0, [sp, #64]	; 0x40
  42952c:	f8ca 5000 	str.w	r5, [sl]
  429530:	f8ca 1004 	str.w	r1, [sl, #4]
  429534:	f340 8108 	ble.w	429748 <_vfiprintf_r+0x938>
  429538:	2a00      	cmp	r2, #0
  42953a:	f040 81bc 	bne.w	4298b6 <_vfiprintf_r+0xaa6>
  42953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  429540:	2b00      	cmp	r3, #0
  429542:	f43f ae1f 	beq.w	429184 <_vfiprintf_r+0x374>
  429546:	ab0e      	add	r3, sp, #56	; 0x38
  429548:	2202      	movs	r2, #2
  42954a:	4608      	mov	r0, r1
  42954c:	931c      	str	r3, [sp, #112]	; 0x70
  42954e:	921d      	str	r2, [sp, #116]	; 0x74
  429550:	46ca      	mov	sl, r9
  429552:	4601      	mov	r1, r0
  429554:	f10a 0a08 	add.w	sl, sl, #8
  429558:	3001      	adds	r0, #1
  42955a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42955c:	2b80      	cmp	r3, #128	; 0x80
  42955e:	f43f ae19 	beq.w	429194 <_vfiprintf_r+0x384>
  429562:	9b05      	ldr	r3, [sp, #20]
  429564:	1ae4      	subs	r4, r4, r3
  429566:	2c00      	cmp	r4, #0
  429568:	dd2e      	ble.n	4295c8 <_vfiprintf_r+0x7b8>
  42956a:	2c10      	cmp	r4, #16
  42956c:	4db3      	ldr	r5, [pc, #716]	; (42983c <_vfiprintf_r+0xa2c>)
  42956e:	dd1e      	ble.n	4295ae <_vfiprintf_r+0x79e>
  429570:	46d6      	mov	lr, sl
  429572:	2610      	movs	r6, #16
  429574:	9f06      	ldr	r7, [sp, #24]
  429576:	f8dd a010 	ldr.w	sl, [sp, #16]
  42957a:	e006      	b.n	42958a <_vfiprintf_r+0x77a>
  42957c:	1c88      	adds	r0, r1, #2
  42957e:	f10e 0e08 	add.w	lr, lr, #8
  429582:	4619      	mov	r1, r3
  429584:	3c10      	subs	r4, #16
  429586:	2c10      	cmp	r4, #16
  429588:	dd10      	ble.n	4295ac <_vfiprintf_r+0x79c>
  42958a:	1c4b      	adds	r3, r1, #1
  42958c:	3210      	adds	r2, #16
  42958e:	2b07      	cmp	r3, #7
  429590:	9211      	str	r2, [sp, #68]	; 0x44
  429592:	e88e 0060 	stmia.w	lr, {r5, r6}
  429596:	9310      	str	r3, [sp, #64]	; 0x40
  429598:	ddf0      	ble.n	42957c <_vfiprintf_r+0x76c>
  42959a:	2a00      	cmp	r2, #0
  42959c:	d165      	bne.n	42966a <_vfiprintf_r+0x85a>
  42959e:	3c10      	subs	r4, #16
  4295a0:	2c10      	cmp	r4, #16
  4295a2:	f04f 0001 	mov.w	r0, #1
  4295a6:	4611      	mov	r1, r2
  4295a8:	46ce      	mov	lr, r9
  4295aa:	dcee      	bgt.n	42958a <_vfiprintf_r+0x77a>
  4295ac:	46f2      	mov	sl, lr
  4295ae:	4422      	add	r2, r4
  4295b0:	2807      	cmp	r0, #7
  4295b2:	9211      	str	r2, [sp, #68]	; 0x44
  4295b4:	f8ca 5000 	str.w	r5, [sl]
  4295b8:	f8ca 4004 	str.w	r4, [sl, #4]
  4295bc:	9010      	str	r0, [sp, #64]	; 0x40
  4295be:	f300 8085 	bgt.w	4296cc <_vfiprintf_r+0x8bc>
  4295c2:	f10a 0a08 	add.w	sl, sl, #8
  4295c6:	3001      	adds	r0, #1
  4295c8:	9905      	ldr	r1, [sp, #20]
  4295ca:	f8ca b000 	str.w	fp, [sl]
  4295ce:	440a      	add	r2, r1
  4295d0:	2807      	cmp	r0, #7
  4295d2:	9211      	str	r2, [sp, #68]	; 0x44
  4295d4:	f8ca 1004 	str.w	r1, [sl, #4]
  4295d8:	9010      	str	r0, [sp, #64]	; 0x40
  4295da:	f340 8082 	ble.w	4296e2 <_vfiprintf_r+0x8d2>
  4295de:	2a00      	cmp	r2, #0
  4295e0:	f040 8118 	bne.w	429814 <_vfiprintf_r+0xa04>
  4295e4:	9b02      	ldr	r3, [sp, #8]
  4295e6:	9210      	str	r2, [sp, #64]	; 0x40
  4295e8:	0758      	lsls	r0, r3, #29
  4295ea:	d535      	bpl.n	429658 <_vfiprintf_r+0x848>
  4295ec:	9b08      	ldr	r3, [sp, #32]
  4295ee:	9901      	ldr	r1, [sp, #4]
  4295f0:	1a5c      	subs	r4, r3, r1
  4295f2:	2c00      	cmp	r4, #0
  4295f4:	f340 80e7 	ble.w	4297c6 <_vfiprintf_r+0x9b6>
  4295f8:	46ca      	mov	sl, r9
  4295fa:	2c10      	cmp	r4, #16
  4295fc:	f340 8218 	ble.w	429a30 <_vfiprintf_r+0xc20>
  429600:	9910      	ldr	r1, [sp, #64]	; 0x40
  429602:	4e8f      	ldr	r6, [pc, #572]	; (429840 <_vfiprintf_r+0xa30>)
  429604:	9f06      	ldr	r7, [sp, #24]
  429606:	f8dd b010 	ldr.w	fp, [sp, #16]
  42960a:	2510      	movs	r5, #16
  42960c:	e006      	b.n	42961c <_vfiprintf_r+0x80c>
  42960e:	1c88      	adds	r0, r1, #2
  429610:	f10a 0a08 	add.w	sl, sl, #8
  429614:	4619      	mov	r1, r3
  429616:	3c10      	subs	r4, #16
  429618:	2c10      	cmp	r4, #16
  42961a:	dd11      	ble.n	429640 <_vfiprintf_r+0x830>
  42961c:	1c4b      	adds	r3, r1, #1
  42961e:	3210      	adds	r2, #16
  429620:	2b07      	cmp	r3, #7
  429622:	9211      	str	r2, [sp, #68]	; 0x44
  429624:	f8ca 6000 	str.w	r6, [sl]
  429628:	f8ca 5004 	str.w	r5, [sl, #4]
  42962c:	9310      	str	r3, [sp, #64]	; 0x40
  42962e:	ddee      	ble.n	42960e <_vfiprintf_r+0x7fe>
  429630:	bb42      	cbnz	r2, 429684 <_vfiprintf_r+0x874>
  429632:	3c10      	subs	r4, #16
  429634:	2c10      	cmp	r4, #16
  429636:	f04f 0001 	mov.w	r0, #1
  42963a:	4611      	mov	r1, r2
  42963c:	46ca      	mov	sl, r9
  42963e:	dced      	bgt.n	42961c <_vfiprintf_r+0x80c>
  429640:	4422      	add	r2, r4
  429642:	2807      	cmp	r0, #7
  429644:	9211      	str	r2, [sp, #68]	; 0x44
  429646:	f8ca 6000 	str.w	r6, [sl]
  42964a:	f8ca 4004 	str.w	r4, [sl, #4]
  42964e:	9010      	str	r0, [sp, #64]	; 0x40
  429650:	dd51      	ble.n	4296f6 <_vfiprintf_r+0x8e6>
  429652:	2a00      	cmp	r2, #0
  429654:	f040 819b 	bne.w	42998e <_vfiprintf_r+0xb7e>
  429658:	9b03      	ldr	r3, [sp, #12]
  42965a:	9a08      	ldr	r2, [sp, #32]
  42965c:	9901      	ldr	r1, [sp, #4]
  42965e:	428a      	cmp	r2, r1
  429660:	bfac      	ite	ge
  429662:	189b      	addge	r3, r3, r2
  429664:	185b      	addlt	r3, r3, r1
  429666:	9303      	str	r3, [sp, #12]
  429668:	e04e      	b.n	429708 <_vfiprintf_r+0x8f8>
  42966a:	aa0f      	add	r2, sp, #60	; 0x3c
  42966c:	4651      	mov	r1, sl
  42966e:	4638      	mov	r0, r7
  429670:	f7ff fb8e 	bl	428d90 <__sprint_r.part.0>
  429674:	2800      	cmp	r0, #0
  429676:	f040 813f 	bne.w	4298f8 <_vfiprintf_r+0xae8>
  42967a:	9910      	ldr	r1, [sp, #64]	; 0x40
  42967c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42967e:	1c48      	adds	r0, r1, #1
  429680:	46ce      	mov	lr, r9
  429682:	e77f      	b.n	429584 <_vfiprintf_r+0x774>
  429684:	aa0f      	add	r2, sp, #60	; 0x3c
  429686:	4659      	mov	r1, fp
  429688:	4638      	mov	r0, r7
  42968a:	f7ff fb81 	bl	428d90 <__sprint_r.part.0>
  42968e:	b960      	cbnz	r0, 4296aa <_vfiprintf_r+0x89a>
  429690:	9910      	ldr	r1, [sp, #64]	; 0x40
  429692:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429694:	1c48      	adds	r0, r1, #1
  429696:	46ca      	mov	sl, r9
  429698:	e7bd      	b.n	429616 <_vfiprintf_r+0x806>
  42969a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  42969c:	f8dd b010 	ldr.w	fp, [sp, #16]
  4296a0:	2b00      	cmp	r3, #0
  4296a2:	f040 81d4 	bne.w	429a4e <_vfiprintf_r+0xc3e>
  4296a6:	2300      	movs	r3, #0
  4296a8:	9310      	str	r3, [sp, #64]	; 0x40
  4296aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4296ae:	f013 0f01 	tst.w	r3, #1
  4296b2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4296b6:	d102      	bne.n	4296be <_vfiprintf_r+0x8ae>
  4296b8:	059a      	lsls	r2, r3, #22
  4296ba:	f140 80de 	bpl.w	42987a <_vfiprintf_r+0xa6a>
  4296be:	065b      	lsls	r3, r3, #25
  4296c0:	f53f acb2 	bmi.w	429028 <_vfiprintf_r+0x218>
  4296c4:	9803      	ldr	r0, [sp, #12]
  4296c6:	b02d      	add	sp, #180	; 0xb4
  4296c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4296cc:	2a00      	cmp	r2, #0
  4296ce:	f040 8106 	bne.w	4298de <_vfiprintf_r+0xace>
  4296d2:	9a05      	ldr	r2, [sp, #20]
  4296d4:	921d      	str	r2, [sp, #116]	; 0x74
  4296d6:	2301      	movs	r3, #1
  4296d8:	9211      	str	r2, [sp, #68]	; 0x44
  4296da:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4296de:	9310      	str	r3, [sp, #64]	; 0x40
  4296e0:	46ca      	mov	sl, r9
  4296e2:	f10a 0a08 	add.w	sl, sl, #8
  4296e6:	9b02      	ldr	r3, [sp, #8]
  4296e8:	0759      	lsls	r1, r3, #29
  4296ea:	d504      	bpl.n	4296f6 <_vfiprintf_r+0x8e6>
  4296ec:	9b08      	ldr	r3, [sp, #32]
  4296ee:	9901      	ldr	r1, [sp, #4]
  4296f0:	1a5c      	subs	r4, r3, r1
  4296f2:	2c00      	cmp	r4, #0
  4296f4:	dc81      	bgt.n	4295fa <_vfiprintf_r+0x7ea>
  4296f6:	9b03      	ldr	r3, [sp, #12]
  4296f8:	9908      	ldr	r1, [sp, #32]
  4296fa:	9801      	ldr	r0, [sp, #4]
  4296fc:	4281      	cmp	r1, r0
  4296fe:	bfac      	ite	ge
  429700:	185b      	addge	r3, r3, r1
  429702:	181b      	addlt	r3, r3, r0
  429704:	9303      	str	r3, [sp, #12]
  429706:	bb72      	cbnz	r2, 429766 <_vfiprintf_r+0x956>
  429708:	2300      	movs	r3, #0
  42970a:	9310      	str	r3, [sp, #64]	; 0x40
  42970c:	46ca      	mov	sl, r9
  42970e:	f7ff bbbc 	b.w	428e8a <_vfiprintf_r+0x7a>
  429712:	aa0f      	add	r2, sp, #60	; 0x3c
  429714:	9904      	ldr	r1, [sp, #16]
  429716:	4620      	mov	r0, r4
  429718:	f7ff fb3a 	bl	428d90 <__sprint_r.part.0>
  42971c:	bb50      	cbnz	r0, 429774 <_vfiprintf_r+0x964>
  42971e:	9910      	ldr	r1, [sp, #64]	; 0x40
  429720:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429722:	f101 0e01 	add.w	lr, r1, #1
  429726:	46cc      	mov	ip, r9
  429728:	e548      	b.n	4291bc <_vfiprintf_r+0x3ac>
  42972a:	2a00      	cmp	r2, #0
  42972c:	f040 8140 	bne.w	4299b0 <_vfiprintf_r+0xba0>
  429730:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  429734:	2900      	cmp	r1, #0
  429736:	f000 811b 	beq.w	429970 <_vfiprintf_r+0xb60>
  42973a:	2201      	movs	r2, #1
  42973c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  429740:	4610      	mov	r0, r2
  429742:	921d      	str	r2, [sp, #116]	; 0x74
  429744:	911c      	str	r1, [sp, #112]	; 0x70
  429746:	46ca      	mov	sl, r9
  429748:	4601      	mov	r1, r0
  42974a:	f10a 0a08 	add.w	sl, sl, #8
  42974e:	3001      	adds	r0, #1
  429750:	e507      	b.n	429162 <_vfiprintf_r+0x352>
  429752:	9b02      	ldr	r3, [sp, #8]
  429754:	2a01      	cmp	r2, #1
  429756:	f000 8098 	beq.w	42988a <_vfiprintf_r+0xa7a>
  42975a:	2a02      	cmp	r2, #2
  42975c:	d10d      	bne.n	42977a <_vfiprintf_r+0x96a>
  42975e:	9302      	str	r3, [sp, #8]
  429760:	2600      	movs	r6, #0
  429762:	2700      	movs	r7, #0
  429764:	e5b0      	b.n	4292c8 <_vfiprintf_r+0x4b8>
  429766:	aa0f      	add	r2, sp, #60	; 0x3c
  429768:	9904      	ldr	r1, [sp, #16]
  42976a:	9806      	ldr	r0, [sp, #24]
  42976c:	f7ff fb10 	bl	428d90 <__sprint_r.part.0>
  429770:	2800      	cmp	r0, #0
  429772:	d0c9      	beq.n	429708 <_vfiprintf_r+0x8f8>
  429774:	f8dd b010 	ldr.w	fp, [sp, #16]
  429778:	e797      	b.n	4296aa <_vfiprintf_r+0x89a>
  42977a:	9302      	str	r3, [sp, #8]
  42977c:	2600      	movs	r6, #0
  42977e:	2700      	movs	r7, #0
  429780:	4649      	mov	r1, r9
  429782:	e000      	b.n	429786 <_vfiprintf_r+0x976>
  429784:	4659      	mov	r1, fp
  429786:	08f2      	lsrs	r2, r6, #3
  429788:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  42978c:	08f8      	lsrs	r0, r7, #3
  42978e:	f006 0307 	and.w	r3, r6, #7
  429792:	4607      	mov	r7, r0
  429794:	4616      	mov	r6, r2
  429796:	3330      	adds	r3, #48	; 0x30
  429798:	ea56 0207 	orrs.w	r2, r6, r7
  42979c:	f801 3c01 	strb.w	r3, [r1, #-1]
  4297a0:	f101 3bff 	add.w	fp, r1, #4294967295
  4297a4:	d1ee      	bne.n	429784 <_vfiprintf_r+0x974>
  4297a6:	9a02      	ldr	r2, [sp, #8]
  4297a8:	07d6      	lsls	r6, r2, #31
  4297aa:	f57f ad9d 	bpl.w	4292e8 <_vfiprintf_r+0x4d8>
  4297ae:	2b30      	cmp	r3, #48	; 0x30
  4297b0:	f43f ad9a 	beq.w	4292e8 <_vfiprintf_r+0x4d8>
  4297b4:	3902      	subs	r1, #2
  4297b6:	2330      	movs	r3, #48	; 0x30
  4297b8:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4297bc:	eba9 0301 	sub.w	r3, r9, r1
  4297c0:	9305      	str	r3, [sp, #20]
  4297c2:	468b      	mov	fp, r1
  4297c4:	e476      	b.n	4290b4 <_vfiprintf_r+0x2a4>
  4297c6:	9b03      	ldr	r3, [sp, #12]
  4297c8:	9a08      	ldr	r2, [sp, #32]
  4297ca:	428a      	cmp	r2, r1
  4297cc:	bfac      	ite	ge
  4297ce:	189b      	addge	r3, r3, r2
  4297d0:	185b      	addlt	r3, r3, r1
  4297d2:	9303      	str	r3, [sp, #12]
  4297d4:	e798      	b.n	429708 <_vfiprintf_r+0x8f8>
  4297d6:	2202      	movs	r2, #2
  4297d8:	e44d      	b.n	429076 <_vfiprintf_r+0x266>
  4297da:	2f00      	cmp	r7, #0
  4297dc:	bf08      	it	eq
  4297de:	2e0a      	cmpeq	r6, #10
  4297e0:	d352      	bcc.n	429888 <_vfiprintf_r+0xa78>
  4297e2:	46cb      	mov	fp, r9
  4297e4:	4630      	mov	r0, r6
  4297e6:	4639      	mov	r1, r7
  4297e8:	220a      	movs	r2, #10
  4297ea:	2300      	movs	r3, #0
  4297ec:	f005 fc42 	bl	42f074 <__aeabi_uldivmod>
  4297f0:	3230      	adds	r2, #48	; 0x30
  4297f2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4297f6:	4630      	mov	r0, r6
  4297f8:	4639      	mov	r1, r7
  4297fa:	2300      	movs	r3, #0
  4297fc:	220a      	movs	r2, #10
  4297fe:	f005 fc39 	bl	42f074 <__aeabi_uldivmod>
  429802:	4606      	mov	r6, r0
  429804:	460f      	mov	r7, r1
  429806:	ea56 0307 	orrs.w	r3, r6, r7
  42980a:	d1eb      	bne.n	4297e4 <_vfiprintf_r+0x9d4>
  42980c:	e56c      	b.n	4292e8 <_vfiprintf_r+0x4d8>
  42980e:	9405      	str	r4, [sp, #20]
  429810:	46cb      	mov	fp, r9
  429812:	e44f      	b.n	4290b4 <_vfiprintf_r+0x2a4>
  429814:	aa0f      	add	r2, sp, #60	; 0x3c
  429816:	9904      	ldr	r1, [sp, #16]
  429818:	9806      	ldr	r0, [sp, #24]
  42981a:	f7ff fab9 	bl	428d90 <__sprint_r.part.0>
  42981e:	2800      	cmp	r0, #0
  429820:	d1a8      	bne.n	429774 <_vfiprintf_r+0x964>
  429822:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429824:	46ca      	mov	sl, r9
  429826:	e75e      	b.n	4296e6 <_vfiprintf_r+0x8d6>
  429828:	aa0f      	add	r2, sp, #60	; 0x3c
  42982a:	9904      	ldr	r1, [sp, #16]
  42982c:	9806      	ldr	r0, [sp, #24]
  42982e:	f7ff faaf 	bl	428d90 <__sprint_r.part.0>
  429832:	2800      	cmp	r0, #0
  429834:	d19e      	bne.n	429774 <_vfiprintf_r+0x964>
  429836:	46ca      	mov	sl, r9
  429838:	f7ff bbc0 	b.w	428fbc <_vfiprintf_r+0x1ac>
  42983c:	0042f7bc 	.word	0x0042f7bc
  429840:	0042f7ac 	.word	0x0042f7ac
  429844:	3104      	adds	r1, #4
  429846:	6816      	ldr	r6, [r2, #0]
  429848:	9107      	str	r1, [sp, #28]
  42984a:	2201      	movs	r2, #1
  42984c:	2700      	movs	r7, #0
  42984e:	e412      	b.n	429076 <_vfiprintf_r+0x266>
  429850:	9807      	ldr	r0, [sp, #28]
  429852:	4601      	mov	r1, r0
  429854:	3104      	adds	r1, #4
  429856:	6806      	ldr	r6, [r0, #0]
  429858:	9107      	str	r1, [sp, #28]
  42985a:	2700      	movs	r7, #0
  42985c:	e40b      	b.n	429076 <_vfiprintf_r+0x266>
  42985e:	680e      	ldr	r6, [r1, #0]
  429860:	3104      	adds	r1, #4
  429862:	9107      	str	r1, [sp, #28]
  429864:	2700      	movs	r7, #0
  429866:	e591      	b.n	42938c <_vfiprintf_r+0x57c>
  429868:	9907      	ldr	r1, [sp, #28]
  42986a:	680e      	ldr	r6, [r1, #0]
  42986c:	460a      	mov	r2, r1
  42986e:	17f7      	asrs	r7, r6, #31
  429870:	3204      	adds	r2, #4
  429872:	9207      	str	r2, [sp, #28]
  429874:	4630      	mov	r0, r6
  429876:	4639      	mov	r1, r7
  429878:	e50f      	b.n	42929a <_vfiprintf_r+0x48a>
  42987a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  42987e:	f001 ffb3 	bl	42b7e8 <__retarget_lock_release_recursive>
  429882:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  429886:	e71a      	b.n	4296be <_vfiprintf_r+0x8ae>
  429888:	9b02      	ldr	r3, [sp, #8]
  42988a:	9302      	str	r3, [sp, #8]
  42988c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  429890:	3630      	adds	r6, #48	; 0x30
  429892:	2301      	movs	r3, #1
  429894:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  429898:	9305      	str	r3, [sp, #20]
  42989a:	e40b      	b.n	4290b4 <_vfiprintf_r+0x2a4>
  42989c:	aa0f      	add	r2, sp, #60	; 0x3c
  42989e:	9904      	ldr	r1, [sp, #16]
  4298a0:	9806      	ldr	r0, [sp, #24]
  4298a2:	f7ff fa75 	bl	428d90 <__sprint_r.part.0>
  4298a6:	2800      	cmp	r0, #0
  4298a8:	f47f af64 	bne.w	429774 <_vfiprintf_r+0x964>
  4298ac:	9910      	ldr	r1, [sp, #64]	; 0x40
  4298ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4298b0:	1c48      	adds	r0, r1, #1
  4298b2:	46ca      	mov	sl, r9
  4298b4:	e651      	b.n	42955a <_vfiprintf_r+0x74a>
  4298b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4298b8:	9904      	ldr	r1, [sp, #16]
  4298ba:	9806      	ldr	r0, [sp, #24]
  4298bc:	f7ff fa68 	bl	428d90 <__sprint_r.part.0>
  4298c0:	2800      	cmp	r0, #0
  4298c2:	f47f af57 	bne.w	429774 <_vfiprintf_r+0x964>
  4298c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4298c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4298ca:	1c48      	adds	r0, r1, #1
  4298cc:	46ca      	mov	sl, r9
  4298ce:	e448      	b.n	429162 <_vfiprintf_r+0x352>
  4298d0:	2a00      	cmp	r2, #0
  4298d2:	f040 8091 	bne.w	4299f8 <_vfiprintf_r+0xbe8>
  4298d6:	2001      	movs	r0, #1
  4298d8:	4611      	mov	r1, r2
  4298da:	46ca      	mov	sl, r9
  4298dc:	e641      	b.n	429562 <_vfiprintf_r+0x752>
  4298de:	aa0f      	add	r2, sp, #60	; 0x3c
  4298e0:	9904      	ldr	r1, [sp, #16]
  4298e2:	9806      	ldr	r0, [sp, #24]
  4298e4:	f7ff fa54 	bl	428d90 <__sprint_r.part.0>
  4298e8:	2800      	cmp	r0, #0
  4298ea:	f47f af43 	bne.w	429774 <_vfiprintf_r+0x964>
  4298ee:	9810      	ldr	r0, [sp, #64]	; 0x40
  4298f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4298f2:	3001      	adds	r0, #1
  4298f4:	46ca      	mov	sl, r9
  4298f6:	e667      	b.n	4295c8 <_vfiprintf_r+0x7b8>
  4298f8:	46d3      	mov	fp, sl
  4298fa:	e6d6      	b.n	4296aa <_vfiprintf_r+0x89a>
  4298fc:	9e07      	ldr	r6, [sp, #28]
  4298fe:	3607      	adds	r6, #7
  429900:	f026 0207 	bic.w	r2, r6, #7
  429904:	f102 0108 	add.w	r1, r2, #8
  429908:	e9d2 6700 	ldrd	r6, r7, [r2]
  42990c:	9107      	str	r1, [sp, #28]
  42990e:	2201      	movs	r2, #1
  429910:	f7ff bbb1 	b.w	429076 <_vfiprintf_r+0x266>
  429914:	9e07      	ldr	r6, [sp, #28]
  429916:	3607      	adds	r6, #7
  429918:	f026 0607 	bic.w	r6, r6, #7
  42991c:	e9d6 0100 	ldrd	r0, r1, [r6]
  429920:	f106 0208 	add.w	r2, r6, #8
  429924:	9207      	str	r2, [sp, #28]
  429926:	4606      	mov	r6, r0
  429928:	460f      	mov	r7, r1
  42992a:	e4b6      	b.n	42929a <_vfiprintf_r+0x48a>
  42992c:	9e07      	ldr	r6, [sp, #28]
  42992e:	3607      	adds	r6, #7
  429930:	f026 0207 	bic.w	r2, r6, #7
  429934:	f102 0108 	add.w	r1, r2, #8
  429938:	e9d2 6700 	ldrd	r6, r7, [r2]
  42993c:	9107      	str	r1, [sp, #28]
  42993e:	2200      	movs	r2, #0
  429940:	f7ff bb99 	b.w	429076 <_vfiprintf_r+0x266>
  429944:	9e07      	ldr	r6, [sp, #28]
  429946:	3607      	adds	r6, #7
  429948:	f026 0107 	bic.w	r1, r6, #7
  42994c:	f101 0008 	add.w	r0, r1, #8
  429950:	9007      	str	r0, [sp, #28]
  429952:	e9d1 6700 	ldrd	r6, r7, [r1]
  429956:	e519      	b.n	42938c <_vfiprintf_r+0x57c>
  429958:	46cb      	mov	fp, r9
  42995a:	f7ff bbab 	b.w	4290b4 <_vfiprintf_r+0x2a4>
  42995e:	252d      	movs	r5, #45	; 0x2d
  429960:	4276      	negs	r6, r6
  429962:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  429966:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  42996a:	2201      	movs	r2, #1
  42996c:	f7ff bb88 	b.w	429080 <_vfiprintf_r+0x270>
  429970:	9b09      	ldr	r3, [sp, #36]	; 0x24
  429972:	b9b3      	cbnz	r3, 4299a2 <_vfiprintf_r+0xb92>
  429974:	4611      	mov	r1, r2
  429976:	2001      	movs	r0, #1
  429978:	46ca      	mov	sl, r9
  42997a:	e5f2      	b.n	429562 <_vfiprintf_r+0x752>
  42997c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  429980:	f001 ff32 	bl	42b7e8 <__retarget_lock_release_recursive>
  429984:	f04f 33ff 	mov.w	r3, #4294967295
  429988:	9303      	str	r3, [sp, #12]
  42998a:	f7ff bb50 	b.w	42902e <_vfiprintf_r+0x21e>
  42998e:	aa0f      	add	r2, sp, #60	; 0x3c
  429990:	9904      	ldr	r1, [sp, #16]
  429992:	9806      	ldr	r0, [sp, #24]
  429994:	f7ff f9fc 	bl	428d90 <__sprint_r.part.0>
  429998:	2800      	cmp	r0, #0
  42999a:	f47f aeeb 	bne.w	429774 <_vfiprintf_r+0x964>
  42999e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4299a0:	e6a9      	b.n	4296f6 <_vfiprintf_r+0x8e6>
  4299a2:	ab0e      	add	r3, sp, #56	; 0x38
  4299a4:	2202      	movs	r2, #2
  4299a6:	931c      	str	r3, [sp, #112]	; 0x70
  4299a8:	921d      	str	r2, [sp, #116]	; 0x74
  4299aa:	2001      	movs	r0, #1
  4299ac:	46ca      	mov	sl, r9
  4299ae:	e5d0      	b.n	429552 <_vfiprintf_r+0x742>
  4299b0:	aa0f      	add	r2, sp, #60	; 0x3c
  4299b2:	9904      	ldr	r1, [sp, #16]
  4299b4:	9806      	ldr	r0, [sp, #24]
  4299b6:	f7ff f9eb 	bl	428d90 <__sprint_r.part.0>
  4299ba:	2800      	cmp	r0, #0
  4299bc:	f47f aeda 	bne.w	429774 <_vfiprintf_r+0x964>
  4299c0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4299c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4299c4:	1c48      	adds	r0, r1, #1
  4299c6:	46ca      	mov	sl, r9
  4299c8:	e5a4      	b.n	429514 <_vfiprintf_r+0x704>
  4299ca:	9a07      	ldr	r2, [sp, #28]
  4299cc:	9903      	ldr	r1, [sp, #12]
  4299ce:	6813      	ldr	r3, [r2, #0]
  4299d0:	17cd      	asrs	r5, r1, #31
  4299d2:	4608      	mov	r0, r1
  4299d4:	3204      	adds	r2, #4
  4299d6:	4629      	mov	r1, r5
  4299d8:	9207      	str	r2, [sp, #28]
  4299da:	e9c3 0100 	strd	r0, r1, [r3]
  4299de:	f7ff ba54 	b.w	428e8a <_vfiprintf_r+0x7a>
  4299e2:	4658      	mov	r0, fp
  4299e4:	9607      	str	r6, [sp, #28]
  4299e6:	9302      	str	r3, [sp, #8]
  4299e8:	f003 fa0a 	bl	42ce00 <strlen>
  4299ec:	2400      	movs	r4, #0
  4299ee:	9005      	str	r0, [sp, #20]
  4299f0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4299f4:	f7ff bb5e 	b.w	4290b4 <_vfiprintf_r+0x2a4>
  4299f8:	aa0f      	add	r2, sp, #60	; 0x3c
  4299fa:	9904      	ldr	r1, [sp, #16]
  4299fc:	9806      	ldr	r0, [sp, #24]
  4299fe:	f7ff f9c7 	bl	428d90 <__sprint_r.part.0>
  429a02:	2800      	cmp	r0, #0
  429a04:	f47f aeb6 	bne.w	429774 <_vfiprintf_r+0x964>
  429a08:	9910      	ldr	r1, [sp, #64]	; 0x40
  429a0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429a0c:	1c48      	adds	r0, r1, #1
  429a0e:	46ca      	mov	sl, r9
  429a10:	e5a7      	b.n	429562 <_vfiprintf_r+0x752>
  429a12:	9910      	ldr	r1, [sp, #64]	; 0x40
  429a14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429a16:	4e20      	ldr	r6, [pc, #128]	; (429a98 <_vfiprintf_r+0xc88>)
  429a18:	3101      	adds	r1, #1
  429a1a:	f7ff bb90 	b.w	42913e <_vfiprintf_r+0x32e>
  429a1e:	2c06      	cmp	r4, #6
  429a20:	bf28      	it	cs
  429a22:	2406      	movcs	r4, #6
  429a24:	9405      	str	r4, [sp, #20]
  429a26:	9607      	str	r6, [sp, #28]
  429a28:	9401      	str	r4, [sp, #4]
  429a2a:	f8df b070 	ldr.w	fp, [pc, #112]	; 429a9c <_vfiprintf_r+0xc8c>
  429a2e:	e4d5      	b.n	4293dc <_vfiprintf_r+0x5cc>
  429a30:	9810      	ldr	r0, [sp, #64]	; 0x40
  429a32:	4e19      	ldr	r6, [pc, #100]	; (429a98 <_vfiprintf_r+0xc88>)
  429a34:	3001      	adds	r0, #1
  429a36:	e603      	b.n	429640 <_vfiprintf_r+0x830>
  429a38:	9405      	str	r4, [sp, #20]
  429a3a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  429a3e:	9607      	str	r6, [sp, #28]
  429a40:	9302      	str	r3, [sp, #8]
  429a42:	4604      	mov	r4, r0
  429a44:	f7ff bb36 	b.w	4290b4 <_vfiprintf_r+0x2a4>
  429a48:	4686      	mov	lr, r0
  429a4a:	f7ff bbce 	b.w	4291ea <_vfiprintf_r+0x3da>
  429a4e:	9806      	ldr	r0, [sp, #24]
  429a50:	aa0f      	add	r2, sp, #60	; 0x3c
  429a52:	4659      	mov	r1, fp
  429a54:	f7ff f99c 	bl	428d90 <__sprint_r.part.0>
  429a58:	2800      	cmp	r0, #0
  429a5a:	f43f ae24 	beq.w	4296a6 <_vfiprintf_r+0x896>
  429a5e:	e624      	b.n	4296aa <_vfiprintf_r+0x89a>
  429a60:	9907      	ldr	r1, [sp, #28]
  429a62:	f898 2001 	ldrb.w	r2, [r8, #1]
  429a66:	680c      	ldr	r4, [r1, #0]
  429a68:	3104      	adds	r1, #4
  429a6a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  429a6e:	46b8      	mov	r8, r7
  429a70:	9107      	str	r1, [sp, #28]
  429a72:	f7ff ba3f 	b.w	428ef4 <_vfiprintf_r+0xe4>
  429a76:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429a7a:	e43c      	b.n	4292f6 <_vfiprintf_r+0x4e6>
  429a7c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429a80:	e521      	b.n	4294c6 <_vfiprintf_r+0x6b6>
  429a82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429a86:	f7ff bbf4 	b.w	429272 <_vfiprintf_r+0x462>
  429a8a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429a8e:	e491      	b.n	4293b4 <_vfiprintf_r+0x5a4>
  429a90:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429a94:	e469      	b.n	42936a <_vfiprintf_r+0x55a>
  429a96:	bf00      	nop
  429a98:	0042f7ac 	.word	0x0042f7ac
  429a9c:	0042f72c 	.word	0x0042f72c

00429aa0 <__sbprintf>:
  429aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  429aa4:	460c      	mov	r4, r1
  429aa6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  429aaa:	8989      	ldrh	r1, [r1, #12]
  429aac:	6e66      	ldr	r6, [r4, #100]	; 0x64
  429aae:	89e5      	ldrh	r5, [r4, #14]
  429ab0:	9619      	str	r6, [sp, #100]	; 0x64
  429ab2:	f021 0102 	bic.w	r1, r1, #2
  429ab6:	4606      	mov	r6, r0
  429ab8:	69e0      	ldr	r0, [r4, #28]
  429aba:	f8ad 100c 	strh.w	r1, [sp, #12]
  429abe:	4617      	mov	r7, r2
  429ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  429ac4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  429ac6:	f8ad 500e 	strh.w	r5, [sp, #14]
  429aca:	4698      	mov	r8, r3
  429acc:	ad1a      	add	r5, sp, #104	; 0x68
  429ace:	2300      	movs	r3, #0
  429ad0:	9007      	str	r0, [sp, #28]
  429ad2:	a816      	add	r0, sp, #88	; 0x58
  429ad4:	9209      	str	r2, [sp, #36]	; 0x24
  429ad6:	9306      	str	r3, [sp, #24]
  429ad8:	9500      	str	r5, [sp, #0]
  429ada:	9504      	str	r5, [sp, #16]
  429adc:	9102      	str	r1, [sp, #8]
  429ade:	9105      	str	r1, [sp, #20]
  429ae0:	f001 fe78 	bl	42b7d4 <__retarget_lock_init_recursive>
  429ae4:	4643      	mov	r3, r8
  429ae6:	463a      	mov	r2, r7
  429ae8:	4669      	mov	r1, sp
  429aea:	4630      	mov	r0, r6
  429aec:	f7ff f990 	bl	428e10 <_vfiprintf_r>
  429af0:	1e05      	subs	r5, r0, #0
  429af2:	db07      	blt.n	429b04 <__sbprintf+0x64>
  429af4:	4630      	mov	r0, r6
  429af6:	4669      	mov	r1, sp
  429af8:	f001 f904 	bl	42ad04 <_fflush_r>
  429afc:	2800      	cmp	r0, #0
  429afe:	bf18      	it	ne
  429b00:	f04f 35ff 	movne.w	r5, #4294967295
  429b04:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  429b08:	065b      	lsls	r3, r3, #25
  429b0a:	d503      	bpl.n	429b14 <__sbprintf+0x74>
  429b0c:	89a3      	ldrh	r3, [r4, #12]
  429b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429b12:	81a3      	strh	r3, [r4, #12]
  429b14:	9816      	ldr	r0, [sp, #88]	; 0x58
  429b16:	f001 fe5f 	bl	42b7d8 <__retarget_lock_close_recursive>
  429b1a:	4628      	mov	r0, r5
  429b1c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  429b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00429b24 <__swsetup_r>:
  429b24:	b538      	push	{r3, r4, r5, lr}
  429b26:	4b30      	ldr	r3, [pc, #192]	; (429be8 <__swsetup_r+0xc4>)
  429b28:	681b      	ldr	r3, [r3, #0]
  429b2a:	4605      	mov	r5, r0
  429b2c:	460c      	mov	r4, r1
  429b2e:	b113      	cbz	r3, 429b36 <__swsetup_r+0x12>
  429b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  429b32:	2a00      	cmp	r2, #0
  429b34:	d038      	beq.n	429ba8 <__swsetup_r+0x84>
  429b36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  429b3a:	b293      	uxth	r3, r2
  429b3c:	0718      	lsls	r0, r3, #28
  429b3e:	d50c      	bpl.n	429b5a <__swsetup_r+0x36>
  429b40:	6920      	ldr	r0, [r4, #16]
  429b42:	b1a8      	cbz	r0, 429b70 <__swsetup_r+0x4c>
  429b44:	f013 0201 	ands.w	r2, r3, #1
  429b48:	d01e      	beq.n	429b88 <__swsetup_r+0x64>
  429b4a:	6963      	ldr	r3, [r4, #20]
  429b4c:	2200      	movs	r2, #0
  429b4e:	425b      	negs	r3, r3
  429b50:	61a3      	str	r3, [r4, #24]
  429b52:	60a2      	str	r2, [r4, #8]
  429b54:	b1f0      	cbz	r0, 429b94 <__swsetup_r+0x70>
  429b56:	2000      	movs	r0, #0
  429b58:	bd38      	pop	{r3, r4, r5, pc}
  429b5a:	06d9      	lsls	r1, r3, #27
  429b5c:	d53c      	bpl.n	429bd8 <__swsetup_r+0xb4>
  429b5e:	0758      	lsls	r0, r3, #29
  429b60:	d426      	bmi.n	429bb0 <__swsetup_r+0x8c>
  429b62:	6920      	ldr	r0, [r4, #16]
  429b64:	f042 0308 	orr.w	r3, r2, #8
  429b68:	81a3      	strh	r3, [r4, #12]
  429b6a:	b29b      	uxth	r3, r3
  429b6c:	2800      	cmp	r0, #0
  429b6e:	d1e9      	bne.n	429b44 <__swsetup_r+0x20>
  429b70:	f403 7220 	and.w	r2, r3, #640	; 0x280
  429b74:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  429b78:	d0e4      	beq.n	429b44 <__swsetup_r+0x20>
  429b7a:	4628      	mov	r0, r5
  429b7c:	4621      	mov	r1, r4
  429b7e:	f001 fe63 	bl	42b848 <__smakebuf_r>
  429b82:	89a3      	ldrh	r3, [r4, #12]
  429b84:	6920      	ldr	r0, [r4, #16]
  429b86:	e7dd      	b.n	429b44 <__swsetup_r+0x20>
  429b88:	0799      	lsls	r1, r3, #30
  429b8a:	bf58      	it	pl
  429b8c:	6962      	ldrpl	r2, [r4, #20]
  429b8e:	60a2      	str	r2, [r4, #8]
  429b90:	2800      	cmp	r0, #0
  429b92:	d1e0      	bne.n	429b56 <__swsetup_r+0x32>
  429b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429b98:	061a      	lsls	r2, r3, #24
  429b9a:	d5dd      	bpl.n	429b58 <__swsetup_r+0x34>
  429b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429ba0:	81a3      	strh	r3, [r4, #12]
  429ba2:	f04f 30ff 	mov.w	r0, #4294967295
  429ba6:	bd38      	pop	{r3, r4, r5, pc}
  429ba8:	4618      	mov	r0, r3
  429baa:	f001 f903 	bl	42adb4 <__sinit>
  429bae:	e7c2      	b.n	429b36 <__swsetup_r+0x12>
  429bb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  429bb2:	b151      	cbz	r1, 429bca <__swsetup_r+0xa6>
  429bb4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  429bb8:	4299      	cmp	r1, r3
  429bba:	d004      	beq.n	429bc6 <__swsetup_r+0xa2>
  429bbc:	4628      	mov	r0, r5
  429bbe:	f001 fa1f 	bl	42b000 <_free_r>
  429bc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  429bc6:	2300      	movs	r3, #0
  429bc8:	6323      	str	r3, [r4, #48]	; 0x30
  429bca:	2300      	movs	r3, #0
  429bcc:	6920      	ldr	r0, [r4, #16]
  429bce:	6063      	str	r3, [r4, #4]
  429bd0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  429bd4:	6020      	str	r0, [r4, #0]
  429bd6:	e7c5      	b.n	429b64 <__swsetup_r+0x40>
  429bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  429bdc:	2309      	movs	r3, #9
  429bde:	602b      	str	r3, [r5, #0]
  429be0:	f04f 30ff 	mov.w	r0, #4294967295
  429be4:	81a2      	strh	r2, [r4, #12]
  429be6:	bd38      	pop	{r3, r4, r5, pc}
  429be8:	200000c8 	.word	0x200000c8

00429bec <register_fini>:
  429bec:	4b02      	ldr	r3, [pc, #8]	; (429bf8 <register_fini+0xc>)
  429bee:	b113      	cbz	r3, 429bf6 <register_fini+0xa>
  429bf0:	4802      	ldr	r0, [pc, #8]	; (429bfc <register_fini+0x10>)
  429bf2:	f000 b805 	b.w	429c00 <atexit>
  429bf6:	4770      	bx	lr
  429bf8:	00000000 	.word	0x00000000
  429bfc:	0042ae25 	.word	0x0042ae25

00429c00 <atexit>:
  429c00:	2300      	movs	r3, #0
  429c02:	4601      	mov	r1, r0
  429c04:	461a      	mov	r2, r3
  429c06:	4618      	mov	r0, r3
  429c08:	f004 b954 	b.w	42deb4 <__register_exitproc>

00429c0c <div>:
  429c0c:	2900      	cmp	r1, #0
  429c0e:	b410      	push	{r4}
  429c10:	fb91 f4f2 	sdiv	r4, r1, r2
  429c14:	fb02 1314 	mls	r3, r2, r4, r1
  429c18:	db05      	blt.n	429c26 <div+0x1a>
  429c1a:	2b00      	cmp	r3, #0
  429c1c:	db0c      	blt.n	429c38 <div+0x2c>
  429c1e:	6004      	str	r4, [r0, #0]
  429c20:	6043      	str	r3, [r0, #4]
  429c22:	bc10      	pop	{r4}
  429c24:	4770      	bx	lr
  429c26:	2b00      	cmp	r3, #0
  429c28:	bfc4      	itt	gt
  429c2a:	f104 34ff 	addgt.w	r4, r4, #4294967295
  429c2e:	189b      	addgt	r3, r3, r2
  429c30:	6004      	str	r4, [r0, #0]
  429c32:	6043      	str	r3, [r0, #4]
  429c34:	bc10      	pop	{r4}
  429c36:	4770      	bx	lr
  429c38:	3401      	adds	r4, #1
  429c3a:	1a9b      	subs	r3, r3, r2
  429c3c:	6004      	str	r4, [r0, #0]
  429c3e:	6043      	str	r3, [r0, #4]
  429c40:	bc10      	pop	{r4}
  429c42:	4770      	bx	lr

00429c44 <quorem>:
  429c44:	6902      	ldr	r2, [r0, #16]
  429c46:	690b      	ldr	r3, [r1, #16]
  429c48:	4293      	cmp	r3, r2
  429c4a:	f300 808d 	bgt.w	429d68 <quorem+0x124>
  429c4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  429c52:	f103 38ff 	add.w	r8, r3, #4294967295
  429c56:	f101 0714 	add.w	r7, r1, #20
  429c5a:	f100 0b14 	add.w	fp, r0, #20
  429c5e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  429c62:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  429c66:	ea4f 0488 	mov.w	r4, r8, lsl #2
  429c6a:	b083      	sub	sp, #12
  429c6c:	3201      	adds	r2, #1
  429c6e:	fbb3 f9f2 	udiv	r9, r3, r2
  429c72:	eb0b 0304 	add.w	r3, fp, r4
  429c76:	9400      	str	r4, [sp, #0]
  429c78:	eb07 0a04 	add.w	sl, r7, r4
  429c7c:	9301      	str	r3, [sp, #4]
  429c7e:	f1b9 0f00 	cmp.w	r9, #0
  429c82:	d039      	beq.n	429cf8 <quorem+0xb4>
  429c84:	2500      	movs	r5, #0
  429c86:	462e      	mov	r6, r5
  429c88:	46bc      	mov	ip, r7
  429c8a:	46de      	mov	lr, fp
  429c8c:	f85c 4b04 	ldr.w	r4, [ip], #4
  429c90:	f8de 3000 	ldr.w	r3, [lr]
  429c94:	b2a2      	uxth	r2, r4
  429c96:	fb09 5502 	mla	r5, r9, r2, r5
  429c9a:	0c22      	lsrs	r2, r4, #16
  429c9c:	0c2c      	lsrs	r4, r5, #16
  429c9e:	fb09 4202 	mla	r2, r9, r2, r4
  429ca2:	b2ad      	uxth	r5, r5
  429ca4:	1b75      	subs	r5, r6, r5
  429ca6:	b296      	uxth	r6, r2
  429ca8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  429cac:	fa15 f383 	uxtah	r3, r5, r3
  429cb0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  429cb4:	b29b      	uxth	r3, r3
  429cb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  429cba:	45e2      	cmp	sl, ip
  429cbc:	ea4f 4512 	mov.w	r5, r2, lsr #16
  429cc0:	f84e 3b04 	str.w	r3, [lr], #4
  429cc4:	ea4f 4626 	mov.w	r6, r6, asr #16
  429cc8:	d2e0      	bcs.n	429c8c <quorem+0x48>
  429cca:	9b00      	ldr	r3, [sp, #0]
  429ccc:	f85b 3003 	ldr.w	r3, [fp, r3]
  429cd0:	b993      	cbnz	r3, 429cf8 <quorem+0xb4>
  429cd2:	9c01      	ldr	r4, [sp, #4]
  429cd4:	1f23      	subs	r3, r4, #4
  429cd6:	459b      	cmp	fp, r3
  429cd8:	d20c      	bcs.n	429cf4 <quorem+0xb0>
  429cda:	f854 3c04 	ldr.w	r3, [r4, #-4]
  429cde:	b94b      	cbnz	r3, 429cf4 <quorem+0xb0>
  429ce0:	f1a4 0308 	sub.w	r3, r4, #8
  429ce4:	e002      	b.n	429cec <quorem+0xa8>
  429ce6:	681a      	ldr	r2, [r3, #0]
  429ce8:	3b04      	subs	r3, #4
  429cea:	b91a      	cbnz	r2, 429cf4 <quorem+0xb0>
  429cec:	459b      	cmp	fp, r3
  429cee:	f108 38ff 	add.w	r8, r8, #4294967295
  429cf2:	d3f8      	bcc.n	429ce6 <quorem+0xa2>
  429cf4:	f8c0 8010 	str.w	r8, [r0, #16]
  429cf8:	4604      	mov	r4, r0
  429cfa:	f002 fb87 	bl	42c40c <__mcmp>
  429cfe:	2800      	cmp	r0, #0
  429d00:	db2e      	blt.n	429d60 <quorem+0x11c>
  429d02:	f109 0901 	add.w	r9, r9, #1
  429d06:	465d      	mov	r5, fp
  429d08:	2300      	movs	r3, #0
  429d0a:	f857 1b04 	ldr.w	r1, [r7], #4
  429d0e:	6828      	ldr	r0, [r5, #0]
  429d10:	b28a      	uxth	r2, r1
  429d12:	1a9a      	subs	r2, r3, r2
  429d14:	0c0b      	lsrs	r3, r1, #16
  429d16:	fa12 f280 	uxtah	r2, r2, r0
  429d1a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  429d1e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  429d22:	b292      	uxth	r2, r2
  429d24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  429d28:	45ba      	cmp	sl, r7
  429d2a:	f845 2b04 	str.w	r2, [r5], #4
  429d2e:	ea4f 4323 	mov.w	r3, r3, asr #16
  429d32:	d2ea      	bcs.n	429d0a <quorem+0xc6>
  429d34:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  429d38:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  429d3c:	b982      	cbnz	r2, 429d60 <quorem+0x11c>
  429d3e:	1f1a      	subs	r2, r3, #4
  429d40:	4593      	cmp	fp, r2
  429d42:	d20b      	bcs.n	429d5c <quorem+0x118>
  429d44:	f853 2c04 	ldr.w	r2, [r3, #-4]
  429d48:	b942      	cbnz	r2, 429d5c <quorem+0x118>
  429d4a:	3b08      	subs	r3, #8
  429d4c:	e002      	b.n	429d54 <quorem+0x110>
  429d4e:	681a      	ldr	r2, [r3, #0]
  429d50:	3b04      	subs	r3, #4
  429d52:	b91a      	cbnz	r2, 429d5c <quorem+0x118>
  429d54:	459b      	cmp	fp, r3
  429d56:	f108 38ff 	add.w	r8, r8, #4294967295
  429d5a:	d3f8      	bcc.n	429d4e <quorem+0x10a>
  429d5c:	f8c4 8010 	str.w	r8, [r4, #16]
  429d60:	4648      	mov	r0, r9
  429d62:	b003      	add	sp, #12
  429d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429d68:	2000      	movs	r0, #0
  429d6a:	4770      	bx	lr
  429d6c:	0000      	movs	r0, r0
	...

00429d70 <_dtoa_r>:
  429d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  429d74:	6c01      	ldr	r1, [r0, #64]	; 0x40
  429d76:	b09b      	sub	sp, #108	; 0x6c
  429d78:	4604      	mov	r4, r0
  429d7a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  429d7c:	4692      	mov	sl, r2
  429d7e:	469b      	mov	fp, r3
  429d80:	b141      	cbz	r1, 429d94 <_dtoa_r+0x24>
  429d82:	6c42      	ldr	r2, [r0, #68]	; 0x44
  429d84:	604a      	str	r2, [r1, #4]
  429d86:	2301      	movs	r3, #1
  429d88:	4093      	lsls	r3, r2
  429d8a:	608b      	str	r3, [r1, #8]
  429d8c:	f002 f966 	bl	42c05c <_Bfree>
  429d90:	2300      	movs	r3, #0
  429d92:	6423      	str	r3, [r4, #64]	; 0x40
  429d94:	f1bb 0f00 	cmp.w	fp, #0
  429d98:	465d      	mov	r5, fp
  429d9a:	db35      	blt.n	429e08 <_dtoa_r+0x98>
  429d9c:	2300      	movs	r3, #0
  429d9e:	6033      	str	r3, [r6, #0]
  429da0:	4b9d      	ldr	r3, [pc, #628]	; (42a018 <_dtoa_r+0x2a8>)
  429da2:	43ab      	bics	r3, r5
  429da4:	d015      	beq.n	429dd2 <_dtoa_r+0x62>
  429da6:	4650      	mov	r0, sl
  429da8:	4659      	mov	r1, fp
  429daa:	2200      	movs	r2, #0
  429dac:	2300      	movs	r3, #0
  429dae:	f005 f8f1 	bl	42ef94 <__aeabi_dcmpeq>
  429db2:	4680      	mov	r8, r0
  429db4:	2800      	cmp	r0, #0
  429db6:	d02d      	beq.n	429e14 <_dtoa_r+0xa4>
  429db8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  429dba:	2301      	movs	r3, #1
  429dbc:	6013      	str	r3, [r2, #0]
  429dbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  429dc0:	2b00      	cmp	r3, #0
  429dc2:	f000 80bd 	beq.w	429f40 <_dtoa_r+0x1d0>
  429dc6:	4895      	ldr	r0, [pc, #596]	; (42a01c <_dtoa_r+0x2ac>)
  429dc8:	6018      	str	r0, [r3, #0]
  429dca:	3801      	subs	r0, #1
  429dcc:	b01b      	add	sp, #108	; 0x6c
  429dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429dd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  429dd4:	f242 730f 	movw	r3, #9999	; 0x270f
  429dd8:	6013      	str	r3, [r2, #0]
  429dda:	f1ba 0f00 	cmp.w	sl, #0
  429dde:	d10d      	bne.n	429dfc <_dtoa_r+0x8c>
  429de0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  429de4:	b955      	cbnz	r5, 429dfc <_dtoa_r+0x8c>
  429de6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  429de8:	488d      	ldr	r0, [pc, #564]	; (42a020 <_dtoa_r+0x2b0>)
  429dea:	2b00      	cmp	r3, #0
  429dec:	d0ee      	beq.n	429dcc <_dtoa_r+0x5c>
  429dee:	f100 0308 	add.w	r3, r0, #8
  429df2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  429df4:	6013      	str	r3, [r2, #0]
  429df6:	b01b      	add	sp, #108	; 0x6c
  429df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429dfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  429dfe:	4889      	ldr	r0, [pc, #548]	; (42a024 <_dtoa_r+0x2b4>)
  429e00:	2b00      	cmp	r3, #0
  429e02:	d0e3      	beq.n	429dcc <_dtoa_r+0x5c>
  429e04:	1cc3      	adds	r3, r0, #3
  429e06:	e7f4      	b.n	429df2 <_dtoa_r+0x82>
  429e08:	2301      	movs	r3, #1
  429e0a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  429e0e:	6033      	str	r3, [r6, #0]
  429e10:	46ab      	mov	fp, r5
  429e12:	e7c5      	b.n	429da0 <_dtoa_r+0x30>
  429e14:	aa18      	add	r2, sp, #96	; 0x60
  429e16:	ab19      	add	r3, sp, #100	; 0x64
  429e18:	9201      	str	r2, [sp, #4]
  429e1a:	9300      	str	r3, [sp, #0]
  429e1c:	4652      	mov	r2, sl
  429e1e:	465b      	mov	r3, fp
  429e20:	4620      	mov	r0, r4
  429e22:	f002 fb93 	bl	42c54c <__d2b>
  429e26:	0d2b      	lsrs	r3, r5, #20
  429e28:	4681      	mov	r9, r0
  429e2a:	d071      	beq.n	429f10 <_dtoa_r+0x1a0>
  429e2c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  429e30:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  429e34:	9f18      	ldr	r7, [sp, #96]	; 0x60
  429e36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  429e3a:	4650      	mov	r0, sl
  429e3c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  429e40:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  429e44:	2200      	movs	r2, #0
  429e46:	4b78      	ldr	r3, [pc, #480]	; (42a028 <_dtoa_r+0x2b8>)
  429e48:	f004 fc88 	bl	42e75c <__aeabi_dsub>
  429e4c:	a36c      	add	r3, pc, #432	; (adr r3, 42a000 <_dtoa_r+0x290>)
  429e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
  429e52:	f004 fe37 	bl	42eac4 <__aeabi_dmul>
  429e56:	a36c      	add	r3, pc, #432	; (adr r3, 42a008 <_dtoa_r+0x298>)
  429e58:	e9d3 2300 	ldrd	r2, r3, [r3]
  429e5c:	f004 fc80 	bl	42e760 <__adddf3>
  429e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
  429e64:	4630      	mov	r0, r6
  429e66:	f004 fdc7 	bl	42e9f8 <__aeabi_i2d>
  429e6a:	a369      	add	r3, pc, #420	; (adr r3, 42a010 <_dtoa_r+0x2a0>)
  429e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  429e70:	f004 fe28 	bl	42eac4 <__aeabi_dmul>
  429e74:	4602      	mov	r2, r0
  429e76:	460b      	mov	r3, r1
  429e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  429e7c:	f004 fc70 	bl	42e760 <__adddf3>
  429e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
  429e84:	f005 f8ce 	bl	42f024 <__aeabi_d2iz>
  429e88:	2200      	movs	r2, #0
  429e8a:	9002      	str	r0, [sp, #8]
  429e8c:	2300      	movs	r3, #0
  429e8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  429e92:	f005 f889 	bl	42efa8 <__aeabi_dcmplt>
  429e96:	2800      	cmp	r0, #0
  429e98:	f040 8173 	bne.w	42a182 <_dtoa_r+0x412>
  429e9c:	9d02      	ldr	r5, [sp, #8]
  429e9e:	2d16      	cmp	r5, #22
  429ea0:	f200 815d 	bhi.w	42a15e <_dtoa_r+0x3ee>
  429ea4:	4b61      	ldr	r3, [pc, #388]	; (42a02c <_dtoa_r+0x2bc>)
  429ea6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  429eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
  429eae:	4652      	mov	r2, sl
  429eb0:	465b      	mov	r3, fp
  429eb2:	f005 f897 	bl	42efe4 <__aeabi_dcmpgt>
  429eb6:	2800      	cmp	r0, #0
  429eb8:	f000 81c5 	beq.w	42a246 <_dtoa_r+0x4d6>
  429ebc:	1e6b      	subs	r3, r5, #1
  429ebe:	9302      	str	r3, [sp, #8]
  429ec0:	2300      	movs	r3, #0
  429ec2:	930e      	str	r3, [sp, #56]	; 0x38
  429ec4:	1bbf      	subs	r7, r7, r6
  429ec6:	1e7b      	subs	r3, r7, #1
  429ec8:	9306      	str	r3, [sp, #24]
  429eca:	f100 8154 	bmi.w	42a176 <_dtoa_r+0x406>
  429ece:	2300      	movs	r3, #0
  429ed0:	9308      	str	r3, [sp, #32]
  429ed2:	9b02      	ldr	r3, [sp, #8]
  429ed4:	2b00      	cmp	r3, #0
  429ed6:	f2c0 8145 	blt.w	42a164 <_dtoa_r+0x3f4>
  429eda:	9a06      	ldr	r2, [sp, #24]
  429edc:	930d      	str	r3, [sp, #52]	; 0x34
  429ede:	4611      	mov	r1, r2
  429ee0:	4419      	add	r1, r3
  429ee2:	2300      	movs	r3, #0
  429ee4:	9106      	str	r1, [sp, #24]
  429ee6:	930c      	str	r3, [sp, #48]	; 0x30
  429ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  429eea:	2b09      	cmp	r3, #9
  429eec:	d82a      	bhi.n	429f44 <_dtoa_r+0x1d4>
  429eee:	2b05      	cmp	r3, #5
  429ef0:	f340 865b 	ble.w	42abaa <_dtoa_r+0xe3a>
  429ef4:	3b04      	subs	r3, #4
  429ef6:	9324      	str	r3, [sp, #144]	; 0x90
  429ef8:	2500      	movs	r5, #0
  429efa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  429efc:	3b02      	subs	r3, #2
  429efe:	2b03      	cmp	r3, #3
  429f00:	f200 8642 	bhi.w	42ab88 <_dtoa_r+0xe18>
  429f04:	e8df f013 	tbh	[pc, r3, lsl #1]
  429f08:	02c903d4 	.word	0x02c903d4
  429f0c:	046103df 	.word	0x046103df
  429f10:	9f18      	ldr	r7, [sp, #96]	; 0x60
  429f12:	9e19      	ldr	r6, [sp, #100]	; 0x64
  429f14:	443e      	add	r6, r7
  429f16:	f206 4332 	addw	r3, r6, #1074	; 0x432
  429f1a:	2b20      	cmp	r3, #32
  429f1c:	f340 818e 	ble.w	42a23c <_dtoa_r+0x4cc>
  429f20:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  429f24:	f206 4012 	addw	r0, r6, #1042	; 0x412
  429f28:	409d      	lsls	r5, r3
  429f2a:	fa2a f000 	lsr.w	r0, sl, r0
  429f2e:	4328      	orrs	r0, r5
  429f30:	f004 fd52 	bl	42e9d8 <__aeabi_ui2d>
  429f34:	2301      	movs	r3, #1
  429f36:	3e01      	subs	r6, #1
  429f38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  429f3c:	9314      	str	r3, [sp, #80]	; 0x50
  429f3e:	e781      	b.n	429e44 <_dtoa_r+0xd4>
  429f40:	483b      	ldr	r0, [pc, #236]	; (42a030 <_dtoa_r+0x2c0>)
  429f42:	e743      	b.n	429dcc <_dtoa_r+0x5c>
  429f44:	2100      	movs	r1, #0
  429f46:	6461      	str	r1, [r4, #68]	; 0x44
  429f48:	4620      	mov	r0, r4
  429f4a:	9125      	str	r1, [sp, #148]	; 0x94
  429f4c:	f002 f860 	bl	42c010 <_Balloc>
  429f50:	f04f 33ff 	mov.w	r3, #4294967295
  429f54:	930a      	str	r3, [sp, #40]	; 0x28
  429f56:	9a25      	ldr	r2, [sp, #148]	; 0x94
  429f58:	930f      	str	r3, [sp, #60]	; 0x3c
  429f5a:	2301      	movs	r3, #1
  429f5c:	9004      	str	r0, [sp, #16]
  429f5e:	6420      	str	r0, [r4, #64]	; 0x40
  429f60:	9224      	str	r2, [sp, #144]	; 0x90
  429f62:	930b      	str	r3, [sp, #44]	; 0x2c
  429f64:	9b19      	ldr	r3, [sp, #100]	; 0x64
  429f66:	2b00      	cmp	r3, #0
  429f68:	f2c0 80d9 	blt.w	42a11e <_dtoa_r+0x3ae>
  429f6c:	9a02      	ldr	r2, [sp, #8]
  429f6e:	2a0e      	cmp	r2, #14
  429f70:	f300 80d5 	bgt.w	42a11e <_dtoa_r+0x3ae>
  429f74:	4b2d      	ldr	r3, [pc, #180]	; (42a02c <_dtoa_r+0x2bc>)
  429f76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  429f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
  429f7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  429f82:	9b25      	ldr	r3, [sp, #148]	; 0x94
  429f84:	2b00      	cmp	r3, #0
  429f86:	f2c0 83ba 	blt.w	42a6fe <_dtoa_r+0x98e>
  429f8a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  429f8e:	4650      	mov	r0, sl
  429f90:	462a      	mov	r2, r5
  429f92:	4633      	mov	r3, r6
  429f94:	4659      	mov	r1, fp
  429f96:	f004 febf 	bl	42ed18 <__aeabi_ddiv>
  429f9a:	f005 f843 	bl	42f024 <__aeabi_d2iz>
  429f9e:	4680      	mov	r8, r0
  429fa0:	f004 fd2a 	bl	42e9f8 <__aeabi_i2d>
  429fa4:	462a      	mov	r2, r5
  429fa6:	4633      	mov	r3, r6
  429fa8:	f004 fd8c 	bl	42eac4 <__aeabi_dmul>
  429fac:	460b      	mov	r3, r1
  429fae:	4602      	mov	r2, r0
  429fb0:	4659      	mov	r1, fp
  429fb2:	4650      	mov	r0, sl
  429fb4:	f004 fbd2 	bl	42e75c <__aeabi_dsub>
  429fb8:	9d04      	ldr	r5, [sp, #16]
  429fba:	f108 0330 	add.w	r3, r8, #48	; 0x30
  429fbe:	702b      	strb	r3, [r5, #0]
  429fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  429fc2:	2b01      	cmp	r3, #1
  429fc4:	4606      	mov	r6, r0
  429fc6:	460f      	mov	r7, r1
  429fc8:	f105 0501 	add.w	r5, r5, #1
  429fcc:	d068      	beq.n	42a0a0 <_dtoa_r+0x330>
  429fce:	2200      	movs	r2, #0
  429fd0:	4b18      	ldr	r3, [pc, #96]	; (42a034 <_dtoa_r+0x2c4>)
  429fd2:	f004 fd77 	bl	42eac4 <__aeabi_dmul>
  429fd6:	2200      	movs	r2, #0
  429fd8:	2300      	movs	r3, #0
  429fda:	4606      	mov	r6, r0
  429fdc:	460f      	mov	r7, r1
  429fde:	f004 ffd9 	bl	42ef94 <__aeabi_dcmpeq>
  429fe2:	2800      	cmp	r0, #0
  429fe4:	f040 8088 	bne.w	42a0f8 <_dtoa_r+0x388>
  429fe8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  429fec:	f04f 0a00 	mov.w	sl, #0
  429ff0:	f8df b040 	ldr.w	fp, [pc, #64]	; 42a034 <_dtoa_r+0x2c4>
  429ff4:	940c      	str	r4, [sp, #48]	; 0x30
  429ff6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  429ffa:	e028      	b.n	42a04e <_dtoa_r+0x2de>
  429ffc:	f3af 8000 	nop.w
  42a000:	636f4361 	.word	0x636f4361
  42a004:	3fd287a7 	.word	0x3fd287a7
  42a008:	8b60c8b3 	.word	0x8b60c8b3
  42a00c:	3fc68a28 	.word	0x3fc68a28
  42a010:	509f79fb 	.word	0x509f79fb
  42a014:	3fd34413 	.word	0x3fd34413
  42a018:	7ff00000 	.word	0x7ff00000
  42a01c:	0042f735 	.word	0x0042f735
  42a020:	0042f7cc 	.word	0x0042f7cc
  42a024:	0042f7d8 	.word	0x0042f7d8
  42a028:	3ff80000 	.word	0x3ff80000
  42a02c:	0042f818 	.word	0x0042f818
  42a030:	0042f734 	.word	0x0042f734
  42a034:	40240000 	.word	0x40240000
  42a038:	f004 fd44 	bl	42eac4 <__aeabi_dmul>
  42a03c:	2200      	movs	r2, #0
  42a03e:	2300      	movs	r3, #0
  42a040:	4606      	mov	r6, r0
  42a042:	460f      	mov	r7, r1
  42a044:	f004 ffa6 	bl	42ef94 <__aeabi_dcmpeq>
  42a048:	2800      	cmp	r0, #0
  42a04a:	f040 83c1 	bne.w	42a7d0 <_dtoa_r+0xa60>
  42a04e:	4642      	mov	r2, r8
  42a050:	464b      	mov	r3, r9
  42a052:	4630      	mov	r0, r6
  42a054:	4639      	mov	r1, r7
  42a056:	f004 fe5f 	bl	42ed18 <__aeabi_ddiv>
  42a05a:	f004 ffe3 	bl	42f024 <__aeabi_d2iz>
  42a05e:	4604      	mov	r4, r0
  42a060:	f004 fcca 	bl	42e9f8 <__aeabi_i2d>
  42a064:	4642      	mov	r2, r8
  42a066:	464b      	mov	r3, r9
  42a068:	f004 fd2c 	bl	42eac4 <__aeabi_dmul>
  42a06c:	4602      	mov	r2, r0
  42a06e:	460b      	mov	r3, r1
  42a070:	4630      	mov	r0, r6
  42a072:	4639      	mov	r1, r7
  42a074:	f004 fb72 	bl	42e75c <__aeabi_dsub>
  42a078:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  42a07c:	9e04      	ldr	r6, [sp, #16]
  42a07e:	f805 eb01 	strb.w	lr, [r5], #1
  42a082:	eba5 0e06 	sub.w	lr, r5, r6
  42a086:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  42a088:	45b6      	cmp	lr, r6
  42a08a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  42a08e:	4652      	mov	r2, sl
  42a090:	465b      	mov	r3, fp
  42a092:	d1d1      	bne.n	42a038 <_dtoa_r+0x2c8>
  42a094:	46a0      	mov	r8, r4
  42a096:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  42a09a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  42a09c:	4606      	mov	r6, r0
  42a09e:	460f      	mov	r7, r1
  42a0a0:	4632      	mov	r2, r6
  42a0a2:	463b      	mov	r3, r7
  42a0a4:	4630      	mov	r0, r6
  42a0a6:	4639      	mov	r1, r7
  42a0a8:	f004 fb5a 	bl	42e760 <__adddf3>
  42a0ac:	4606      	mov	r6, r0
  42a0ae:	460f      	mov	r7, r1
  42a0b0:	4602      	mov	r2, r0
  42a0b2:	460b      	mov	r3, r1
  42a0b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  42a0b8:	f004 ff76 	bl	42efa8 <__aeabi_dcmplt>
  42a0bc:	b948      	cbnz	r0, 42a0d2 <_dtoa_r+0x362>
  42a0be:	4632      	mov	r2, r6
  42a0c0:	463b      	mov	r3, r7
  42a0c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  42a0c6:	f004 ff65 	bl	42ef94 <__aeabi_dcmpeq>
  42a0ca:	b1a8      	cbz	r0, 42a0f8 <_dtoa_r+0x388>
  42a0cc:	f018 0f01 	tst.w	r8, #1
  42a0d0:	d012      	beq.n	42a0f8 <_dtoa_r+0x388>
  42a0d2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  42a0d6:	9a04      	ldr	r2, [sp, #16]
  42a0d8:	1e6b      	subs	r3, r5, #1
  42a0da:	e004      	b.n	42a0e6 <_dtoa_r+0x376>
  42a0dc:	429a      	cmp	r2, r3
  42a0de:	f000 8401 	beq.w	42a8e4 <_dtoa_r+0xb74>
  42a0e2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  42a0e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  42a0ea:	f103 0501 	add.w	r5, r3, #1
  42a0ee:	d0f5      	beq.n	42a0dc <_dtoa_r+0x36c>
  42a0f0:	f108 0801 	add.w	r8, r8, #1
  42a0f4:	f883 8000 	strb.w	r8, [r3]
  42a0f8:	4649      	mov	r1, r9
  42a0fa:	4620      	mov	r0, r4
  42a0fc:	f001 ffae 	bl	42c05c <_Bfree>
  42a100:	2200      	movs	r2, #0
  42a102:	9b02      	ldr	r3, [sp, #8]
  42a104:	702a      	strb	r2, [r5, #0]
  42a106:	9a26      	ldr	r2, [sp, #152]	; 0x98
  42a108:	3301      	adds	r3, #1
  42a10a:	6013      	str	r3, [r2, #0]
  42a10c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  42a10e:	2b00      	cmp	r3, #0
  42a110:	f000 839e 	beq.w	42a850 <_dtoa_r+0xae0>
  42a114:	9804      	ldr	r0, [sp, #16]
  42a116:	601d      	str	r5, [r3, #0]
  42a118:	b01b      	add	sp, #108	; 0x6c
  42a11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42a11e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  42a120:	2a00      	cmp	r2, #0
  42a122:	d03e      	beq.n	42a1a2 <_dtoa_r+0x432>
  42a124:	9a24      	ldr	r2, [sp, #144]	; 0x90
  42a126:	2a01      	cmp	r2, #1
  42a128:	f340 8311 	ble.w	42a74e <_dtoa_r+0x9de>
  42a12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42a12e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  42a130:	1e5f      	subs	r7, r3, #1
  42a132:	42ba      	cmp	r2, r7
  42a134:	f2c0 838f 	blt.w	42a856 <_dtoa_r+0xae6>
  42a138:	1bd7      	subs	r7, r2, r7
  42a13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42a13c:	2b00      	cmp	r3, #0
  42a13e:	f2c0 848b 	blt.w	42aa58 <_dtoa_r+0xce8>
  42a142:	9d08      	ldr	r5, [sp, #32]
  42a144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42a146:	9a08      	ldr	r2, [sp, #32]
  42a148:	441a      	add	r2, r3
  42a14a:	9208      	str	r2, [sp, #32]
  42a14c:	9a06      	ldr	r2, [sp, #24]
  42a14e:	2101      	movs	r1, #1
  42a150:	441a      	add	r2, r3
  42a152:	4620      	mov	r0, r4
  42a154:	9206      	str	r2, [sp, #24]
  42a156:	f002 f81b 	bl	42c190 <__i2b>
  42a15a:	4606      	mov	r6, r0
  42a15c:	e024      	b.n	42a1a8 <_dtoa_r+0x438>
  42a15e:	2301      	movs	r3, #1
  42a160:	930e      	str	r3, [sp, #56]	; 0x38
  42a162:	e6af      	b.n	429ec4 <_dtoa_r+0x154>
  42a164:	9a08      	ldr	r2, [sp, #32]
  42a166:	9b02      	ldr	r3, [sp, #8]
  42a168:	1ad2      	subs	r2, r2, r3
  42a16a:	425b      	negs	r3, r3
  42a16c:	930c      	str	r3, [sp, #48]	; 0x30
  42a16e:	2300      	movs	r3, #0
  42a170:	9208      	str	r2, [sp, #32]
  42a172:	930d      	str	r3, [sp, #52]	; 0x34
  42a174:	e6b8      	b.n	429ee8 <_dtoa_r+0x178>
  42a176:	f1c7 0301 	rsb	r3, r7, #1
  42a17a:	9308      	str	r3, [sp, #32]
  42a17c:	2300      	movs	r3, #0
  42a17e:	9306      	str	r3, [sp, #24]
  42a180:	e6a7      	b.n	429ed2 <_dtoa_r+0x162>
  42a182:	9d02      	ldr	r5, [sp, #8]
  42a184:	4628      	mov	r0, r5
  42a186:	f004 fc37 	bl	42e9f8 <__aeabi_i2d>
  42a18a:	4602      	mov	r2, r0
  42a18c:	460b      	mov	r3, r1
  42a18e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  42a192:	f004 feff 	bl	42ef94 <__aeabi_dcmpeq>
  42a196:	2800      	cmp	r0, #0
  42a198:	f47f ae80 	bne.w	429e9c <_dtoa_r+0x12c>
  42a19c:	1e6b      	subs	r3, r5, #1
  42a19e:	9302      	str	r3, [sp, #8]
  42a1a0:	e67c      	b.n	429e9c <_dtoa_r+0x12c>
  42a1a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  42a1a4:	9d08      	ldr	r5, [sp, #32]
  42a1a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  42a1a8:	2d00      	cmp	r5, #0
  42a1aa:	dd0c      	ble.n	42a1c6 <_dtoa_r+0x456>
  42a1ac:	9906      	ldr	r1, [sp, #24]
  42a1ae:	2900      	cmp	r1, #0
  42a1b0:	460b      	mov	r3, r1
  42a1b2:	dd08      	ble.n	42a1c6 <_dtoa_r+0x456>
  42a1b4:	42a9      	cmp	r1, r5
  42a1b6:	9a08      	ldr	r2, [sp, #32]
  42a1b8:	bfa8      	it	ge
  42a1ba:	462b      	movge	r3, r5
  42a1bc:	1ad2      	subs	r2, r2, r3
  42a1be:	1aed      	subs	r5, r5, r3
  42a1c0:	1acb      	subs	r3, r1, r3
  42a1c2:	9208      	str	r2, [sp, #32]
  42a1c4:	9306      	str	r3, [sp, #24]
  42a1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  42a1c8:	b1d3      	cbz	r3, 42a200 <_dtoa_r+0x490>
  42a1ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  42a1cc:	2b00      	cmp	r3, #0
  42a1ce:	f000 82b7 	beq.w	42a740 <_dtoa_r+0x9d0>
  42a1d2:	2f00      	cmp	r7, #0
  42a1d4:	dd10      	ble.n	42a1f8 <_dtoa_r+0x488>
  42a1d6:	4631      	mov	r1, r6
  42a1d8:	463a      	mov	r2, r7
  42a1da:	4620      	mov	r0, r4
  42a1dc:	f002 f874 	bl	42c2c8 <__pow5mult>
  42a1e0:	464a      	mov	r2, r9
  42a1e2:	4601      	mov	r1, r0
  42a1e4:	4606      	mov	r6, r0
  42a1e6:	4620      	mov	r0, r4
  42a1e8:	f001 ffdc 	bl	42c1a4 <__multiply>
  42a1ec:	4649      	mov	r1, r9
  42a1ee:	4680      	mov	r8, r0
  42a1f0:	4620      	mov	r0, r4
  42a1f2:	f001 ff33 	bl	42c05c <_Bfree>
  42a1f6:	46c1      	mov	r9, r8
  42a1f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  42a1fa:	1bda      	subs	r2, r3, r7
  42a1fc:	f040 82a1 	bne.w	42a742 <_dtoa_r+0x9d2>
  42a200:	2101      	movs	r1, #1
  42a202:	4620      	mov	r0, r4
  42a204:	f001 ffc4 	bl	42c190 <__i2b>
  42a208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  42a20a:	2b00      	cmp	r3, #0
  42a20c:	4680      	mov	r8, r0
  42a20e:	dd1c      	ble.n	42a24a <_dtoa_r+0x4da>
  42a210:	4601      	mov	r1, r0
  42a212:	461a      	mov	r2, r3
  42a214:	4620      	mov	r0, r4
  42a216:	f002 f857 	bl	42c2c8 <__pow5mult>
  42a21a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  42a21c:	2b01      	cmp	r3, #1
  42a21e:	4680      	mov	r8, r0
  42a220:	f340 8254 	ble.w	42a6cc <_dtoa_r+0x95c>
  42a224:	2300      	movs	r3, #0
  42a226:	930c      	str	r3, [sp, #48]	; 0x30
  42a228:	f8d8 3010 	ldr.w	r3, [r8, #16]
  42a22c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  42a230:	6918      	ldr	r0, [r3, #16]
  42a232:	f001 ff5d 	bl	42c0f0 <__hi0bits>
  42a236:	f1c0 0020 	rsb	r0, r0, #32
  42a23a:	e010      	b.n	42a25e <_dtoa_r+0x4ee>
  42a23c:	f1c3 0520 	rsb	r5, r3, #32
  42a240:	fa0a f005 	lsl.w	r0, sl, r5
  42a244:	e674      	b.n	429f30 <_dtoa_r+0x1c0>
  42a246:	900e      	str	r0, [sp, #56]	; 0x38
  42a248:	e63c      	b.n	429ec4 <_dtoa_r+0x154>
  42a24a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  42a24c:	2b01      	cmp	r3, #1
  42a24e:	f340 8287 	ble.w	42a760 <_dtoa_r+0x9f0>
  42a252:	2300      	movs	r3, #0
  42a254:	930c      	str	r3, [sp, #48]	; 0x30
  42a256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  42a258:	2001      	movs	r0, #1
  42a25a:	2b00      	cmp	r3, #0
  42a25c:	d1e4      	bne.n	42a228 <_dtoa_r+0x4b8>
  42a25e:	9a06      	ldr	r2, [sp, #24]
  42a260:	4410      	add	r0, r2
  42a262:	f010 001f 	ands.w	r0, r0, #31
  42a266:	f000 80a1 	beq.w	42a3ac <_dtoa_r+0x63c>
  42a26a:	f1c0 0320 	rsb	r3, r0, #32
  42a26e:	2b04      	cmp	r3, #4
  42a270:	f340 849e 	ble.w	42abb0 <_dtoa_r+0xe40>
  42a274:	9b08      	ldr	r3, [sp, #32]
  42a276:	f1c0 001c 	rsb	r0, r0, #28
  42a27a:	4403      	add	r3, r0
  42a27c:	9308      	str	r3, [sp, #32]
  42a27e:	4613      	mov	r3, r2
  42a280:	4403      	add	r3, r0
  42a282:	4405      	add	r5, r0
  42a284:	9306      	str	r3, [sp, #24]
  42a286:	9b08      	ldr	r3, [sp, #32]
  42a288:	2b00      	cmp	r3, #0
  42a28a:	dd05      	ble.n	42a298 <_dtoa_r+0x528>
  42a28c:	4649      	mov	r1, r9
  42a28e:	461a      	mov	r2, r3
  42a290:	4620      	mov	r0, r4
  42a292:	f002 f869 	bl	42c368 <__lshift>
  42a296:	4681      	mov	r9, r0
  42a298:	9b06      	ldr	r3, [sp, #24]
  42a29a:	2b00      	cmp	r3, #0
  42a29c:	dd05      	ble.n	42a2aa <_dtoa_r+0x53a>
  42a29e:	4641      	mov	r1, r8
  42a2a0:	461a      	mov	r2, r3
  42a2a2:	4620      	mov	r0, r4
  42a2a4:	f002 f860 	bl	42c368 <__lshift>
  42a2a8:	4680      	mov	r8, r0
  42a2aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  42a2ac:	2b00      	cmp	r3, #0
  42a2ae:	f040 8086 	bne.w	42a3be <_dtoa_r+0x64e>
  42a2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42a2b4:	2b00      	cmp	r3, #0
  42a2b6:	f340 8266 	ble.w	42a786 <_dtoa_r+0xa16>
  42a2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  42a2bc:	2b00      	cmp	r3, #0
  42a2be:	f000 8098 	beq.w	42a3f2 <_dtoa_r+0x682>
  42a2c2:	2d00      	cmp	r5, #0
  42a2c4:	dd05      	ble.n	42a2d2 <_dtoa_r+0x562>
  42a2c6:	4631      	mov	r1, r6
  42a2c8:	462a      	mov	r2, r5
  42a2ca:	4620      	mov	r0, r4
  42a2cc:	f002 f84c 	bl	42c368 <__lshift>
  42a2d0:	4606      	mov	r6, r0
  42a2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  42a2d4:	2b00      	cmp	r3, #0
  42a2d6:	f040 8337 	bne.w	42a948 <_dtoa_r+0xbd8>
  42a2da:	9606      	str	r6, [sp, #24]
  42a2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42a2de:	9a04      	ldr	r2, [sp, #16]
  42a2e0:	f8dd b018 	ldr.w	fp, [sp, #24]
  42a2e4:	3b01      	subs	r3, #1
  42a2e6:	18d3      	adds	r3, r2, r3
  42a2e8:	930b      	str	r3, [sp, #44]	; 0x2c
  42a2ea:	f00a 0301 	and.w	r3, sl, #1
  42a2ee:	930c      	str	r3, [sp, #48]	; 0x30
  42a2f0:	4617      	mov	r7, r2
  42a2f2:	46c2      	mov	sl, r8
  42a2f4:	4651      	mov	r1, sl
  42a2f6:	4648      	mov	r0, r9
  42a2f8:	f7ff fca4 	bl	429c44 <quorem>
  42a2fc:	4631      	mov	r1, r6
  42a2fe:	4605      	mov	r5, r0
  42a300:	4648      	mov	r0, r9
  42a302:	f002 f883 	bl	42c40c <__mcmp>
  42a306:	465a      	mov	r2, fp
  42a308:	900a      	str	r0, [sp, #40]	; 0x28
  42a30a:	4651      	mov	r1, sl
  42a30c:	4620      	mov	r0, r4
  42a30e:	f002 f899 	bl	42c444 <__mdiff>
  42a312:	68c2      	ldr	r2, [r0, #12]
  42a314:	4680      	mov	r8, r0
  42a316:	f105 0330 	add.w	r3, r5, #48	; 0x30
  42a31a:	2a00      	cmp	r2, #0
  42a31c:	f040 822b 	bne.w	42a776 <_dtoa_r+0xa06>
  42a320:	4601      	mov	r1, r0
  42a322:	4648      	mov	r0, r9
  42a324:	9308      	str	r3, [sp, #32]
  42a326:	f002 f871 	bl	42c40c <__mcmp>
  42a32a:	4641      	mov	r1, r8
  42a32c:	9006      	str	r0, [sp, #24]
  42a32e:	4620      	mov	r0, r4
  42a330:	f001 fe94 	bl	42c05c <_Bfree>
  42a334:	9a06      	ldr	r2, [sp, #24]
  42a336:	9b08      	ldr	r3, [sp, #32]
  42a338:	b932      	cbnz	r2, 42a348 <_dtoa_r+0x5d8>
  42a33a:	9924      	ldr	r1, [sp, #144]	; 0x90
  42a33c:	b921      	cbnz	r1, 42a348 <_dtoa_r+0x5d8>
  42a33e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  42a340:	2a00      	cmp	r2, #0
  42a342:	f000 83ef 	beq.w	42ab24 <_dtoa_r+0xdb4>
  42a346:	9a24      	ldr	r2, [sp, #144]	; 0x90
  42a348:	990a      	ldr	r1, [sp, #40]	; 0x28
  42a34a:	2900      	cmp	r1, #0
  42a34c:	f2c0 829f 	blt.w	42a88e <_dtoa_r+0xb1e>
  42a350:	d105      	bne.n	42a35e <_dtoa_r+0x5ee>
  42a352:	9924      	ldr	r1, [sp, #144]	; 0x90
  42a354:	b919      	cbnz	r1, 42a35e <_dtoa_r+0x5ee>
  42a356:	990c      	ldr	r1, [sp, #48]	; 0x30
  42a358:	2900      	cmp	r1, #0
  42a35a:	f000 8298 	beq.w	42a88e <_dtoa_r+0xb1e>
  42a35e:	2a00      	cmp	r2, #0
  42a360:	f300 8306 	bgt.w	42a970 <_dtoa_r+0xc00>
  42a364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  42a366:	703b      	strb	r3, [r7, #0]
  42a368:	f107 0801 	add.w	r8, r7, #1
  42a36c:	4297      	cmp	r7, r2
  42a36e:	4645      	mov	r5, r8
  42a370:	f000 830c 	beq.w	42a98c <_dtoa_r+0xc1c>
  42a374:	4649      	mov	r1, r9
  42a376:	2300      	movs	r3, #0
  42a378:	220a      	movs	r2, #10
  42a37a:	4620      	mov	r0, r4
  42a37c:	f001 fe78 	bl	42c070 <__multadd>
  42a380:	455e      	cmp	r6, fp
  42a382:	4681      	mov	r9, r0
  42a384:	4631      	mov	r1, r6
  42a386:	f04f 0300 	mov.w	r3, #0
  42a38a:	f04f 020a 	mov.w	r2, #10
  42a38e:	4620      	mov	r0, r4
  42a390:	f000 81eb 	beq.w	42a76a <_dtoa_r+0x9fa>
  42a394:	f001 fe6c 	bl	42c070 <__multadd>
  42a398:	4659      	mov	r1, fp
  42a39a:	4606      	mov	r6, r0
  42a39c:	2300      	movs	r3, #0
  42a39e:	220a      	movs	r2, #10
  42a3a0:	4620      	mov	r0, r4
  42a3a2:	f001 fe65 	bl	42c070 <__multadd>
  42a3a6:	4647      	mov	r7, r8
  42a3a8:	4683      	mov	fp, r0
  42a3aa:	e7a3      	b.n	42a2f4 <_dtoa_r+0x584>
  42a3ac:	201c      	movs	r0, #28
  42a3ae:	9b08      	ldr	r3, [sp, #32]
  42a3b0:	4403      	add	r3, r0
  42a3b2:	9308      	str	r3, [sp, #32]
  42a3b4:	9b06      	ldr	r3, [sp, #24]
  42a3b6:	4403      	add	r3, r0
  42a3b8:	4405      	add	r5, r0
  42a3ba:	9306      	str	r3, [sp, #24]
  42a3bc:	e763      	b.n	42a286 <_dtoa_r+0x516>
  42a3be:	4641      	mov	r1, r8
  42a3c0:	4648      	mov	r0, r9
  42a3c2:	f002 f823 	bl	42c40c <__mcmp>
  42a3c6:	2800      	cmp	r0, #0
  42a3c8:	f6bf af73 	bge.w	42a2b2 <_dtoa_r+0x542>
  42a3cc:	9f02      	ldr	r7, [sp, #8]
  42a3ce:	4649      	mov	r1, r9
  42a3d0:	2300      	movs	r3, #0
  42a3d2:	220a      	movs	r2, #10
  42a3d4:	4620      	mov	r0, r4
  42a3d6:	3f01      	subs	r7, #1
  42a3d8:	9702      	str	r7, [sp, #8]
  42a3da:	f001 fe49 	bl	42c070 <__multadd>
  42a3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  42a3e0:	4681      	mov	r9, r0
  42a3e2:	2b00      	cmp	r3, #0
  42a3e4:	f040 83b6 	bne.w	42ab54 <_dtoa_r+0xde4>
  42a3e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  42a3ea:	2b00      	cmp	r3, #0
  42a3ec:	f340 83bf 	ble.w	42ab6e <_dtoa_r+0xdfe>
  42a3f0:	930a      	str	r3, [sp, #40]	; 0x28
  42a3f2:	f8dd b010 	ldr.w	fp, [sp, #16]
  42a3f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  42a3f8:	465d      	mov	r5, fp
  42a3fa:	e002      	b.n	42a402 <_dtoa_r+0x692>
  42a3fc:	f001 fe38 	bl	42c070 <__multadd>
  42a400:	4681      	mov	r9, r0
  42a402:	4641      	mov	r1, r8
  42a404:	4648      	mov	r0, r9
  42a406:	f7ff fc1d 	bl	429c44 <quorem>
  42a40a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  42a40e:	f805 ab01 	strb.w	sl, [r5], #1
  42a412:	eba5 030b 	sub.w	r3, r5, fp
  42a416:	42bb      	cmp	r3, r7
  42a418:	f04f 020a 	mov.w	r2, #10
  42a41c:	f04f 0300 	mov.w	r3, #0
  42a420:	4649      	mov	r1, r9
  42a422:	4620      	mov	r0, r4
  42a424:	dbea      	blt.n	42a3fc <_dtoa_r+0x68c>
  42a426:	9b04      	ldr	r3, [sp, #16]
  42a428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  42a42a:	2a01      	cmp	r2, #1
  42a42c:	bfac      	ite	ge
  42a42e:	189b      	addge	r3, r3, r2
  42a430:	3301      	addlt	r3, #1
  42a432:	461d      	mov	r5, r3
  42a434:	f04f 0b00 	mov.w	fp, #0
  42a438:	4649      	mov	r1, r9
  42a43a:	2201      	movs	r2, #1
  42a43c:	4620      	mov	r0, r4
  42a43e:	f001 ff93 	bl	42c368 <__lshift>
  42a442:	4641      	mov	r1, r8
  42a444:	4681      	mov	r9, r0
  42a446:	f001 ffe1 	bl	42c40c <__mcmp>
  42a44a:	2800      	cmp	r0, #0
  42a44c:	f340 823d 	ble.w	42a8ca <_dtoa_r+0xb5a>
  42a450:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  42a454:	9904      	ldr	r1, [sp, #16]
  42a456:	1e6b      	subs	r3, r5, #1
  42a458:	e004      	b.n	42a464 <_dtoa_r+0x6f4>
  42a45a:	428b      	cmp	r3, r1
  42a45c:	f000 81ae 	beq.w	42a7bc <_dtoa_r+0xa4c>
  42a460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  42a464:	2a39      	cmp	r2, #57	; 0x39
  42a466:	f103 0501 	add.w	r5, r3, #1
  42a46a:	d0f6      	beq.n	42a45a <_dtoa_r+0x6ea>
  42a46c:	3201      	adds	r2, #1
  42a46e:	701a      	strb	r2, [r3, #0]
  42a470:	4641      	mov	r1, r8
  42a472:	4620      	mov	r0, r4
  42a474:	f001 fdf2 	bl	42c05c <_Bfree>
  42a478:	2e00      	cmp	r6, #0
  42a47a:	f43f ae3d 	beq.w	42a0f8 <_dtoa_r+0x388>
  42a47e:	f1bb 0f00 	cmp.w	fp, #0
  42a482:	d005      	beq.n	42a490 <_dtoa_r+0x720>
  42a484:	45b3      	cmp	fp, r6
  42a486:	d003      	beq.n	42a490 <_dtoa_r+0x720>
  42a488:	4659      	mov	r1, fp
  42a48a:	4620      	mov	r0, r4
  42a48c:	f001 fde6 	bl	42c05c <_Bfree>
  42a490:	4631      	mov	r1, r6
  42a492:	4620      	mov	r0, r4
  42a494:	f001 fde2 	bl	42c05c <_Bfree>
  42a498:	e62e      	b.n	42a0f8 <_dtoa_r+0x388>
  42a49a:	2300      	movs	r3, #0
  42a49c:	930b      	str	r3, [sp, #44]	; 0x2c
  42a49e:	9b02      	ldr	r3, [sp, #8]
  42a4a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  42a4a2:	4413      	add	r3, r2
  42a4a4:	930f      	str	r3, [sp, #60]	; 0x3c
  42a4a6:	3301      	adds	r3, #1
  42a4a8:	2b01      	cmp	r3, #1
  42a4aa:	461f      	mov	r7, r3
  42a4ac:	461e      	mov	r6, r3
  42a4ae:	930a      	str	r3, [sp, #40]	; 0x28
  42a4b0:	bfb8      	it	lt
  42a4b2:	2701      	movlt	r7, #1
  42a4b4:	2100      	movs	r1, #0
  42a4b6:	2f17      	cmp	r7, #23
  42a4b8:	6461      	str	r1, [r4, #68]	; 0x44
  42a4ba:	d90a      	bls.n	42a4d2 <_dtoa_r+0x762>
  42a4bc:	2201      	movs	r2, #1
  42a4be:	2304      	movs	r3, #4
  42a4c0:	005b      	lsls	r3, r3, #1
  42a4c2:	f103 0014 	add.w	r0, r3, #20
  42a4c6:	4287      	cmp	r7, r0
  42a4c8:	4611      	mov	r1, r2
  42a4ca:	f102 0201 	add.w	r2, r2, #1
  42a4ce:	d2f7      	bcs.n	42a4c0 <_dtoa_r+0x750>
  42a4d0:	6461      	str	r1, [r4, #68]	; 0x44
  42a4d2:	4620      	mov	r0, r4
  42a4d4:	f001 fd9c 	bl	42c010 <_Balloc>
  42a4d8:	2e0e      	cmp	r6, #14
  42a4da:	9004      	str	r0, [sp, #16]
  42a4dc:	6420      	str	r0, [r4, #64]	; 0x40
  42a4de:	f63f ad41 	bhi.w	429f64 <_dtoa_r+0x1f4>
  42a4e2:	2d00      	cmp	r5, #0
  42a4e4:	f43f ad3e 	beq.w	429f64 <_dtoa_r+0x1f4>
  42a4e8:	9902      	ldr	r1, [sp, #8]
  42a4ea:	2900      	cmp	r1, #0
  42a4ec:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  42a4f0:	f340 8202 	ble.w	42a8f8 <_dtoa_r+0xb88>
  42a4f4:	4bb8      	ldr	r3, [pc, #736]	; (42a7d8 <_dtoa_r+0xa68>)
  42a4f6:	f001 020f 	and.w	r2, r1, #15
  42a4fa:	110d      	asrs	r5, r1, #4
  42a4fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  42a500:	06e9      	lsls	r1, r5, #27
  42a502:	e9d3 6700 	ldrd	r6, r7, [r3]
  42a506:	f140 81ae 	bpl.w	42a866 <_dtoa_r+0xaf6>
  42a50a:	4bb4      	ldr	r3, [pc, #720]	; (42a7dc <_dtoa_r+0xa6c>)
  42a50c:	4650      	mov	r0, sl
  42a50e:	4659      	mov	r1, fp
  42a510:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  42a514:	f004 fc00 	bl	42ed18 <__aeabi_ddiv>
  42a518:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  42a51c:	f005 050f 	and.w	r5, r5, #15
  42a520:	f04f 0a03 	mov.w	sl, #3
  42a524:	b18d      	cbz	r5, 42a54a <_dtoa_r+0x7da>
  42a526:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 42a7dc <_dtoa_r+0xa6c>
  42a52a:	07ea      	lsls	r2, r5, #31
  42a52c:	d509      	bpl.n	42a542 <_dtoa_r+0x7d2>
  42a52e:	4630      	mov	r0, r6
  42a530:	4639      	mov	r1, r7
  42a532:	e9d8 2300 	ldrd	r2, r3, [r8]
  42a536:	f004 fac5 	bl	42eac4 <__aeabi_dmul>
  42a53a:	f10a 0a01 	add.w	sl, sl, #1
  42a53e:	4606      	mov	r6, r0
  42a540:	460f      	mov	r7, r1
  42a542:	106d      	asrs	r5, r5, #1
  42a544:	f108 0808 	add.w	r8, r8, #8
  42a548:	d1ef      	bne.n	42a52a <_dtoa_r+0x7ba>
  42a54a:	463b      	mov	r3, r7
  42a54c:	4632      	mov	r2, r6
  42a54e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  42a552:	f004 fbe1 	bl	42ed18 <__aeabi_ddiv>
  42a556:	4607      	mov	r7, r0
  42a558:	4688      	mov	r8, r1
  42a55a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  42a55c:	b143      	cbz	r3, 42a570 <_dtoa_r+0x800>
  42a55e:	2200      	movs	r2, #0
  42a560:	4b9f      	ldr	r3, [pc, #636]	; (42a7e0 <_dtoa_r+0xa70>)
  42a562:	4638      	mov	r0, r7
  42a564:	4641      	mov	r1, r8
  42a566:	f004 fd1f 	bl	42efa8 <__aeabi_dcmplt>
  42a56a:	2800      	cmp	r0, #0
  42a56c:	f040 8286 	bne.w	42aa7c <_dtoa_r+0xd0c>
  42a570:	4650      	mov	r0, sl
  42a572:	f004 fa41 	bl	42e9f8 <__aeabi_i2d>
  42a576:	463a      	mov	r2, r7
  42a578:	4643      	mov	r3, r8
  42a57a:	f004 faa3 	bl	42eac4 <__aeabi_dmul>
  42a57e:	4b99      	ldr	r3, [pc, #612]	; (42a7e4 <_dtoa_r+0xa74>)
  42a580:	2200      	movs	r2, #0
  42a582:	f004 f8ed 	bl	42e760 <__adddf3>
  42a586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42a588:	4605      	mov	r5, r0
  42a58a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  42a58e:	2b00      	cmp	r3, #0
  42a590:	f000 813e 	beq.w	42a810 <_dtoa_r+0xaa0>
  42a594:	9b02      	ldr	r3, [sp, #8]
  42a596:	9315      	str	r3, [sp, #84]	; 0x54
  42a598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42a59a:	9312      	str	r3, [sp, #72]	; 0x48
  42a59c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  42a59e:	2b00      	cmp	r3, #0
  42a5a0:	f000 81fa 	beq.w	42a998 <_dtoa_r+0xc28>
  42a5a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  42a5a6:	4b8c      	ldr	r3, [pc, #560]	; (42a7d8 <_dtoa_r+0xa68>)
  42a5a8:	498f      	ldr	r1, [pc, #572]	; (42a7e8 <_dtoa_r+0xa78>)
  42a5aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  42a5ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  42a5b2:	2000      	movs	r0, #0
  42a5b4:	f004 fbb0 	bl	42ed18 <__aeabi_ddiv>
  42a5b8:	462a      	mov	r2, r5
  42a5ba:	4633      	mov	r3, r6
  42a5bc:	f004 f8ce 	bl	42e75c <__aeabi_dsub>
  42a5c0:	4682      	mov	sl, r0
  42a5c2:	468b      	mov	fp, r1
  42a5c4:	4638      	mov	r0, r7
  42a5c6:	4641      	mov	r1, r8
  42a5c8:	f004 fd2c 	bl	42f024 <__aeabi_d2iz>
  42a5cc:	4605      	mov	r5, r0
  42a5ce:	f004 fa13 	bl	42e9f8 <__aeabi_i2d>
  42a5d2:	4602      	mov	r2, r0
  42a5d4:	460b      	mov	r3, r1
  42a5d6:	4638      	mov	r0, r7
  42a5d8:	4641      	mov	r1, r8
  42a5da:	f004 f8bf 	bl	42e75c <__aeabi_dsub>
  42a5de:	3530      	adds	r5, #48	; 0x30
  42a5e0:	fa5f f885 	uxtb.w	r8, r5
  42a5e4:	9d04      	ldr	r5, [sp, #16]
  42a5e6:	4606      	mov	r6, r0
  42a5e8:	460f      	mov	r7, r1
  42a5ea:	f885 8000 	strb.w	r8, [r5]
  42a5ee:	4602      	mov	r2, r0
  42a5f0:	460b      	mov	r3, r1
  42a5f2:	4650      	mov	r0, sl
  42a5f4:	4659      	mov	r1, fp
  42a5f6:	3501      	adds	r5, #1
  42a5f8:	f004 fcf4 	bl	42efe4 <__aeabi_dcmpgt>
  42a5fc:	2800      	cmp	r0, #0
  42a5fe:	d154      	bne.n	42a6aa <_dtoa_r+0x93a>
  42a600:	4632      	mov	r2, r6
  42a602:	463b      	mov	r3, r7
  42a604:	2000      	movs	r0, #0
  42a606:	4976      	ldr	r1, [pc, #472]	; (42a7e0 <_dtoa_r+0xa70>)
  42a608:	f004 f8a8 	bl	42e75c <__aeabi_dsub>
  42a60c:	4602      	mov	r2, r0
  42a60e:	460b      	mov	r3, r1
  42a610:	4650      	mov	r0, sl
  42a612:	4659      	mov	r1, fp
  42a614:	f004 fce6 	bl	42efe4 <__aeabi_dcmpgt>
  42a618:	2800      	cmp	r0, #0
  42a61a:	f040 8270 	bne.w	42aafe <_dtoa_r+0xd8e>
  42a61e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  42a620:	2a01      	cmp	r2, #1
  42a622:	f000 8111 	beq.w	42a848 <_dtoa_r+0xad8>
  42a626:	9b12      	ldr	r3, [sp, #72]	; 0x48
  42a628:	9a04      	ldr	r2, [sp, #16]
  42a62a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  42a62e:	4413      	add	r3, r2
  42a630:	4699      	mov	r9, r3
  42a632:	e00d      	b.n	42a650 <_dtoa_r+0x8e0>
  42a634:	2000      	movs	r0, #0
  42a636:	496a      	ldr	r1, [pc, #424]	; (42a7e0 <_dtoa_r+0xa70>)
  42a638:	f004 f890 	bl	42e75c <__aeabi_dsub>
  42a63c:	4652      	mov	r2, sl
  42a63e:	465b      	mov	r3, fp
  42a640:	f004 fcb2 	bl	42efa8 <__aeabi_dcmplt>
  42a644:	2800      	cmp	r0, #0
  42a646:	f040 8258 	bne.w	42aafa <_dtoa_r+0xd8a>
  42a64a:	454d      	cmp	r5, r9
  42a64c:	f000 80fa 	beq.w	42a844 <_dtoa_r+0xad4>
  42a650:	4650      	mov	r0, sl
  42a652:	4659      	mov	r1, fp
  42a654:	2200      	movs	r2, #0
  42a656:	4b65      	ldr	r3, [pc, #404]	; (42a7ec <_dtoa_r+0xa7c>)
  42a658:	f004 fa34 	bl	42eac4 <__aeabi_dmul>
  42a65c:	2200      	movs	r2, #0
  42a65e:	4b63      	ldr	r3, [pc, #396]	; (42a7ec <_dtoa_r+0xa7c>)
  42a660:	4682      	mov	sl, r0
  42a662:	468b      	mov	fp, r1
  42a664:	4630      	mov	r0, r6
  42a666:	4639      	mov	r1, r7
  42a668:	f004 fa2c 	bl	42eac4 <__aeabi_dmul>
  42a66c:	460f      	mov	r7, r1
  42a66e:	4606      	mov	r6, r0
  42a670:	f004 fcd8 	bl	42f024 <__aeabi_d2iz>
  42a674:	4680      	mov	r8, r0
  42a676:	f004 f9bf 	bl	42e9f8 <__aeabi_i2d>
  42a67a:	4602      	mov	r2, r0
  42a67c:	460b      	mov	r3, r1
  42a67e:	4630      	mov	r0, r6
  42a680:	4639      	mov	r1, r7
  42a682:	f004 f86b 	bl	42e75c <__aeabi_dsub>
  42a686:	f108 0830 	add.w	r8, r8, #48	; 0x30
  42a68a:	fa5f f888 	uxtb.w	r8, r8
  42a68e:	4652      	mov	r2, sl
  42a690:	465b      	mov	r3, fp
  42a692:	f805 8b01 	strb.w	r8, [r5], #1
  42a696:	4606      	mov	r6, r0
  42a698:	460f      	mov	r7, r1
  42a69a:	f004 fc85 	bl	42efa8 <__aeabi_dcmplt>
  42a69e:	4632      	mov	r2, r6
  42a6a0:	463b      	mov	r3, r7
  42a6a2:	2800      	cmp	r0, #0
  42a6a4:	d0c6      	beq.n	42a634 <_dtoa_r+0x8c4>
  42a6a6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  42a6aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  42a6ac:	9302      	str	r3, [sp, #8]
  42a6ae:	e523      	b.n	42a0f8 <_dtoa_r+0x388>
  42a6b0:	2300      	movs	r3, #0
  42a6b2:	930b      	str	r3, [sp, #44]	; 0x2c
  42a6b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  42a6b6:	2b00      	cmp	r3, #0
  42a6b8:	f340 80dc 	ble.w	42a874 <_dtoa_r+0xb04>
  42a6bc:	461f      	mov	r7, r3
  42a6be:	461e      	mov	r6, r3
  42a6c0:	930f      	str	r3, [sp, #60]	; 0x3c
  42a6c2:	930a      	str	r3, [sp, #40]	; 0x28
  42a6c4:	e6f6      	b.n	42a4b4 <_dtoa_r+0x744>
  42a6c6:	2301      	movs	r3, #1
  42a6c8:	930b      	str	r3, [sp, #44]	; 0x2c
  42a6ca:	e7f3      	b.n	42a6b4 <_dtoa_r+0x944>
  42a6cc:	f1ba 0f00 	cmp.w	sl, #0
  42a6d0:	f47f ada8 	bne.w	42a224 <_dtoa_r+0x4b4>
  42a6d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  42a6d8:	2b00      	cmp	r3, #0
  42a6da:	f47f adba 	bne.w	42a252 <_dtoa_r+0x4e2>
  42a6de:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  42a6e2:	0d3f      	lsrs	r7, r7, #20
  42a6e4:	053f      	lsls	r7, r7, #20
  42a6e6:	2f00      	cmp	r7, #0
  42a6e8:	f000 820d 	beq.w	42ab06 <_dtoa_r+0xd96>
  42a6ec:	9b08      	ldr	r3, [sp, #32]
  42a6ee:	3301      	adds	r3, #1
  42a6f0:	9308      	str	r3, [sp, #32]
  42a6f2:	9b06      	ldr	r3, [sp, #24]
  42a6f4:	3301      	adds	r3, #1
  42a6f6:	9306      	str	r3, [sp, #24]
  42a6f8:	2301      	movs	r3, #1
  42a6fa:	930c      	str	r3, [sp, #48]	; 0x30
  42a6fc:	e5ab      	b.n	42a256 <_dtoa_r+0x4e6>
  42a6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42a700:	2b00      	cmp	r3, #0
  42a702:	f73f ac42 	bgt.w	429f8a <_dtoa_r+0x21a>
  42a706:	f040 8221 	bne.w	42ab4c <_dtoa_r+0xddc>
  42a70a:	2200      	movs	r2, #0
  42a70c:	4b38      	ldr	r3, [pc, #224]	; (42a7f0 <_dtoa_r+0xa80>)
  42a70e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  42a712:	f004 f9d7 	bl	42eac4 <__aeabi_dmul>
  42a716:	4652      	mov	r2, sl
  42a718:	465b      	mov	r3, fp
  42a71a:	f004 fc59 	bl	42efd0 <__aeabi_dcmpge>
  42a71e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  42a722:	4646      	mov	r6, r8
  42a724:	2800      	cmp	r0, #0
  42a726:	d041      	beq.n	42a7ac <_dtoa_r+0xa3c>
  42a728:	9b25      	ldr	r3, [sp, #148]	; 0x94
  42a72a:	9d04      	ldr	r5, [sp, #16]
  42a72c:	43db      	mvns	r3, r3
  42a72e:	9302      	str	r3, [sp, #8]
  42a730:	4641      	mov	r1, r8
  42a732:	4620      	mov	r0, r4
  42a734:	f001 fc92 	bl	42c05c <_Bfree>
  42a738:	2e00      	cmp	r6, #0
  42a73a:	f43f acdd 	beq.w	42a0f8 <_dtoa_r+0x388>
  42a73e:	e6a7      	b.n	42a490 <_dtoa_r+0x720>
  42a740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  42a742:	4649      	mov	r1, r9
  42a744:	4620      	mov	r0, r4
  42a746:	f001 fdbf 	bl	42c2c8 <__pow5mult>
  42a74a:	4681      	mov	r9, r0
  42a74c:	e558      	b.n	42a200 <_dtoa_r+0x490>
  42a74e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  42a750:	2a00      	cmp	r2, #0
  42a752:	f000 8187 	beq.w	42aa64 <_dtoa_r+0xcf4>
  42a756:	f203 4333 	addw	r3, r3, #1075	; 0x433
  42a75a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  42a75c:	9d08      	ldr	r5, [sp, #32]
  42a75e:	e4f2      	b.n	42a146 <_dtoa_r+0x3d6>
  42a760:	f1ba 0f00 	cmp.w	sl, #0
  42a764:	f47f ad75 	bne.w	42a252 <_dtoa_r+0x4e2>
  42a768:	e7b4      	b.n	42a6d4 <_dtoa_r+0x964>
  42a76a:	f001 fc81 	bl	42c070 <__multadd>
  42a76e:	4647      	mov	r7, r8
  42a770:	4606      	mov	r6, r0
  42a772:	4683      	mov	fp, r0
  42a774:	e5be      	b.n	42a2f4 <_dtoa_r+0x584>
  42a776:	4601      	mov	r1, r0
  42a778:	4620      	mov	r0, r4
  42a77a:	9306      	str	r3, [sp, #24]
  42a77c:	f001 fc6e 	bl	42c05c <_Bfree>
  42a780:	2201      	movs	r2, #1
  42a782:	9b06      	ldr	r3, [sp, #24]
  42a784:	e5e0      	b.n	42a348 <_dtoa_r+0x5d8>
  42a786:	9b24      	ldr	r3, [sp, #144]	; 0x90
  42a788:	2b02      	cmp	r3, #2
  42a78a:	f77f ad96 	ble.w	42a2ba <_dtoa_r+0x54a>
  42a78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42a790:	2b00      	cmp	r3, #0
  42a792:	d1c9      	bne.n	42a728 <_dtoa_r+0x9b8>
  42a794:	4641      	mov	r1, r8
  42a796:	2205      	movs	r2, #5
  42a798:	4620      	mov	r0, r4
  42a79a:	f001 fc69 	bl	42c070 <__multadd>
  42a79e:	4601      	mov	r1, r0
  42a7a0:	4680      	mov	r8, r0
  42a7a2:	4648      	mov	r0, r9
  42a7a4:	f001 fe32 	bl	42c40c <__mcmp>
  42a7a8:	2800      	cmp	r0, #0
  42a7aa:	ddbd      	ble.n	42a728 <_dtoa_r+0x9b8>
  42a7ac:	9a02      	ldr	r2, [sp, #8]
  42a7ae:	9904      	ldr	r1, [sp, #16]
  42a7b0:	2331      	movs	r3, #49	; 0x31
  42a7b2:	3201      	adds	r2, #1
  42a7b4:	9202      	str	r2, [sp, #8]
  42a7b6:	700b      	strb	r3, [r1, #0]
  42a7b8:	1c4d      	adds	r5, r1, #1
  42a7ba:	e7b9      	b.n	42a730 <_dtoa_r+0x9c0>
  42a7bc:	9a02      	ldr	r2, [sp, #8]
  42a7be:	3201      	adds	r2, #1
  42a7c0:	9202      	str	r2, [sp, #8]
  42a7c2:	9a04      	ldr	r2, [sp, #16]
  42a7c4:	2331      	movs	r3, #49	; 0x31
  42a7c6:	7013      	strb	r3, [r2, #0]
  42a7c8:	e652      	b.n	42a470 <_dtoa_r+0x700>
  42a7ca:	2301      	movs	r3, #1
  42a7cc:	930b      	str	r3, [sp, #44]	; 0x2c
  42a7ce:	e666      	b.n	42a49e <_dtoa_r+0x72e>
  42a7d0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  42a7d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  42a7d6:	e48f      	b.n	42a0f8 <_dtoa_r+0x388>
  42a7d8:	0042f818 	.word	0x0042f818
  42a7dc:	0042f7f0 	.word	0x0042f7f0
  42a7e0:	3ff00000 	.word	0x3ff00000
  42a7e4:	401c0000 	.word	0x401c0000
  42a7e8:	3fe00000 	.word	0x3fe00000
  42a7ec:	40240000 	.word	0x40240000
  42a7f0:	40140000 	.word	0x40140000
  42a7f4:	4650      	mov	r0, sl
  42a7f6:	f004 f8ff 	bl	42e9f8 <__aeabi_i2d>
  42a7fa:	463a      	mov	r2, r7
  42a7fc:	4643      	mov	r3, r8
  42a7fe:	f004 f961 	bl	42eac4 <__aeabi_dmul>
  42a802:	2200      	movs	r2, #0
  42a804:	4bc1      	ldr	r3, [pc, #772]	; (42ab0c <_dtoa_r+0xd9c>)
  42a806:	f003 ffab 	bl	42e760 <__adddf3>
  42a80a:	4605      	mov	r5, r0
  42a80c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  42a810:	4641      	mov	r1, r8
  42a812:	2200      	movs	r2, #0
  42a814:	4bbe      	ldr	r3, [pc, #760]	; (42ab10 <_dtoa_r+0xda0>)
  42a816:	4638      	mov	r0, r7
  42a818:	f003 ffa0 	bl	42e75c <__aeabi_dsub>
  42a81c:	462a      	mov	r2, r5
  42a81e:	4633      	mov	r3, r6
  42a820:	4682      	mov	sl, r0
  42a822:	468b      	mov	fp, r1
  42a824:	f004 fbde 	bl	42efe4 <__aeabi_dcmpgt>
  42a828:	4680      	mov	r8, r0
  42a82a:	2800      	cmp	r0, #0
  42a82c:	f040 8110 	bne.w	42aa50 <_dtoa_r+0xce0>
  42a830:	462a      	mov	r2, r5
  42a832:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  42a836:	4650      	mov	r0, sl
  42a838:	4659      	mov	r1, fp
  42a83a:	f004 fbb5 	bl	42efa8 <__aeabi_dcmplt>
  42a83e:	b118      	cbz	r0, 42a848 <_dtoa_r+0xad8>
  42a840:	4646      	mov	r6, r8
  42a842:	e771      	b.n	42a728 <_dtoa_r+0x9b8>
  42a844:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  42a848:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  42a84c:	f7ff bb8a 	b.w	429f64 <_dtoa_r+0x1f4>
  42a850:	9804      	ldr	r0, [sp, #16]
  42a852:	f7ff babb 	b.w	429dcc <_dtoa_r+0x5c>
  42a856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  42a858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  42a85a:	970c      	str	r7, [sp, #48]	; 0x30
  42a85c:	1afb      	subs	r3, r7, r3
  42a85e:	441a      	add	r2, r3
  42a860:	920d      	str	r2, [sp, #52]	; 0x34
  42a862:	2700      	movs	r7, #0
  42a864:	e469      	b.n	42a13a <_dtoa_r+0x3ca>
  42a866:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  42a86a:	f04f 0a02 	mov.w	sl, #2
  42a86e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  42a872:	e657      	b.n	42a524 <_dtoa_r+0x7b4>
  42a874:	2100      	movs	r1, #0
  42a876:	2301      	movs	r3, #1
  42a878:	6461      	str	r1, [r4, #68]	; 0x44
  42a87a:	4620      	mov	r0, r4
  42a87c:	9325      	str	r3, [sp, #148]	; 0x94
  42a87e:	f001 fbc7 	bl	42c010 <_Balloc>
  42a882:	9b25      	ldr	r3, [sp, #148]	; 0x94
  42a884:	9004      	str	r0, [sp, #16]
  42a886:	6420      	str	r0, [r4, #64]	; 0x40
  42a888:	930a      	str	r3, [sp, #40]	; 0x28
  42a88a:	930f      	str	r3, [sp, #60]	; 0x3c
  42a88c:	e629      	b.n	42a4e2 <_dtoa_r+0x772>
  42a88e:	2a00      	cmp	r2, #0
  42a890:	46d0      	mov	r8, sl
  42a892:	f8cd b018 	str.w	fp, [sp, #24]
  42a896:	469a      	mov	sl, r3
  42a898:	dd11      	ble.n	42a8be <_dtoa_r+0xb4e>
  42a89a:	4649      	mov	r1, r9
  42a89c:	2201      	movs	r2, #1
  42a89e:	4620      	mov	r0, r4
  42a8a0:	f001 fd62 	bl	42c368 <__lshift>
  42a8a4:	4641      	mov	r1, r8
  42a8a6:	4681      	mov	r9, r0
  42a8a8:	f001 fdb0 	bl	42c40c <__mcmp>
  42a8ac:	2800      	cmp	r0, #0
  42a8ae:	f340 8146 	ble.w	42ab3e <_dtoa_r+0xdce>
  42a8b2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  42a8b6:	f000 8106 	beq.w	42aac6 <_dtoa_r+0xd56>
  42a8ba:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  42a8be:	46b3      	mov	fp, r6
  42a8c0:	f887 a000 	strb.w	sl, [r7]
  42a8c4:	1c7d      	adds	r5, r7, #1
  42a8c6:	9e06      	ldr	r6, [sp, #24]
  42a8c8:	e5d2      	b.n	42a470 <_dtoa_r+0x700>
  42a8ca:	d104      	bne.n	42a8d6 <_dtoa_r+0xb66>
  42a8cc:	f01a 0f01 	tst.w	sl, #1
  42a8d0:	d001      	beq.n	42a8d6 <_dtoa_r+0xb66>
  42a8d2:	e5bd      	b.n	42a450 <_dtoa_r+0x6e0>
  42a8d4:	4615      	mov	r5, r2
  42a8d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  42a8da:	2b30      	cmp	r3, #48	; 0x30
  42a8dc:	f105 32ff 	add.w	r2, r5, #4294967295
  42a8e0:	d0f8      	beq.n	42a8d4 <_dtoa_r+0xb64>
  42a8e2:	e5c5      	b.n	42a470 <_dtoa_r+0x700>
  42a8e4:	9904      	ldr	r1, [sp, #16]
  42a8e6:	2230      	movs	r2, #48	; 0x30
  42a8e8:	700a      	strb	r2, [r1, #0]
  42a8ea:	9a02      	ldr	r2, [sp, #8]
  42a8ec:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  42a8f0:	3201      	adds	r2, #1
  42a8f2:	9202      	str	r2, [sp, #8]
  42a8f4:	f7ff bbfc 	b.w	42a0f0 <_dtoa_r+0x380>
  42a8f8:	f000 80bb 	beq.w	42aa72 <_dtoa_r+0xd02>
  42a8fc:	9b02      	ldr	r3, [sp, #8]
  42a8fe:	425d      	negs	r5, r3
  42a900:	4b84      	ldr	r3, [pc, #528]	; (42ab14 <_dtoa_r+0xda4>)
  42a902:	f005 020f 	and.w	r2, r5, #15
  42a906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  42a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
  42a90e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  42a912:	f004 f8d7 	bl	42eac4 <__aeabi_dmul>
  42a916:	112d      	asrs	r5, r5, #4
  42a918:	4607      	mov	r7, r0
  42a91a:	4688      	mov	r8, r1
  42a91c:	f000 812c 	beq.w	42ab78 <_dtoa_r+0xe08>
  42a920:	4e7d      	ldr	r6, [pc, #500]	; (42ab18 <_dtoa_r+0xda8>)
  42a922:	f04f 0a02 	mov.w	sl, #2
  42a926:	07eb      	lsls	r3, r5, #31
  42a928:	d509      	bpl.n	42a93e <_dtoa_r+0xbce>
  42a92a:	4638      	mov	r0, r7
  42a92c:	4641      	mov	r1, r8
  42a92e:	e9d6 2300 	ldrd	r2, r3, [r6]
  42a932:	f004 f8c7 	bl	42eac4 <__aeabi_dmul>
  42a936:	f10a 0a01 	add.w	sl, sl, #1
  42a93a:	4607      	mov	r7, r0
  42a93c:	4688      	mov	r8, r1
  42a93e:	106d      	asrs	r5, r5, #1
  42a940:	f106 0608 	add.w	r6, r6, #8
  42a944:	d1ef      	bne.n	42a926 <_dtoa_r+0xbb6>
  42a946:	e608      	b.n	42a55a <_dtoa_r+0x7ea>
  42a948:	6871      	ldr	r1, [r6, #4]
  42a94a:	4620      	mov	r0, r4
  42a94c:	f001 fb60 	bl	42c010 <_Balloc>
  42a950:	6933      	ldr	r3, [r6, #16]
  42a952:	3302      	adds	r3, #2
  42a954:	009a      	lsls	r2, r3, #2
  42a956:	4605      	mov	r5, r0
  42a958:	f106 010c 	add.w	r1, r6, #12
  42a95c:	300c      	adds	r0, #12
  42a95e:	f7fc f8af 	bl	426ac0 <memcpy>
  42a962:	4629      	mov	r1, r5
  42a964:	2201      	movs	r2, #1
  42a966:	4620      	mov	r0, r4
  42a968:	f001 fcfe 	bl	42c368 <__lshift>
  42a96c:	9006      	str	r0, [sp, #24]
  42a96e:	e4b5      	b.n	42a2dc <_dtoa_r+0x56c>
  42a970:	2b39      	cmp	r3, #57	; 0x39
  42a972:	f8cd b018 	str.w	fp, [sp, #24]
  42a976:	46d0      	mov	r8, sl
  42a978:	f000 80a5 	beq.w	42aac6 <_dtoa_r+0xd56>
  42a97c:	f103 0a01 	add.w	sl, r3, #1
  42a980:	46b3      	mov	fp, r6
  42a982:	f887 a000 	strb.w	sl, [r7]
  42a986:	1c7d      	adds	r5, r7, #1
  42a988:	9e06      	ldr	r6, [sp, #24]
  42a98a:	e571      	b.n	42a470 <_dtoa_r+0x700>
  42a98c:	465a      	mov	r2, fp
  42a98e:	46d0      	mov	r8, sl
  42a990:	46b3      	mov	fp, r6
  42a992:	469a      	mov	sl, r3
  42a994:	4616      	mov	r6, r2
  42a996:	e54f      	b.n	42a438 <_dtoa_r+0x6c8>
  42a998:	9b12      	ldr	r3, [sp, #72]	; 0x48
  42a99a:	495e      	ldr	r1, [pc, #376]	; (42ab14 <_dtoa_r+0xda4>)
  42a99c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  42a9a0:	462a      	mov	r2, r5
  42a9a2:	4633      	mov	r3, r6
  42a9a4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  42a9a8:	f004 f88c 	bl	42eac4 <__aeabi_dmul>
  42a9ac:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  42a9b0:	4638      	mov	r0, r7
  42a9b2:	4641      	mov	r1, r8
  42a9b4:	f004 fb36 	bl	42f024 <__aeabi_d2iz>
  42a9b8:	4605      	mov	r5, r0
  42a9ba:	f004 f81d 	bl	42e9f8 <__aeabi_i2d>
  42a9be:	460b      	mov	r3, r1
  42a9c0:	4602      	mov	r2, r0
  42a9c2:	4641      	mov	r1, r8
  42a9c4:	4638      	mov	r0, r7
  42a9c6:	f003 fec9 	bl	42e75c <__aeabi_dsub>
  42a9ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
  42a9cc:	460f      	mov	r7, r1
  42a9ce:	9904      	ldr	r1, [sp, #16]
  42a9d0:	3530      	adds	r5, #48	; 0x30
  42a9d2:	2b01      	cmp	r3, #1
  42a9d4:	700d      	strb	r5, [r1, #0]
  42a9d6:	4606      	mov	r6, r0
  42a9d8:	f101 0501 	add.w	r5, r1, #1
  42a9dc:	d026      	beq.n	42aa2c <_dtoa_r+0xcbc>
  42a9de:	9b12      	ldr	r3, [sp, #72]	; 0x48
  42a9e0:	9a04      	ldr	r2, [sp, #16]
  42a9e2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 42ab20 <_dtoa_r+0xdb0>
  42a9e6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  42a9ea:	4413      	add	r3, r2
  42a9ec:	f04f 0a00 	mov.w	sl, #0
  42a9f0:	4699      	mov	r9, r3
  42a9f2:	4652      	mov	r2, sl
  42a9f4:	465b      	mov	r3, fp
  42a9f6:	4630      	mov	r0, r6
  42a9f8:	4639      	mov	r1, r7
  42a9fa:	f004 f863 	bl	42eac4 <__aeabi_dmul>
  42a9fe:	460f      	mov	r7, r1
  42aa00:	4606      	mov	r6, r0
  42aa02:	f004 fb0f 	bl	42f024 <__aeabi_d2iz>
  42aa06:	4680      	mov	r8, r0
  42aa08:	f003 fff6 	bl	42e9f8 <__aeabi_i2d>
  42aa0c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  42aa10:	4602      	mov	r2, r0
  42aa12:	460b      	mov	r3, r1
  42aa14:	4630      	mov	r0, r6
  42aa16:	4639      	mov	r1, r7
  42aa18:	f003 fea0 	bl	42e75c <__aeabi_dsub>
  42aa1c:	f805 8b01 	strb.w	r8, [r5], #1
  42aa20:	454d      	cmp	r5, r9
  42aa22:	4606      	mov	r6, r0
  42aa24:	460f      	mov	r7, r1
  42aa26:	d1e4      	bne.n	42a9f2 <_dtoa_r+0xc82>
  42aa28:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  42aa2c:	4b3b      	ldr	r3, [pc, #236]	; (42ab1c <_dtoa_r+0xdac>)
  42aa2e:	2200      	movs	r2, #0
  42aa30:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  42aa34:	f003 fe94 	bl	42e760 <__adddf3>
  42aa38:	4632      	mov	r2, r6
  42aa3a:	463b      	mov	r3, r7
  42aa3c:	f004 fab4 	bl	42efa8 <__aeabi_dcmplt>
  42aa40:	2800      	cmp	r0, #0
  42aa42:	d046      	beq.n	42aad2 <_dtoa_r+0xd62>
  42aa44:	9b15      	ldr	r3, [sp, #84]	; 0x54
  42aa46:	9302      	str	r3, [sp, #8]
  42aa48:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  42aa4c:	f7ff bb43 	b.w	42a0d6 <_dtoa_r+0x366>
  42aa50:	f04f 0800 	mov.w	r8, #0
  42aa54:	4646      	mov	r6, r8
  42aa56:	e6a9      	b.n	42a7ac <_dtoa_r+0xa3c>
  42aa58:	9b08      	ldr	r3, [sp, #32]
  42aa5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  42aa5c:	1a9d      	subs	r5, r3, r2
  42aa5e:	2300      	movs	r3, #0
  42aa60:	f7ff bb71 	b.w	42a146 <_dtoa_r+0x3d6>
  42aa64:	9b18      	ldr	r3, [sp, #96]	; 0x60
  42aa66:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  42aa68:	9d08      	ldr	r5, [sp, #32]
  42aa6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  42aa6e:	f7ff bb6a 	b.w	42a146 <_dtoa_r+0x3d6>
  42aa72:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  42aa76:	f04f 0a02 	mov.w	sl, #2
  42aa7a:	e56e      	b.n	42a55a <_dtoa_r+0x7ea>
  42aa7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42aa7e:	2b00      	cmp	r3, #0
  42aa80:	f43f aeb8 	beq.w	42a7f4 <_dtoa_r+0xa84>
  42aa84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  42aa86:	2b00      	cmp	r3, #0
  42aa88:	f77f aede 	ble.w	42a848 <_dtoa_r+0xad8>
  42aa8c:	2200      	movs	r2, #0
  42aa8e:	4b24      	ldr	r3, [pc, #144]	; (42ab20 <_dtoa_r+0xdb0>)
  42aa90:	4638      	mov	r0, r7
  42aa92:	4641      	mov	r1, r8
  42aa94:	f004 f816 	bl	42eac4 <__aeabi_dmul>
  42aa98:	4607      	mov	r7, r0
  42aa9a:	4688      	mov	r8, r1
  42aa9c:	f10a 0001 	add.w	r0, sl, #1
  42aaa0:	f003 ffaa 	bl	42e9f8 <__aeabi_i2d>
  42aaa4:	463a      	mov	r2, r7
  42aaa6:	4643      	mov	r3, r8
  42aaa8:	f004 f80c 	bl	42eac4 <__aeabi_dmul>
  42aaac:	2200      	movs	r2, #0
  42aaae:	4b17      	ldr	r3, [pc, #92]	; (42ab0c <_dtoa_r+0xd9c>)
  42aab0:	f003 fe56 	bl	42e760 <__adddf3>
  42aab4:	9a02      	ldr	r2, [sp, #8]
  42aab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  42aab8:	9312      	str	r3, [sp, #72]	; 0x48
  42aaba:	3a01      	subs	r2, #1
  42aabc:	4605      	mov	r5, r0
  42aabe:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  42aac2:	9215      	str	r2, [sp, #84]	; 0x54
  42aac4:	e56a      	b.n	42a59c <_dtoa_r+0x82c>
  42aac6:	2239      	movs	r2, #57	; 0x39
  42aac8:	46b3      	mov	fp, r6
  42aaca:	703a      	strb	r2, [r7, #0]
  42aacc:	9e06      	ldr	r6, [sp, #24]
  42aace:	1c7d      	adds	r5, r7, #1
  42aad0:	e4c0      	b.n	42a454 <_dtoa_r+0x6e4>
  42aad2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  42aad6:	2000      	movs	r0, #0
  42aad8:	4910      	ldr	r1, [pc, #64]	; (42ab1c <_dtoa_r+0xdac>)
  42aada:	f003 fe3f 	bl	42e75c <__aeabi_dsub>
  42aade:	4632      	mov	r2, r6
  42aae0:	463b      	mov	r3, r7
  42aae2:	f004 fa7f 	bl	42efe4 <__aeabi_dcmpgt>
  42aae6:	b908      	cbnz	r0, 42aaec <_dtoa_r+0xd7c>
  42aae8:	e6ae      	b.n	42a848 <_dtoa_r+0xad8>
  42aaea:	4615      	mov	r5, r2
  42aaec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  42aaf0:	2b30      	cmp	r3, #48	; 0x30
  42aaf2:	f105 32ff 	add.w	r2, r5, #4294967295
  42aaf6:	d0f8      	beq.n	42aaea <_dtoa_r+0xd7a>
  42aaf8:	e5d7      	b.n	42a6aa <_dtoa_r+0x93a>
  42aafa:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  42aafe:	9b15      	ldr	r3, [sp, #84]	; 0x54
  42ab00:	9302      	str	r3, [sp, #8]
  42ab02:	f7ff bae8 	b.w	42a0d6 <_dtoa_r+0x366>
  42ab06:	970c      	str	r7, [sp, #48]	; 0x30
  42ab08:	f7ff bba5 	b.w	42a256 <_dtoa_r+0x4e6>
  42ab0c:	401c0000 	.word	0x401c0000
  42ab10:	40140000 	.word	0x40140000
  42ab14:	0042f818 	.word	0x0042f818
  42ab18:	0042f7f0 	.word	0x0042f7f0
  42ab1c:	3fe00000 	.word	0x3fe00000
  42ab20:	40240000 	.word	0x40240000
  42ab24:	2b39      	cmp	r3, #57	; 0x39
  42ab26:	f8cd b018 	str.w	fp, [sp, #24]
  42ab2a:	46d0      	mov	r8, sl
  42ab2c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  42ab30:	469a      	mov	sl, r3
  42ab32:	d0c8      	beq.n	42aac6 <_dtoa_r+0xd56>
  42ab34:	f1bb 0f00 	cmp.w	fp, #0
  42ab38:	f73f aebf 	bgt.w	42a8ba <_dtoa_r+0xb4a>
  42ab3c:	e6bf      	b.n	42a8be <_dtoa_r+0xb4e>
  42ab3e:	f47f aebe 	bne.w	42a8be <_dtoa_r+0xb4e>
  42ab42:	f01a 0f01 	tst.w	sl, #1
  42ab46:	f43f aeba 	beq.w	42a8be <_dtoa_r+0xb4e>
  42ab4a:	e6b2      	b.n	42a8b2 <_dtoa_r+0xb42>
  42ab4c:	f04f 0800 	mov.w	r8, #0
  42ab50:	4646      	mov	r6, r8
  42ab52:	e5e9      	b.n	42a728 <_dtoa_r+0x9b8>
  42ab54:	4631      	mov	r1, r6
  42ab56:	2300      	movs	r3, #0
  42ab58:	220a      	movs	r2, #10
  42ab5a:	4620      	mov	r0, r4
  42ab5c:	f001 fa88 	bl	42c070 <__multadd>
  42ab60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  42ab62:	2b00      	cmp	r3, #0
  42ab64:	4606      	mov	r6, r0
  42ab66:	dd0a      	ble.n	42ab7e <_dtoa_r+0xe0e>
  42ab68:	930a      	str	r3, [sp, #40]	; 0x28
  42ab6a:	f7ff bbaa 	b.w	42a2c2 <_dtoa_r+0x552>
  42ab6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  42ab70:	2b02      	cmp	r3, #2
  42ab72:	dc23      	bgt.n	42abbc <_dtoa_r+0xe4c>
  42ab74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  42ab76:	e43b      	b.n	42a3f0 <_dtoa_r+0x680>
  42ab78:	f04f 0a02 	mov.w	sl, #2
  42ab7c:	e4ed      	b.n	42a55a <_dtoa_r+0x7ea>
  42ab7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  42ab80:	2b02      	cmp	r3, #2
  42ab82:	dc1b      	bgt.n	42abbc <_dtoa_r+0xe4c>
  42ab84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  42ab86:	e7ef      	b.n	42ab68 <_dtoa_r+0xdf8>
  42ab88:	2500      	movs	r5, #0
  42ab8a:	6465      	str	r5, [r4, #68]	; 0x44
  42ab8c:	4629      	mov	r1, r5
  42ab8e:	4620      	mov	r0, r4
  42ab90:	f001 fa3e 	bl	42c010 <_Balloc>
  42ab94:	f04f 33ff 	mov.w	r3, #4294967295
  42ab98:	930a      	str	r3, [sp, #40]	; 0x28
  42ab9a:	930f      	str	r3, [sp, #60]	; 0x3c
  42ab9c:	2301      	movs	r3, #1
  42ab9e:	9004      	str	r0, [sp, #16]
  42aba0:	9525      	str	r5, [sp, #148]	; 0x94
  42aba2:	6420      	str	r0, [r4, #64]	; 0x40
  42aba4:	930b      	str	r3, [sp, #44]	; 0x2c
  42aba6:	f7ff b9dd 	b.w	429f64 <_dtoa_r+0x1f4>
  42abaa:	2501      	movs	r5, #1
  42abac:	f7ff b9a5 	b.w	429efa <_dtoa_r+0x18a>
  42abb0:	f43f ab69 	beq.w	42a286 <_dtoa_r+0x516>
  42abb4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  42abb8:	f7ff bbf9 	b.w	42a3ae <_dtoa_r+0x63e>
  42abbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  42abbe:	930a      	str	r3, [sp, #40]	; 0x28
  42abc0:	e5e5      	b.n	42a78e <_dtoa_r+0xa1e>
  42abc2:	bf00      	nop

0042abc4 <__sflush_r>:
  42abc4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  42abc8:	b29a      	uxth	r2, r3
  42abca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42abce:	460d      	mov	r5, r1
  42abd0:	0711      	lsls	r1, r2, #28
  42abd2:	4680      	mov	r8, r0
  42abd4:	d43a      	bmi.n	42ac4c <__sflush_r+0x88>
  42abd6:	686a      	ldr	r2, [r5, #4]
  42abd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  42abdc:	2a00      	cmp	r2, #0
  42abde:	81ab      	strh	r3, [r5, #12]
  42abe0:	dd6f      	ble.n	42acc2 <__sflush_r+0xfe>
  42abe2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  42abe4:	2c00      	cmp	r4, #0
  42abe6:	d049      	beq.n	42ac7c <__sflush_r+0xb8>
  42abe8:	2200      	movs	r2, #0
  42abea:	b29b      	uxth	r3, r3
  42abec:	f8d8 6000 	ldr.w	r6, [r8]
  42abf0:	f8c8 2000 	str.w	r2, [r8]
  42abf4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  42abf8:	d067      	beq.n	42acca <__sflush_r+0x106>
  42abfa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  42abfc:	075f      	lsls	r7, r3, #29
  42abfe:	d505      	bpl.n	42ac0c <__sflush_r+0x48>
  42ac00:	6869      	ldr	r1, [r5, #4]
  42ac02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  42ac04:	1a52      	subs	r2, r2, r1
  42ac06:	b10b      	cbz	r3, 42ac0c <__sflush_r+0x48>
  42ac08:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  42ac0a:	1ad2      	subs	r2, r2, r3
  42ac0c:	2300      	movs	r3, #0
  42ac0e:	69e9      	ldr	r1, [r5, #28]
  42ac10:	4640      	mov	r0, r8
  42ac12:	47a0      	blx	r4
  42ac14:	1c44      	adds	r4, r0, #1
  42ac16:	d03c      	beq.n	42ac92 <__sflush_r+0xce>
  42ac18:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  42ac1c:	692a      	ldr	r2, [r5, #16]
  42ac1e:	602a      	str	r2, [r5, #0]
  42ac20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  42ac24:	2200      	movs	r2, #0
  42ac26:	81ab      	strh	r3, [r5, #12]
  42ac28:	04db      	lsls	r3, r3, #19
  42ac2a:	606a      	str	r2, [r5, #4]
  42ac2c:	d447      	bmi.n	42acbe <__sflush_r+0xfa>
  42ac2e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  42ac30:	f8c8 6000 	str.w	r6, [r8]
  42ac34:	b311      	cbz	r1, 42ac7c <__sflush_r+0xb8>
  42ac36:	f105 0340 	add.w	r3, r5, #64	; 0x40
  42ac3a:	4299      	cmp	r1, r3
  42ac3c:	d002      	beq.n	42ac44 <__sflush_r+0x80>
  42ac3e:	4640      	mov	r0, r8
  42ac40:	f000 f9de 	bl	42b000 <_free_r>
  42ac44:	2000      	movs	r0, #0
  42ac46:	6328      	str	r0, [r5, #48]	; 0x30
  42ac48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42ac4c:	692e      	ldr	r6, [r5, #16]
  42ac4e:	b1ae      	cbz	r6, 42ac7c <__sflush_r+0xb8>
  42ac50:	682c      	ldr	r4, [r5, #0]
  42ac52:	602e      	str	r6, [r5, #0]
  42ac54:	0791      	lsls	r1, r2, #30
  42ac56:	bf0c      	ite	eq
  42ac58:	696b      	ldreq	r3, [r5, #20]
  42ac5a:	2300      	movne	r3, #0
  42ac5c:	1ba4      	subs	r4, r4, r6
  42ac5e:	60ab      	str	r3, [r5, #8]
  42ac60:	e00a      	b.n	42ac78 <__sflush_r+0xb4>
  42ac62:	4623      	mov	r3, r4
  42ac64:	4632      	mov	r2, r6
  42ac66:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  42ac68:	69e9      	ldr	r1, [r5, #28]
  42ac6a:	4640      	mov	r0, r8
  42ac6c:	47b8      	blx	r7
  42ac6e:	2800      	cmp	r0, #0
  42ac70:	eba4 0400 	sub.w	r4, r4, r0
  42ac74:	4406      	add	r6, r0
  42ac76:	dd04      	ble.n	42ac82 <__sflush_r+0xbe>
  42ac78:	2c00      	cmp	r4, #0
  42ac7a:	dcf2      	bgt.n	42ac62 <__sflush_r+0x9e>
  42ac7c:	2000      	movs	r0, #0
  42ac7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42ac82:	89ab      	ldrh	r3, [r5, #12]
  42ac84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42ac88:	81ab      	strh	r3, [r5, #12]
  42ac8a:	f04f 30ff 	mov.w	r0, #4294967295
  42ac8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42ac92:	f8d8 4000 	ldr.w	r4, [r8]
  42ac96:	2c1d      	cmp	r4, #29
  42ac98:	d8f3      	bhi.n	42ac82 <__sflush_r+0xbe>
  42ac9a:	4b19      	ldr	r3, [pc, #100]	; (42ad00 <__sflush_r+0x13c>)
  42ac9c:	40e3      	lsrs	r3, r4
  42ac9e:	43db      	mvns	r3, r3
  42aca0:	f013 0301 	ands.w	r3, r3, #1
  42aca4:	d1ed      	bne.n	42ac82 <__sflush_r+0xbe>
  42aca6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  42acaa:	606b      	str	r3, [r5, #4]
  42acac:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  42acb0:	6929      	ldr	r1, [r5, #16]
  42acb2:	81ab      	strh	r3, [r5, #12]
  42acb4:	04da      	lsls	r2, r3, #19
  42acb6:	6029      	str	r1, [r5, #0]
  42acb8:	d5b9      	bpl.n	42ac2e <__sflush_r+0x6a>
  42acba:	2c00      	cmp	r4, #0
  42acbc:	d1b7      	bne.n	42ac2e <__sflush_r+0x6a>
  42acbe:	6528      	str	r0, [r5, #80]	; 0x50
  42acc0:	e7b5      	b.n	42ac2e <__sflush_r+0x6a>
  42acc2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  42acc4:	2a00      	cmp	r2, #0
  42acc6:	dc8c      	bgt.n	42abe2 <__sflush_r+0x1e>
  42acc8:	e7d8      	b.n	42ac7c <__sflush_r+0xb8>
  42acca:	2301      	movs	r3, #1
  42accc:	69e9      	ldr	r1, [r5, #28]
  42acce:	4640      	mov	r0, r8
  42acd0:	47a0      	blx	r4
  42acd2:	1c43      	adds	r3, r0, #1
  42acd4:	4602      	mov	r2, r0
  42acd6:	d002      	beq.n	42acde <__sflush_r+0x11a>
  42acd8:	89ab      	ldrh	r3, [r5, #12]
  42acda:	6aac      	ldr	r4, [r5, #40]	; 0x28
  42acdc:	e78e      	b.n	42abfc <__sflush_r+0x38>
  42acde:	f8d8 3000 	ldr.w	r3, [r8]
  42ace2:	2b00      	cmp	r3, #0
  42ace4:	d0f8      	beq.n	42acd8 <__sflush_r+0x114>
  42ace6:	2b1d      	cmp	r3, #29
  42ace8:	d001      	beq.n	42acee <__sflush_r+0x12a>
  42acea:	2b16      	cmp	r3, #22
  42acec:	d102      	bne.n	42acf4 <__sflush_r+0x130>
  42acee:	f8c8 6000 	str.w	r6, [r8]
  42acf2:	e7c3      	b.n	42ac7c <__sflush_r+0xb8>
  42acf4:	89ab      	ldrh	r3, [r5, #12]
  42acf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42acfa:	81ab      	strh	r3, [r5, #12]
  42acfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42ad00:	20400001 	.word	0x20400001

0042ad04 <_fflush_r>:
  42ad04:	b538      	push	{r3, r4, r5, lr}
  42ad06:	460d      	mov	r5, r1
  42ad08:	4604      	mov	r4, r0
  42ad0a:	b108      	cbz	r0, 42ad10 <_fflush_r+0xc>
  42ad0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  42ad0e:	b1bb      	cbz	r3, 42ad40 <_fflush_r+0x3c>
  42ad10:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  42ad14:	b188      	cbz	r0, 42ad3a <_fflush_r+0x36>
  42ad16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  42ad18:	07db      	lsls	r3, r3, #31
  42ad1a:	d401      	bmi.n	42ad20 <_fflush_r+0x1c>
  42ad1c:	0581      	lsls	r1, r0, #22
  42ad1e:	d517      	bpl.n	42ad50 <_fflush_r+0x4c>
  42ad20:	4620      	mov	r0, r4
  42ad22:	4629      	mov	r1, r5
  42ad24:	f7ff ff4e 	bl	42abc4 <__sflush_r>
  42ad28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  42ad2a:	07da      	lsls	r2, r3, #31
  42ad2c:	4604      	mov	r4, r0
  42ad2e:	d402      	bmi.n	42ad36 <_fflush_r+0x32>
  42ad30:	89ab      	ldrh	r3, [r5, #12]
  42ad32:	059b      	lsls	r3, r3, #22
  42ad34:	d507      	bpl.n	42ad46 <_fflush_r+0x42>
  42ad36:	4620      	mov	r0, r4
  42ad38:	bd38      	pop	{r3, r4, r5, pc}
  42ad3a:	4604      	mov	r4, r0
  42ad3c:	4620      	mov	r0, r4
  42ad3e:	bd38      	pop	{r3, r4, r5, pc}
  42ad40:	f000 f838 	bl	42adb4 <__sinit>
  42ad44:	e7e4      	b.n	42ad10 <_fflush_r+0xc>
  42ad46:	6da8      	ldr	r0, [r5, #88]	; 0x58
  42ad48:	f000 fd4e 	bl	42b7e8 <__retarget_lock_release_recursive>
  42ad4c:	4620      	mov	r0, r4
  42ad4e:	bd38      	pop	{r3, r4, r5, pc}
  42ad50:	6da8      	ldr	r0, [r5, #88]	; 0x58
  42ad52:	f000 fd45 	bl	42b7e0 <__retarget_lock_acquire_recursive>
  42ad56:	e7e3      	b.n	42ad20 <_fflush_r+0x1c>

0042ad58 <_cleanup_r>:
  42ad58:	4901      	ldr	r1, [pc, #4]	; (42ad60 <_cleanup_r+0x8>)
  42ad5a:	f000 bbaf 	b.w	42b4bc <_fwalk_reent>
  42ad5e:	bf00      	nop
  42ad60:	0042e015 	.word	0x0042e015

0042ad64 <std.isra.0>:
  42ad64:	b510      	push	{r4, lr}
  42ad66:	2300      	movs	r3, #0
  42ad68:	4604      	mov	r4, r0
  42ad6a:	8181      	strh	r1, [r0, #12]
  42ad6c:	81c2      	strh	r2, [r0, #14]
  42ad6e:	6003      	str	r3, [r0, #0]
  42ad70:	6043      	str	r3, [r0, #4]
  42ad72:	6083      	str	r3, [r0, #8]
  42ad74:	6643      	str	r3, [r0, #100]	; 0x64
  42ad76:	6103      	str	r3, [r0, #16]
  42ad78:	6143      	str	r3, [r0, #20]
  42ad7a:	6183      	str	r3, [r0, #24]
  42ad7c:	4619      	mov	r1, r3
  42ad7e:	2208      	movs	r2, #8
  42ad80:	305c      	adds	r0, #92	; 0x5c
  42ad82:	f7fb ff37 	bl	426bf4 <memset>
  42ad86:	4807      	ldr	r0, [pc, #28]	; (42ada4 <std.isra.0+0x40>)
  42ad88:	4907      	ldr	r1, [pc, #28]	; (42ada8 <std.isra.0+0x44>)
  42ad8a:	4a08      	ldr	r2, [pc, #32]	; (42adac <std.isra.0+0x48>)
  42ad8c:	4b08      	ldr	r3, [pc, #32]	; (42adb0 <std.isra.0+0x4c>)
  42ad8e:	6220      	str	r0, [r4, #32]
  42ad90:	61e4      	str	r4, [r4, #28]
  42ad92:	6261      	str	r1, [r4, #36]	; 0x24
  42ad94:	62a2      	str	r2, [r4, #40]	; 0x28
  42ad96:	62e3      	str	r3, [r4, #44]	; 0x2c
  42ad98:	f104 0058 	add.w	r0, r4, #88	; 0x58
  42ad9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  42ada0:	f000 bd18 	b.w	42b7d4 <__retarget_lock_init_recursive>
  42ada4:	0042c9cd 	.word	0x0042c9cd
  42ada8:	0042c9f5 	.word	0x0042c9f5
  42adac:	0042ca31 	.word	0x0042ca31
  42adb0:	0042ca51 	.word	0x0042ca51

0042adb4 <__sinit>:
  42adb4:	b510      	push	{r4, lr}
  42adb6:	4604      	mov	r4, r0
  42adb8:	4812      	ldr	r0, [pc, #72]	; (42ae04 <__sinit+0x50>)
  42adba:	f000 fd11 	bl	42b7e0 <__retarget_lock_acquire_recursive>
  42adbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  42adc0:	b9d2      	cbnz	r2, 42adf8 <__sinit+0x44>
  42adc2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  42adc6:	4810      	ldr	r0, [pc, #64]	; (42ae08 <__sinit+0x54>)
  42adc8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  42adcc:	2103      	movs	r1, #3
  42adce:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  42add2:	63e0      	str	r0, [r4, #60]	; 0x3c
  42add4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  42add8:	6860      	ldr	r0, [r4, #4]
  42adda:	2104      	movs	r1, #4
  42addc:	f7ff ffc2 	bl	42ad64 <std.isra.0>
  42ade0:	2201      	movs	r2, #1
  42ade2:	2109      	movs	r1, #9
  42ade4:	68a0      	ldr	r0, [r4, #8]
  42ade6:	f7ff ffbd 	bl	42ad64 <std.isra.0>
  42adea:	2202      	movs	r2, #2
  42adec:	2112      	movs	r1, #18
  42adee:	68e0      	ldr	r0, [r4, #12]
  42adf0:	f7ff ffb8 	bl	42ad64 <std.isra.0>
  42adf4:	2301      	movs	r3, #1
  42adf6:	63a3      	str	r3, [r4, #56]	; 0x38
  42adf8:	4802      	ldr	r0, [pc, #8]	; (42ae04 <__sinit+0x50>)
  42adfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  42adfe:	f000 bcf3 	b.w	42b7e8 <__retarget_lock_release_recursive>
  42ae02:	bf00      	nop
  42ae04:	20001720 	.word	0x20001720
  42ae08:	0042ad59 	.word	0x0042ad59

0042ae0c <__sfp_lock_acquire>:
  42ae0c:	4801      	ldr	r0, [pc, #4]	; (42ae14 <__sfp_lock_acquire+0x8>)
  42ae0e:	f000 bce7 	b.w	42b7e0 <__retarget_lock_acquire_recursive>
  42ae12:	bf00      	nop
  42ae14:	20001734 	.word	0x20001734

0042ae18 <__sfp_lock_release>:
  42ae18:	4801      	ldr	r0, [pc, #4]	; (42ae20 <__sfp_lock_release+0x8>)
  42ae1a:	f000 bce5 	b.w	42b7e8 <__retarget_lock_release_recursive>
  42ae1e:	bf00      	nop
  42ae20:	20001734 	.word	0x20001734

0042ae24 <__libc_fini_array>:
  42ae24:	b538      	push	{r3, r4, r5, lr}
  42ae26:	4c0a      	ldr	r4, [pc, #40]	; (42ae50 <__libc_fini_array+0x2c>)
  42ae28:	4d0a      	ldr	r5, [pc, #40]	; (42ae54 <__libc_fini_array+0x30>)
  42ae2a:	1b64      	subs	r4, r4, r5
  42ae2c:	10a4      	asrs	r4, r4, #2
  42ae2e:	d00a      	beq.n	42ae46 <__libc_fini_array+0x22>
  42ae30:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  42ae34:	3b01      	subs	r3, #1
  42ae36:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  42ae3a:	3c01      	subs	r4, #1
  42ae3c:	f855 3904 	ldr.w	r3, [r5], #-4
  42ae40:	4798      	blx	r3
  42ae42:	2c00      	cmp	r4, #0
  42ae44:	d1f9      	bne.n	42ae3a <__libc_fini_array+0x16>
  42ae46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  42ae4a:	f004 bded 	b.w	42fa28 <_fini>
  42ae4e:	bf00      	nop
  42ae50:	0042fa38 	.word	0x0042fa38
  42ae54:	0042fa34 	.word	0x0042fa34

0042ae58 <__fputwc>:
  42ae58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  42ae5c:	b082      	sub	sp, #8
  42ae5e:	4680      	mov	r8, r0
  42ae60:	4689      	mov	r9, r1
  42ae62:	4614      	mov	r4, r2
  42ae64:	f000 fc88 	bl	42b778 <__locale_mb_cur_max>
  42ae68:	2801      	cmp	r0, #1
  42ae6a:	d036      	beq.n	42aeda <__fputwc+0x82>
  42ae6c:	464a      	mov	r2, r9
  42ae6e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  42ae72:	a901      	add	r1, sp, #4
  42ae74:	4640      	mov	r0, r8
  42ae76:	f002 ffcf 	bl	42de18 <_wcrtomb_r>
  42ae7a:	1c42      	adds	r2, r0, #1
  42ae7c:	4606      	mov	r6, r0
  42ae7e:	d025      	beq.n	42aecc <__fputwc+0x74>
  42ae80:	b3a8      	cbz	r0, 42aeee <__fputwc+0x96>
  42ae82:	f89d e004 	ldrb.w	lr, [sp, #4]
  42ae86:	2500      	movs	r5, #0
  42ae88:	f10d 0a04 	add.w	sl, sp, #4
  42ae8c:	e009      	b.n	42aea2 <__fputwc+0x4a>
  42ae8e:	6823      	ldr	r3, [r4, #0]
  42ae90:	1c5a      	adds	r2, r3, #1
  42ae92:	6022      	str	r2, [r4, #0]
  42ae94:	f883 e000 	strb.w	lr, [r3]
  42ae98:	3501      	adds	r5, #1
  42ae9a:	42b5      	cmp	r5, r6
  42ae9c:	d227      	bcs.n	42aeee <__fputwc+0x96>
  42ae9e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  42aea2:	68a3      	ldr	r3, [r4, #8]
  42aea4:	3b01      	subs	r3, #1
  42aea6:	2b00      	cmp	r3, #0
  42aea8:	60a3      	str	r3, [r4, #8]
  42aeaa:	daf0      	bge.n	42ae8e <__fputwc+0x36>
  42aeac:	69a7      	ldr	r7, [r4, #24]
  42aeae:	42bb      	cmp	r3, r7
  42aeb0:	4671      	mov	r1, lr
  42aeb2:	4622      	mov	r2, r4
  42aeb4:	4640      	mov	r0, r8
  42aeb6:	db02      	blt.n	42aebe <__fputwc+0x66>
  42aeb8:	f1be 0f0a 	cmp.w	lr, #10
  42aebc:	d1e7      	bne.n	42ae8e <__fputwc+0x36>
  42aebe:	f002 ff53 	bl	42dd68 <__swbuf_r>
  42aec2:	1c43      	adds	r3, r0, #1
  42aec4:	d1e8      	bne.n	42ae98 <__fputwc+0x40>
  42aec6:	b002      	add	sp, #8
  42aec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42aecc:	89a3      	ldrh	r3, [r4, #12]
  42aece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42aed2:	81a3      	strh	r3, [r4, #12]
  42aed4:	b002      	add	sp, #8
  42aed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42aeda:	f109 33ff 	add.w	r3, r9, #4294967295
  42aede:	2bfe      	cmp	r3, #254	; 0xfe
  42aee0:	d8c4      	bhi.n	42ae6c <__fputwc+0x14>
  42aee2:	fa5f fe89 	uxtb.w	lr, r9
  42aee6:	4606      	mov	r6, r0
  42aee8:	f88d e004 	strb.w	lr, [sp, #4]
  42aeec:	e7cb      	b.n	42ae86 <__fputwc+0x2e>
  42aeee:	4648      	mov	r0, r9
  42aef0:	b002      	add	sp, #8
  42aef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42aef6:	bf00      	nop

0042aef8 <_fputwc_r>:
  42aef8:	b530      	push	{r4, r5, lr}
  42aefa:	6e53      	ldr	r3, [r2, #100]	; 0x64
  42aefc:	f013 0f01 	tst.w	r3, #1
  42af00:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  42af04:	4614      	mov	r4, r2
  42af06:	b083      	sub	sp, #12
  42af08:	4605      	mov	r5, r0
  42af0a:	b29a      	uxth	r2, r3
  42af0c:	d101      	bne.n	42af12 <_fputwc_r+0x1a>
  42af0e:	0590      	lsls	r0, r2, #22
  42af10:	d51c      	bpl.n	42af4c <_fputwc_r+0x54>
  42af12:	0490      	lsls	r0, r2, #18
  42af14:	d406      	bmi.n	42af24 <_fputwc_r+0x2c>
  42af16:	6e62      	ldr	r2, [r4, #100]	; 0x64
  42af18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  42af1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  42af20:	81a3      	strh	r3, [r4, #12]
  42af22:	6662      	str	r2, [r4, #100]	; 0x64
  42af24:	4628      	mov	r0, r5
  42af26:	4622      	mov	r2, r4
  42af28:	f7ff ff96 	bl	42ae58 <__fputwc>
  42af2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42af2e:	07da      	lsls	r2, r3, #31
  42af30:	4605      	mov	r5, r0
  42af32:	d402      	bmi.n	42af3a <_fputwc_r+0x42>
  42af34:	89a3      	ldrh	r3, [r4, #12]
  42af36:	059b      	lsls	r3, r3, #22
  42af38:	d502      	bpl.n	42af40 <_fputwc_r+0x48>
  42af3a:	4628      	mov	r0, r5
  42af3c:	b003      	add	sp, #12
  42af3e:	bd30      	pop	{r4, r5, pc}
  42af40:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42af42:	f000 fc51 	bl	42b7e8 <__retarget_lock_release_recursive>
  42af46:	4628      	mov	r0, r5
  42af48:	b003      	add	sp, #12
  42af4a:	bd30      	pop	{r4, r5, pc}
  42af4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42af4e:	9101      	str	r1, [sp, #4]
  42af50:	f000 fc46 	bl	42b7e0 <__retarget_lock_acquire_recursive>
  42af54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42af58:	9901      	ldr	r1, [sp, #4]
  42af5a:	b29a      	uxth	r2, r3
  42af5c:	e7d9      	b.n	42af12 <_fputwc_r+0x1a>
  42af5e:	bf00      	nop

0042af60 <_malloc_trim_r>:
  42af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42af62:	4f24      	ldr	r7, [pc, #144]	; (42aff4 <_malloc_trim_r+0x94>)
  42af64:	460c      	mov	r4, r1
  42af66:	4606      	mov	r6, r0
  42af68:	f001 f846 	bl	42bff8 <__malloc_lock>
  42af6c:	68bb      	ldr	r3, [r7, #8]
  42af6e:	685d      	ldr	r5, [r3, #4]
  42af70:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  42af74:	310f      	adds	r1, #15
  42af76:	f025 0503 	bic.w	r5, r5, #3
  42af7a:	4429      	add	r1, r5
  42af7c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  42af80:	f021 010f 	bic.w	r1, r1, #15
  42af84:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  42af88:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  42af8c:	db07      	blt.n	42af9e <_malloc_trim_r+0x3e>
  42af8e:	2100      	movs	r1, #0
  42af90:	4630      	mov	r0, r6
  42af92:	f001 fcdd 	bl	42c950 <_sbrk_r>
  42af96:	68bb      	ldr	r3, [r7, #8]
  42af98:	442b      	add	r3, r5
  42af9a:	4298      	cmp	r0, r3
  42af9c:	d004      	beq.n	42afa8 <_malloc_trim_r+0x48>
  42af9e:	4630      	mov	r0, r6
  42afa0:	f001 f830 	bl	42c004 <__malloc_unlock>
  42afa4:	2000      	movs	r0, #0
  42afa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42afa8:	4261      	negs	r1, r4
  42afaa:	4630      	mov	r0, r6
  42afac:	f001 fcd0 	bl	42c950 <_sbrk_r>
  42afb0:	3001      	adds	r0, #1
  42afb2:	d00d      	beq.n	42afd0 <_malloc_trim_r+0x70>
  42afb4:	4b10      	ldr	r3, [pc, #64]	; (42aff8 <_malloc_trim_r+0x98>)
  42afb6:	68ba      	ldr	r2, [r7, #8]
  42afb8:	6819      	ldr	r1, [r3, #0]
  42afba:	1b2d      	subs	r5, r5, r4
  42afbc:	f045 0501 	orr.w	r5, r5, #1
  42afc0:	4630      	mov	r0, r6
  42afc2:	1b09      	subs	r1, r1, r4
  42afc4:	6055      	str	r5, [r2, #4]
  42afc6:	6019      	str	r1, [r3, #0]
  42afc8:	f001 f81c 	bl	42c004 <__malloc_unlock>
  42afcc:	2001      	movs	r0, #1
  42afce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42afd0:	2100      	movs	r1, #0
  42afd2:	4630      	mov	r0, r6
  42afd4:	f001 fcbc 	bl	42c950 <_sbrk_r>
  42afd8:	68ba      	ldr	r2, [r7, #8]
  42afda:	1a83      	subs	r3, r0, r2
  42afdc:	2b0f      	cmp	r3, #15
  42afde:	ddde      	ble.n	42af9e <_malloc_trim_r+0x3e>
  42afe0:	4c06      	ldr	r4, [pc, #24]	; (42affc <_malloc_trim_r+0x9c>)
  42afe2:	4905      	ldr	r1, [pc, #20]	; (42aff8 <_malloc_trim_r+0x98>)
  42afe4:	6824      	ldr	r4, [r4, #0]
  42afe6:	f043 0301 	orr.w	r3, r3, #1
  42afea:	1b00      	subs	r0, r0, r4
  42afec:	6053      	str	r3, [r2, #4]
  42afee:	6008      	str	r0, [r1, #0]
  42aff0:	e7d5      	b.n	42af9e <_malloc_trim_r+0x3e>
  42aff2:	bf00      	nop
  42aff4:	200006b0 	.word	0x200006b0
  42aff8:	2000143c 	.word	0x2000143c
  42affc:	20000ab8 	.word	0x20000ab8

0042b000 <_free_r>:
  42b000:	2900      	cmp	r1, #0
  42b002:	d044      	beq.n	42b08e <_free_r+0x8e>
  42b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42b008:	460d      	mov	r5, r1
  42b00a:	4680      	mov	r8, r0
  42b00c:	f000 fff4 	bl	42bff8 <__malloc_lock>
  42b010:	f855 7c04 	ldr.w	r7, [r5, #-4]
  42b014:	4969      	ldr	r1, [pc, #420]	; (42b1bc <_free_r+0x1bc>)
  42b016:	f027 0301 	bic.w	r3, r7, #1
  42b01a:	f1a5 0408 	sub.w	r4, r5, #8
  42b01e:	18e2      	adds	r2, r4, r3
  42b020:	688e      	ldr	r6, [r1, #8]
  42b022:	6850      	ldr	r0, [r2, #4]
  42b024:	42b2      	cmp	r2, r6
  42b026:	f020 0003 	bic.w	r0, r0, #3
  42b02a:	d05e      	beq.n	42b0ea <_free_r+0xea>
  42b02c:	07fe      	lsls	r6, r7, #31
  42b02e:	6050      	str	r0, [r2, #4]
  42b030:	d40b      	bmi.n	42b04a <_free_r+0x4a>
  42b032:	f855 7c08 	ldr.w	r7, [r5, #-8]
  42b036:	1be4      	subs	r4, r4, r7
  42b038:	f101 0e08 	add.w	lr, r1, #8
  42b03c:	68a5      	ldr	r5, [r4, #8]
  42b03e:	4575      	cmp	r5, lr
  42b040:	443b      	add	r3, r7
  42b042:	d06d      	beq.n	42b120 <_free_r+0x120>
  42b044:	68e7      	ldr	r7, [r4, #12]
  42b046:	60ef      	str	r7, [r5, #12]
  42b048:	60bd      	str	r5, [r7, #8]
  42b04a:	1815      	adds	r5, r2, r0
  42b04c:	686d      	ldr	r5, [r5, #4]
  42b04e:	07ed      	lsls	r5, r5, #31
  42b050:	d53e      	bpl.n	42b0d0 <_free_r+0xd0>
  42b052:	f043 0201 	orr.w	r2, r3, #1
  42b056:	6062      	str	r2, [r4, #4]
  42b058:	50e3      	str	r3, [r4, r3]
  42b05a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  42b05e:	d217      	bcs.n	42b090 <_free_r+0x90>
  42b060:	08db      	lsrs	r3, r3, #3
  42b062:	1c58      	adds	r0, r3, #1
  42b064:	109a      	asrs	r2, r3, #2
  42b066:	684d      	ldr	r5, [r1, #4]
  42b068:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  42b06c:	60a7      	str	r7, [r4, #8]
  42b06e:	2301      	movs	r3, #1
  42b070:	4093      	lsls	r3, r2
  42b072:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  42b076:	432b      	orrs	r3, r5
  42b078:	3a08      	subs	r2, #8
  42b07a:	60e2      	str	r2, [r4, #12]
  42b07c:	604b      	str	r3, [r1, #4]
  42b07e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  42b082:	60fc      	str	r4, [r7, #12]
  42b084:	4640      	mov	r0, r8
  42b086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42b08a:	f000 bfbb 	b.w	42c004 <__malloc_unlock>
  42b08e:	4770      	bx	lr
  42b090:	0a5a      	lsrs	r2, r3, #9
  42b092:	2a04      	cmp	r2, #4
  42b094:	d852      	bhi.n	42b13c <_free_r+0x13c>
  42b096:	099a      	lsrs	r2, r3, #6
  42b098:	f102 0739 	add.w	r7, r2, #57	; 0x39
  42b09c:	00ff      	lsls	r7, r7, #3
  42b09e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  42b0a2:	19c8      	adds	r0, r1, r7
  42b0a4:	59ca      	ldr	r2, [r1, r7]
  42b0a6:	3808      	subs	r0, #8
  42b0a8:	4290      	cmp	r0, r2
  42b0aa:	d04f      	beq.n	42b14c <_free_r+0x14c>
  42b0ac:	6851      	ldr	r1, [r2, #4]
  42b0ae:	f021 0103 	bic.w	r1, r1, #3
  42b0b2:	428b      	cmp	r3, r1
  42b0b4:	d232      	bcs.n	42b11c <_free_r+0x11c>
  42b0b6:	6892      	ldr	r2, [r2, #8]
  42b0b8:	4290      	cmp	r0, r2
  42b0ba:	d1f7      	bne.n	42b0ac <_free_r+0xac>
  42b0bc:	68c3      	ldr	r3, [r0, #12]
  42b0be:	60a0      	str	r0, [r4, #8]
  42b0c0:	60e3      	str	r3, [r4, #12]
  42b0c2:	609c      	str	r4, [r3, #8]
  42b0c4:	60c4      	str	r4, [r0, #12]
  42b0c6:	4640      	mov	r0, r8
  42b0c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42b0cc:	f000 bf9a 	b.w	42c004 <__malloc_unlock>
  42b0d0:	6895      	ldr	r5, [r2, #8]
  42b0d2:	4f3b      	ldr	r7, [pc, #236]	; (42b1c0 <_free_r+0x1c0>)
  42b0d4:	42bd      	cmp	r5, r7
  42b0d6:	4403      	add	r3, r0
  42b0d8:	d040      	beq.n	42b15c <_free_r+0x15c>
  42b0da:	68d0      	ldr	r0, [r2, #12]
  42b0dc:	60e8      	str	r0, [r5, #12]
  42b0de:	f043 0201 	orr.w	r2, r3, #1
  42b0e2:	6085      	str	r5, [r0, #8]
  42b0e4:	6062      	str	r2, [r4, #4]
  42b0e6:	50e3      	str	r3, [r4, r3]
  42b0e8:	e7b7      	b.n	42b05a <_free_r+0x5a>
  42b0ea:	07ff      	lsls	r7, r7, #31
  42b0ec:	4403      	add	r3, r0
  42b0ee:	d407      	bmi.n	42b100 <_free_r+0x100>
  42b0f0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  42b0f4:	1aa4      	subs	r4, r4, r2
  42b0f6:	4413      	add	r3, r2
  42b0f8:	68a0      	ldr	r0, [r4, #8]
  42b0fa:	68e2      	ldr	r2, [r4, #12]
  42b0fc:	60c2      	str	r2, [r0, #12]
  42b0fe:	6090      	str	r0, [r2, #8]
  42b100:	4a30      	ldr	r2, [pc, #192]	; (42b1c4 <_free_r+0x1c4>)
  42b102:	6812      	ldr	r2, [r2, #0]
  42b104:	f043 0001 	orr.w	r0, r3, #1
  42b108:	4293      	cmp	r3, r2
  42b10a:	6060      	str	r0, [r4, #4]
  42b10c:	608c      	str	r4, [r1, #8]
  42b10e:	d3b9      	bcc.n	42b084 <_free_r+0x84>
  42b110:	4b2d      	ldr	r3, [pc, #180]	; (42b1c8 <_free_r+0x1c8>)
  42b112:	4640      	mov	r0, r8
  42b114:	6819      	ldr	r1, [r3, #0]
  42b116:	f7ff ff23 	bl	42af60 <_malloc_trim_r>
  42b11a:	e7b3      	b.n	42b084 <_free_r+0x84>
  42b11c:	4610      	mov	r0, r2
  42b11e:	e7cd      	b.n	42b0bc <_free_r+0xbc>
  42b120:	1811      	adds	r1, r2, r0
  42b122:	6849      	ldr	r1, [r1, #4]
  42b124:	07c9      	lsls	r1, r1, #31
  42b126:	d444      	bmi.n	42b1b2 <_free_r+0x1b2>
  42b128:	6891      	ldr	r1, [r2, #8]
  42b12a:	68d2      	ldr	r2, [r2, #12]
  42b12c:	60ca      	str	r2, [r1, #12]
  42b12e:	4403      	add	r3, r0
  42b130:	f043 0001 	orr.w	r0, r3, #1
  42b134:	6091      	str	r1, [r2, #8]
  42b136:	6060      	str	r0, [r4, #4]
  42b138:	50e3      	str	r3, [r4, r3]
  42b13a:	e7a3      	b.n	42b084 <_free_r+0x84>
  42b13c:	2a14      	cmp	r2, #20
  42b13e:	d816      	bhi.n	42b16e <_free_r+0x16e>
  42b140:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  42b144:	00ff      	lsls	r7, r7, #3
  42b146:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  42b14a:	e7aa      	b.n	42b0a2 <_free_r+0xa2>
  42b14c:	10aa      	asrs	r2, r5, #2
  42b14e:	2301      	movs	r3, #1
  42b150:	684d      	ldr	r5, [r1, #4]
  42b152:	4093      	lsls	r3, r2
  42b154:	432b      	orrs	r3, r5
  42b156:	604b      	str	r3, [r1, #4]
  42b158:	4603      	mov	r3, r0
  42b15a:	e7b0      	b.n	42b0be <_free_r+0xbe>
  42b15c:	f043 0201 	orr.w	r2, r3, #1
  42b160:	614c      	str	r4, [r1, #20]
  42b162:	610c      	str	r4, [r1, #16]
  42b164:	60e5      	str	r5, [r4, #12]
  42b166:	60a5      	str	r5, [r4, #8]
  42b168:	6062      	str	r2, [r4, #4]
  42b16a:	50e3      	str	r3, [r4, r3]
  42b16c:	e78a      	b.n	42b084 <_free_r+0x84>
  42b16e:	2a54      	cmp	r2, #84	; 0x54
  42b170:	d806      	bhi.n	42b180 <_free_r+0x180>
  42b172:	0b1a      	lsrs	r2, r3, #12
  42b174:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  42b178:	00ff      	lsls	r7, r7, #3
  42b17a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  42b17e:	e790      	b.n	42b0a2 <_free_r+0xa2>
  42b180:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  42b184:	d806      	bhi.n	42b194 <_free_r+0x194>
  42b186:	0bda      	lsrs	r2, r3, #15
  42b188:	f102 0778 	add.w	r7, r2, #120	; 0x78
  42b18c:	00ff      	lsls	r7, r7, #3
  42b18e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  42b192:	e786      	b.n	42b0a2 <_free_r+0xa2>
  42b194:	f240 5054 	movw	r0, #1364	; 0x554
  42b198:	4282      	cmp	r2, r0
  42b19a:	d806      	bhi.n	42b1aa <_free_r+0x1aa>
  42b19c:	0c9a      	lsrs	r2, r3, #18
  42b19e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  42b1a2:	00ff      	lsls	r7, r7, #3
  42b1a4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  42b1a8:	e77b      	b.n	42b0a2 <_free_r+0xa2>
  42b1aa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  42b1ae:	257e      	movs	r5, #126	; 0x7e
  42b1b0:	e777      	b.n	42b0a2 <_free_r+0xa2>
  42b1b2:	f043 0101 	orr.w	r1, r3, #1
  42b1b6:	6061      	str	r1, [r4, #4]
  42b1b8:	6013      	str	r3, [r2, #0]
  42b1ba:	e763      	b.n	42b084 <_free_r+0x84>
  42b1bc:	200006b0 	.word	0x200006b0
  42b1c0:	200006b8 	.word	0x200006b8
  42b1c4:	20000abc 	.word	0x20000abc
  42b1c8:	2000146c 	.word	0x2000146c

0042b1cc <__sfvwrite_r>:
  42b1cc:	6893      	ldr	r3, [r2, #8]
  42b1ce:	2b00      	cmp	r3, #0
  42b1d0:	d073      	beq.n	42b2ba <__sfvwrite_r+0xee>
  42b1d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42b1d6:	898b      	ldrh	r3, [r1, #12]
  42b1d8:	b083      	sub	sp, #12
  42b1da:	460c      	mov	r4, r1
  42b1dc:	0719      	lsls	r1, r3, #28
  42b1de:	9000      	str	r0, [sp, #0]
  42b1e0:	4616      	mov	r6, r2
  42b1e2:	d526      	bpl.n	42b232 <__sfvwrite_r+0x66>
  42b1e4:	6922      	ldr	r2, [r4, #16]
  42b1e6:	b322      	cbz	r2, 42b232 <__sfvwrite_r+0x66>
  42b1e8:	f013 0002 	ands.w	r0, r3, #2
  42b1ec:	6835      	ldr	r5, [r6, #0]
  42b1ee:	d02c      	beq.n	42b24a <__sfvwrite_r+0x7e>
  42b1f0:	f04f 0900 	mov.w	r9, #0
  42b1f4:	4fb0      	ldr	r7, [pc, #704]	; (42b4b8 <__sfvwrite_r+0x2ec>)
  42b1f6:	46c8      	mov	r8, r9
  42b1f8:	46b2      	mov	sl, r6
  42b1fa:	45b8      	cmp	r8, r7
  42b1fc:	4643      	mov	r3, r8
  42b1fe:	464a      	mov	r2, r9
  42b200:	bf28      	it	cs
  42b202:	463b      	movcs	r3, r7
  42b204:	9800      	ldr	r0, [sp, #0]
  42b206:	f1b8 0f00 	cmp.w	r8, #0
  42b20a:	d050      	beq.n	42b2ae <__sfvwrite_r+0xe2>
  42b20c:	69e1      	ldr	r1, [r4, #28]
  42b20e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  42b210:	47b0      	blx	r6
  42b212:	2800      	cmp	r0, #0
  42b214:	dd58      	ble.n	42b2c8 <__sfvwrite_r+0xfc>
  42b216:	f8da 3008 	ldr.w	r3, [sl, #8]
  42b21a:	1a1b      	subs	r3, r3, r0
  42b21c:	4481      	add	r9, r0
  42b21e:	eba8 0800 	sub.w	r8, r8, r0
  42b222:	f8ca 3008 	str.w	r3, [sl, #8]
  42b226:	2b00      	cmp	r3, #0
  42b228:	d1e7      	bne.n	42b1fa <__sfvwrite_r+0x2e>
  42b22a:	2000      	movs	r0, #0
  42b22c:	b003      	add	sp, #12
  42b22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42b232:	4621      	mov	r1, r4
  42b234:	9800      	ldr	r0, [sp, #0]
  42b236:	f7fe fc75 	bl	429b24 <__swsetup_r>
  42b23a:	2800      	cmp	r0, #0
  42b23c:	f040 8133 	bne.w	42b4a6 <__sfvwrite_r+0x2da>
  42b240:	89a3      	ldrh	r3, [r4, #12]
  42b242:	6835      	ldr	r5, [r6, #0]
  42b244:	f013 0002 	ands.w	r0, r3, #2
  42b248:	d1d2      	bne.n	42b1f0 <__sfvwrite_r+0x24>
  42b24a:	f013 0901 	ands.w	r9, r3, #1
  42b24e:	d145      	bne.n	42b2dc <__sfvwrite_r+0x110>
  42b250:	464f      	mov	r7, r9
  42b252:	9601      	str	r6, [sp, #4]
  42b254:	b337      	cbz	r7, 42b2a4 <__sfvwrite_r+0xd8>
  42b256:	059a      	lsls	r2, r3, #22
  42b258:	f8d4 8008 	ldr.w	r8, [r4, #8]
  42b25c:	f140 8083 	bpl.w	42b366 <__sfvwrite_r+0x19a>
  42b260:	4547      	cmp	r7, r8
  42b262:	46c3      	mov	fp, r8
  42b264:	f0c0 80ab 	bcc.w	42b3be <__sfvwrite_r+0x1f2>
  42b268:	f413 6f90 	tst.w	r3, #1152	; 0x480
  42b26c:	f040 80ac 	bne.w	42b3c8 <__sfvwrite_r+0x1fc>
  42b270:	6820      	ldr	r0, [r4, #0]
  42b272:	46ba      	mov	sl, r7
  42b274:	465a      	mov	r2, fp
  42b276:	4649      	mov	r1, r9
  42b278:	f000 fe5a 	bl	42bf30 <memmove>
  42b27c:	68a2      	ldr	r2, [r4, #8]
  42b27e:	6823      	ldr	r3, [r4, #0]
  42b280:	eba2 0208 	sub.w	r2, r2, r8
  42b284:	445b      	add	r3, fp
  42b286:	60a2      	str	r2, [r4, #8]
  42b288:	6023      	str	r3, [r4, #0]
  42b28a:	9a01      	ldr	r2, [sp, #4]
  42b28c:	6893      	ldr	r3, [r2, #8]
  42b28e:	eba3 030a 	sub.w	r3, r3, sl
  42b292:	44d1      	add	r9, sl
  42b294:	eba7 070a 	sub.w	r7, r7, sl
  42b298:	6093      	str	r3, [r2, #8]
  42b29a:	2b00      	cmp	r3, #0
  42b29c:	d0c5      	beq.n	42b22a <__sfvwrite_r+0x5e>
  42b29e:	89a3      	ldrh	r3, [r4, #12]
  42b2a0:	2f00      	cmp	r7, #0
  42b2a2:	d1d8      	bne.n	42b256 <__sfvwrite_r+0x8a>
  42b2a4:	f8d5 9000 	ldr.w	r9, [r5]
  42b2a8:	686f      	ldr	r7, [r5, #4]
  42b2aa:	3508      	adds	r5, #8
  42b2ac:	e7d2      	b.n	42b254 <__sfvwrite_r+0x88>
  42b2ae:	f8d5 9000 	ldr.w	r9, [r5]
  42b2b2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  42b2b6:	3508      	adds	r5, #8
  42b2b8:	e79f      	b.n	42b1fa <__sfvwrite_r+0x2e>
  42b2ba:	2000      	movs	r0, #0
  42b2bc:	4770      	bx	lr
  42b2be:	4621      	mov	r1, r4
  42b2c0:	9800      	ldr	r0, [sp, #0]
  42b2c2:	f7ff fd1f 	bl	42ad04 <_fflush_r>
  42b2c6:	b370      	cbz	r0, 42b326 <__sfvwrite_r+0x15a>
  42b2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42b2cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42b2d0:	f04f 30ff 	mov.w	r0, #4294967295
  42b2d4:	81a3      	strh	r3, [r4, #12]
  42b2d6:	b003      	add	sp, #12
  42b2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42b2dc:	4681      	mov	r9, r0
  42b2de:	4633      	mov	r3, r6
  42b2e0:	464e      	mov	r6, r9
  42b2e2:	46a8      	mov	r8, r5
  42b2e4:	469a      	mov	sl, r3
  42b2e6:	464d      	mov	r5, r9
  42b2e8:	b34e      	cbz	r6, 42b33e <__sfvwrite_r+0x172>
  42b2ea:	b380      	cbz	r0, 42b34e <__sfvwrite_r+0x182>
  42b2ec:	6820      	ldr	r0, [r4, #0]
  42b2ee:	6923      	ldr	r3, [r4, #16]
  42b2f0:	6962      	ldr	r2, [r4, #20]
  42b2f2:	45b1      	cmp	r9, r6
  42b2f4:	46cb      	mov	fp, r9
  42b2f6:	bf28      	it	cs
  42b2f8:	46b3      	movcs	fp, r6
  42b2fa:	4298      	cmp	r0, r3
  42b2fc:	465f      	mov	r7, fp
  42b2fe:	d904      	bls.n	42b30a <__sfvwrite_r+0x13e>
  42b300:	68a3      	ldr	r3, [r4, #8]
  42b302:	4413      	add	r3, r2
  42b304:	459b      	cmp	fp, r3
  42b306:	f300 80a6 	bgt.w	42b456 <__sfvwrite_r+0x28a>
  42b30a:	4593      	cmp	fp, r2
  42b30c:	db4b      	blt.n	42b3a6 <__sfvwrite_r+0x1da>
  42b30e:	4613      	mov	r3, r2
  42b310:	6a67      	ldr	r7, [r4, #36]	; 0x24
  42b312:	69e1      	ldr	r1, [r4, #28]
  42b314:	9800      	ldr	r0, [sp, #0]
  42b316:	462a      	mov	r2, r5
  42b318:	47b8      	blx	r7
  42b31a:	1e07      	subs	r7, r0, #0
  42b31c:	ddd4      	ble.n	42b2c8 <__sfvwrite_r+0xfc>
  42b31e:	ebb9 0907 	subs.w	r9, r9, r7
  42b322:	d0cc      	beq.n	42b2be <__sfvwrite_r+0xf2>
  42b324:	2001      	movs	r0, #1
  42b326:	f8da 3008 	ldr.w	r3, [sl, #8]
  42b32a:	1bdb      	subs	r3, r3, r7
  42b32c:	443d      	add	r5, r7
  42b32e:	1bf6      	subs	r6, r6, r7
  42b330:	f8ca 3008 	str.w	r3, [sl, #8]
  42b334:	2b00      	cmp	r3, #0
  42b336:	f43f af78 	beq.w	42b22a <__sfvwrite_r+0x5e>
  42b33a:	2e00      	cmp	r6, #0
  42b33c:	d1d5      	bne.n	42b2ea <__sfvwrite_r+0x11e>
  42b33e:	f108 0308 	add.w	r3, r8, #8
  42b342:	e913 0060 	ldmdb	r3, {r5, r6}
  42b346:	4698      	mov	r8, r3
  42b348:	3308      	adds	r3, #8
  42b34a:	2e00      	cmp	r6, #0
  42b34c:	d0f9      	beq.n	42b342 <__sfvwrite_r+0x176>
  42b34e:	4632      	mov	r2, r6
  42b350:	210a      	movs	r1, #10
  42b352:	4628      	mov	r0, r5
  42b354:	f000 fd9c 	bl	42be90 <memchr>
  42b358:	2800      	cmp	r0, #0
  42b35a:	f000 80a1 	beq.w	42b4a0 <__sfvwrite_r+0x2d4>
  42b35e:	3001      	adds	r0, #1
  42b360:	eba0 0905 	sub.w	r9, r0, r5
  42b364:	e7c2      	b.n	42b2ec <__sfvwrite_r+0x120>
  42b366:	6820      	ldr	r0, [r4, #0]
  42b368:	6923      	ldr	r3, [r4, #16]
  42b36a:	4298      	cmp	r0, r3
  42b36c:	d802      	bhi.n	42b374 <__sfvwrite_r+0x1a8>
  42b36e:	6963      	ldr	r3, [r4, #20]
  42b370:	429f      	cmp	r7, r3
  42b372:	d25d      	bcs.n	42b430 <__sfvwrite_r+0x264>
  42b374:	45b8      	cmp	r8, r7
  42b376:	bf28      	it	cs
  42b378:	46b8      	movcs	r8, r7
  42b37a:	4642      	mov	r2, r8
  42b37c:	4649      	mov	r1, r9
  42b37e:	f000 fdd7 	bl	42bf30 <memmove>
  42b382:	68a3      	ldr	r3, [r4, #8]
  42b384:	6822      	ldr	r2, [r4, #0]
  42b386:	eba3 0308 	sub.w	r3, r3, r8
  42b38a:	4442      	add	r2, r8
  42b38c:	60a3      	str	r3, [r4, #8]
  42b38e:	6022      	str	r2, [r4, #0]
  42b390:	b10b      	cbz	r3, 42b396 <__sfvwrite_r+0x1ca>
  42b392:	46c2      	mov	sl, r8
  42b394:	e779      	b.n	42b28a <__sfvwrite_r+0xbe>
  42b396:	4621      	mov	r1, r4
  42b398:	9800      	ldr	r0, [sp, #0]
  42b39a:	f7ff fcb3 	bl	42ad04 <_fflush_r>
  42b39e:	2800      	cmp	r0, #0
  42b3a0:	d192      	bne.n	42b2c8 <__sfvwrite_r+0xfc>
  42b3a2:	46c2      	mov	sl, r8
  42b3a4:	e771      	b.n	42b28a <__sfvwrite_r+0xbe>
  42b3a6:	465a      	mov	r2, fp
  42b3a8:	4629      	mov	r1, r5
  42b3aa:	f000 fdc1 	bl	42bf30 <memmove>
  42b3ae:	68a2      	ldr	r2, [r4, #8]
  42b3b0:	6823      	ldr	r3, [r4, #0]
  42b3b2:	eba2 020b 	sub.w	r2, r2, fp
  42b3b6:	445b      	add	r3, fp
  42b3b8:	60a2      	str	r2, [r4, #8]
  42b3ba:	6023      	str	r3, [r4, #0]
  42b3bc:	e7af      	b.n	42b31e <__sfvwrite_r+0x152>
  42b3be:	6820      	ldr	r0, [r4, #0]
  42b3c0:	46b8      	mov	r8, r7
  42b3c2:	46ba      	mov	sl, r7
  42b3c4:	46bb      	mov	fp, r7
  42b3c6:	e755      	b.n	42b274 <__sfvwrite_r+0xa8>
  42b3c8:	6962      	ldr	r2, [r4, #20]
  42b3ca:	6820      	ldr	r0, [r4, #0]
  42b3cc:	6921      	ldr	r1, [r4, #16]
  42b3ce:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  42b3d2:	eba0 0a01 	sub.w	sl, r0, r1
  42b3d6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  42b3da:	f10a 0001 	add.w	r0, sl, #1
  42b3de:	ea4f 0868 	mov.w	r8, r8, asr #1
  42b3e2:	4438      	add	r0, r7
  42b3e4:	4540      	cmp	r0, r8
  42b3e6:	4642      	mov	r2, r8
  42b3e8:	bf84      	itt	hi
  42b3ea:	4680      	movhi	r8, r0
  42b3ec:	4642      	movhi	r2, r8
  42b3ee:	055b      	lsls	r3, r3, #21
  42b3f0:	d544      	bpl.n	42b47c <__sfvwrite_r+0x2b0>
  42b3f2:	4611      	mov	r1, r2
  42b3f4:	9800      	ldr	r0, [sp, #0]
  42b3f6:	f000 fa81 	bl	42b8fc <_malloc_r>
  42b3fa:	4683      	mov	fp, r0
  42b3fc:	2800      	cmp	r0, #0
  42b3fe:	d055      	beq.n	42b4ac <__sfvwrite_r+0x2e0>
  42b400:	4652      	mov	r2, sl
  42b402:	6921      	ldr	r1, [r4, #16]
  42b404:	f7fb fb5c 	bl	426ac0 <memcpy>
  42b408:	89a3      	ldrh	r3, [r4, #12]
  42b40a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  42b40e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  42b412:	81a3      	strh	r3, [r4, #12]
  42b414:	eb0b 000a 	add.w	r0, fp, sl
  42b418:	eba8 030a 	sub.w	r3, r8, sl
  42b41c:	f8c4 b010 	str.w	fp, [r4, #16]
  42b420:	f8c4 8014 	str.w	r8, [r4, #20]
  42b424:	6020      	str	r0, [r4, #0]
  42b426:	60a3      	str	r3, [r4, #8]
  42b428:	46b8      	mov	r8, r7
  42b42a:	46ba      	mov	sl, r7
  42b42c:	46bb      	mov	fp, r7
  42b42e:	e721      	b.n	42b274 <__sfvwrite_r+0xa8>
  42b430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  42b434:	42b9      	cmp	r1, r7
  42b436:	bf28      	it	cs
  42b438:	4639      	movcs	r1, r7
  42b43a:	464a      	mov	r2, r9
  42b43c:	fb91 f1f3 	sdiv	r1, r1, r3
  42b440:	9800      	ldr	r0, [sp, #0]
  42b442:	6a66      	ldr	r6, [r4, #36]	; 0x24
  42b444:	fb03 f301 	mul.w	r3, r3, r1
  42b448:	69e1      	ldr	r1, [r4, #28]
  42b44a:	47b0      	blx	r6
  42b44c:	f1b0 0a00 	subs.w	sl, r0, #0
  42b450:	f73f af1b 	bgt.w	42b28a <__sfvwrite_r+0xbe>
  42b454:	e738      	b.n	42b2c8 <__sfvwrite_r+0xfc>
  42b456:	461a      	mov	r2, r3
  42b458:	4629      	mov	r1, r5
  42b45a:	9301      	str	r3, [sp, #4]
  42b45c:	f000 fd68 	bl	42bf30 <memmove>
  42b460:	6822      	ldr	r2, [r4, #0]
  42b462:	9b01      	ldr	r3, [sp, #4]
  42b464:	9800      	ldr	r0, [sp, #0]
  42b466:	441a      	add	r2, r3
  42b468:	6022      	str	r2, [r4, #0]
  42b46a:	4621      	mov	r1, r4
  42b46c:	f7ff fc4a 	bl	42ad04 <_fflush_r>
  42b470:	9b01      	ldr	r3, [sp, #4]
  42b472:	2800      	cmp	r0, #0
  42b474:	f47f af28 	bne.w	42b2c8 <__sfvwrite_r+0xfc>
  42b478:	461f      	mov	r7, r3
  42b47a:	e750      	b.n	42b31e <__sfvwrite_r+0x152>
  42b47c:	9800      	ldr	r0, [sp, #0]
  42b47e:	f001 f8c1 	bl	42c604 <_realloc_r>
  42b482:	4683      	mov	fp, r0
  42b484:	2800      	cmp	r0, #0
  42b486:	d1c5      	bne.n	42b414 <__sfvwrite_r+0x248>
  42b488:	9d00      	ldr	r5, [sp, #0]
  42b48a:	6921      	ldr	r1, [r4, #16]
  42b48c:	4628      	mov	r0, r5
  42b48e:	f7ff fdb7 	bl	42b000 <_free_r>
  42b492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42b496:	220c      	movs	r2, #12
  42b498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  42b49c:	602a      	str	r2, [r5, #0]
  42b49e:	e715      	b.n	42b2cc <__sfvwrite_r+0x100>
  42b4a0:	f106 0901 	add.w	r9, r6, #1
  42b4a4:	e722      	b.n	42b2ec <__sfvwrite_r+0x120>
  42b4a6:	f04f 30ff 	mov.w	r0, #4294967295
  42b4aa:	e6bf      	b.n	42b22c <__sfvwrite_r+0x60>
  42b4ac:	9a00      	ldr	r2, [sp, #0]
  42b4ae:	230c      	movs	r3, #12
  42b4b0:	6013      	str	r3, [r2, #0]
  42b4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42b4b6:	e709      	b.n	42b2cc <__sfvwrite_r+0x100>
  42b4b8:	7ffffc00 	.word	0x7ffffc00

0042b4bc <_fwalk_reent>:
  42b4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  42b4c0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  42b4c4:	d01f      	beq.n	42b506 <_fwalk_reent+0x4a>
  42b4c6:	4688      	mov	r8, r1
  42b4c8:	4606      	mov	r6, r0
  42b4ca:	f04f 0900 	mov.w	r9, #0
  42b4ce:	687d      	ldr	r5, [r7, #4]
  42b4d0:	68bc      	ldr	r4, [r7, #8]
  42b4d2:	3d01      	subs	r5, #1
  42b4d4:	d411      	bmi.n	42b4fa <_fwalk_reent+0x3e>
  42b4d6:	89a3      	ldrh	r3, [r4, #12]
  42b4d8:	2b01      	cmp	r3, #1
  42b4da:	f105 35ff 	add.w	r5, r5, #4294967295
  42b4de:	d908      	bls.n	42b4f2 <_fwalk_reent+0x36>
  42b4e0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  42b4e4:	3301      	adds	r3, #1
  42b4e6:	4621      	mov	r1, r4
  42b4e8:	4630      	mov	r0, r6
  42b4ea:	d002      	beq.n	42b4f2 <_fwalk_reent+0x36>
  42b4ec:	47c0      	blx	r8
  42b4ee:	ea49 0900 	orr.w	r9, r9, r0
  42b4f2:	1c6b      	adds	r3, r5, #1
  42b4f4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  42b4f8:	d1ed      	bne.n	42b4d6 <_fwalk_reent+0x1a>
  42b4fa:	683f      	ldr	r7, [r7, #0]
  42b4fc:	2f00      	cmp	r7, #0
  42b4fe:	d1e6      	bne.n	42b4ce <_fwalk_reent+0x12>
  42b500:	4648      	mov	r0, r9
  42b502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42b506:	46b9      	mov	r9, r7
  42b508:	4648      	mov	r0, r9
  42b50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42b50e:	bf00      	nop

0042b510 <_findenv_r>:
  42b510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  42b514:	4f1c      	ldr	r7, [pc, #112]	; (42b588 <_findenv_r+0x78>)
  42b516:	460e      	mov	r6, r1
  42b518:	4691      	mov	r9, r2
  42b51a:	4680      	mov	r8, r0
  42b51c:	f002 fd6e 	bl	42dffc <__env_lock>
  42b520:	683d      	ldr	r5, [r7, #0]
  42b522:	b1f5      	cbz	r5, 42b562 <_findenv_r+0x52>
  42b524:	7834      	ldrb	r4, [r6, #0]
  42b526:	b15c      	cbz	r4, 42b540 <_findenv_r+0x30>
  42b528:	2c3d      	cmp	r4, #61	; 0x3d
  42b52a:	bf18      	it	ne
  42b52c:	4634      	movne	r4, r6
  42b52e:	d102      	bne.n	42b536 <_findenv_r+0x26>
  42b530:	e017      	b.n	42b562 <_findenv_r+0x52>
  42b532:	2b3d      	cmp	r3, #61	; 0x3d
  42b534:	d015      	beq.n	42b562 <_findenv_r+0x52>
  42b536:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  42b53a:	2b00      	cmp	r3, #0
  42b53c:	d1f9      	bne.n	42b532 <_findenv_r+0x22>
  42b53e:	1ba4      	subs	r4, r4, r6
  42b540:	6828      	ldr	r0, [r5, #0]
  42b542:	b170      	cbz	r0, 42b562 <_findenv_r+0x52>
  42b544:	4622      	mov	r2, r4
  42b546:	4631      	mov	r1, r6
  42b548:	f001 fcc8 	bl	42cedc <strncmp>
  42b54c:	b928      	cbnz	r0, 42b55a <_findenv_r+0x4a>
  42b54e:	6828      	ldr	r0, [r5, #0]
  42b550:	5d03      	ldrb	r3, [r0, r4]
  42b552:	2b3d      	cmp	r3, #61	; 0x3d
  42b554:	eb00 0a04 	add.w	sl, r0, r4
  42b558:	d009      	beq.n	42b56e <_findenv_r+0x5e>
  42b55a:	f855 0f04 	ldr.w	r0, [r5, #4]!
  42b55e:	2800      	cmp	r0, #0
  42b560:	d1f0      	bne.n	42b544 <_findenv_r+0x34>
  42b562:	4640      	mov	r0, r8
  42b564:	f002 fd50 	bl	42e008 <__env_unlock>
  42b568:	2000      	movs	r0, #0
  42b56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42b56e:	683b      	ldr	r3, [r7, #0]
  42b570:	1aed      	subs	r5, r5, r3
  42b572:	10ad      	asrs	r5, r5, #2
  42b574:	4640      	mov	r0, r8
  42b576:	f8c9 5000 	str.w	r5, [r9]
  42b57a:	f002 fd45 	bl	42e008 <__env_unlock>
  42b57e:	f10a 0001 	add.w	r0, sl, #1
  42b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42b586:	bf00      	nop
  42b588:	20000ac0 	.word	0x20000ac0

0042b58c <_getenv_r>:
  42b58c:	b500      	push	{lr}
  42b58e:	b083      	sub	sp, #12
  42b590:	aa01      	add	r2, sp, #4
  42b592:	f7ff ffbd 	bl	42b510 <_findenv_r>
  42b596:	b003      	add	sp, #12
  42b598:	f85d fb04 	ldr.w	pc, [sp], #4

0042b59c <__gettzinfo>:
  42b59c:	4800      	ldr	r0, [pc, #0]	; (42b5a0 <__gettzinfo+0x4>)
  42b59e:	4770      	bx	lr
  42b5a0:	20000504 	.word	0x20000504

0042b5a4 <gmtime_r>:
  42b5a4:	6800      	ldr	r0, [r0, #0]
  42b5a6:	4b65      	ldr	r3, [pc, #404]	; (42b73c <gmtime_r+0x198>)
  42b5a8:	fb83 2300 	smull	r2, r3, r3, r0
  42b5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  42b5b0:	4403      	add	r3, r0
  42b5b2:	4d63      	ldr	r5, [pc, #396]	; (42b740 <gmtime_r+0x19c>)
  42b5b4:	17c2      	asrs	r2, r0, #31
  42b5b6:	ebc2 4323 	rsb	r3, r2, r3, asr #16
  42b5ba:	fb05 0513 	mls	r5, r5, r3, r0
  42b5be:	2d00      	cmp	r5, #0
  42b5c0:	f2c0 80b3 	blt.w	42b72a <gmtime_r+0x186>
  42b5c4:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
  42b5c8:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
  42b5cc:	4e5d      	ldr	r6, [pc, #372]	; (42b744 <gmtime_r+0x1a0>)
  42b5ce:	485e      	ldr	r0, [pc, #376]	; (42b748 <gmtime_r+0x1a4>)
  42b5d0:	4a5e      	ldr	r2, [pc, #376]	; (42b74c <gmtime_r+0x1a8>)
  42b5d2:	4c5f      	ldr	r4, [pc, #380]	; (42b750 <gmtime_r+0x1ac>)
  42b5d4:	f8df c18c 	ldr.w	ip, [pc, #396]	; 42b764 <gmtime_r+0x1c0>
  42b5d8:	f8df e18c 	ldr.w	lr, [pc, #396]	; 42b768 <gmtime_r+0x1c4>
  42b5dc:	fb86 7603 	smull	r7, r6, r6, r3
  42b5e0:	17df      	asrs	r7, r3, #31
  42b5e2:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
  42b5e6:	fb00 3006 	mla	r0, r0, r6, r3
  42b5ea:	0887      	lsrs	r7, r0, #2
  42b5ec:	fba2 8207 	umull	r8, r2, r2, r7
  42b5f0:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
  42b5f4:	fba4 8707 	umull	r8, r7, r4, r7
  42b5f8:	ea4f 1810 	mov.w	r8, r0, lsr #4
  42b5fc:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
  42b600:	fbac c708 	umull	ip, r7, ip, r8
  42b604:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
  42b608:	f8df c160 	ldr.w	ip, [pc, #352]	; 42b76c <gmtime_r+0x1c8>
  42b60c:	4f51      	ldr	r7, [pc, #324]	; (42b754 <gmtime_r+0x1b0>)
  42b60e:	fbae 8e02 	umull	r8, lr, lr, r2
  42b612:	fbac 9c02 	umull	r9, ip, ip, r2
  42b616:	eba2 080e 	sub.w	r8, r2, lr
  42b61a:	0892      	lsrs	r2, r2, #2
  42b61c:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
  42b620:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
  42b624:	fba4 4202 	umull	r4, r2, r4, r2
  42b628:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
  42b62c:	ea4f 241e 	mov.w	r4, lr, lsr #8
  42b630:	f240 106d 	movw	r0, #365	; 0x16d
  42b634:	fb00 2214 	mls	r2, r0, r4, r2
  42b638:	f8df 8134 	ldr.w	r8, [pc, #308]	; 42b770 <gmtime_r+0x1cc>
  42b63c:	fb87 0e05 	smull	r0, lr, r7, r5
  42b640:	eb02 0082 	add.w	r0, r2, r2, lsl #2
  42b644:	ea4f 7ce5 	mov.w	ip, r5, asr #31
  42b648:	44ae      	add	lr, r5
  42b64a:	3002      	adds	r0, #2
  42b64c:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
  42b650:	4f41      	ldr	r7, [pc, #260]	; (42b758 <gmtime_r+0x1b4>)
  42b652:	f8c1 e008 	str.w	lr, [r1, #8]
  42b656:	f103 0c03 	add.w	ip, r3, #3
  42b65a:	fba8 3000 	umull	r3, r0, r8, r0
  42b65e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
  42b662:	fb03 551e 	mls	r5, r3, lr, r5
  42b666:	4b3d      	ldr	r3, [pc, #244]	; (42b75c <gmtime_r+0x1b8>)
  42b668:	f8df 8108 	ldr.w	r8, [pc, #264]	; 42b774 <gmtime_r+0x1d0>
  42b66c:	fb87 e705 	smull	lr, r7, r7, r5
  42b670:	fb83 390c 	smull	r3, r9, r3, ip
  42b674:	197b      	adds	r3, r7, r5
  42b676:	f44f 77c8 	mov.w	r7, #400	; 0x190
  42b67a:	fb07 4606 	mla	r6, r7, r6, r4
  42b67e:	17ef      	asrs	r7, r5, #31
  42b680:	44e1      	add	r9, ip
  42b682:	ebc7 1363 	rsb	r3, r7, r3, asr #5
  42b686:	ea4f 77ec 	mov.w	r7, ip, asr #31
  42b68a:	09c0      	lsrs	r0, r0, #7
  42b68c:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
  42b690:	2809      	cmp	r0, #9
  42b692:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
  42b696:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
  42b69a:	ebac 0707 	sub.w	r7, ip, r7
  42b69e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
  42b6a2:	bf8c      	ite	hi
  42b6a4:	f06f 0c09 	mvnhi.w	ip, #9
  42b6a8:	f04f 0c02 	movls.w	ip, #2
  42b6ac:	4460      	add	r0, ip
  42b6ae:	f10e 0e02 	add.w	lr, lr, #2
  42b6b2:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
  42b6b6:	fba8 8e0e 	umull	r8, lr, r8, lr
  42b6ba:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
  42b6be:	f102 0801 	add.w	r8, r2, #1
  42b6c2:	2801      	cmp	r0, #1
  42b6c4:	bf98      	it	ls
  42b6c6:	3601      	addls	r6, #1
  42b6c8:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
  42b6cc:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
  42b6d0:	604b      	str	r3, [r1, #4]
  42b6d2:	600d      	str	r5, [r1, #0]
  42b6d4:	618f      	str	r7, [r1, #24]
  42b6d6:	d225      	bcs.n	42b724 <gmtime_r+0x180>
  42b6d8:	07a3      	lsls	r3, r4, #30
  42b6da:	d018      	beq.n	42b70e <gmtime_r+0x16a>
  42b6dc:	4b20      	ldr	r3, [pc, #128]	; (42b760 <gmtime_r+0x1bc>)
  42b6de:	fba3 5304 	umull	r5, r3, r3, r4
  42b6e2:	09db      	lsrs	r3, r3, #7
  42b6e4:	f44f 75c8 	mov.w	r5, #400	; 0x190
  42b6e8:	fb05 4413 	mls	r4, r5, r3, r4
  42b6ec:	fab4 f484 	clz	r4, r4
  42b6f0:	0964      	lsrs	r4, r4, #5
  42b6f2:	323b      	adds	r2, #59	; 0x3b
  42b6f4:	4422      	add	r2, r4
  42b6f6:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
  42b6fa:	2300      	movs	r3, #0
  42b6fc:	6108      	str	r0, [r1, #16]
  42b6fe:	614e      	str	r6, [r1, #20]
  42b700:	61ca      	str	r2, [r1, #28]
  42b702:	f8c1 e00c 	str.w	lr, [r1, #12]
  42b706:	620b      	str	r3, [r1, #32]
  42b708:	4608      	mov	r0, r1
  42b70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  42b70e:	4b14      	ldr	r3, [pc, #80]	; (42b760 <gmtime_r+0x1bc>)
  42b710:	fba3 5304 	umull	r5, r3, r3, r4
  42b714:	095b      	lsrs	r3, r3, #5
  42b716:	2564      	movs	r5, #100	; 0x64
  42b718:	fb05 4313 	mls	r3, r5, r3, r4
  42b71c:	2b00      	cmp	r3, #0
  42b71e:	d0dd      	beq.n	42b6dc <gmtime_r+0x138>
  42b720:	2401      	movs	r4, #1
  42b722:	e7e6      	b.n	42b6f2 <gmtime_r+0x14e>
  42b724:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
  42b728:	e7e5      	b.n	42b6f6 <gmtime_r+0x152>
  42b72a:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
  42b72e:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
  42b732:	f505 75c0 	add.w	r5, r5, #384	; 0x180
  42b736:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
  42b73a:	e747      	b.n	42b5cc <gmtime_r+0x28>
  42b73c:	c22e4507 	.word	0xc22e4507
  42b740:	00015180 	.word	0x00015180
  42b744:	396b06bd 	.word	0x396b06bd
  42b748:	fffdc54f 	.word	0xfffdc54f
  42b74c:	396b207f 	.word	0x396b207f
  42b750:	59c67cd9 	.word	0x59c67cd9
  42b754:	91a2b3c5 	.word	0x91a2b3c5
  42b758:	88888889 	.word	0x88888889
  42b75c:	92492493 	.word	0x92492493
  42b760:	51eb851f 	.word	0x51eb851f
  42b764:	0072d641 	.word	0x0072d641
  42b768:	6719f361 	.word	0x6719f361
  42b76c:	e5d32b1f 	.word	0xe5d32b1f
  42b770:	d62b80d7 	.word	0xd62b80d7
  42b774:	cccccccd 	.word	0xcccccccd

0042b778 <__locale_mb_cur_max>:
  42b778:	4b04      	ldr	r3, [pc, #16]	; (42b78c <__locale_mb_cur_max+0x14>)
  42b77a:	4a05      	ldr	r2, [pc, #20]	; (42b790 <__locale_mb_cur_max+0x18>)
  42b77c:	681b      	ldr	r3, [r3, #0]
  42b77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  42b780:	2b00      	cmp	r3, #0
  42b782:	bf08      	it	eq
  42b784:	4613      	moveq	r3, r2
  42b786:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  42b78a:	4770      	bx	lr
  42b78c:	200000c8 	.word	0x200000c8
  42b790:	20000544 	.word	0x20000544

0042b794 <__locale_ctype_ptr_l>:
  42b794:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  42b798:	4770      	bx	lr
  42b79a:	bf00      	nop

0042b79c <__locale_ctype_ptr>:
  42b79c:	4b04      	ldr	r3, [pc, #16]	; (42b7b0 <__locale_ctype_ptr+0x14>)
  42b79e:	4a05      	ldr	r2, [pc, #20]	; (42b7b4 <__locale_ctype_ptr+0x18>)
  42b7a0:	681b      	ldr	r3, [r3, #0]
  42b7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  42b7a4:	2b00      	cmp	r3, #0
  42b7a6:	bf08      	it	eq
  42b7a8:	4613      	moveq	r3, r2
  42b7aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
  42b7ae:	4770      	bx	lr
  42b7b0:	200000c8 	.word	0x200000c8
  42b7b4:	20000544 	.word	0x20000544

0042b7b8 <_localeconv_r>:
  42b7b8:	4a04      	ldr	r2, [pc, #16]	; (42b7cc <_localeconv_r+0x14>)
  42b7ba:	4b05      	ldr	r3, [pc, #20]	; (42b7d0 <_localeconv_r+0x18>)
  42b7bc:	6812      	ldr	r2, [r2, #0]
  42b7be:	6b50      	ldr	r0, [r2, #52]	; 0x34
  42b7c0:	2800      	cmp	r0, #0
  42b7c2:	bf08      	it	eq
  42b7c4:	4618      	moveq	r0, r3
  42b7c6:	30f0      	adds	r0, #240	; 0xf0
  42b7c8:	4770      	bx	lr
  42b7ca:	bf00      	nop
  42b7cc:	200000c8 	.word	0x200000c8
  42b7d0:	20000544 	.word	0x20000544

0042b7d4 <__retarget_lock_init_recursive>:
  42b7d4:	4770      	bx	lr
  42b7d6:	bf00      	nop

0042b7d8 <__retarget_lock_close_recursive>:
  42b7d8:	4770      	bx	lr
  42b7da:	bf00      	nop

0042b7dc <__retarget_lock_acquire>:
  42b7dc:	4770      	bx	lr
  42b7de:	bf00      	nop

0042b7e0 <__retarget_lock_acquire_recursive>:
  42b7e0:	4770      	bx	lr
  42b7e2:	bf00      	nop

0042b7e4 <__retarget_lock_release>:
  42b7e4:	4770      	bx	lr
  42b7e6:	bf00      	nop

0042b7e8 <__retarget_lock_release_recursive>:
  42b7e8:	4770      	bx	lr
  42b7ea:	bf00      	nop

0042b7ec <__swhatbuf_r>:
  42b7ec:	b570      	push	{r4, r5, r6, lr}
  42b7ee:	460c      	mov	r4, r1
  42b7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42b7f4:	2900      	cmp	r1, #0
  42b7f6:	b090      	sub	sp, #64	; 0x40
  42b7f8:	4615      	mov	r5, r2
  42b7fa:	461e      	mov	r6, r3
  42b7fc:	db14      	blt.n	42b828 <__swhatbuf_r+0x3c>
  42b7fe:	aa01      	add	r2, sp, #4
  42b800:	f002 fc6a 	bl	42e0d8 <_fstat_r>
  42b804:	2800      	cmp	r0, #0
  42b806:	db0f      	blt.n	42b828 <__swhatbuf_r+0x3c>
  42b808:	9a02      	ldr	r2, [sp, #8]
  42b80a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  42b80e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  42b812:	fab2 f282 	clz	r2, r2
  42b816:	0952      	lsrs	r2, r2, #5
  42b818:	f44f 6380 	mov.w	r3, #1024	; 0x400
  42b81c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  42b820:	6032      	str	r2, [r6, #0]
  42b822:	602b      	str	r3, [r5, #0]
  42b824:	b010      	add	sp, #64	; 0x40
  42b826:	bd70      	pop	{r4, r5, r6, pc}
  42b828:	89a2      	ldrh	r2, [r4, #12]
  42b82a:	2300      	movs	r3, #0
  42b82c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  42b830:	6033      	str	r3, [r6, #0]
  42b832:	d004      	beq.n	42b83e <__swhatbuf_r+0x52>
  42b834:	2240      	movs	r2, #64	; 0x40
  42b836:	4618      	mov	r0, r3
  42b838:	602a      	str	r2, [r5, #0]
  42b83a:	b010      	add	sp, #64	; 0x40
  42b83c:	bd70      	pop	{r4, r5, r6, pc}
  42b83e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  42b842:	602b      	str	r3, [r5, #0]
  42b844:	b010      	add	sp, #64	; 0x40
  42b846:	bd70      	pop	{r4, r5, r6, pc}

0042b848 <__smakebuf_r>:
  42b848:	898a      	ldrh	r2, [r1, #12]
  42b84a:	0792      	lsls	r2, r2, #30
  42b84c:	460b      	mov	r3, r1
  42b84e:	d506      	bpl.n	42b85e <__smakebuf_r+0x16>
  42b850:	f101 0243 	add.w	r2, r1, #67	; 0x43
  42b854:	2101      	movs	r1, #1
  42b856:	601a      	str	r2, [r3, #0]
  42b858:	611a      	str	r2, [r3, #16]
  42b85a:	6159      	str	r1, [r3, #20]
  42b85c:	4770      	bx	lr
  42b85e:	b5f0      	push	{r4, r5, r6, r7, lr}
  42b860:	b083      	sub	sp, #12
  42b862:	ab01      	add	r3, sp, #4
  42b864:	466a      	mov	r2, sp
  42b866:	460c      	mov	r4, r1
  42b868:	4606      	mov	r6, r0
  42b86a:	f7ff ffbf 	bl	42b7ec <__swhatbuf_r>
  42b86e:	9900      	ldr	r1, [sp, #0]
  42b870:	4605      	mov	r5, r0
  42b872:	4630      	mov	r0, r6
  42b874:	f000 f842 	bl	42b8fc <_malloc_r>
  42b878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42b87c:	b1d8      	cbz	r0, 42b8b6 <__smakebuf_r+0x6e>
  42b87e:	9a01      	ldr	r2, [sp, #4]
  42b880:	4f15      	ldr	r7, [pc, #84]	; (42b8d8 <__smakebuf_r+0x90>)
  42b882:	9900      	ldr	r1, [sp, #0]
  42b884:	63f7      	str	r7, [r6, #60]	; 0x3c
  42b886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  42b88a:	81a3      	strh	r3, [r4, #12]
  42b88c:	6020      	str	r0, [r4, #0]
  42b88e:	6120      	str	r0, [r4, #16]
  42b890:	6161      	str	r1, [r4, #20]
  42b892:	b91a      	cbnz	r2, 42b89c <__smakebuf_r+0x54>
  42b894:	432b      	orrs	r3, r5
  42b896:	81a3      	strh	r3, [r4, #12]
  42b898:	b003      	add	sp, #12
  42b89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42b89c:	4630      	mov	r0, r6
  42b89e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  42b8a2:	f002 fc2d 	bl	42e100 <_isatty_r>
  42b8a6:	b1a0      	cbz	r0, 42b8d2 <__smakebuf_r+0x8a>
  42b8a8:	89a3      	ldrh	r3, [r4, #12]
  42b8aa:	f023 0303 	bic.w	r3, r3, #3
  42b8ae:	f043 0301 	orr.w	r3, r3, #1
  42b8b2:	b21b      	sxth	r3, r3
  42b8b4:	e7ee      	b.n	42b894 <__smakebuf_r+0x4c>
  42b8b6:	059a      	lsls	r2, r3, #22
  42b8b8:	d4ee      	bmi.n	42b898 <__smakebuf_r+0x50>
  42b8ba:	f023 0303 	bic.w	r3, r3, #3
  42b8be:	f104 0243 	add.w	r2, r4, #67	; 0x43
  42b8c2:	f043 0302 	orr.w	r3, r3, #2
  42b8c6:	2101      	movs	r1, #1
  42b8c8:	81a3      	strh	r3, [r4, #12]
  42b8ca:	6022      	str	r2, [r4, #0]
  42b8cc:	6122      	str	r2, [r4, #16]
  42b8ce:	6161      	str	r1, [r4, #20]
  42b8d0:	e7e2      	b.n	42b898 <__smakebuf_r+0x50>
  42b8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42b8d6:	e7dd      	b.n	42b894 <__smakebuf_r+0x4c>
  42b8d8:	0042ad59 	.word	0x0042ad59

0042b8dc <malloc>:
  42b8dc:	4b02      	ldr	r3, [pc, #8]	; (42b8e8 <malloc+0xc>)
  42b8de:	4601      	mov	r1, r0
  42b8e0:	6818      	ldr	r0, [r3, #0]
  42b8e2:	f000 b80b 	b.w	42b8fc <_malloc_r>
  42b8e6:	bf00      	nop
  42b8e8:	200000c8 	.word	0x200000c8

0042b8ec <free>:
  42b8ec:	4b02      	ldr	r3, [pc, #8]	; (42b8f8 <free+0xc>)
  42b8ee:	4601      	mov	r1, r0
  42b8f0:	6818      	ldr	r0, [r3, #0]
  42b8f2:	f7ff bb85 	b.w	42b000 <_free_r>
  42b8f6:	bf00      	nop
  42b8f8:	200000c8 	.word	0x200000c8

0042b8fc <_malloc_r>:
  42b8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42b900:	f101 060b 	add.w	r6, r1, #11
  42b904:	2e16      	cmp	r6, #22
  42b906:	b083      	sub	sp, #12
  42b908:	4605      	mov	r5, r0
  42b90a:	f240 809e 	bls.w	42ba4a <_malloc_r+0x14e>
  42b90e:	f036 0607 	bics.w	r6, r6, #7
  42b912:	f100 80bd 	bmi.w	42ba90 <_malloc_r+0x194>
  42b916:	42b1      	cmp	r1, r6
  42b918:	f200 80ba 	bhi.w	42ba90 <_malloc_r+0x194>
  42b91c:	f000 fb6c 	bl	42bff8 <__malloc_lock>
  42b920:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  42b924:	f0c0 8293 	bcc.w	42be4e <_malloc_r+0x552>
  42b928:	0a73      	lsrs	r3, r6, #9
  42b92a:	f000 80b8 	beq.w	42ba9e <_malloc_r+0x1a2>
  42b92e:	2b04      	cmp	r3, #4
  42b930:	f200 8179 	bhi.w	42bc26 <_malloc_r+0x32a>
  42b934:	09b3      	lsrs	r3, r6, #6
  42b936:	f103 0039 	add.w	r0, r3, #57	; 0x39
  42b93a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  42b93e:	00c3      	lsls	r3, r0, #3
  42b940:	4fbf      	ldr	r7, [pc, #764]	; (42bc40 <_malloc_r+0x344>)
  42b942:	443b      	add	r3, r7
  42b944:	f1a3 0108 	sub.w	r1, r3, #8
  42b948:	685c      	ldr	r4, [r3, #4]
  42b94a:	42a1      	cmp	r1, r4
  42b94c:	d106      	bne.n	42b95c <_malloc_r+0x60>
  42b94e:	e00c      	b.n	42b96a <_malloc_r+0x6e>
  42b950:	2a00      	cmp	r2, #0
  42b952:	f280 80aa 	bge.w	42baaa <_malloc_r+0x1ae>
  42b956:	68e4      	ldr	r4, [r4, #12]
  42b958:	42a1      	cmp	r1, r4
  42b95a:	d006      	beq.n	42b96a <_malloc_r+0x6e>
  42b95c:	6863      	ldr	r3, [r4, #4]
  42b95e:	f023 0303 	bic.w	r3, r3, #3
  42b962:	1b9a      	subs	r2, r3, r6
  42b964:	2a0f      	cmp	r2, #15
  42b966:	ddf3      	ble.n	42b950 <_malloc_r+0x54>
  42b968:	4670      	mov	r0, lr
  42b96a:	693c      	ldr	r4, [r7, #16]
  42b96c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 42bc54 <_malloc_r+0x358>
  42b970:	4574      	cmp	r4, lr
  42b972:	f000 81ab 	beq.w	42bccc <_malloc_r+0x3d0>
  42b976:	6863      	ldr	r3, [r4, #4]
  42b978:	f023 0303 	bic.w	r3, r3, #3
  42b97c:	1b9a      	subs	r2, r3, r6
  42b97e:	2a0f      	cmp	r2, #15
  42b980:	f300 8190 	bgt.w	42bca4 <_malloc_r+0x3a8>
  42b984:	2a00      	cmp	r2, #0
  42b986:	f8c7 e014 	str.w	lr, [r7, #20]
  42b98a:	f8c7 e010 	str.w	lr, [r7, #16]
  42b98e:	f280 809d 	bge.w	42bacc <_malloc_r+0x1d0>
  42b992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  42b996:	f080 8161 	bcs.w	42bc5c <_malloc_r+0x360>
  42b99a:	08db      	lsrs	r3, r3, #3
  42b99c:	f103 0c01 	add.w	ip, r3, #1
  42b9a0:	1099      	asrs	r1, r3, #2
  42b9a2:	687a      	ldr	r2, [r7, #4]
  42b9a4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  42b9a8:	f8c4 8008 	str.w	r8, [r4, #8]
  42b9ac:	2301      	movs	r3, #1
  42b9ae:	408b      	lsls	r3, r1
  42b9b0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  42b9b4:	4313      	orrs	r3, r2
  42b9b6:	3908      	subs	r1, #8
  42b9b8:	60e1      	str	r1, [r4, #12]
  42b9ba:	607b      	str	r3, [r7, #4]
  42b9bc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  42b9c0:	f8c8 400c 	str.w	r4, [r8, #12]
  42b9c4:	1082      	asrs	r2, r0, #2
  42b9c6:	2401      	movs	r4, #1
  42b9c8:	4094      	lsls	r4, r2
  42b9ca:	429c      	cmp	r4, r3
  42b9cc:	f200 808b 	bhi.w	42bae6 <_malloc_r+0x1ea>
  42b9d0:	421c      	tst	r4, r3
  42b9d2:	d106      	bne.n	42b9e2 <_malloc_r+0xe6>
  42b9d4:	f020 0003 	bic.w	r0, r0, #3
  42b9d8:	0064      	lsls	r4, r4, #1
  42b9da:	421c      	tst	r4, r3
  42b9dc:	f100 0004 	add.w	r0, r0, #4
  42b9e0:	d0fa      	beq.n	42b9d8 <_malloc_r+0xdc>
  42b9e2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  42b9e6:	46cc      	mov	ip, r9
  42b9e8:	4680      	mov	r8, r0
  42b9ea:	f8dc 300c 	ldr.w	r3, [ip, #12]
  42b9ee:	459c      	cmp	ip, r3
  42b9f0:	d107      	bne.n	42ba02 <_malloc_r+0x106>
  42b9f2:	e16d      	b.n	42bcd0 <_malloc_r+0x3d4>
  42b9f4:	2a00      	cmp	r2, #0
  42b9f6:	f280 817b 	bge.w	42bcf0 <_malloc_r+0x3f4>
  42b9fa:	68db      	ldr	r3, [r3, #12]
  42b9fc:	459c      	cmp	ip, r3
  42b9fe:	f000 8167 	beq.w	42bcd0 <_malloc_r+0x3d4>
  42ba02:	6859      	ldr	r1, [r3, #4]
  42ba04:	f021 0103 	bic.w	r1, r1, #3
  42ba08:	1b8a      	subs	r2, r1, r6
  42ba0a:	2a0f      	cmp	r2, #15
  42ba0c:	ddf2      	ble.n	42b9f4 <_malloc_r+0xf8>
  42ba0e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  42ba12:	f8d3 8008 	ldr.w	r8, [r3, #8]
  42ba16:	9300      	str	r3, [sp, #0]
  42ba18:	199c      	adds	r4, r3, r6
  42ba1a:	4628      	mov	r0, r5
  42ba1c:	f046 0601 	orr.w	r6, r6, #1
  42ba20:	f042 0501 	orr.w	r5, r2, #1
  42ba24:	605e      	str	r6, [r3, #4]
  42ba26:	f8c8 c00c 	str.w	ip, [r8, #12]
  42ba2a:	f8cc 8008 	str.w	r8, [ip, #8]
  42ba2e:	617c      	str	r4, [r7, #20]
  42ba30:	613c      	str	r4, [r7, #16]
  42ba32:	f8c4 e00c 	str.w	lr, [r4, #12]
  42ba36:	f8c4 e008 	str.w	lr, [r4, #8]
  42ba3a:	6065      	str	r5, [r4, #4]
  42ba3c:	505a      	str	r2, [r3, r1]
  42ba3e:	f000 fae1 	bl	42c004 <__malloc_unlock>
  42ba42:	9b00      	ldr	r3, [sp, #0]
  42ba44:	f103 0408 	add.w	r4, r3, #8
  42ba48:	e01e      	b.n	42ba88 <_malloc_r+0x18c>
  42ba4a:	2910      	cmp	r1, #16
  42ba4c:	d820      	bhi.n	42ba90 <_malloc_r+0x194>
  42ba4e:	f000 fad3 	bl	42bff8 <__malloc_lock>
  42ba52:	2610      	movs	r6, #16
  42ba54:	2318      	movs	r3, #24
  42ba56:	2002      	movs	r0, #2
  42ba58:	4f79      	ldr	r7, [pc, #484]	; (42bc40 <_malloc_r+0x344>)
  42ba5a:	443b      	add	r3, r7
  42ba5c:	f1a3 0208 	sub.w	r2, r3, #8
  42ba60:	685c      	ldr	r4, [r3, #4]
  42ba62:	4294      	cmp	r4, r2
  42ba64:	f000 813d 	beq.w	42bce2 <_malloc_r+0x3e6>
  42ba68:	6863      	ldr	r3, [r4, #4]
  42ba6a:	68e1      	ldr	r1, [r4, #12]
  42ba6c:	68a6      	ldr	r6, [r4, #8]
  42ba6e:	f023 0303 	bic.w	r3, r3, #3
  42ba72:	4423      	add	r3, r4
  42ba74:	4628      	mov	r0, r5
  42ba76:	685a      	ldr	r2, [r3, #4]
  42ba78:	60f1      	str	r1, [r6, #12]
  42ba7a:	f042 0201 	orr.w	r2, r2, #1
  42ba7e:	608e      	str	r6, [r1, #8]
  42ba80:	605a      	str	r2, [r3, #4]
  42ba82:	f000 fabf 	bl	42c004 <__malloc_unlock>
  42ba86:	3408      	adds	r4, #8
  42ba88:	4620      	mov	r0, r4
  42ba8a:	b003      	add	sp, #12
  42ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42ba90:	2400      	movs	r4, #0
  42ba92:	230c      	movs	r3, #12
  42ba94:	4620      	mov	r0, r4
  42ba96:	602b      	str	r3, [r5, #0]
  42ba98:	b003      	add	sp, #12
  42ba9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42ba9e:	2040      	movs	r0, #64	; 0x40
  42baa0:	f44f 7300 	mov.w	r3, #512	; 0x200
  42baa4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  42baa8:	e74a      	b.n	42b940 <_malloc_r+0x44>
  42baaa:	4423      	add	r3, r4
  42baac:	68e1      	ldr	r1, [r4, #12]
  42baae:	685a      	ldr	r2, [r3, #4]
  42bab0:	68a6      	ldr	r6, [r4, #8]
  42bab2:	f042 0201 	orr.w	r2, r2, #1
  42bab6:	60f1      	str	r1, [r6, #12]
  42bab8:	4628      	mov	r0, r5
  42baba:	608e      	str	r6, [r1, #8]
  42babc:	605a      	str	r2, [r3, #4]
  42babe:	f000 faa1 	bl	42c004 <__malloc_unlock>
  42bac2:	3408      	adds	r4, #8
  42bac4:	4620      	mov	r0, r4
  42bac6:	b003      	add	sp, #12
  42bac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42bacc:	4423      	add	r3, r4
  42bace:	4628      	mov	r0, r5
  42bad0:	685a      	ldr	r2, [r3, #4]
  42bad2:	f042 0201 	orr.w	r2, r2, #1
  42bad6:	605a      	str	r2, [r3, #4]
  42bad8:	f000 fa94 	bl	42c004 <__malloc_unlock>
  42badc:	3408      	adds	r4, #8
  42bade:	4620      	mov	r0, r4
  42bae0:	b003      	add	sp, #12
  42bae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42bae6:	68bc      	ldr	r4, [r7, #8]
  42bae8:	6863      	ldr	r3, [r4, #4]
  42baea:	f023 0803 	bic.w	r8, r3, #3
  42baee:	45b0      	cmp	r8, r6
  42baf0:	d304      	bcc.n	42bafc <_malloc_r+0x200>
  42baf2:	eba8 0306 	sub.w	r3, r8, r6
  42baf6:	2b0f      	cmp	r3, #15
  42baf8:	f300 8085 	bgt.w	42bc06 <_malloc_r+0x30a>
  42bafc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 42bc58 <_malloc_r+0x35c>
  42bb00:	4b50      	ldr	r3, [pc, #320]	; (42bc44 <_malloc_r+0x348>)
  42bb02:	f8d9 2000 	ldr.w	r2, [r9]
  42bb06:	681b      	ldr	r3, [r3, #0]
  42bb08:	3201      	adds	r2, #1
  42bb0a:	4433      	add	r3, r6
  42bb0c:	eb04 0a08 	add.w	sl, r4, r8
  42bb10:	f000 8155 	beq.w	42bdbe <_malloc_r+0x4c2>
  42bb14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  42bb18:	330f      	adds	r3, #15
  42bb1a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  42bb1e:	f02b 0b0f 	bic.w	fp, fp, #15
  42bb22:	4659      	mov	r1, fp
  42bb24:	4628      	mov	r0, r5
  42bb26:	f000 ff13 	bl	42c950 <_sbrk_r>
  42bb2a:	1c41      	adds	r1, r0, #1
  42bb2c:	4602      	mov	r2, r0
  42bb2e:	f000 80fc 	beq.w	42bd2a <_malloc_r+0x42e>
  42bb32:	4582      	cmp	sl, r0
  42bb34:	f200 80f7 	bhi.w	42bd26 <_malloc_r+0x42a>
  42bb38:	4b43      	ldr	r3, [pc, #268]	; (42bc48 <_malloc_r+0x34c>)
  42bb3a:	6819      	ldr	r1, [r3, #0]
  42bb3c:	4459      	add	r1, fp
  42bb3e:	6019      	str	r1, [r3, #0]
  42bb40:	f000 814d 	beq.w	42bdde <_malloc_r+0x4e2>
  42bb44:	f8d9 0000 	ldr.w	r0, [r9]
  42bb48:	3001      	adds	r0, #1
  42bb4a:	bf1b      	ittet	ne
  42bb4c:	eba2 0a0a 	subne.w	sl, r2, sl
  42bb50:	4451      	addne	r1, sl
  42bb52:	f8c9 2000 	streq.w	r2, [r9]
  42bb56:	6019      	strne	r1, [r3, #0]
  42bb58:	f012 0107 	ands.w	r1, r2, #7
  42bb5c:	f000 8115 	beq.w	42bd8a <_malloc_r+0x48e>
  42bb60:	f1c1 0008 	rsb	r0, r1, #8
  42bb64:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  42bb68:	4402      	add	r2, r0
  42bb6a:	3108      	adds	r1, #8
  42bb6c:	eb02 090b 	add.w	r9, r2, fp
  42bb70:	f3c9 090b 	ubfx	r9, r9, #0, #12
  42bb74:	eba1 0909 	sub.w	r9, r1, r9
  42bb78:	4649      	mov	r1, r9
  42bb7a:	4628      	mov	r0, r5
  42bb7c:	9301      	str	r3, [sp, #4]
  42bb7e:	9200      	str	r2, [sp, #0]
  42bb80:	f000 fee6 	bl	42c950 <_sbrk_r>
  42bb84:	1c43      	adds	r3, r0, #1
  42bb86:	e89d 000c 	ldmia.w	sp, {r2, r3}
  42bb8a:	f000 8143 	beq.w	42be14 <_malloc_r+0x518>
  42bb8e:	1a80      	subs	r0, r0, r2
  42bb90:	4448      	add	r0, r9
  42bb92:	f040 0001 	orr.w	r0, r0, #1
  42bb96:	6819      	ldr	r1, [r3, #0]
  42bb98:	60ba      	str	r2, [r7, #8]
  42bb9a:	4449      	add	r1, r9
  42bb9c:	42bc      	cmp	r4, r7
  42bb9e:	6050      	str	r0, [r2, #4]
  42bba0:	6019      	str	r1, [r3, #0]
  42bba2:	d017      	beq.n	42bbd4 <_malloc_r+0x2d8>
  42bba4:	f1b8 0f0f 	cmp.w	r8, #15
  42bba8:	f240 80fb 	bls.w	42bda2 <_malloc_r+0x4a6>
  42bbac:	6860      	ldr	r0, [r4, #4]
  42bbae:	f1a8 020c 	sub.w	r2, r8, #12
  42bbb2:	f022 0207 	bic.w	r2, r2, #7
  42bbb6:	eb04 0e02 	add.w	lr, r4, r2
  42bbba:	f000 0001 	and.w	r0, r0, #1
  42bbbe:	f04f 0c05 	mov.w	ip, #5
  42bbc2:	4310      	orrs	r0, r2
  42bbc4:	2a0f      	cmp	r2, #15
  42bbc6:	6060      	str	r0, [r4, #4]
  42bbc8:	f8ce c004 	str.w	ip, [lr, #4]
  42bbcc:	f8ce c008 	str.w	ip, [lr, #8]
  42bbd0:	f200 8117 	bhi.w	42be02 <_malloc_r+0x506>
  42bbd4:	4b1d      	ldr	r3, [pc, #116]	; (42bc4c <_malloc_r+0x350>)
  42bbd6:	68bc      	ldr	r4, [r7, #8]
  42bbd8:	681a      	ldr	r2, [r3, #0]
  42bbda:	4291      	cmp	r1, r2
  42bbdc:	bf88      	it	hi
  42bbde:	6019      	strhi	r1, [r3, #0]
  42bbe0:	4b1b      	ldr	r3, [pc, #108]	; (42bc50 <_malloc_r+0x354>)
  42bbe2:	681a      	ldr	r2, [r3, #0]
  42bbe4:	4291      	cmp	r1, r2
  42bbe6:	6862      	ldr	r2, [r4, #4]
  42bbe8:	bf88      	it	hi
  42bbea:	6019      	strhi	r1, [r3, #0]
  42bbec:	f022 0203 	bic.w	r2, r2, #3
  42bbf0:	4296      	cmp	r6, r2
  42bbf2:	eba2 0306 	sub.w	r3, r2, r6
  42bbf6:	d801      	bhi.n	42bbfc <_malloc_r+0x300>
  42bbf8:	2b0f      	cmp	r3, #15
  42bbfa:	dc04      	bgt.n	42bc06 <_malloc_r+0x30a>
  42bbfc:	4628      	mov	r0, r5
  42bbfe:	f000 fa01 	bl	42c004 <__malloc_unlock>
  42bc02:	2400      	movs	r4, #0
  42bc04:	e740      	b.n	42ba88 <_malloc_r+0x18c>
  42bc06:	19a2      	adds	r2, r4, r6
  42bc08:	f043 0301 	orr.w	r3, r3, #1
  42bc0c:	f046 0601 	orr.w	r6, r6, #1
  42bc10:	6066      	str	r6, [r4, #4]
  42bc12:	4628      	mov	r0, r5
  42bc14:	60ba      	str	r2, [r7, #8]
  42bc16:	6053      	str	r3, [r2, #4]
  42bc18:	f000 f9f4 	bl	42c004 <__malloc_unlock>
  42bc1c:	3408      	adds	r4, #8
  42bc1e:	4620      	mov	r0, r4
  42bc20:	b003      	add	sp, #12
  42bc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42bc26:	2b14      	cmp	r3, #20
  42bc28:	d971      	bls.n	42bd0e <_malloc_r+0x412>
  42bc2a:	2b54      	cmp	r3, #84	; 0x54
  42bc2c:	f200 80a3 	bhi.w	42bd76 <_malloc_r+0x47a>
  42bc30:	0b33      	lsrs	r3, r6, #12
  42bc32:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  42bc36:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  42bc3a:	00c3      	lsls	r3, r0, #3
  42bc3c:	e680      	b.n	42b940 <_malloc_r+0x44>
  42bc3e:	bf00      	nop
  42bc40:	200006b0 	.word	0x200006b0
  42bc44:	2000146c 	.word	0x2000146c
  42bc48:	2000143c 	.word	0x2000143c
  42bc4c:	20001464 	.word	0x20001464
  42bc50:	20001468 	.word	0x20001468
  42bc54:	200006b8 	.word	0x200006b8
  42bc58:	20000ab8 	.word	0x20000ab8
  42bc5c:	0a5a      	lsrs	r2, r3, #9
  42bc5e:	2a04      	cmp	r2, #4
  42bc60:	d95b      	bls.n	42bd1a <_malloc_r+0x41e>
  42bc62:	2a14      	cmp	r2, #20
  42bc64:	f200 80ae 	bhi.w	42bdc4 <_malloc_r+0x4c8>
  42bc68:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  42bc6c:	00c9      	lsls	r1, r1, #3
  42bc6e:	325b      	adds	r2, #91	; 0x5b
  42bc70:	eb07 0c01 	add.w	ip, r7, r1
  42bc74:	5879      	ldr	r1, [r7, r1]
  42bc76:	f1ac 0c08 	sub.w	ip, ip, #8
  42bc7a:	458c      	cmp	ip, r1
  42bc7c:	f000 8088 	beq.w	42bd90 <_malloc_r+0x494>
  42bc80:	684a      	ldr	r2, [r1, #4]
  42bc82:	f022 0203 	bic.w	r2, r2, #3
  42bc86:	4293      	cmp	r3, r2
  42bc88:	d273      	bcs.n	42bd72 <_malloc_r+0x476>
  42bc8a:	6889      	ldr	r1, [r1, #8]
  42bc8c:	458c      	cmp	ip, r1
  42bc8e:	d1f7      	bne.n	42bc80 <_malloc_r+0x384>
  42bc90:	f8dc 200c 	ldr.w	r2, [ip, #12]
  42bc94:	687b      	ldr	r3, [r7, #4]
  42bc96:	60e2      	str	r2, [r4, #12]
  42bc98:	f8c4 c008 	str.w	ip, [r4, #8]
  42bc9c:	6094      	str	r4, [r2, #8]
  42bc9e:	f8cc 400c 	str.w	r4, [ip, #12]
  42bca2:	e68f      	b.n	42b9c4 <_malloc_r+0xc8>
  42bca4:	19a1      	adds	r1, r4, r6
  42bca6:	f046 0c01 	orr.w	ip, r6, #1
  42bcaa:	f042 0601 	orr.w	r6, r2, #1
  42bcae:	f8c4 c004 	str.w	ip, [r4, #4]
  42bcb2:	4628      	mov	r0, r5
  42bcb4:	6179      	str	r1, [r7, #20]
  42bcb6:	6139      	str	r1, [r7, #16]
  42bcb8:	f8c1 e00c 	str.w	lr, [r1, #12]
  42bcbc:	f8c1 e008 	str.w	lr, [r1, #8]
  42bcc0:	604e      	str	r6, [r1, #4]
  42bcc2:	50e2      	str	r2, [r4, r3]
  42bcc4:	f000 f99e 	bl	42c004 <__malloc_unlock>
  42bcc8:	3408      	adds	r4, #8
  42bcca:	e6dd      	b.n	42ba88 <_malloc_r+0x18c>
  42bccc:	687b      	ldr	r3, [r7, #4]
  42bcce:	e679      	b.n	42b9c4 <_malloc_r+0xc8>
  42bcd0:	f108 0801 	add.w	r8, r8, #1
  42bcd4:	f018 0f03 	tst.w	r8, #3
  42bcd8:	f10c 0c08 	add.w	ip, ip, #8
  42bcdc:	f47f ae85 	bne.w	42b9ea <_malloc_r+0xee>
  42bce0:	e02d      	b.n	42bd3e <_malloc_r+0x442>
  42bce2:	68dc      	ldr	r4, [r3, #12]
  42bce4:	42a3      	cmp	r3, r4
  42bce6:	bf08      	it	eq
  42bce8:	3002      	addeq	r0, #2
  42bcea:	f43f ae3e 	beq.w	42b96a <_malloc_r+0x6e>
  42bcee:	e6bb      	b.n	42ba68 <_malloc_r+0x16c>
  42bcf0:	4419      	add	r1, r3
  42bcf2:	461c      	mov	r4, r3
  42bcf4:	684a      	ldr	r2, [r1, #4]
  42bcf6:	68db      	ldr	r3, [r3, #12]
  42bcf8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  42bcfc:	f042 0201 	orr.w	r2, r2, #1
  42bd00:	604a      	str	r2, [r1, #4]
  42bd02:	4628      	mov	r0, r5
  42bd04:	60f3      	str	r3, [r6, #12]
  42bd06:	609e      	str	r6, [r3, #8]
  42bd08:	f000 f97c 	bl	42c004 <__malloc_unlock>
  42bd0c:	e6bc      	b.n	42ba88 <_malloc_r+0x18c>
  42bd0e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  42bd12:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  42bd16:	00c3      	lsls	r3, r0, #3
  42bd18:	e612      	b.n	42b940 <_malloc_r+0x44>
  42bd1a:	099a      	lsrs	r2, r3, #6
  42bd1c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  42bd20:	00c9      	lsls	r1, r1, #3
  42bd22:	3238      	adds	r2, #56	; 0x38
  42bd24:	e7a4      	b.n	42bc70 <_malloc_r+0x374>
  42bd26:	42bc      	cmp	r4, r7
  42bd28:	d054      	beq.n	42bdd4 <_malloc_r+0x4d8>
  42bd2a:	68bc      	ldr	r4, [r7, #8]
  42bd2c:	6862      	ldr	r2, [r4, #4]
  42bd2e:	f022 0203 	bic.w	r2, r2, #3
  42bd32:	e75d      	b.n	42bbf0 <_malloc_r+0x2f4>
  42bd34:	f859 3908 	ldr.w	r3, [r9], #-8
  42bd38:	4599      	cmp	r9, r3
  42bd3a:	f040 8086 	bne.w	42be4a <_malloc_r+0x54e>
  42bd3e:	f010 0f03 	tst.w	r0, #3
  42bd42:	f100 30ff 	add.w	r0, r0, #4294967295
  42bd46:	d1f5      	bne.n	42bd34 <_malloc_r+0x438>
  42bd48:	687b      	ldr	r3, [r7, #4]
  42bd4a:	ea23 0304 	bic.w	r3, r3, r4
  42bd4e:	607b      	str	r3, [r7, #4]
  42bd50:	0064      	lsls	r4, r4, #1
  42bd52:	429c      	cmp	r4, r3
  42bd54:	f63f aec7 	bhi.w	42bae6 <_malloc_r+0x1ea>
  42bd58:	2c00      	cmp	r4, #0
  42bd5a:	f43f aec4 	beq.w	42bae6 <_malloc_r+0x1ea>
  42bd5e:	421c      	tst	r4, r3
  42bd60:	4640      	mov	r0, r8
  42bd62:	f47f ae3e 	bne.w	42b9e2 <_malloc_r+0xe6>
  42bd66:	0064      	lsls	r4, r4, #1
  42bd68:	421c      	tst	r4, r3
  42bd6a:	f100 0004 	add.w	r0, r0, #4
  42bd6e:	d0fa      	beq.n	42bd66 <_malloc_r+0x46a>
  42bd70:	e637      	b.n	42b9e2 <_malloc_r+0xe6>
  42bd72:	468c      	mov	ip, r1
  42bd74:	e78c      	b.n	42bc90 <_malloc_r+0x394>
  42bd76:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  42bd7a:	d815      	bhi.n	42bda8 <_malloc_r+0x4ac>
  42bd7c:	0bf3      	lsrs	r3, r6, #15
  42bd7e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  42bd82:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  42bd86:	00c3      	lsls	r3, r0, #3
  42bd88:	e5da      	b.n	42b940 <_malloc_r+0x44>
  42bd8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  42bd8e:	e6ed      	b.n	42bb6c <_malloc_r+0x270>
  42bd90:	687b      	ldr	r3, [r7, #4]
  42bd92:	1092      	asrs	r2, r2, #2
  42bd94:	2101      	movs	r1, #1
  42bd96:	fa01 f202 	lsl.w	r2, r1, r2
  42bd9a:	4313      	orrs	r3, r2
  42bd9c:	607b      	str	r3, [r7, #4]
  42bd9e:	4662      	mov	r2, ip
  42bda0:	e779      	b.n	42bc96 <_malloc_r+0x39a>
  42bda2:	2301      	movs	r3, #1
  42bda4:	6053      	str	r3, [r2, #4]
  42bda6:	e729      	b.n	42bbfc <_malloc_r+0x300>
  42bda8:	f240 5254 	movw	r2, #1364	; 0x554
  42bdac:	4293      	cmp	r3, r2
  42bdae:	d822      	bhi.n	42bdf6 <_malloc_r+0x4fa>
  42bdb0:	0cb3      	lsrs	r3, r6, #18
  42bdb2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  42bdb6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  42bdba:	00c3      	lsls	r3, r0, #3
  42bdbc:	e5c0      	b.n	42b940 <_malloc_r+0x44>
  42bdbe:	f103 0b10 	add.w	fp, r3, #16
  42bdc2:	e6ae      	b.n	42bb22 <_malloc_r+0x226>
  42bdc4:	2a54      	cmp	r2, #84	; 0x54
  42bdc6:	d829      	bhi.n	42be1c <_malloc_r+0x520>
  42bdc8:	0b1a      	lsrs	r2, r3, #12
  42bdca:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  42bdce:	00c9      	lsls	r1, r1, #3
  42bdd0:	326e      	adds	r2, #110	; 0x6e
  42bdd2:	e74d      	b.n	42bc70 <_malloc_r+0x374>
  42bdd4:	4b20      	ldr	r3, [pc, #128]	; (42be58 <_malloc_r+0x55c>)
  42bdd6:	6819      	ldr	r1, [r3, #0]
  42bdd8:	4459      	add	r1, fp
  42bdda:	6019      	str	r1, [r3, #0]
  42bddc:	e6b2      	b.n	42bb44 <_malloc_r+0x248>
  42bdde:	f3ca 000b 	ubfx	r0, sl, #0, #12
  42bde2:	2800      	cmp	r0, #0
  42bde4:	f47f aeae 	bne.w	42bb44 <_malloc_r+0x248>
  42bde8:	eb08 030b 	add.w	r3, r8, fp
  42bdec:	68ba      	ldr	r2, [r7, #8]
  42bdee:	f043 0301 	orr.w	r3, r3, #1
  42bdf2:	6053      	str	r3, [r2, #4]
  42bdf4:	e6ee      	b.n	42bbd4 <_malloc_r+0x2d8>
  42bdf6:	207f      	movs	r0, #127	; 0x7f
  42bdf8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  42bdfc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  42be00:	e59e      	b.n	42b940 <_malloc_r+0x44>
  42be02:	f104 0108 	add.w	r1, r4, #8
  42be06:	4628      	mov	r0, r5
  42be08:	9300      	str	r3, [sp, #0]
  42be0a:	f7ff f8f9 	bl	42b000 <_free_r>
  42be0e:	9b00      	ldr	r3, [sp, #0]
  42be10:	6819      	ldr	r1, [r3, #0]
  42be12:	e6df      	b.n	42bbd4 <_malloc_r+0x2d8>
  42be14:	2001      	movs	r0, #1
  42be16:	f04f 0900 	mov.w	r9, #0
  42be1a:	e6bc      	b.n	42bb96 <_malloc_r+0x29a>
  42be1c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  42be20:	d805      	bhi.n	42be2e <_malloc_r+0x532>
  42be22:	0bda      	lsrs	r2, r3, #15
  42be24:	f102 0178 	add.w	r1, r2, #120	; 0x78
  42be28:	00c9      	lsls	r1, r1, #3
  42be2a:	3277      	adds	r2, #119	; 0x77
  42be2c:	e720      	b.n	42bc70 <_malloc_r+0x374>
  42be2e:	f240 5154 	movw	r1, #1364	; 0x554
  42be32:	428a      	cmp	r2, r1
  42be34:	d805      	bhi.n	42be42 <_malloc_r+0x546>
  42be36:	0c9a      	lsrs	r2, r3, #18
  42be38:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  42be3c:	00c9      	lsls	r1, r1, #3
  42be3e:	327c      	adds	r2, #124	; 0x7c
  42be40:	e716      	b.n	42bc70 <_malloc_r+0x374>
  42be42:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  42be46:	227e      	movs	r2, #126	; 0x7e
  42be48:	e712      	b.n	42bc70 <_malloc_r+0x374>
  42be4a:	687b      	ldr	r3, [r7, #4]
  42be4c:	e780      	b.n	42bd50 <_malloc_r+0x454>
  42be4e:	08f0      	lsrs	r0, r6, #3
  42be50:	f106 0308 	add.w	r3, r6, #8
  42be54:	e600      	b.n	42ba58 <_malloc_r+0x15c>
  42be56:	bf00      	nop
  42be58:	2000143c 	.word	0x2000143c

0042be5c <__ascii_mbtowc>:
  42be5c:	b082      	sub	sp, #8
  42be5e:	b149      	cbz	r1, 42be74 <__ascii_mbtowc+0x18>
  42be60:	b15a      	cbz	r2, 42be7a <__ascii_mbtowc+0x1e>
  42be62:	b16b      	cbz	r3, 42be80 <__ascii_mbtowc+0x24>
  42be64:	7813      	ldrb	r3, [r2, #0]
  42be66:	600b      	str	r3, [r1, #0]
  42be68:	7812      	ldrb	r2, [r2, #0]
  42be6a:	1c10      	adds	r0, r2, #0
  42be6c:	bf18      	it	ne
  42be6e:	2001      	movne	r0, #1
  42be70:	b002      	add	sp, #8
  42be72:	4770      	bx	lr
  42be74:	a901      	add	r1, sp, #4
  42be76:	2a00      	cmp	r2, #0
  42be78:	d1f3      	bne.n	42be62 <__ascii_mbtowc+0x6>
  42be7a:	4610      	mov	r0, r2
  42be7c:	b002      	add	sp, #8
  42be7e:	4770      	bx	lr
  42be80:	f06f 0001 	mvn.w	r0, #1
  42be84:	e7f4      	b.n	42be70 <__ascii_mbtowc+0x14>
  42be86:	bf00      	nop
	...

0042be90 <memchr>:
  42be90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42be94:	2a10      	cmp	r2, #16
  42be96:	db2b      	blt.n	42bef0 <memchr+0x60>
  42be98:	f010 0f07 	tst.w	r0, #7
  42be9c:	d008      	beq.n	42beb0 <memchr+0x20>
  42be9e:	f810 3b01 	ldrb.w	r3, [r0], #1
  42bea2:	3a01      	subs	r2, #1
  42bea4:	428b      	cmp	r3, r1
  42bea6:	d02d      	beq.n	42bf04 <memchr+0x74>
  42bea8:	f010 0f07 	tst.w	r0, #7
  42beac:	b342      	cbz	r2, 42bf00 <memchr+0x70>
  42beae:	d1f6      	bne.n	42be9e <memchr+0xe>
  42beb0:	b4f0      	push	{r4, r5, r6, r7}
  42beb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  42beb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  42beba:	f022 0407 	bic.w	r4, r2, #7
  42bebe:	f07f 0700 	mvns.w	r7, #0
  42bec2:	2300      	movs	r3, #0
  42bec4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  42bec8:	3c08      	subs	r4, #8
  42beca:	ea85 0501 	eor.w	r5, r5, r1
  42bece:	ea86 0601 	eor.w	r6, r6, r1
  42bed2:	fa85 f547 	uadd8	r5, r5, r7
  42bed6:	faa3 f587 	sel	r5, r3, r7
  42beda:	fa86 f647 	uadd8	r6, r6, r7
  42bede:	faa5 f687 	sel	r6, r5, r7
  42bee2:	b98e      	cbnz	r6, 42bf08 <memchr+0x78>
  42bee4:	d1ee      	bne.n	42bec4 <memchr+0x34>
  42bee6:	bcf0      	pop	{r4, r5, r6, r7}
  42bee8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42beec:	f002 0207 	and.w	r2, r2, #7
  42bef0:	b132      	cbz	r2, 42bf00 <memchr+0x70>
  42bef2:	f810 3b01 	ldrb.w	r3, [r0], #1
  42bef6:	3a01      	subs	r2, #1
  42bef8:	ea83 0301 	eor.w	r3, r3, r1
  42befc:	b113      	cbz	r3, 42bf04 <memchr+0x74>
  42befe:	d1f8      	bne.n	42bef2 <memchr+0x62>
  42bf00:	2000      	movs	r0, #0
  42bf02:	4770      	bx	lr
  42bf04:	3801      	subs	r0, #1
  42bf06:	4770      	bx	lr
  42bf08:	2d00      	cmp	r5, #0
  42bf0a:	bf06      	itte	eq
  42bf0c:	4635      	moveq	r5, r6
  42bf0e:	3803      	subeq	r0, #3
  42bf10:	3807      	subne	r0, #7
  42bf12:	f015 0f01 	tst.w	r5, #1
  42bf16:	d107      	bne.n	42bf28 <memchr+0x98>
  42bf18:	3001      	adds	r0, #1
  42bf1a:	f415 7f80 	tst.w	r5, #256	; 0x100
  42bf1e:	bf02      	ittt	eq
  42bf20:	3001      	addeq	r0, #1
  42bf22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  42bf26:	3001      	addeq	r0, #1
  42bf28:	bcf0      	pop	{r4, r5, r6, r7}
  42bf2a:	3801      	subs	r0, #1
  42bf2c:	4770      	bx	lr
  42bf2e:	bf00      	nop

0042bf30 <memmove>:
  42bf30:	4288      	cmp	r0, r1
  42bf32:	b5f0      	push	{r4, r5, r6, r7, lr}
  42bf34:	d90d      	bls.n	42bf52 <memmove+0x22>
  42bf36:	188b      	adds	r3, r1, r2
  42bf38:	4298      	cmp	r0, r3
  42bf3a:	d20a      	bcs.n	42bf52 <memmove+0x22>
  42bf3c:	1884      	adds	r4, r0, r2
  42bf3e:	2a00      	cmp	r2, #0
  42bf40:	d051      	beq.n	42bfe6 <memmove+0xb6>
  42bf42:	4622      	mov	r2, r4
  42bf44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  42bf48:	f802 4d01 	strb.w	r4, [r2, #-1]!
  42bf4c:	4299      	cmp	r1, r3
  42bf4e:	d1f9      	bne.n	42bf44 <memmove+0x14>
  42bf50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42bf52:	2a0f      	cmp	r2, #15
  42bf54:	d948      	bls.n	42bfe8 <memmove+0xb8>
  42bf56:	ea41 0300 	orr.w	r3, r1, r0
  42bf5a:	079b      	lsls	r3, r3, #30
  42bf5c:	d146      	bne.n	42bfec <memmove+0xbc>
  42bf5e:	f100 0410 	add.w	r4, r0, #16
  42bf62:	f101 0310 	add.w	r3, r1, #16
  42bf66:	4615      	mov	r5, r2
  42bf68:	f853 6c10 	ldr.w	r6, [r3, #-16]
  42bf6c:	f844 6c10 	str.w	r6, [r4, #-16]
  42bf70:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  42bf74:	f844 6c0c 	str.w	r6, [r4, #-12]
  42bf78:	f853 6c08 	ldr.w	r6, [r3, #-8]
  42bf7c:	f844 6c08 	str.w	r6, [r4, #-8]
  42bf80:	3d10      	subs	r5, #16
  42bf82:	f853 6c04 	ldr.w	r6, [r3, #-4]
  42bf86:	f844 6c04 	str.w	r6, [r4, #-4]
  42bf8a:	2d0f      	cmp	r5, #15
  42bf8c:	f103 0310 	add.w	r3, r3, #16
  42bf90:	f104 0410 	add.w	r4, r4, #16
  42bf94:	d8e8      	bhi.n	42bf68 <memmove+0x38>
  42bf96:	f1a2 0310 	sub.w	r3, r2, #16
  42bf9a:	f023 030f 	bic.w	r3, r3, #15
  42bf9e:	f002 0e0f 	and.w	lr, r2, #15
  42bfa2:	3310      	adds	r3, #16
  42bfa4:	f1be 0f03 	cmp.w	lr, #3
  42bfa8:	4419      	add	r1, r3
  42bfaa:	4403      	add	r3, r0
  42bfac:	d921      	bls.n	42bff2 <memmove+0xc2>
  42bfae:	1f1e      	subs	r6, r3, #4
  42bfb0:	460d      	mov	r5, r1
  42bfb2:	4674      	mov	r4, lr
  42bfb4:	3c04      	subs	r4, #4
  42bfb6:	f855 7b04 	ldr.w	r7, [r5], #4
  42bfba:	f846 7f04 	str.w	r7, [r6, #4]!
  42bfbe:	2c03      	cmp	r4, #3
  42bfc0:	d8f8      	bhi.n	42bfb4 <memmove+0x84>
  42bfc2:	f1ae 0404 	sub.w	r4, lr, #4
  42bfc6:	f024 0403 	bic.w	r4, r4, #3
  42bfca:	3404      	adds	r4, #4
  42bfcc:	4421      	add	r1, r4
  42bfce:	4423      	add	r3, r4
  42bfd0:	f002 0203 	and.w	r2, r2, #3
  42bfd4:	b162      	cbz	r2, 42bff0 <memmove+0xc0>
  42bfd6:	3b01      	subs	r3, #1
  42bfd8:	440a      	add	r2, r1
  42bfda:	f811 4b01 	ldrb.w	r4, [r1], #1
  42bfde:	f803 4f01 	strb.w	r4, [r3, #1]!
  42bfe2:	428a      	cmp	r2, r1
  42bfe4:	d1f9      	bne.n	42bfda <memmove+0xaa>
  42bfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42bfe8:	4603      	mov	r3, r0
  42bfea:	e7f3      	b.n	42bfd4 <memmove+0xa4>
  42bfec:	4603      	mov	r3, r0
  42bfee:	e7f2      	b.n	42bfd6 <memmove+0xa6>
  42bff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42bff2:	4672      	mov	r2, lr
  42bff4:	e7ee      	b.n	42bfd4 <memmove+0xa4>
  42bff6:	bf00      	nop

0042bff8 <__malloc_lock>:
  42bff8:	4801      	ldr	r0, [pc, #4]	; (42c000 <__malloc_lock+0x8>)
  42bffa:	f7ff bbf1 	b.w	42b7e0 <__retarget_lock_acquire_recursive>
  42bffe:	bf00      	nop
  42c000:	20001724 	.word	0x20001724

0042c004 <__malloc_unlock>:
  42c004:	4801      	ldr	r0, [pc, #4]	; (42c00c <__malloc_unlock+0x8>)
  42c006:	f7ff bbef 	b.w	42b7e8 <__retarget_lock_release_recursive>
  42c00a:	bf00      	nop
  42c00c:	20001724 	.word	0x20001724

0042c010 <_Balloc>:
  42c010:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  42c012:	b570      	push	{r4, r5, r6, lr}
  42c014:	4605      	mov	r5, r0
  42c016:	460c      	mov	r4, r1
  42c018:	b14b      	cbz	r3, 42c02e <_Balloc+0x1e>
  42c01a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  42c01e:	b180      	cbz	r0, 42c042 <_Balloc+0x32>
  42c020:	6802      	ldr	r2, [r0, #0]
  42c022:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  42c026:	2300      	movs	r3, #0
  42c028:	6103      	str	r3, [r0, #16]
  42c02a:	60c3      	str	r3, [r0, #12]
  42c02c:	bd70      	pop	{r4, r5, r6, pc}
  42c02e:	2221      	movs	r2, #33	; 0x21
  42c030:	2104      	movs	r1, #4
  42c032:	f001 ffa1 	bl	42df78 <_calloc_r>
  42c036:	64e8      	str	r0, [r5, #76]	; 0x4c
  42c038:	4603      	mov	r3, r0
  42c03a:	2800      	cmp	r0, #0
  42c03c:	d1ed      	bne.n	42c01a <_Balloc+0xa>
  42c03e:	2000      	movs	r0, #0
  42c040:	bd70      	pop	{r4, r5, r6, pc}
  42c042:	2101      	movs	r1, #1
  42c044:	fa01 f604 	lsl.w	r6, r1, r4
  42c048:	1d72      	adds	r2, r6, #5
  42c04a:	4628      	mov	r0, r5
  42c04c:	0092      	lsls	r2, r2, #2
  42c04e:	f001 ff93 	bl	42df78 <_calloc_r>
  42c052:	2800      	cmp	r0, #0
  42c054:	d0f3      	beq.n	42c03e <_Balloc+0x2e>
  42c056:	6044      	str	r4, [r0, #4]
  42c058:	6086      	str	r6, [r0, #8]
  42c05a:	e7e4      	b.n	42c026 <_Balloc+0x16>

0042c05c <_Bfree>:
  42c05c:	b131      	cbz	r1, 42c06c <_Bfree+0x10>
  42c05e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  42c060:	684a      	ldr	r2, [r1, #4]
  42c062:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  42c066:	6008      	str	r0, [r1, #0]
  42c068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  42c06c:	4770      	bx	lr
  42c06e:	bf00      	nop

0042c070 <__multadd>:
  42c070:	b5f0      	push	{r4, r5, r6, r7, lr}
  42c072:	690c      	ldr	r4, [r1, #16]
  42c074:	b083      	sub	sp, #12
  42c076:	460d      	mov	r5, r1
  42c078:	4606      	mov	r6, r0
  42c07a:	f101 0e14 	add.w	lr, r1, #20
  42c07e:	2700      	movs	r7, #0
  42c080:	f8de 0000 	ldr.w	r0, [lr]
  42c084:	b281      	uxth	r1, r0
  42c086:	fb02 3301 	mla	r3, r2, r1, r3
  42c08a:	0c01      	lsrs	r1, r0, #16
  42c08c:	0c18      	lsrs	r0, r3, #16
  42c08e:	fb02 0101 	mla	r1, r2, r1, r0
  42c092:	b29b      	uxth	r3, r3
  42c094:	3701      	adds	r7, #1
  42c096:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  42c09a:	42bc      	cmp	r4, r7
  42c09c:	f84e 3b04 	str.w	r3, [lr], #4
  42c0a0:	ea4f 4311 	mov.w	r3, r1, lsr #16
  42c0a4:	dcec      	bgt.n	42c080 <__multadd+0x10>
  42c0a6:	b13b      	cbz	r3, 42c0b8 <__multadd+0x48>
  42c0a8:	68aa      	ldr	r2, [r5, #8]
  42c0aa:	4294      	cmp	r4, r2
  42c0ac:	da07      	bge.n	42c0be <__multadd+0x4e>
  42c0ae:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  42c0b2:	3401      	adds	r4, #1
  42c0b4:	6153      	str	r3, [r2, #20]
  42c0b6:	612c      	str	r4, [r5, #16]
  42c0b8:	4628      	mov	r0, r5
  42c0ba:	b003      	add	sp, #12
  42c0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42c0be:	6869      	ldr	r1, [r5, #4]
  42c0c0:	9301      	str	r3, [sp, #4]
  42c0c2:	3101      	adds	r1, #1
  42c0c4:	4630      	mov	r0, r6
  42c0c6:	f7ff ffa3 	bl	42c010 <_Balloc>
  42c0ca:	692a      	ldr	r2, [r5, #16]
  42c0cc:	3202      	adds	r2, #2
  42c0ce:	f105 010c 	add.w	r1, r5, #12
  42c0d2:	4607      	mov	r7, r0
  42c0d4:	0092      	lsls	r2, r2, #2
  42c0d6:	300c      	adds	r0, #12
  42c0d8:	f7fa fcf2 	bl	426ac0 <memcpy>
  42c0dc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  42c0de:	6869      	ldr	r1, [r5, #4]
  42c0e0:	9b01      	ldr	r3, [sp, #4]
  42c0e2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  42c0e6:	6028      	str	r0, [r5, #0]
  42c0e8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  42c0ec:	463d      	mov	r5, r7
  42c0ee:	e7de      	b.n	42c0ae <__multadd+0x3e>

0042c0f0 <__hi0bits>:
  42c0f0:	0c02      	lsrs	r2, r0, #16
  42c0f2:	0412      	lsls	r2, r2, #16
  42c0f4:	4603      	mov	r3, r0
  42c0f6:	b9b2      	cbnz	r2, 42c126 <__hi0bits+0x36>
  42c0f8:	0403      	lsls	r3, r0, #16
  42c0fa:	2010      	movs	r0, #16
  42c0fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  42c100:	bf04      	itt	eq
  42c102:	021b      	lsleq	r3, r3, #8
  42c104:	3008      	addeq	r0, #8
  42c106:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  42c10a:	bf04      	itt	eq
  42c10c:	011b      	lsleq	r3, r3, #4
  42c10e:	3004      	addeq	r0, #4
  42c110:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  42c114:	bf04      	itt	eq
  42c116:	009b      	lsleq	r3, r3, #2
  42c118:	3002      	addeq	r0, #2
  42c11a:	2b00      	cmp	r3, #0
  42c11c:	db02      	blt.n	42c124 <__hi0bits+0x34>
  42c11e:	005b      	lsls	r3, r3, #1
  42c120:	d403      	bmi.n	42c12a <__hi0bits+0x3a>
  42c122:	2020      	movs	r0, #32
  42c124:	4770      	bx	lr
  42c126:	2000      	movs	r0, #0
  42c128:	e7e8      	b.n	42c0fc <__hi0bits+0xc>
  42c12a:	3001      	adds	r0, #1
  42c12c:	4770      	bx	lr
  42c12e:	bf00      	nop

0042c130 <__lo0bits>:
  42c130:	6803      	ldr	r3, [r0, #0]
  42c132:	f013 0207 	ands.w	r2, r3, #7
  42c136:	4601      	mov	r1, r0
  42c138:	d007      	beq.n	42c14a <__lo0bits+0x1a>
  42c13a:	07da      	lsls	r2, r3, #31
  42c13c:	d421      	bmi.n	42c182 <__lo0bits+0x52>
  42c13e:	0798      	lsls	r0, r3, #30
  42c140:	d421      	bmi.n	42c186 <__lo0bits+0x56>
  42c142:	089b      	lsrs	r3, r3, #2
  42c144:	600b      	str	r3, [r1, #0]
  42c146:	2002      	movs	r0, #2
  42c148:	4770      	bx	lr
  42c14a:	b298      	uxth	r0, r3
  42c14c:	b198      	cbz	r0, 42c176 <__lo0bits+0x46>
  42c14e:	4610      	mov	r0, r2
  42c150:	f013 0fff 	tst.w	r3, #255	; 0xff
  42c154:	bf04      	itt	eq
  42c156:	0a1b      	lsreq	r3, r3, #8
  42c158:	3008      	addeq	r0, #8
  42c15a:	071a      	lsls	r2, r3, #28
  42c15c:	bf04      	itt	eq
  42c15e:	091b      	lsreq	r3, r3, #4
  42c160:	3004      	addeq	r0, #4
  42c162:	079a      	lsls	r2, r3, #30
  42c164:	bf04      	itt	eq
  42c166:	089b      	lsreq	r3, r3, #2
  42c168:	3002      	addeq	r0, #2
  42c16a:	07da      	lsls	r2, r3, #31
  42c16c:	d407      	bmi.n	42c17e <__lo0bits+0x4e>
  42c16e:	085b      	lsrs	r3, r3, #1
  42c170:	d104      	bne.n	42c17c <__lo0bits+0x4c>
  42c172:	2020      	movs	r0, #32
  42c174:	4770      	bx	lr
  42c176:	0c1b      	lsrs	r3, r3, #16
  42c178:	2010      	movs	r0, #16
  42c17a:	e7e9      	b.n	42c150 <__lo0bits+0x20>
  42c17c:	3001      	adds	r0, #1
  42c17e:	600b      	str	r3, [r1, #0]
  42c180:	4770      	bx	lr
  42c182:	2000      	movs	r0, #0
  42c184:	4770      	bx	lr
  42c186:	085b      	lsrs	r3, r3, #1
  42c188:	600b      	str	r3, [r1, #0]
  42c18a:	2001      	movs	r0, #1
  42c18c:	4770      	bx	lr
  42c18e:	bf00      	nop

0042c190 <__i2b>:
  42c190:	b510      	push	{r4, lr}
  42c192:	460c      	mov	r4, r1
  42c194:	2101      	movs	r1, #1
  42c196:	f7ff ff3b 	bl	42c010 <_Balloc>
  42c19a:	2201      	movs	r2, #1
  42c19c:	6144      	str	r4, [r0, #20]
  42c19e:	6102      	str	r2, [r0, #16]
  42c1a0:	bd10      	pop	{r4, pc}
  42c1a2:	bf00      	nop

0042c1a4 <__multiply>:
  42c1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42c1a8:	690c      	ldr	r4, [r1, #16]
  42c1aa:	6915      	ldr	r5, [r2, #16]
  42c1ac:	42ac      	cmp	r4, r5
  42c1ae:	b083      	sub	sp, #12
  42c1b0:	468b      	mov	fp, r1
  42c1b2:	4616      	mov	r6, r2
  42c1b4:	da04      	bge.n	42c1c0 <__multiply+0x1c>
  42c1b6:	4622      	mov	r2, r4
  42c1b8:	46b3      	mov	fp, r6
  42c1ba:	462c      	mov	r4, r5
  42c1bc:	460e      	mov	r6, r1
  42c1be:	4615      	mov	r5, r2
  42c1c0:	f8db 3008 	ldr.w	r3, [fp, #8]
  42c1c4:	f8db 1004 	ldr.w	r1, [fp, #4]
  42c1c8:	eb04 0805 	add.w	r8, r4, r5
  42c1cc:	4598      	cmp	r8, r3
  42c1ce:	bfc8      	it	gt
  42c1d0:	3101      	addgt	r1, #1
  42c1d2:	f7ff ff1d 	bl	42c010 <_Balloc>
  42c1d6:	f100 0914 	add.w	r9, r0, #20
  42c1da:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  42c1de:	45d1      	cmp	r9, sl
  42c1e0:	9000      	str	r0, [sp, #0]
  42c1e2:	d205      	bcs.n	42c1f0 <__multiply+0x4c>
  42c1e4:	464b      	mov	r3, r9
  42c1e6:	2100      	movs	r1, #0
  42c1e8:	f843 1b04 	str.w	r1, [r3], #4
  42c1ec:	459a      	cmp	sl, r3
  42c1ee:	d8fb      	bhi.n	42c1e8 <__multiply+0x44>
  42c1f0:	f106 0c14 	add.w	ip, r6, #20
  42c1f4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  42c1f8:	f10b 0b14 	add.w	fp, fp, #20
  42c1fc:	459c      	cmp	ip, r3
  42c1fe:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  42c202:	d24c      	bcs.n	42c29e <__multiply+0xfa>
  42c204:	f8cd a004 	str.w	sl, [sp, #4]
  42c208:	469a      	mov	sl, r3
  42c20a:	f8dc 5000 	ldr.w	r5, [ip]
  42c20e:	b2af      	uxth	r7, r5
  42c210:	b1ef      	cbz	r7, 42c24e <__multiply+0xaa>
  42c212:	2100      	movs	r1, #0
  42c214:	464d      	mov	r5, r9
  42c216:	465e      	mov	r6, fp
  42c218:	460c      	mov	r4, r1
  42c21a:	f856 2b04 	ldr.w	r2, [r6], #4
  42c21e:	6828      	ldr	r0, [r5, #0]
  42c220:	b293      	uxth	r3, r2
  42c222:	b281      	uxth	r1, r0
  42c224:	fb07 1303 	mla	r3, r7, r3, r1
  42c228:	0c12      	lsrs	r2, r2, #16
  42c22a:	0c01      	lsrs	r1, r0, #16
  42c22c:	4423      	add	r3, r4
  42c22e:	fb07 1102 	mla	r1, r7, r2, r1
  42c232:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  42c236:	b29b      	uxth	r3, r3
  42c238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  42c23c:	45b6      	cmp	lr, r6
  42c23e:	f845 3b04 	str.w	r3, [r5], #4
  42c242:	ea4f 4411 	mov.w	r4, r1, lsr #16
  42c246:	d8e8      	bhi.n	42c21a <__multiply+0x76>
  42c248:	602c      	str	r4, [r5, #0]
  42c24a:	f8dc 5000 	ldr.w	r5, [ip]
  42c24e:	0c2d      	lsrs	r5, r5, #16
  42c250:	d01d      	beq.n	42c28e <__multiply+0xea>
  42c252:	f8d9 3000 	ldr.w	r3, [r9]
  42c256:	4648      	mov	r0, r9
  42c258:	461c      	mov	r4, r3
  42c25a:	4659      	mov	r1, fp
  42c25c:	2200      	movs	r2, #0
  42c25e:	880e      	ldrh	r6, [r1, #0]
  42c260:	0c24      	lsrs	r4, r4, #16
  42c262:	fb05 4406 	mla	r4, r5, r6, r4
  42c266:	4422      	add	r2, r4
  42c268:	b29b      	uxth	r3, r3
  42c26a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  42c26e:	f840 3b04 	str.w	r3, [r0], #4
  42c272:	f851 3b04 	ldr.w	r3, [r1], #4
  42c276:	6804      	ldr	r4, [r0, #0]
  42c278:	0c1b      	lsrs	r3, r3, #16
  42c27a:	b2a6      	uxth	r6, r4
  42c27c:	fb05 6303 	mla	r3, r5, r3, r6
  42c280:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  42c284:	458e      	cmp	lr, r1
  42c286:	ea4f 4213 	mov.w	r2, r3, lsr #16
  42c28a:	d8e8      	bhi.n	42c25e <__multiply+0xba>
  42c28c:	6003      	str	r3, [r0, #0]
  42c28e:	f10c 0c04 	add.w	ip, ip, #4
  42c292:	45e2      	cmp	sl, ip
  42c294:	f109 0904 	add.w	r9, r9, #4
  42c298:	d8b7      	bhi.n	42c20a <__multiply+0x66>
  42c29a:	f8dd a004 	ldr.w	sl, [sp, #4]
  42c29e:	f1b8 0f00 	cmp.w	r8, #0
  42c2a2:	dd0b      	ble.n	42c2bc <__multiply+0x118>
  42c2a4:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  42c2a8:	f1aa 0a04 	sub.w	sl, sl, #4
  42c2ac:	b11b      	cbz	r3, 42c2b6 <__multiply+0x112>
  42c2ae:	e005      	b.n	42c2bc <__multiply+0x118>
  42c2b0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  42c2b4:	b913      	cbnz	r3, 42c2bc <__multiply+0x118>
  42c2b6:	f1b8 0801 	subs.w	r8, r8, #1
  42c2ba:	d1f9      	bne.n	42c2b0 <__multiply+0x10c>
  42c2bc:	9800      	ldr	r0, [sp, #0]
  42c2be:	f8c0 8010 	str.w	r8, [r0, #16]
  42c2c2:	b003      	add	sp, #12
  42c2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0042c2c8 <__pow5mult>:
  42c2c8:	f012 0303 	ands.w	r3, r2, #3
  42c2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42c2d0:	4614      	mov	r4, r2
  42c2d2:	4607      	mov	r7, r0
  42c2d4:	d12e      	bne.n	42c334 <__pow5mult+0x6c>
  42c2d6:	460d      	mov	r5, r1
  42c2d8:	10a4      	asrs	r4, r4, #2
  42c2da:	d01c      	beq.n	42c316 <__pow5mult+0x4e>
  42c2dc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  42c2de:	b396      	cbz	r6, 42c346 <__pow5mult+0x7e>
  42c2e0:	07e3      	lsls	r3, r4, #31
  42c2e2:	f04f 0800 	mov.w	r8, #0
  42c2e6:	d406      	bmi.n	42c2f6 <__pow5mult+0x2e>
  42c2e8:	1064      	asrs	r4, r4, #1
  42c2ea:	d014      	beq.n	42c316 <__pow5mult+0x4e>
  42c2ec:	6830      	ldr	r0, [r6, #0]
  42c2ee:	b1a8      	cbz	r0, 42c31c <__pow5mult+0x54>
  42c2f0:	4606      	mov	r6, r0
  42c2f2:	07e3      	lsls	r3, r4, #31
  42c2f4:	d5f8      	bpl.n	42c2e8 <__pow5mult+0x20>
  42c2f6:	4632      	mov	r2, r6
  42c2f8:	4629      	mov	r1, r5
  42c2fa:	4638      	mov	r0, r7
  42c2fc:	f7ff ff52 	bl	42c1a4 <__multiply>
  42c300:	b1b5      	cbz	r5, 42c330 <__pow5mult+0x68>
  42c302:	686a      	ldr	r2, [r5, #4]
  42c304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  42c306:	1064      	asrs	r4, r4, #1
  42c308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  42c30c:	6029      	str	r1, [r5, #0]
  42c30e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  42c312:	4605      	mov	r5, r0
  42c314:	d1ea      	bne.n	42c2ec <__pow5mult+0x24>
  42c316:	4628      	mov	r0, r5
  42c318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42c31c:	4632      	mov	r2, r6
  42c31e:	4631      	mov	r1, r6
  42c320:	4638      	mov	r0, r7
  42c322:	f7ff ff3f 	bl	42c1a4 <__multiply>
  42c326:	6030      	str	r0, [r6, #0]
  42c328:	f8c0 8000 	str.w	r8, [r0]
  42c32c:	4606      	mov	r6, r0
  42c32e:	e7e0      	b.n	42c2f2 <__pow5mult+0x2a>
  42c330:	4605      	mov	r5, r0
  42c332:	e7d9      	b.n	42c2e8 <__pow5mult+0x20>
  42c334:	1e5a      	subs	r2, r3, #1
  42c336:	4d0b      	ldr	r5, [pc, #44]	; (42c364 <__pow5mult+0x9c>)
  42c338:	2300      	movs	r3, #0
  42c33a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  42c33e:	f7ff fe97 	bl	42c070 <__multadd>
  42c342:	4605      	mov	r5, r0
  42c344:	e7c8      	b.n	42c2d8 <__pow5mult+0x10>
  42c346:	2101      	movs	r1, #1
  42c348:	4638      	mov	r0, r7
  42c34a:	f7ff fe61 	bl	42c010 <_Balloc>
  42c34e:	f240 2171 	movw	r1, #625	; 0x271
  42c352:	2201      	movs	r2, #1
  42c354:	2300      	movs	r3, #0
  42c356:	6141      	str	r1, [r0, #20]
  42c358:	6102      	str	r2, [r0, #16]
  42c35a:	4606      	mov	r6, r0
  42c35c:	64b8      	str	r0, [r7, #72]	; 0x48
  42c35e:	6003      	str	r3, [r0, #0]
  42c360:	e7be      	b.n	42c2e0 <__pow5mult+0x18>
  42c362:	bf00      	nop
  42c364:	0042f8e0 	.word	0x0042f8e0

0042c368 <__lshift>:
  42c368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  42c36c:	4691      	mov	r9, r2
  42c36e:	690a      	ldr	r2, [r1, #16]
  42c370:	688b      	ldr	r3, [r1, #8]
  42c372:	ea4f 1469 	mov.w	r4, r9, asr #5
  42c376:	eb04 0802 	add.w	r8, r4, r2
  42c37a:	f108 0501 	add.w	r5, r8, #1
  42c37e:	429d      	cmp	r5, r3
  42c380:	460e      	mov	r6, r1
  42c382:	4607      	mov	r7, r0
  42c384:	6849      	ldr	r1, [r1, #4]
  42c386:	dd04      	ble.n	42c392 <__lshift+0x2a>
  42c388:	005b      	lsls	r3, r3, #1
  42c38a:	429d      	cmp	r5, r3
  42c38c:	f101 0101 	add.w	r1, r1, #1
  42c390:	dcfa      	bgt.n	42c388 <__lshift+0x20>
  42c392:	4638      	mov	r0, r7
  42c394:	f7ff fe3c 	bl	42c010 <_Balloc>
  42c398:	2c00      	cmp	r4, #0
  42c39a:	f100 0314 	add.w	r3, r0, #20
  42c39e:	dd06      	ble.n	42c3ae <__lshift+0x46>
  42c3a0:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  42c3a4:	2100      	movs	r1, #0
  42c3a6:	f843 1b04 	str.w	r1, [r3], #4
  42c3aa:	429a      	cmp	r2, r3
  42c3ac:	d1fb      	bne.n	42c3a6 <__lshift+0x3e>
  42c3ae:	6934      	ldr	r4, [r6, #16]
  42c3b0:	f106 0114 	add.w	r1, r6, #20
  42c3b4:	f019 091f 	ands.w	r9, r9, #31
  42c3b8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  42c3bc:	d01d      	beq.n	42c3fa <__lshift+0x92>
  42c3be:	f1c9 0c20 	rsb	ip, r9, #32
  42c3c2:	2200      	movs	r2, #0
  42c3c4:	680c      	ldr	r4, [r1, #0]
  42c3c6:	fa04 f409 	lsl.w	r4, r4, r9
  42c3ca:	4314      	orrs	r4, r2
  42c3cc:	f843 4b04 	str.w	r4, [r3], #4
  42c3d0:	f851 2b04 	ldr.w	r2, [r1], #4
  42c3d4:	458e      	cmp	lr, r1
  42c3d6:	fa22 f20c 	lsr.w	r2, r2, ip
  42c3da:	d8f3      	bhi.n	42c3c4 <__lshift+0x5c>
  42c3dc:	601a      	str	r2, [r3, #0]
  42c3de:	b10a      	cbz	r2, 42c3e4 <__lshift+0x7c>
  42c3e0:	f108 0502 	add.w	r5, r8, #2
  42c3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  42c3e6:	6872      	ldr	r2, [r6, #4]
  42c3e8:	3d01      	subs	r5, #1
  42c3ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  42c3ee:	6105      	str	r5, [r0, #16]
  42c3f0:	6031      	str	r1, [r6, #0]
  42c3f2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  42c3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42c3fa:	3b04      	subs	r3, #4
  42c3fc:	f851 2b04 	ldr.w	r2, [r1], #4
  42c400:	f843 2f04 	str.w	r2, [r3, #4]!
  42c404:	458e      	cmp	lr, r1
  42c406:	d8f9      	bhi.n	42c3fc <__lshift+0x94>
  42c408:	e7ec      	b.n	42c3e4 <__lshift+0x7c>
  42c40a:	bf00      	nop

0042c40c <__mcmp>:
  42c40c:	b430      	push	{r4, r5}
  42c40e:	690b      	ldr	r3, [r1, #16]
  42c410:	4605      	mov	r5, r0
  42c412:	6900      	ldr	r0, [r0, #16]
  42c414:	1ac0      	subs	r0, r0, r3
  42c416:	d10f      	bne.n	42c438 <__mcmp+0x2c>
  42c418:	009b      	lsls	r3, r3, #2
  42c41a:	3514      	adds	r5, #20
  42c41c:	3114      	adds	r1, #20
  42c41e:	4419      	add	r1, r3
  42c420:	442b      	add	r3, r5
  42c422:	e001      	b.n	42c428 <__mcmp+0x1c>
  42c424:	429d      	cmp	r5, r3
  42c426:	d207      	bcs.n	42c438 <__mcmp+0x2c>
  42c428:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  42c42c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  42c430:	4294      	cmp	r4, r2
  42c432:	d0f7      	beq.n	42c424 <__mcmp+0x18>
  42c434:	d302      	bcc.n	42c43c <__mcmp+0x30>
  42c436:	2001      	movs	r0, #1
  42c438:	bc30      	pop	{r4, r5}
  42c43a:	4770      	bx	lr
  42c43c:	f04f 30ff 	mov.w	r0, #4294967295
  42c440:	e7fa      	b.n	42c438 <__mcmp+0x2c>
  42c442:	bf00      	nop

0042c444 <__mdiff>:
  42c444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42c448:	690f      	ldr	r7, [r1, #16]
  42c44a:	460e      	mov	r6, r1
  42c44c:	6911      	ldr	r1, [r2, #16]
  42c44e:	1a7f      	subs	r7, r7, r1
  42c450:	2f00      	cmp	r7, #0
  42c452:	4690      	mov	r8, r2
  42c454:	d117      	bne.n	42c486 <__mdiff+0x42>
  42c456:	0089      	lsls	r1, r1, #2
  42c458:	f106 0514 	add.w	r5, r6, #20
  42c45c:	f102 0e14 	add.w	lr, r2, #20
  42c460:	186b      	adds	r3, r5, r1
  42c462:	4471      	add	r1, lr
  42c464:	e001      	b.n	42c46a <__mdiff+0x26>
  42c466:	429d      	cmp	r5, r3
  42c468:	d25c      	bcs.n	42c524 <__mdiff+0xe0>
  42c46a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  42c46e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  42c472:	42a2      	cmp	r2, r4
  42c474:	d0f7      	beq.n	42c466 <__mdiff+0x22>
  42c476:	d25e      	bcs.n	42c536 <__mdiff+0xf2>
  42c478:	4633      	mov	r3, r6
  42c47a:	462c      	mov	r4, r5
  42c47c:	4646      	mov	r6, r8
  42c47e:	4675      	mov	r5, lr
  42c480:	4698      	mov	r8, r3
  42c482:	2701      	movs	r7, #1
  42c484:	e005      	b.n	42c492 <__mdiff+0x4e>
  42c486:	db58      	blt.n	42c53a <__mdiff+0xf6>
  42c488:	f106 0514 	add.w	r5, r6, #20
  42c48c:	f108 0414 	add.w	r4, r8, #20
  42c490:	2700      	movs	r7, #0
  42c492:	6871      	ldr	r1, [r6, #4]
  42c494:	f7ff fdbc 	bl	42c010 <_Balloc>
  42c498:	f8d8 3010 	ldr.w	r3, [r8, #16]
  42c49c:	6936      	ldr	r6, [r6, #16]
  42c49e:	60c7      	str	r7, [r0, #12]
  42c4a0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  42c4a4:	46a6      	mov	lr, r4
  42c4a6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  42c4aa:	f100 0414 	add.w	r4, r0, #20
  42c4ae:	2300      	movs	r3, #0
  42c4b0:	f85e 1b04 	ldr.w	r1, [lr], #4
  42c4b4:	f855 8b04 	ldr.w	r8, [r5], #4
  42c4b8:	b28a      	uxth	r2, r1
  42c4ba:	fa13 f388 	uxtah	r3, r3, r8
  42c4be:	0c09      	lsrs	r1, r1, #16
  42c4c0:	1a9a      	subs	r2, r3, r2
  42c4c2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  42c4c6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  42c4ca:	b292      	uxth	r2, r2
  42c4cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  42c4d0:	45f4      	cmp	ip, lr
  42c4d2:	f844 2b04 	str.w	r2, [r4], #4
  42c4d6:	ea4f 4323 	mov.w	r3, r3, asr #16
  42c4da:	d8e9      	bhi.n	42c4b0 <__mdiff+0x6c>
  42c4dc:	42af      	cmp	r7, r5
  42c4de:	d917      	bls.n	42c510 <__mdiff+0xcc>
  42c4e0:	46a4      	mov	ip, r4
  42c4e2:	46ae      	mov	lr, r5
  42c4e4:	f85e 2b04 	ldr.w	r2, [lr], #4
  42c4e8:	fa13 f382 	uxtah	r3, r3, r2
  42c4ec:	1419      	asrs	r1, r3, #16
  42c4ee:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  42c4f2:	b29b      	uxth	r3, r3
  42c4f4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  42c4f8:	4577      	cmp	r7, lr
  42c4fa:	f84c 2b04 	str.w	r2, [ip], #4
  42c4fe:	ea4f 4321 	mov.w	r3, r1, asr #16
  42c502:	d8ef      	bhi.n	42c4e4 <__mdiff+0xa0>
  42c504:	43ed      	mvns	r5, r5
  42c506:	442f      	add	r7, r5
  42c508:	f027 0703 	bic.w	r7, r7, #3
  42c50c:	3704      	adds	r7, #4
  42c50e:	443c      	add	r4, r7
  42c510:	3c04      	subs	r4, #4
  42c512:	b922      	cbnz	r2, 42c51e <__mdiff+0xda>
  42c514:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  42c518:	3e01      	subs	r6, #1
  42c51a:	2b00      	cmp	r3, #0
  42c51c:	d0fa      	beq.n	42c514 <__mdiff+0xd0>
  42c51e:	6106      	str	r6, [r0, #16]
  42c520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42c524:	2100      	movs	r1, #0
  42c526:	f7ff fd73 	bl	42c010 <_Balloc>
  42c52a:	2201      	movs	r2, #1
  42c52c:	2300      	movs	r3, #0
  42c52e:	6102      	str	r2, [r0, #16]
  42c530:	6143      	str	r3, [r0, #20]
  42c532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42c536:	4674      	mov	r4, lr
  42c538:	e7ab      	b.n	42c492 <__mdiff+0x4e>
  42c53a:	4633      	mov	r3, r6
  42c53c:	f106 0414 	add.w	r4, r6, #20
  42c540:	f102 0514 	add.w	r5, r2, #20
  42c544:	4616      	mov	r6, r2
  42c546:	2701      	movs	r7, #1
  42c548:	4698      	mov	r8, r3
  42c54a:	e7a2      	b.n	42c492 <__mdiff+0x4e>

0042c54c <__d2b>:
  42c54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42c550:	b082      	sub	sp, #8
  42c552:	2101      	movs	r1, #1
  42c554:	461c      	mov	r4, r3
  42c556:	f3c3 570a 	ubfx	r7, r3, #20, #11
  42c55a:	4615      	mov	r5, r2
  42c55c:	9e08      	ldr	r6, [sp, #32]
  42c55e:	f7ff fd57 	bl	42c010 <_Balloc>
  42c562:	f3c4 0413 	ubfx	r4, r4, #0, #20
  42c566:	4680      	mov	r8, r0
  42c568:	b10f      	cbz	r7, 42c56e <__d2b+0x22>
  42c56a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  42c56e:	9401      	str	r4, [sp, #4]
  42c570:	b31d      	cbz	r5, 42c5ba <__d2b+0x6e>
  42c572:	a802      	add	r0, sp, #8
  42c574:	f840 5d08 	str.w	r5, [r0, #-8]!
  42c578:	f7ff fdda 	bl	42c130 <__lo0bits>
  42c57c:	2800      	cmp	r0, #0
  42c57e:	d134      	bne.n	42c5ea <__d2b+0x9e>
  42c580:	e89d 000c 	ldmia.w	sp, {r2, r3}
  42c584:	f8c8 2014 	str.w	r2, [r8, #20]
  42c588:	2b00      	cmp	r3, #0
  42c58a:	bf0c      	ite	eq
  42c58c:	2101      	moveq	r1, #1
  42c58e:	2102      	movne	r1, #2
  42c590:	f8c8 3018 	str.w	r3, [r8, #24]
  42c594:	f8c8 1010 	str.w	r1, [r8, #16]
  42c598:	b9df      	cbnz	r7, 42c5d2 <__d2b+0x86>
  42c59a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  42c59e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  42c5a2:	6030      	str	r0, [r6, #0]
  42c5a4:	6918      	ldr	r0, [r3, #16]
  42c5a6:	f7ff fda3 	bl	42c0f0 <__hi0bits>
  42c5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42c5ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  42c5b0:	6018      	str	r0, [r3, #0]
  42c5b2:	4640      	mov	r0, r8
  42c5b4:	b002      	add	sp, #8
  42c5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42c5ba:	a801      	add	r0, sp, #4
  42c5bc:	f7ff fdb8 	bl	42c130 <__lo0bits>
  42c5c0:	9b01      	ldr	r3, [sp, #4]
  42c5c2:	f8c8 3014 	str.w	r3, [r8, #20]
  42c5c6:	2101      	movs	r1, #1
  42c5c8:	3020      	adds	r0, #32
  42c5ca:	f8c8 1010 	str.w	r1, [r8, #16]
  42c5ce:	2f00      	cmp	r7, #0
  42c5d0:	d0e3      	beq.n	42c59a <__d2b+0x4e>
  42c5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42c5d4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  42c5d8:	4407      	add	r7, r0
  42c5da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  42c5de:	6037      	str	r7, [r6, #0]
  42c5e0:	6018      	str	r0, [r3, #0]
  42c5e2:	4640      	mov	r0, r8
  42c5e4:	b002      	add	sp, #8
  42c5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42c5ea:	e89d 000a 	ldmia.w	sp, {r1, r3}
  42c5ee:	f1c0 0220 	rsb	r2, r0, #32
  42c5f2:	fa03 f202 	lsl.w	r2, r3, r2
  42c5f6:	430a      	orrs	r2, r1
  42c5f8:	40c3      	lsrs	r3, r0
  42c5fa:	9301      	str	r3, [sp, #4]
  42c5fc:	f8c8 2014 	str.w	r2, [r8, #20]
  42c600:	e7c2      	b.n	42c588 <__d2b+0x3c>
  42c602:	bf00      	nop

0042c604 <_realloc_r>:
  42c604:	2900      	cmp	r1, #0
  42c606:	f000 8095 	beq.w	42c734 <_realloc_r+0x130>
  42c60a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42c60e:	460d      	mov	r5, r1
  42c610:	4616      	mov	r6, r2
  42c612:	b083      	sub	sp, #12
  42c614:	4680      	mov	r8, r0
  42c616:	f106 070b 	add.w	r7, r6, #11
  42c61a:	f7ff fced 	bl	42bff8 <__malloc_lock>
  42c61e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  42c622:	2f16      	cmp	r7, #22
  42c624:	f02e 0403 	bic.w	r4, lr, #3
  42c628:	f1a5 0908 	sub.w	r9, r5, #8
  42c62c:	d83c      	bhi.n	42c6a8 <_realloc_r+0xa4>
  42c62e:	2210      	movs	r2, #16
  42c630:	4617      	mov	r7, r2
  42c632:	42be      	cmp	r6, r7
  42c634:	d83d      	bhi.n	42c6b2 <_realloc_r+0xae>
  42c636:	4294      	cmp	r4, r2
  42c638:	da43      	bge.n	42c6c2 <_realloc_r+0xbe>
  42c63a:	4bc4      	ldr	r3, [pc, #784]	; (42c94c <_realloc_r+0x348>)
  42c63c:	6899      	ldr	r1, [r3, #8]
  42c63e:	eb09 0004 	add.w	r0, r9, r4
  42c642:	4288      	cmp	r0, r1
  42c644:	f000 80b4 	beq.w	42c7b0 <_realloc_r+0x1ac>
  42c648:	6843      	ldr	r3, [r0, #4]
  42c64a:	f023 0101 	bic.w	r1, r3, #1
  42c64e:	4401      	add	r1, r0
  42c650:	6849      	ldr	r1, [r1, #4]
  42c652:	07c9      	lsls	r1, r1, #31
  42c654:	d54c      	bpl.n	42c6f0 <_realloc_r+0xec>
  42c656:	f01e 0f01 	tst.w	lr, #1
  42c65a:	f000 809b 	beq.w	42c794 <_realloc_r+0x190>
  42c65e:	4631      	mov	r1, r6
  42c660:	4640      	mov	r0, r8
  42c662:	f7ff f94b 	bl	42b8fc <_malloc_r>
  42c666:	4606      	mov	r6, r0
  42c668:	2800      	cmp	r0, #0
  42c66a:	d03a      	beq.n	42c6e2 <_realloc_r+0xde>
  42c66c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  42c670:	f023 0301 	bic.w	r3, r3, #1
  42c674:	444b      	add	r3, r9
  42c676:	f1a0 0208 	sub.w	r2, r0, #8
  42c67a:	429a      	cmp	r2, r3
  42c67c:	f000 8121 	beq.w	42c8c2 <_realloc_r+0x2be>
  42c680:	1f22      	subs	r2, r4, #4
  42c682:	2a24      	cmp	r2, #36	; 0x24
  42c684:	f200 8107 	bhi.w	42c896 <_realloc_r+0x292>
  42c688:	2a13      	cmp	r2, #19
  42c68a:	f200 80db 	bhi.w	42c844 <_realloc_r+0x240>
  42c68e:	4603      	mov	r3, r0
  42c690:	462a      	mov	r2, r5
  42c692:	6811      	ldr	r1, [r2, #0]
  42c694:	6019      	str	r1, [r3, #0]
  42c696:	6851      	ldr	r1, [r2, #4]
  42c698:	6059      	str	r1, [r3, #4]
  42c69a:	6892      	ldr	r2, [r2, #8]
  42c69c:	609a      	str	r2, [r3, #8]
  42c69e:	4629      	mov	r1, r5
  42c6a0:	4640      	mov	r0, r8
  42c6a2:	f7fe fcad 	bl	42b000 <_free_r>
  42c6a6:	e01c      	b.n	42c6e2 <_realloc_r+0xde>
  42c6a8:	f027 0707 	bic.w	r7, r7, #7
  42c6ac:	2f00      	cmp	r7, #0
  42c6ae:	463a      	mov	r2, r7
  42c6b0:	dabf      	bge.n	42c632 <_realloc_r+0x2e>
  42c6b2:	2600      	movs	r6, #0
  42c6b4:	230c      	movs	r3, #12
  42c6b6:	4630      	mov	r0, r6
  42c6b8:	f8c8 3000 	str.w	r3, [r8]
  42c6bc:	b003      	add	sp, #12
  42c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42c6c2:	462e      	mov	r6, r5
  42c6c4:	1be3      	subs	r3, r4, r7
  42c6c6:	2b0f      	cmp	r3, #15
  42c6c8:	d81e      	bhi.n	42c708 <_realloc_r+0x104>
  42c6ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
  42c6ce:	f003 0301 	and.w	r3, r3, #1
  42c6d2:	4323      	orrs	r3, r4
  42c6d4:	444c      	add	r4, r9
  42c6d6:	f8c9 3004 	str.w	r3, [r9, #4]
  42c6da:	6863      	ldr	r3, [r4, #4]
  42c6dc:	f043 0301 	orr.w	r3, r3, #1
  42c6e0:	6063      	str	r3, [r4, #4]
  42c6e2:	4640      	mov	r0, r8
  42c6e4:	f7ff fc8e 	bl	42c004 <__malloc_unlock>
  42c6e8:	4630      	mov	r0, r6
  42c6ea:	b003      	add	sp, #12
  42c6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42c6f0:	f023 0303 	bic.w	r3, r3, #3
  42c6f4:	18e1      	adds	r1, r4, r3
  42c6f6:	4291      	cmp	r1, r2
  42c6f8:	db1f      	blt.n	42c73a <_realloc_r+0x136>
  42c6fa:	68c3      	ldr	r3, [r0, #12]
  42c6fc:	6882      	ldr	r2, [r0, #8]
  42c6fe:	462e      	mov	r6, r5
  42c700:	60d3      	str	r3, [r2, #12]
  42c702:	460c      	mov	r4, r1
  42c704:	609a      	str	r2, [r3, #8]
  42c706:	e7dd      	b.n	42c6c4 <_realloc_r+0xc0>
  42c708:	f8d9 2004 	ldr.w	r2, [r9, #4]
  42c70c:	eb09 0107 	add.w	r1, r9, r7
  42c710:	f002 0201 	and.w	r2, r2, #1
  42c714:	444c      	add	r4, r9
  42c716:	f043 0301 	orr.w	r3, r3, #1
  42c71a:	4317      	orrs	r7, r2
  42c71c:	f8c9 7004 	str.w	r7, [r9, #4]
  42c720:	604b      	str	r3, [r1, #4]
  42c722:	6863      	ldr	r3, [r4, #4]
  42c724:	f043 0301 	orr.w	r3, r3, #1
  42c728:	3108      	adds	r1, #8
  42c72a:	6063      	str	r3, [r4, #4]
  42c72c:	4640      	mov	r0, r8
  42c72e:	f7fe fc67 	bl	42b000 <_free_r>
  42c732:	e7d6      	b.n	42c6e2 <_realloc_r+0xde>
  42c734:	4611      	mov	r1, r2
  42c736:	f7ff b8e1 	b.w	42b8fc <_malloc_r>
  42c73a:	f01e 0f01 	tst.w	lr, #1
  42c73e:	d18e      	bne.n	42c65e <_realloc_r+0x5a>
  42c740:	f855 1c08 	ldr.w	r1, [r5, #-8]
  42c744:	eba9 0a01 	sub.w	sl, r9, r1
  42c748:	f8da 1004 	ldr.w	r1, [sl, #4]
  42c74c:	f021 0103 	bic.w	r1, r1, #3
  42c750:	440b      	add	r3, r1
  42c752:	4423      	add	r3, r4
  42c754:	4293      	cmp	r3, r2
  42c756:	db25      	blt.n	42c7a4 <_realloc_r+0x1a0>
  42c758:	68c2      	ldr	r2, [r0, #12]
  42c75a:	6881      	ldr	r1, [r0, #8]
  42c75c:	4656      	mov	r6, sl
  42c75e:	60ca      	str	r2, [r1, #12]
  42c760:	6091      	str	r1, [r2, #8]
  42c762:	f8da 100c 	ldr.w	r1, [sl, #12]
  42c766:	f856 0f08 	ldr.w	r0, [r6, #8]!
  42c76a:	1f22      	subs	r2, r4, #4
  42c76c:	2a24      	cmp	r2, #36	; 0x24
  42c76e:	60c1      	str	r1, [r0, #12]
  42c770:	6088      	str	r0, [r1, #8]
  42c772:	f200 8094 	bhi.w	42c89e <_realloc_r+0x29a>
  42c776:	2a13      	cmp	r2, #19
  42c778:	d96f      	bls.n	42c85a <_realloc_r+0x256>
  42c77a:	6829      	ldr	r1, [r5, #0]
  42c77c:	f8ca 1008 	str.w	r1, [sl, #8]
  42c780:	6869      	ldr	r1, [r5, #4]
  42c782:	f8ca 100c 	str.w	r1, [sl, #12]
  42c786:	2a1b      	cmp	r2, #27
  42c788:	f200 80a2 	bhi.w	42c8d0 <_realloc_r+0x2cc>
  42c78c:	3508      	adds	r5, #8
  42c78e:	f10a 0210 	add.w	r2, sl, #16
  42c792:	e063      	b.n	42c85c <_realloc_r+0x258>
  42c794:	f855 3c08 	ldr.w	r3, [r5, #-8]
  42c798:	eba9 0a03 	sub.w	sl, r9, r3
  42c79c:	f8da 1004 	ldr.w	r1, [sl, #4]
  42c7a0:	f021 0103 	bic.w	r1, r1, #3
  42c7a4:	1863      	adds	r3, r4, r1
  42c7a6:	4293      	cmp	r3, r2
  42c7a8:	f6ff af59 	blt.w	42c65e <_realloc_r+0x5a>
  42c7ac:	4656      	mov	r6, sl
  42c7ae:	e7d8      	b.n	42c762 <_realloc_r+0x15e>
  42c7b0:	6841      	ldr	r1, [r0, #4]
  42c7b2:	f021 0b03 	bic.w	fp, r1, #3
  42c7b6:	44a3      	add	fp, r4
  42c7b8:	f107 0010 	add.w	r0, r7, #16
  42c7bc:	4583      	cmp	fp, r0
  42c7be:	da56      	bge.n	42c86e <_realloc_r+0x26a>
  42c7c0:	f01e 0f01 	tst.w	lr, #1
  42c7c4:	f47f af4b 	bne.w	42c65e <_realloc_r+0x5a>
  42c7c8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  42c7cc:	eba9 0a01 	sub.w	sl, r9, r1
  42c7d0:	f8da 1004 	ldr.w	r1, [sl, #4]
  42c7d4:	f021 0103 	bic.w	r1, r1, #3
  42c7d8:	448b      	add	fp, r1
  42c7da:	4558      	cmp	r0, fp
  42c7dc:	dce2      	bgt.n	42c7a4 <_realloc_r+0x1a0>
  42c7de:	4656      	mov	r6, sl
  42c7e0:	f8da 100c 	ldr.w	r1, [sl, #12]
  42c7e4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  42c7e8:	1f22      	subs	r2, r4, #4
  42c7ea:	2a24      	cmp	r2, #36	; 0x24
  42c7ec:	60c1      	str	r1, [r0, #12]
  42c7ee:	6088      	str	r0, [r1, #8]
  42c7f0:	f200 808f 	bhi.w	42c912 <_realloc_r+0x30e>
  42c7f4:	2a13      	cmp	r2, #19
  42c7f6:	f240 808a 	bls.w	42c90e <_realloc_r+0x30a>
  42c7fa:	6829      	ldr	r1, [r5, #0]
  42c7fc:	f8ca 1008 	str.w	r1, [sl, #8]
  42c800:	6869      	ldr	r1, [r5, #4]
  42c802:	f8ca 100c 	str.w	r1, [sl, #12]
  42c806:	2a1b      	cmp	r2, #27
  42c808:	f200 808a 	bhi.w	42c920 <_realloc_r+0x31c>
  42c80c:	3508      	adds	r5, #8
  42c80e:	f10a 0210 	add.w	r2, sl, #16
  42c812:	6829      	ldr	r1, [r5, #0]
  42c814:	6011      	str	r1, [r2, #0]
  42c816:	6869      	ldr	r1, [r5, #4]
  42c818:	6051      	str	r1, [r2, #4]
  42c81a:	68a9      	ldr	r1, [r5, #8]
  42c81c:	6091      	str	r1, [r2, #8]
  42c81e:	eb0a 0107 	add.w	r1, sl, r7
  42c822:	ebab 0207 	sub.w	r2, fp, r7
  42c826:	f042 0201 	orr.w	r2, r2, #1
  42c82a:	6099      	str	r1, [r3, #8]
  42c82c:	604a      	str	r2, [r1, #4]
  42c82e:	f8da 3004 	ldr.w	r3, [sl, #4]
  42c832:	f003 0301 	and.w	r3, r3, #1
  42c836:	431f      	orrs	r7, r3
  42c838:	4640      	mov	r0, r8
  42c83a:	f8ca 7004 	str.w	r7, [sl, #4]
  42c83e:	f7ff fbe1 	bl	42c004 <__malloc_unlock>
  42c842:	e751      	b.n	42c6e8 <_realloc_r+0xe4>
  42c844:	682b      	ldr	r3, [r5, #0]
  42c846:	6003      	str	r3, [r0, #0]
  42c848:	686b      	ldr	r3, [r5, #4]
  42c84a:	6043      	str	r3, [r0, #4]
  42c84c:	2a1b      	cmp	r2, #27
  42c84e:	d82d      	bhi.n	42c8ac <_realloc_r+0x2a8>
  42c850:	f100 0308 	add.w	r3, r0, #8
  42c854:	f105 0208 	add.w	r2, r5, #8
  42c858:	e71b      	b.n	42c692 <_realloc_r+0x8e>
  42c85a:	4632      	mov	r2, r6
  42c85c:	6829      	ldr	r1, [r5, #0]
  42c85e:	6011      	str	r1, [r2, #0]
  42c860:	6869      	ldr	r1, [r5, #4]
  42c862:	6051      	str	r1, [r2, #4]
  42c864:	68a9      	ldr	r1, [r5, #8]
  42c866:	6091      	str	r1, [r2, #8]
  42c868:	461c      	mov	r4, r3
  42c86a:	46d1      	mov	r9, sl
  42c86c:	e72a      	b.n	42c6c4 <_realloc_r+0xc0>
  42c86e:	eb09 0107 	add.w	r1, r9, r7
  42c872:	ebab 0b07 	sub.w	fp, fp, r7
  42c876:	f04b 0201 	orr.w	r2, fp, #1
  42c87a:	6099      	str	r1, [r3, #8]
  42c87c:	604a      	str	r2, [r1, #4]
  42c87e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  42c882:	f003 0301 	and.w	r3, r3, #1
  42c886:	431f      	orrs	r7, r3
  42c888:	4640      	mov	r0, r8
  42c88a:	f845 7c04 	str.w	r7, [r5, #-4]
  42c88e:	f7ff fbb9 	bl	42c004 <__malloc_unlock>
  42c892:	462e      	mov	r6, r5
  42c894:	e728      	b.n	42c6e8 <_realloc_r+0xe4>
  42c896:	4629      	mov	r1, r5
  42c898:	f7ff fb4a 	bl	42bf30 <memmove>
  42c89c:	e6ff      	b.n	42c69e <_realloc_r+0x9a>
  42c89e:	4629      	mov	r1, r5
  42c8a0:	4630      	mov	r0, r6
  42c8a2:	461c      	mov	r4, r3
  42c8a4:	46d1      	mov	r9, sl
  42c8a6:	f7ff fb43 	bl	42bf30 <memmove>
  42c8aa:	e70b      	b.n	42c6c4 <_realloc_r+0xc0>
  42c8ac:	68ab      	ldr	r3, [r5, #8]
  42c8ae:	6083      	str	r3, [r0, #8]
  42c8b0:	68eb      	ldr	r3, [r5, #12]
  42c8b2:	60c3      	str	r3, [r0, #12]
  42c8b4:	2a24      	cmp	r2, #36	; 0x24
  42c8b6:	d017      	beq.n	42c8e8 <_realloc_r+0x2e4>
  42c8b8:	f100 0310 	add.w	r3, r0, #16
  42c8bc:	f105 0210 	add.w	r2, r5, #16
  42c8c0:	e6e7      	b.n	42c692 <_realloc_r+0x8e>
  42c8c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  42c8c6:	f023 0303 	bic.w	r3, r3, #3
  42c8ca:	441c      	add	r4, r3
  42c8cc:	462e      	mov	r6, r5
  42c8ce:	e6f9      	b.n	42c6c4 <_realloc_r+0xc0>
  42c8d0:	68a9      	ldr	r1, [r5, #8]
  42c8d2:	f8ca 1010 	str.w	r1, [sl, #16]
  42c8d6:	68e9      	ldr	r1, [r5, #12]
  42c8d8:	f8ca 1014 	str.w	r1, [sl, #20]
  42c8dc:	2a24      	cmp	r2, #36	; 0x24
  42c8de:	d00c      	beq.n	42c8fa <_realloc_r+0x2f6>
  42c8e0:	3510      	adds	r5, #16
  42c8e2:	f10a 0218 	add.w	r2, sl, #24
  42c8e6:	e7b9      	b.n	42c85c <_realloc_r+0x258>
  42c8e8:	692b      	ldr	r3, [r5, #16]
  42c8ea:	6103      	str	r3, [r0, #16]
  42c8ec:	696b      	ldr	r3, [r5, #20]
  42c8ee:	6143      	str	r3, [r0, #20]
  42c8f0:	f105 0218 	add.w	r2, r5, #24
  42c8f4:	f100 0318 	add.w	r3, r0, #24
  42c8f8:	e6cb      	b.n	42c692 <_realloc_r+0x8e>
  42c8fa:	692a      	ldr	r2, [r5, #16]
  42c8fc:	f8ca 2018 	str.w	r2, [sl, #24]
  42c900:	696a      	ldr	r2, [r5, #20]
  42c902:	f8ca 201c 	str.w	r2, [sl, #28]
  42c906:	3518      	adds	r5, #24
  42c908:	f10a 0220 	add.w	r2, sl, #32
  42c90c:	e7a6      	b.n	42c85c <_realloc_r+0x258>
  42c90e:	4632      	mov	r2, r6
  42c910:	e77f      	b.n	42c812 <_realloc_r+0x20e>
  42c912:	4629      	mov	r1, r5
  42c914:	4630      	mov	r0, r6
  42c916:	9301      	str	r3, [sp, #4]
  42c918:	f7ff fb0a 	bl	42bf30 <memmove>
  42c91c:	9b01      	ldr	r3, [sp, #4]
  42c91e:	e77e      	b.n	42c81e <_realloc_r+0x21a>
  42c920:	68a9      	ldr	r1, [r5, #8]
  42c922:	f8ca 1010 	str.w	r1, [sl, #16]
  42c926:	68e9      	ldr	r1, [r5, #12]
  42c928:	f8ca 1014 	str.w	r1, [sl, #20]
  42c92c:	2a24      	cmp	r2, #36	; 0x24
  42c92e:	d003      	beq.n	42c938 <_realloc_r+0x334>
  42c930:	3510      	adds	r5, #16
  42c932:	f10a 0218 	add.w	r2, sl, #24
  42c936:	e76c      	b.n	42c812 <_realloc_r+0x20e>
  42c938:	692a      	ldr	r2, [r5, #16]
  42c93a:	f8ca 2018 	str.w	r2, [sl, #24]
  42c93e:	696a      	ldr	r2, [r5, #20]
  42c940:	f8ca 201c 	str.w	r2, [sl, #28]
  42c944:	3518      	adds	r5, #24
  42c946:	f10a 0220 	add.w	r2, sl, #32
  42c94a:	e762      	b.n	42c812 <_realloc_r+0x20e>
  42c94c:	200006b0 	.word	0x200006b0

0042c950 <_sbrk_r>:
  42c950:	b538      	push	{r3, r4, r5, lr}
  42c952:	4c07      	ldr	r4, [pc, #28]	; (42c970 <_sbrk_r+0x20>)
  42c954:	2300      	movs	r3, #0
  42c956:	4605      	mov	r5, r0
  42c958:	4608      	mov	r0, r1
  42c95a:	6023      	str	r3, [r4, #0]
  42c95c:	f7f9 fc1a 	bl	426194 <_sbrk>
  42c960:	1c43      	adds	r3, r0, #1
  42c962:	d000      	beq.n	42c966 <_sbrk_r+0x16>
  42c964:	bd38      	pop	{r3, r4, r5, pc}
  42c966:	6823      	ldr	r3, [r4, #0]
  42c968:	2b00      	cmp	r3, #0
  42c96a:	d0fb      	beq.n	42c964 <_sbrk_r+0x14>
  42c96c:	602b      	str	r3, [r5, #0]
  42c96e:	bd38      	pop	{r3, r4, r5, pc}
  42c970:	20001738 	.word	0x20001738

0042c974 <siscanf>:
  42c974:	b40e      	push	{r1, r2, r3}
  42c976:	b5f0      	push	{r4, r5, r6, r7, lr}
  42c978:	b09c      	sub	sp, #112	; 0x70
  42c97a:	ac21      	add	r4, sp, #132	; 0x84
  42c97c:	f44f 7201 	mov.w	r2, #516	; 0x204
  42c980:	f854 6b04 	ldr.w	r6, [r4], #4
  42c984:	f8ad 2014 	strh.w	r2, [sp, #20]
  42c988:	9002      	str	r0, [sp, #8]
  42c98a:	9006      	str	r0, [sp, #24]
  42c98c:	f000 fa38 	bl	42ce00 <strlen>
  42c990:	4b0c      	ldr	r3, [pc, #48]	; (42c9c4 <siscanf+0x50>)
  42c992:	9401      	str	r4, [sp, #4]
  42c994:	4605      	mov	r5, r0
  42c996:	4632      	mov	r2, r6
  42c998:	4f0b      	ldr	r7, [pc, #44]	; (42c9c8 <siscanf+0x54>)
  42c99a:	6818      	ldr	r0, [r3, #0]
  42c99c:	9503      	str	r5, [sp, #12]
  42c99e:	4623      	mov	r3, r4
  42c9a0:	f64f 76ff 	movw	r6, #65535	; 0xffff
  42c9a4:	2400      	movs	r4, #0
  42c9a6:	a902      	add	r1, sp, #8
  42c9a8:	9507      	str	r5, [sp, #28]
  42c9aa:	970a      	str	r7, [sp, #40]	; 0x28
  42c9ac:	940e      	str	r4, [sp, #56]	; 0x38
  42c9ae:	9413      	str	r4, [sp, #76]	; 0x4c
  42c9b0:	f8ad 6016 	strh.w	r6, [sp, #22]
  42c9b4:	f000 fccc 	bl	42d350 <__ssvfiscanf_r>
  42c9b8:	b01c      	add	sp, #112	; 0x70
  42c9ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  42c9be:	b003      	add	sp, #12
  42c9c0:	4770      	bx	lr
  42c9c2:	bf00      	nop
  42c9c4:	200000c8 	.word	0x200000c8
  42c9c8:	0042c9f1 	.word	0x0042c9f1

0042c9cc <__sread>:
  42c9cc:	b510      	push	{r4, lr}
  42c9ce:	460c      	mov	r4, r1
  42c9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42c9d4:	f001 fbf8 	bl	42e1c8 <_read_r>
  42c9d8:	2800      	cmp	r0, #0
  42c9da:	db03      	blt.n	42c9e4 <__sread+0x18>
  42c9dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  42c9de:	4403      	add	r3, r0
  42c9e0:	6523      	str	r3, [r4, #80]	; 0x50
  42c9e2:	bd10      	pop	{r4, pc}
  42c9e4:	89a3      	ldrh	r3, [r4, #12]
  42c9e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  42c9ea:	81a3      	strh	r3, [r4, #12]
  42c9ec:	bd10      	pop	{r4, pc}
  42c9ee:	bf00      	nop

0042c9f0 <__seofread>:
  42c9f0:	2000      	movs	r0, #0
  42c9f2:	4770      	bx	lr

0042c9f4 <__swrite>:
  42c9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42c9f8:	4616      	mov	r6, r2
  42c9fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  42c9fe:	461f      	mov	r7, r3
  42ca00:	05d3      	lsls	r3, r2, #23
  42ca02:	460c      	mov	r4, r1
  42ca04:	4605      	mov	r5, r0
  42ca06:	d507      	bpl.n	42ca18 <__swrite+0x24>
  42ca08:	2200      	movs	r2, #0
  42ca0a:	2302      	movs	r3, #2
  42ca0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42ca10:	f001 fb96 	bl	42e140 <_lseek_r>
  42ca14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42ca18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  42ca1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  42ca20:	81a2      	strh	r2, [r4, #12]
  42ca22:	463b      	mov	r3, r7
  42ca24:	4632      	mov	r2, r6
  42ca26:	4628      	mov	r0, r5
  42ca28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42ca2c:	f001 ba2c 	b.w	42de88 <_write_r>

0042ca30 <__sseek>:
  42ca30:	b510      	push	{r4, lr}
  42ca32:	460c      	mov	r4, r1
  42ca34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42ca38:	f001 fb82 	bl	42e140 <_lseek_r>
  42ca3c:	89a3      	ldrh	r3, [r4, #12]
  42ca3e:	1c42      	adds	r2, r0, #1
  42ca40:	bf0e      	itee	eq
  42ca42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  42ca46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  42ca4a:	6520      	strne	r0, [r4, #80]	; 0x50
  42ca4c:	81a3      	strh	r3, [r4, #12]
  42ca4e:	bd10      	pop	{r4, pc}

0042ca50 <__sclose>:
  42ca50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42ca54:	f001 bac0 	b.w	42dfd8 <_close_r>
	...
  42ca60:	eba2 0003 	sub.w	r0, r2, r3
  42ca64:	4770      	bx	lr
  42ca66:	bf00      	nop

0042ca68 <strcmp>:
  42ca68:	7802      	ldrb	r2, [r0, #0]
  42ca6a:	780b      	ldrb	r3, [r1, #0]
  42ca6c:	2a01      	cmp	r2, #1
  42ca6e:	bf28      	it	cs
  42ca70:	429a      	cmpcs	r2, r3
  42ca72:	d1f5      	bne.n	42ca60 <__sclose+0x10>
  42ca74:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  42ca78:	ea40 0401 	orr.w	r4, r0, r1
  42ca7c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  42ca80:	f06f 0c00 	mvn.w	ip, #0
  42ca84:	ea4f 7244 	mov.w	r2, r4, lsl #29
  42ca88:	b312      	cbz	r2, 42cad0 <strcmp+0x68>
  42ca8a:	ea80 0401 	eor.w	r4, r0, r1
  42ca8e:	f014 0f07 	tst.w	r4, #7
  42ca92:	d16a      	bne.n	42cb6a <strcmp+0x102>
  42ca94:	f000 0407 	and.w	r4, r0, #7
  42ca98:	f020 0007 	bic.w	r0, r0, #7
  42ca9c:	f004 0503 	and.w	r5, r4, #3
  42caa0:	f021 0107 	bic.w	r1, r1, #7
  42caa4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  42caa8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  42caac:	f014 0f04 	tst.w	r4, #4
  42cab0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  42cab4:	fa0c f405 	lsl.w	r4, ip, r5
  42cab8:	ea62 0204 	orn	r2, r2, r4
  42cabc:	ea66 0604 	orn	r6, r6, r4
  42cac0:	d00a      	beq.n	42cad8 <strcmp+0x70>
  42cac2:	ea63 0304 	orn	r3, r3, r4
  42cac6:	4662      	mov	r2, ip
  42cac8:	ea67 0704 	orn	r7, r7, r4
  42cacc:	4666      	mov	r6, ip
  42cace:	e003      	b.n	42cad8 <strcmp+0x70>
  42cad0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  42cad4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  42cad8:	fa82 f54c 	uadd8	r5, r2, ip
  42cadc:	ea82 0406 	eor.w	r4, r2, r6
  42cae0:	faa4 f48c 	sel	r4, r4, ip
  42cae4:	bb6c      	cbnz	r4, 42cb42 <strcmp+0xda>
  42cae6:	fa83 f54c 	uadd8	r5, r3, ip
  42caea:	ea83 0507 	eor.w	r5, r3, r7
  42caee:	faa5 f58c 	sel	r5, r5, ip
  42caf2:	b995      	cbnz	r5, 42cb1a <strcmp+0xb2>
  42caf4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  42caf8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  42cafc:	fa82 f54c 	uadd8	r5, r2, ip
  42cb00:	ea82 0406 	eor.w	r4, r2, r6
  42cb04:	faa4 f48c 	sel	r4, r4, ip
  42cb08:	fa83 f54c 	uadd8	r5, r3, ip
  42cb0c:	ea83 0507 	eor.w	r5, r3, r7
  42cb10:	faa5 f58c 	sel	r5, r5, ip
  42cb14:	4325      	orrs	r5, r4
  42cb16:	d0db      	beq.n	42cad0 <strcmp+0x68>
  42cb18:	b99c      	cbnz	r4, 42cb42 <strcmp+0xda>
  42cb1a:	ba2d      	rev	r5, r5
  42cb1c:	fab5 f485 	clz	r4, r5
  42cb20:	f024 0407 	bic.w	r4, r4, #7
  42cb24:	fa27 f104 	lsr.w	r1, r7, r4
  42cb28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  42cb2c:	fa23 f304 	lsr.w	r3, r3, r4
  42cb30:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  42cb34:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42cb38:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  42cb3c:	eba0 0001 	sub.w	r0, r0, r1
  42cb40:	4770      	bx	lr
  42cb42:	ba24      	rev	r4, r4
  42cb44:	fab4 f484 	clz	r4, r4
  42cb48:	f024 0407 	bic.w	r4, r4, #7
  42cb4c:	fa26 f104 	lsr.w	r1, r6, r4
  42cb50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  42cb54:	fa22 f204 	lsr.w	r2, r2, r4
  42cb58:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  42cb5c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42cb60:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  42cb64:	eba0 0001 	sub.w	r0, r0, r1
  42cb68:	4770      	bx	lr
  42cb6a:	f014 0f03 	tst.w	r4, #3
  42cb6e:	d13c      	bne.n	42cbea <strcmp+0x182>
  42cb70:	f010 0403 	ands.w	r4, r0, #3
  42cb74:	d128      	bne.n	42cbc8 <strcmp+0x160>
  42cb76:	f850 2b08 	ldr.w	r2, [r0], #8
  42cb7a:	f851 3b08 	ldr.w	r3, [r1], #8
  42cb7e:	fa82 f54c 	uadd8	r5, r2, ip
  42cb82:	ea82 0503 	eor.w	r5, r2, r3
  42cb86:	faa5 f58c 	sel	r5, r5, ip
  42cb8a:	b95d      	cbnz	r5, 42cba4 <strcmp+0x13c>
  42cb8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  42cb90:	f851 3c04 	ldr.w	r3, [r1, #-4]
  42cb94:	fa82 f54c 	uadd8	r5, r2, ip
  42cb98:	ea82 0503 	eor.w	r5, r2, r3
  42cb9c:	faa5 f58c 	sel	r5, r5, ip
  42cba0:	2d00      	cmp	r5, #0
  42cba2:	d0e8      	beq.n	42cb76 <strcmp+0x10e>
  42cba4:	ba2d      	rev	r5, r5
  42cba6:	fab5 f485 	clz	r4, r5
  42cbaa:	f024 0407 	bic.w	r4, r4, #7
  42cbae:	fa23 f104 	lsr.w	r1, r3, r4
  42cbb2:	fa22 f204 	lsr.w	r2, r2, r4
  42cbb6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  42cbba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42cbbe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  42cbc2:	eba0 0001 	sub.w	r0, r0, r1
  42cbc6:	4770      	bx	lr
  42cbc8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  42cbcc:	f020 0003 	bic.w	r0, r0, #3
  42cbd0:	f850 2b08 	ldr.w	r2, [r0], #8
  42cbd4:	f021 0103 	bic.w	r1, r1, #3
  42cbd8:	f851 3b08 	ldr.w	r3, [r1], #8
  42cbdc:	fa0c f404 	lsl.w	r4, ip, r4
  42cbe0:	ea62 0204 	orn	r2, r2, r4
  42cbe4:	ea63 0304 	orn	r3, r3, r4
  42cbe8:	e7c9      	b.n	42cb7e <strcmp+0x116>
  42cbea:	f010 0403 	ands.w	r4, r0, #3
  42cbee:	d01a      	beq.n	42cc26 <strcmp+0x1be>
  42cbf0:	eba1 0104 	sub.w	r1, r1, r4
  42cbf4:	f020 0003 	bic.w	r0, r0, #3
  42cbf8:	07e4      	lsls	r4, r4, #31
  42cbfa:	f850 2b04 	ldr.w	r2, [r0], #4
  42cbfe:	d006      	beq.n	42cc0e <strcmp+0x1a6>
  42cc00:	d20f      	bcs.n	42cc22 <strcmp+0x1ba>
  42cc02:	788b      	ldrb	r3, [r1, #2]
  42cc04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  42cc08:	1ae4      	subs	r4, r4, r3
  42cc0a:	d106      	bne.n	42cc1a <strcmp+0x1b2>
  42cc0c:	b12b      	cbz	r3, 42cc1a <strcmp+0x1b2>
  42cc0e:	78cb      	ldrb	r3, [r1, #3]
  42cc10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  42cc14:	1ae4      	subs	r4, r4, r3
  42cc16:	d100      	bne.n	42cc1a <strcmp+0x1b2>
  42cc18:	b91b      	cbnz	r3, 42cc22 <strcmp+0x1ba>
  42cc1a:	4620      	mov	r0, r4
  42cc1c:	f85d 4b10 	ldr.w	r4, [sp], #16
  42cc20:	4770      	bx	lr
  42cc22:	f101 0104 	add.w	r1, r1, #4
  42cc26:	f850 2b04 	ldr.w	r2, [r0], #4
  42cc2a:	07cc      	lsls	r4, r1, #31
  42cc2c:	f021 0103 	bic.w	r1, r1, #3
  42cc30:	f851 3b04 	ldr.w	r3, [r1], #4
  42cc34:	d848      	bhi.n	42ccc8 <strcmp+0x260>
  42cc36:	d224      	bcs.n	42cc82 <strcmp+0x21a>
  42cc38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  42cc3c:	fa82 f54c 	uadd8	r5, r2, ip
  42cc40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  42cc44:	faa5 f58c 	sel	r5, r5, ip
  42cc48:	d10a      	bne.n	42cc60 <strcmp+0x1f8>
  42cc4a:	b965      	cbnz	r5, 42cc66 <strcmp+0x1fe>
  42cc4c:	f851 3b04 	ldr.w	r3, [r1], #4
  42cc50:	ea84 0402 	eor.w	r4, r4, r2
  42cc54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  42cc58:	d10e      	bne.n	42cc78 <strcmp+0x210>
  42cc5a:	f850 2b04 	ldr.w	r2, [r0], #4
  42cc5e:	e7eb      	b.n	42cc38 <strcmp+0x1d0>
  42cc60:	ea4f 2313 	mov.w	r3, r3, lsr #8
  42cc64:	e055      	b.n	42cd12 <strcmp+0x2aa>
  42cc66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  42cc6a:	d14d      	bne.n	42cd08 <strcmp+0x2a0>
  42cc6c:	7808      	ldrb	r0, [r1, #0]
  42cc6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  42cc72:	f1c0 0000 	rsb	r0, r0, #0
  42cc76:	4770      	bx	lr
  42cc78:	ea4f 6212 	mov.w	r2, r2, lsr #24
  42cc7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  42cc80:	e047      	b.n	42cd12 <strcmp+0x2aa>
  42cc82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  42cc86:	fa82 f54c 	uadd8	r5, r2, ip
  42cc8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  42cc8e:	faa5 f58c 	sel	r5, r5, ip
  42cc92:	d10a      	bne.n	42ccaa <strcmp+0x242>
  42cc94:	b965      	cbnz	r5, 42ccb0 <strcmp+0x248>
  42cc96:	f851 3b04 	ldr.w	r3, [r1], #4
  42cc9a:	ea84 0402 	eor.w	r4, r4, r2
  42cc9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  42cca2:	d10c      	bne.n	42ccbe <strcmp+0x256>
  42cca4:	f850 2b04 	ldr.w	r2, [r0], #4
  42cca8:	e7eb      	b.n	42cc82 <strcmp+0x21a>
  42ccaa:	ea4f 4313 	mov.w	r3, r3, lsr #16
  42ccae:	e030      	b.n	42cd12 <strcmp+0x2aa>
  42ccb0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  42ccb4:	d128      	bne.n	42cd08 <strcmp+0x2a0>
  42ccb6:	880b      	ldrh	r3, [r1, #0]
  42ccb8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  42ccbc:	e029      	b.n	42cd12 <strcmp+0x2aa>
  42ccbe:	ea4f 4212 	mov.w	r2, r2, lsr #16
  42ccc2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  42ccc6:	e024      	b.n	42cd12 <strcmp+0x2aa>
  42ccc8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  42cccc:	fa82 f54c 	uadd8	r5, r2, ip
  42ccd0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  42ccd4:	faa5 f58c 	sel	r5, r5, ip
  42ccd8:	d10a      	bne.n	42ccf0 <strcmp+0x288>
  42ccda:	b965      	cbnz	r5, 42ccf6 <strcmp+0x28e>
  42ccdc:	f851 3b04 	ldr.w	r3, [r1], #4
  42cce0:	ea84 0402 	eor.w	r4, r4, r2
  42cce4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  42cce8:	d109      	bne.n	42ccfe <strcmp+0x296>
  42ccea:	f850 2b04 	ldr.w	r2, [r0], #4
  42ccee:	e7eb      	b.n	42ccc8 <strcmp+0x260>
  42ccf0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  42ccf4:	e00d      	b.n	42cd12 <strcmp+0x2aa>
  42ccf6:	f015 0fff 	tst.w	r5, #255	; 0xff
  42ccfa:	d105      	bne.n	42cd08 <strcmp+0x2a0>
  42ccfc:	680b      	ldr	r3, [r1, #0]
  42ccfe:	ea4f 2212 	mov.w	r2, r2, lsr #8
  42cd02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  42cd06:	e004      	b.n	42cd12 <strcmp+0x2aa>
  42cd08:	f04f 0000 	mov.w	r0, #0
  42cd0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  42cd10:	4770      	bx	lr
  42cd12:	ba12      	rev	r2, r2
  42cd14:	ba1b      	rev	r3, r3
  42cd16:	fa82 f44c 	uadd8	r4, r2, ip
  42cd1a:	ea82 0403 	eor.w	r4, r2, r3
  42cd1e:	faa4 f58c 	sel	r5, r4, ip
  42cd22:	fab5 f485 	clz	r4, r5
  42cd26:	fa02 f204 	lsl.w	r2, r2, r4
  42cd2a:	fa03 f304 	lsl.w	r3, r3, r4
  42cd2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  42cd32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  42cd36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  42cd3a:	4770      	bx	lr

0042cd3c <strcpy>:
  42cd3c:	ea80 0201 	eor.w	r2, r0, r1
  42cd40:	4684      	mov	ip, r0
  42cd42:	f012 0f03 	tst.w	r2, #3
  42cd46:	d14f      	bne.n	42cde8 <strcpy+0xac>
  42cd48:	f011 0f03 	tst.w	r1, #3
  42cd4c:	d132      	bne.n	42cdb4 <strcpy+0x78>
  42cd4e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  42cd52:	f011 0f04 	tst.w	r1, #4
  42cd56:	f851 3b04 	ldr.w	r3, [r1], #4
  42cd5a:	d00b      	beq.n	42cd74 <strcpy+0x38>
  42cd5c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  42cd60:	439a      	bics	r2, r3
  42cd62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  42cd66:	bf04      	itt	eq
  42cd68:	f84c 3b04 	streq.w	r3, [ip], #4
  42cd6c:	f851 3b04 	ldreq.w	r3, [r1], #4
  42cd70:	d116      	bne.n	42cda0 <strcpy+0x64>
  42cd72:	bf00      	nop
  42cd74:	f851 4b04 	ldr.w	r4, [r1], #4
  42cd78:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  42cd7c:	439a      	bics	r2, r3
  42cd7e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  42cd82:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  42cd86:	d10b      	bne.n	42cda0 <strcpy+0x64>
  42cd88:	f84c 3b04 	str.w	r3, [ip], #4
  42cd8c:	43a2      	bics	r2, r4
  42cd8e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  42cd92:	bf04      	itt	eq
  42cd94:	f851 3b04 	ldreq.w	r3, [r1], #4
  42cd98:	f84c 4b04 	streq.w	r4, [ip], #4
  42cd9c:	d0ea      	beq.n	42cd74 <strcpy+0x38>
  42cd9e:	4623      	mov	r3, r4
  42cda0:	f80c 3b01 	strb.w	r3, [ip], #1
  42cda4:	f013 0fff 	tst.w	r3, #255	; 0xff
  42cda8:	ea4f 2333 	mov.w	r3, r3, ror #8
  42cdac:	d1f8      	bne.n	42cda0 <strcpy+0x64>
  42cdae:	f85d 4b04 	ldr.w	r4, [sp], #4
  42cdb2:	4770      	bx	lr
  42cdb4:	f011 0f01 	tst.w	r1, #1
  42cdb8:	d006      	beq.n	42cdc8 <strcpy+0x8c>
  42cdba:	f811 2b01 	ldrb.w	r2, [r1], #1
  42cdbe:	f80c 2b01 	strb.w	r2, [ip], #1
  42cdc2:	2a00      	cmp	r2, #0
  42cdc4:	bf08      	it	eq
  42cdc6:	4770      	bxeq	lr
  42cdc8:	f011 0f02 	tst.w	r1, #2
  42cdcc:	d0bf      	beq.n	42cd4e <strcpy+0x12>
  42cdce:	f831 2b02 	ldrh.w	r2, [r1], #2
  42cdd2:	f012 0fff 	tst.w	r2, #255	; 0xff
  42cdd6:	bf16      	itet	ne
  42cdd8:	f82c 2b02 	strhne.w	r2, [ip], #2
  42cddc:	f88c 2000 	strbeq.w	r2, [ip]
  42cde0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  42cde4:	d1b3      	bne.n	42cd4e <strcpy+0x12>
  42cde6:	4770      	bx	lr
  42cde8:	f811 2b01 	ldrb.w	r2, [r1], #1
  42cdec:	f80c 2b01 	strb.w	r2, [ip], #1
  42cdf0:	2a00      	cmp	r2, #0
  42cdf2:	d1f9      	bne.n	42cde8 <strcpy+0xac>
  42cdf4:	4770      	bx	lr
  42cdf6:	bf00      	nop
	...

0042ce00 <strlen>:
  42ce00:	f890 f000 	pld	[r0]
  42ce04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  42ce08:	f020 0107 	bic.w	r1, r0, #7
  42ce0c:	f06f 0c00 	mvn.w	ip, #0
  42ce10:	f010 0407 	ands.w	r4, r0, #7
  42ce14:	f891 f020 	pld	[r1, #32]
  42ce18:	f040 8049 	bne.w	42ceae <strlen+0xae>
  42ce1c:	f04f 0400 	mov.w	r4, #0
  42ce20:	f06f 0007 	mvn.w	r0, #7
  42ce24:	e9d1 2300 	ldrd	r2, r3, [r1]
  42ce28:	f891 f040 	pld	[r1, #64]	; 0x40
  42ce2c:	f100 0008 	add.w	r0, r0, #8
  42ce30:	fa82 f24c 	uadd8	r2, r2, ip
  42ce34:	faa4 f28c 	sel	r2, r4, ip
  42ce38:	fa83 f34c 	uadd8	r3, r3, ip
  42ce3c:	faa2 f38c 	sel	r3, r2, ip
  42ce40:	bb4b      	cbnz	r3, 42ce96 <strlen+0x96>
  42ce42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  42ce46:	fa82 f24c 	uadd8	r2, r2, ip
  42ce4a:	f100 0008 	add.w	r0, r0, #8
  42ce4e:	faa4 f28c 	sel	r2, r4, ip
  42ce52:	fa83 f34c 	uadd8	r3, r3, ip
  42ce56:	faa2 f38c 	sel	r3, r2, ip
  42ce5a:	b9e3      	cbnz	r3, 42ce96 <strlen+0x96>
  42ce5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  42ce60:	fa82 f24c 	uadd8	r2, r2, ip
  42ce64:	f100 0008 	add.w	r0, r0, #8
  42ce68:	faa4 f28c 	sel	r2, r4, ip
  42ce6c:	fa83 f34c 	uadd8	r3, r3, ip
  42ce70:	faa2 f38c 	sel	r3, r2, ip
  42ce74:	b97b      	cbnz	r3, 42ce96 <strlen+0x96>
  42ce76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  42ce7a:	f101 0120 	add.w	r1, r1, #32
  42ce7e:	fa82 f24c 	uadd8	r2, r2, ip
  42ce82:	f100 0008 	add.w	r0, r0, #8
  42ce86:	faa4 f28c 	sel	r2, r4, ip
  42ce8a:	fa83 f34c 	uadd8	r3, r3, ip
  42ce8e:	faa2 f38c 	sel	r3, r2, ip
  42ce92:	2b00      	cmp	r3, #0
  42ce94:	d0c6      	beq.n	42ce24 <strlen+0x24>
  42ce96:	2a00      	cmp	r2, #0
  42ce98:	bf04      	itt	eq
  42ce9a:	3004      	addeq	r0, #4
  42ce9c:	461a      	moveq	r2, r3
  42ce9e:	ba12      	rev	r2, r2
  42cea0:	fab2 f282 	clz	r2, r2
  42cea4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  42cea8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  42ceac:	4770      	bx	lr
  42ceae:	e9d1 2300 	ldrd	r2, r3, [r1]
  42ceb2:	f004 0503 	and.w	r5, r4, #3
  42ceb6:	f1c4 0000 	rsb	r0, r4, #0
  42ceba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  42cebe:	f014 0f04 	tst.w	r4, #4
  42cec2:	f891 f040 	pld	[r1, #64]	; 0x40
  42cec6:	fa0c f505 	lsl.w	r5, ip, r5
  42ceca:	ea62 0205 	orn	r2, r2, r5
  42cece:	bf1c      	itt	ne
  42ced0:	ea63 0305 	ornne	r3, r3, r5
  42ced4:	4662      	movne	r2, ip
  42ced6:	f04f 0400 	mov.w	r4, #0
  42ceda:	e7a9      	b.n	42ce30 <strlen+0x30>

0042cedc <strncmp>:
  42cedc:	2a00      	cmp	r2, #0
  42cede:	d041      	beq.n	42cf64 <strncmp+0x88>
  42cee0:	ea40 0301 	orr.w	r3, r0, r1
  42cee4:	f013 0303 	ands.w	r3, r3, #3
  42cee8:	b4f0      	push	{r4, r5, r6, r7}
  42ceea:	d125      	bne.n	42cf38 <strncmp+0x5c>
  42ceec:	2a03      	cmp	r2, #3
  42ceee:	d923      	bls.n	42cf38 <strncmp+0x5c>
  42cef0:	6804      	ldr	r4, [r0, #0]
  42cef2:	680d      	ldr	r5, [r1, #0]
  42cef4:	42ac      	cmp	r4, r5
  42cef6:	d11f      	bne.n	42cf38 <strncmp+0x5c>
  42cef8:	3a04      	subs	r2, #4
  42cefa:	d038      	beq.n	42cf6e <strncmp+0x92>
  42cefc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  42cf00:	ea25 0404 	bic.w	r4, r5, r4
  42cf04:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  42cf08:	d12e      	bne.n	42cf68 <strncmp+0x8c>
  42cf0a:	3004      	adds	r0, #4
  42cf0c:	3104      	adds	r1, #4
  42cf0e:	e00f      	b.n	42cf30 <strncmp+0x54>
  42cf10:	f850 3b04 	ldr.w	r3, [r0], #4
  42cf14:	680e      	ldr	r6, [r1, #0]
  42cf16:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  42cf1a:	42b3      	cmp	r3, r6
  42cf1c:	ea24 0403 	bic.w	r4, r4, r3
  42cf20:	f101 0104 	add.w	r1, r1, #4
  42cf24:	d126      	bne.n	42cf74 <strncmp+0x98>
  42cf26:	3a04      	subs	r2, #4
  42cf28:	d021      	beq.n	42cf6e <strncmp+0x92>
  42cf2a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  42cf2e:	d11b      	bne.n	42cf68 <strncmp+0x8c>
  42cf30:	2a03      	cmp	r2, #3
  42cf32:	4607      	mov	r7, r0
  42cf34:	460d      	mov	r5, r1
  42cf36:	d8eb      	bhi.n	42cf10 <strncmp+0x34>
  42cf38:	7805      	ldrb	r5, [r0, #0]
  42cf3a:	780c      	ldrb	r4, [r1, #0]
  42cf3c:	42ac      	cmp	r4, r5
  42cf3e:	f102 33ff 	add.w	r3, r2, #4294967295
  42cf42:	d11a      	bne.n	42cf7a <strncmp+0x9e>
  42cf44:	b183      	cbz	r3, 42cf68 <strncmp+0x8c>
  42cf46:	b914      	cbnz	r4, 42cf4e <strncmp+0x72>
  42cf48:	e00e      	b.n	42cf68 <strncmp+0x8c>
  42cf4a:	b16b      	cbz	r3, 42cf68 <strncmp+0x8c>
  42cf4c:	b17a      	cbz	r2, 42cf6e <strncmp+0x92>
  42cf4e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  42cf52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  42cf56:	42a2      	cmp	r2, r4
  42cf58:	f103 33ff 	add.w	r3, r3, #4294967295
  42cf5c:	d0f5      	beq.n	42cf4a <strncmp+0x6e>
  42cf5e:	1b10      	subs	r0, r2, r4
  42cf60:	bcf0      	pop	{r4, r5, r6, r7}
  42cf62:	4770      	bx	lr
  42cf64:	4610      	mov	r0, r2
  42cf66:	4770      	bx	lr
  42cf68:	2000      	movs	r0, #0
  42cf6a:	bcf0      	pop	{r4, r5, r6, r7}
  42cf6c:	4770      	bx	lr
  42cf6e:	4610      	mov	r0, r2
  42cf70:	bcf0      	pop	{r4, r5, r6, r7}
  42cf72:	4770      	bx	lr
  42cf74:	4629      	mov	r1, r5
  42cf76:	4638      	mov	r0, r7
  42cf78:	e7de      	b.n	42cf38 <strncmp+0x5c>
  42cf7a:	462a      	mov	r2, r5
  42cf7c:	e7ef      	b.n	42cf5e <strncmp+0x82>
  42cf7e:	bf00      	nop

0042cf80 <_strtoul_l.isra.0>:
  42cf80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42cf84:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  42cf88:	460e      	mov	r6, r1
  42cf8a:	4607      	mov	r7, r0
  42cf8c:	4615      	mov	r5, r2
  42cf8e:	4698      	mov	r8, r3
  42cf90:	468a      	mov	sl, r1
  42cf92:	e000      	b.n	42cf96 <_strtoul_l.isra.0+0x16>
  42cf94:	46a2      	mov	sl, r4
  42cf96:	4654      	mov	r4, sl
  42cf98:	4648      	mov	r0, r9
  42cf9a:	f814 bb01 	ldrb.w	fp, [r4], #1
  42cf9e:	f7fe fbf9 	bl	42b794 <__locale_ctype_ptr_l>
  42cfa2:	4458      	add	r0, fp
  42cfa4:	7840      	ldrb	r0, [r0, #1]
  42cfa6:	f010 0008 	ands.w	r0, r0, #8
  42cfaa:	d1f3      	bne.n	42cf94 <_strtoul_l.isra.0+0x14>
  42cfac:	4659      	mov	r1, fp
  42cfae:	292d      	cmp	r1, #45	; 0x2d
  42cfb0:	d059      	beq.n	42d066 <_strtoul_l.isra.0+0xe6>
  42cfb2:	292b      	cmp	r1, #43	; 0x2b
  42cfb4:	bf04      	itt	eq
  42cfb6:	7821      	ldrbeq	r1, [r4, #0]
  42cfb8:	f10a 0402 	addeq.w	r4, sl, #2
  42cfbc:	f1b8 0f00 	cmp.w	r8, #0
  42cfc0:	d00c      	beq.n	42cfdc <_strtoul_l.isra.0+0x5c>
  42cfc2:	f1b8 0f10 	cmp.w	r8, #16
  42cfc6:	d053      	beq.n	42d070 <_strtoul_l.isra.0+0xf0>
  42cfc8:	f04f 3cff 	mov.w	ip, #4294967295
  42cfcc:	fbbc fcf8 	udiv	ip, ip, r8
  42cfd0:	fb08 fa0c 	mul.w	sl, r8, ip
  42cfd4:	ea6f 0a0a 	mvn.w	sl, sl
  42cfd8:	46c1      	mov	r9, r8
  42cfda:	e008      	b.n	42cfee <_strtoul_l.isra.0+0x6e>
  42cfdc:	2930      	cmp	r1, #48	; 0x30
  42cfde:	d058      	beq.n	42d092 <_strtoul_l.isra.0+0x112>
  42cfe0:	f04f 080a 	mov.w	r8, #10
  42cfe4:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 42d0c4 <_strtoul_l.isra.0+0x144>
  42cfe8:	46c1      	mov	r9, r8
  42cfea:	f04f 0a05 	mov.w	sl, #5
  42cfee:	2300      	movs	r3, #0
  42cff0:	469e      	mov	lr, r3
  42cff2:	e005      	b.n	42d000 <_strtoul_l.isra.0+0x80>
  42cff4:	d02a      	beq.n	42d04c <_strtoul_l.isra.0+0xcc>
  42cff6:	fb09 2e0e 	mla	lr, r9, lr, r2
  42cffa:	2301      	movs	r3, #1
  42cffc:	f814 1b01 	ldrb.w	r1, [r4], #1
  42d000:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
  42d004:	2a09      	cmp	r2, #9
  42d006:	d905      	bls.n	42d014 <_strtoul_l.isra.0+0x94>
  42d008:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
  42d00c:	2a19      	cmp	r2, #25
  42d00e:	d80a      	bhi.n	42d026 <_strtoul_l.isra.0+0xa6>
  42d010:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
  42d014:	4590      	cmp	r8, r2
  42d016:	dd0e      	ble.n	42d036 <_strtoul_l.isra.0+0xb6>
  42d018:	2b00      	cmp	r3, #0
  42d01a:	db01      	blt.n	42d020 <_strtoul_l.isra.0+0xa0>
  42d01c:	45e6      	cmp	lr, ip
  42d01e:	d9e9      	bls.n	42cff4 <_strtoul_l.isra.0+0x74>
  42d020:	f04f 33ff 	mov.w	r3, #4294967295
  42d024:	e7ea      	b.n	42cffc <_strtoul_l.isra.0+0x7c>
  42d026:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
  42d02a:	2a19      	cmp	r2, #25
  42d02c:	d803      	bhi.n	42d036 <_strtoul_l.isra.0+0xb6>
  42d02e:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
  42d032:	4590      	cmp	r8, r2
  42d034:	dcf0      	bgt.n	42d018 <_strtoul_l.isra.0+0x98>
  42d036:	2b00      	cmp	r3, #0
  42d038:	db0d      	blt.n	42d056 <_strtoul_l.isra.0+0xd6>
  42d03a:	b108      	cbz	r0, 42d040 <_strtoul_l.isra.0+0xc0>
  42d03c:	f1ce 0e00 	rsb	lr, lr, #0
  42d040:	b10d      	cbz	r5, 42d046 <_strtoul_l.isra.0+0xc6>
  42d042:	b973      	cbnz	r3, 42d062 <_strtoul_l.isra.0+0xe2>
  42d044:	602e      	str	r6, [r5, #0]
  42d046:	4670      	mov	r0, lr
  42d048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42d04c:	4552      	cmp	r2, sl
  42d04e:	ddd2      	ble.n	42cff6 <_strtoul_l.isra.0+0x76>
  42d050:	f04f 33ff 	mov.w	r3, #4294967295
  42d054:	e7d2      	b.n	42cffc <_strtoul_l.isra.0+0x7c>
  42d056:	2322      	movs	r3, #34	; 0x22
  42d058:	603b      	str	r3, [r7, #0]
  42d05a:	f04f 3eff 	mov.w	lr, #4294967295
  42d05e:	2d00      	cmp	r5, #0
  42d060:	d0f1      	beq.n	42d046 <_strtoul_l.isra.0+0xc6>
  42d062:	1e66      	subs	r6, r4, #1
  42d064:	e7ee      	b.n	42d044 <_strtoul_l.isra.0+0xc4>
  42d066:	7821      	ldrb	r1, [r4, #0]
  42d068:	2001      	movs	r0, #1
  42d06a:	f10a 0402 	add.w	r4, sl, #2
  42d06e:	e7a5      	b.n	42cfbc <_strtoul_l.isra.0+0x3c>
  42d070:	2930      	cmp	r1, #48	; 0x30
  42d072:	d11b      	bne.n	42d0ac <_strtoul_l.isra.0+0x12c>
  42d074:	7823      	ldrb	r3, [r4, #0]
  42d076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  42d07a:	2b58      	cmp	r3, #88	; 0x58
  42d07c:	d11c      	bne.n	42d0b8 <_strtoul_l.isra.0+0x138>
  42d07e:	f04f 0910 	mov.w	r9, #16
  42d082:	7861      	ldrb	r1, [r4, #1]
  42d084:	46c8      	mov	r8, r9
  42d086:	f04f 0a0f 	mov.w	sl, #15
  42d08a:	3402      	adds	r4, #2
  42d08c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  42d090:	e7ad      	b.n	42cfee <_strtoul_l.isra.0+0x6e>
  42d092:	7823      	ldrb	r3, [r4, #0]
  42d094:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  42d098:	2b58      	cmp	r3, #88	; 0x58
  42d09a:	d0f0      	beq.n	42d07e <_strtoul_l.isra.0+0xfe>
  42d09c:	f04f 0808 	mov.w	r8, #8
  42d0a0:	46c1      	mov	r9, r8
  42d0a2:	f04f 0a07 	mov.w	sl, #7
  42d0a6:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
  42d0aa:	e7a0      	b.n	42cfee <_strtoul_l.isra.0+0x6e>
  42d0ac:	f04f 0a0f 	mov.w	sl, #15
  42d0b0:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  42d0b4:	46c1      	mov	r9, r8
  42d0b6:	e79a      	b.n	42cfee <_strtoul_l.isra.0+0x6e>
  42d0b8:	46c1      	mov	r9, r8
  42d0ba:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  42d0be:	f04f 0a0f 	mov.w	sl, #15
  42d0c2:	e794      	b.n	42cfee <_strtoul_l.isra.0+0x6e>
  42d0c4:	19999999 	.word	0x19999999

0042d0c8 <_strtoul_r>:
  42d0c8:	b530      	push	{r4, r5, lr}
  42d0ca:	4c06      	ldr	r4, [pc, #24]	; (42d0e4 <_strtoul_r+0x1c>)
  42d0cc:	4d06      	ldr	r5, [pc, #24]	; (42d0e8 <_strtoul_r+0x20>)
  42d0ce:	6824      	ldr	r4, [r4, #0]
  42d0d0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  42d0d2:	b083      	sub	sp, #12
  42d0d4:	2c00      	cmp	r4, #0
  42d0d6:	bf08      	it	eq
  42d0d8:	462c      	moveq	r4, r5
  42d0da:	9400      	str	r4, [sp, #0]
  42d0dc:	f7ff ff50 	bl	42cf80 <_strtoul_l.isra.0>
  42d0e0:	b003      	add	sp, #12
  42d0e2:	bd30      	pop	{r4, r5, pc}
  42d0e4:	200000c8 	.word	0x200000c8
  42d0e8:	20000544 	.word	0x20000544

0042d0ec <strtoul>:
  42d0ec:	b530      	push	{r4, r5, lr}
  42d0ee:	4c08      	ldr	r4, [pc, #32]	; (42d110 <strtoul+0x24>)
  42d0f0:	4b08      	ldr	r3, [pc, #32]	; (42d114 <strtoul+0x28>)
  42d0f2:	6825      	ldr	r5, [r4, #0]
  42d0f4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  42d0f6:	b083      	sub	sp, #12
  42d0f8:	2c00      	cmp	r4, #0
  42d0fa:	bf08      	it	eq
  42d0fc:	461c      	moveq	r4, r3
  42d0fe:	9400      	str	r4, [sp, #0]
  42d100:	4613      	mov	r3, r2
  42d102:	460a      	mov	r2, r1
  42d104:	4601      	mov	r1, r0
  42d106:	4628      	mov	r0, r5
  42d108:	f7ff ff3a 	bl	42cf80 <_strtoul_l.isra.0>
  42d10c:	b003      	add	sp, #12
  42d10e:	bd30      	pop	{r4, r5, pc}
  42d110:	200000c8 	.word	0x200000c8
  42d114:	20000544 	.word	0x20000544

0042d118 <__ssprint_r>:
  42d118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42d11c:	6893      	ldr	r3, [r2, #8]
  42d11e:	b083      	sub	sp, #12
  42d120:	4690      	mov	r8, r2
  42d122:	2b00      	cmp	r3, #0
  42d124:	d070      	beq.n	42d208 <__ssprint_r+0xf0>
  42d126:	4682      	mov	sl, r0
  42d128:	460c      	mov	r4, r1
  42d12a:	6817      	ldr	r7, [r2, #0]
  42d12c:	688d      	ldr	r5, [r1, #8]
  42d12e:	6808      	ldr	r0, [r1, #0]
  42d130:	e042      	b.n	42d1b8 <__ssprint_r+0xa0>
  42d132:	89a3      	ldrh	r3, [r4, #12]
  42d134:	f413 6f90 	tst.w	r3, #1152	; 0x480
  42d138:	d02e      	beq.n	42d198 <__ssprint_r+0x80>
  42d13a:	6965      	ldr	r5, [r4, #20]
  42d13c:	6921      	ldr	r1, [r4, #16]
  42d13e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  42d142:	eba0 0b01 	sub.w	fp, r0, r1
  42d146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  42d14a:	f10b 0001 	add.w	r0, fp, #1
  42d14e:	106d      	asrs	r5, r5, #1
  42d150:	4430      	add	r0, r6
  42d152:	42a8      	cmp	r0, r5
  42d154:	462a      	mov	r2, r5
  42d156:	bf84      	itt	hi
  42d158:	4605      	movhi	r5, r0
  42d15a:	462a      	movhi	r2, r5
  42d15c:	055b      	lsls	r3, r3, #21
  42d15e:	d538      	bpl.n	42d1d2 <__ssprint_r+0xba>
  42d160:	4611      	mov	r1, r2
  42d162:	4650      	mov	r0, sl
  42d164:	f7fe fbca 	bl	42b8fc <_malloc_r>
  42d168:	2800      	cmp	r0, #0
  42d16a:	d03c      	beq.n	42d1e6 <__ssprint_r+0xce>
  42d16c:	465a      	mov	r2, fp
  42d16e:	6921      	ldr	r1, [r4, #16]
  42d170:	9001      	str	r0, [sp, #4]
  42d172:	f7f9 fca5 	bl	426ac0 <memcpy>
  42d176:	89a2      	ldrh	r2, [r4, #12]
  42d178:	9b01      	ldr	r3, [sp, #4]
  42d17a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  42d17e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  42d182:	81a2      	strh	r2, [r4, #12]
  42d184:	eba5 020b 	sub.w	r2, r5, fp
  42d188:	eb03 000b 	add.w	r0, r3, fp
  42d18c:	6165      	str	r5, [r4, #20]
  42d18e:	6123      	str	r3, [r4, #16]
  42d190:	6020      	str	r0, [r4, #0]
  42d192:	60a2      	str	r2, [r4, #8]
  42d194:	4635      	mov	r5, r6
  42d196:	46b3      	mov	fp, r6
  42d198:	465a      	mov	r2, fp
  42d19a:	4649      	mov	r1, r9
  42d19c:	f7fe fec8 	bl	42bf30 <memmove>
  42d1a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
  42d1a4:	68a2      	ldr	r2, [r4, #8]
  42d1a6:	6820      	ldr	r0, [r4, #0]
  42d1a8:	1b55      	subs	r5, r2, r5
  42d1aa:	4458      	add	r0, fp
  42d1ac:	1b9e      	subs	r6, r3, r6
  42d1ae:	60a5      	str	r5, [r4, #8]
  42d1b0:	6020      	str	r0, [r4, #0]
  42d1b2:	f8c8 6008 	str.w	r6, [r8, #8]
  42d1b6:	b33e      	cbz	r6, 42d208 <__ssprint_r+0xf0>
  42d1b8:	687e      	ldr	r6, [r7, #4]
  42d1ba:	463b      	mov	r3, r7
  42d1bc:	3708      	adds	r7, #8
  42d1be:	2e00      	cmp	r6, #0
  42d1c0:	d0fa      	beq.n	42d1b8 <__ssprint_r+0xa0>
  42d1c2:	42ae      	cmp	r6, r5
  42d1c4:	f8d3 9000 	ldr.w	r9, [r3]
  42d1c8:	46ab      	mov	fp, r5
  42d1ca:	d2b2      	bcs.n	42d132 <__ssprint_r+0x1a>
  42d1cc:	4635      	mov	r5, r6
  42d1ce:	46b3      	mov	fp, r6
  42d1d0:	e7e2      	b.n	42d198 <__ssprint_r+0x80>
  42d1d2:	4650      	mov	r0, sl
  42d1d4:	f7ff fa16 	bl	42c604 <_realloc_r>
  42d1d8:	4603      	mov	r3, r0
  42d1da:	2800      	cmp	r0, #0
  42d1dc:	d1d2      	bne.n	42d184 <__ssprint_r+0x6c>
  42d1de:	6921      	ldr	r1, [r4, #16]
  42d1e0:	4650      	mov	r0, sl
  42d1e2:	f7fd ff0d 	bl	42b000 <_free_r>
  42d1e6:	230c      	movs	r3, #12
  42d1e8:	f8ca 3000 	str.w	r3, [sl]
  42d1ec:	89a3      	ldrh	r3, [r4, #12]
  42d1ee:	2200      	movs	r2, #0
  42d1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42d1f4:	f04f 30ff 	mov.w	r0, #4294967295
  42d1f8:	81a3      	strh	r3, [r4, #12]
  42d1fa:	f8c8 2008 	str.w	r2, [r8, #8]
  42d1fe:	f8c8 2004 	str.w	r2, [r8, #4]
  42d202:	b003      	add	sp, #12
  42d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42d208:	2000      	movs	r0, #0
  42d20a:	f8c8 0004 	str.w	r0, [r8, #4]
  42d20e:	b003      	add	sp, #12
  42d210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0042d214 <_sungetc_r>:
  42d214:	b538      	push	{r3, r4, r5, lr}
  42d216:	1c4b      	adds	r3, r1, #1
  42d218:	d01a      	beq.n	42d250 <_sungetc_r+0x3c>
  42d21a:	8993      	ldrh	r3, [r2, #12]
  42d21c:	6b14      	ldr	r4, [r2, #48]	; 0x30
  42d21e:	f023 0320 	bic.w	r3, r3, #32
  42d222:	b2cd      	uxtb	r5, r1
  42d224:	8193      	strh	r3, [r2, #12]
  42d226:	b1b4      	cbz	r4, 42d256 <_sungetc_r+0x42>
  42d228:	4614      	mov	r4, r2
  42d22a:	6852      	ldr	r2, [r2, #4]
  42d22c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  42d22e:	429a      	cmp	r2, r3
  42d230:	da09      	bge.n	42d246 <_sungetc_r+0x32>
  42d232:	6823      	ldr	r3, [r4, #0]
  42d234:	1e5a      	subs	r2, r3, #1
  42d236:	6022      	str	r2, [r4, #0]
  42d238:	f803 5c01 	strb.w	r5, [r3, #-1]
  42d23c:	6863      	ldr	r3, [r4, #4]
  42d23e:	3301      	adds	r3, #1
  42d240:	6063      	str	r3, [r4, #4]
  42d242:	4628      	mov	r0, r5
  42d244:	bd38      	pop	{r3, r4, r5, pc}
  42d246:	4621      	mov	r1, r4
  42d248:	f000 fd52 	bl	42dcf0 <__submore>
  42d24c:	2800      	cmp	r0, #0
  42d24e:	d0f0      	beq.n	42d232 <_sungetc_r+0x1e>
  42d250:	f04f 35ff 	mov.w	r5, #4294967295
  42d254:	e7f5      	b.n	42d242 <_sungetc_r+0x2e>
  42d256:	6911      	ldr	r1, [r2, #16]
  42d258:	6813      	ldr	r3, [r2, #0]
  42d25a:	b129      	cbz	r1, 42d268 <_sungetc_r+0x54>
  42d25c:	4299      	cmp	r1, r3
  42d25e:	d203      	bcs.n	42d268 <_sungetc_r+0x54>
  42d260:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  42d264:	428d      	cmp	r5, r1
  42d266:	d00f      	beq.n	42d288 <_sungetc_r+0x74>
  42d268:	6393      	str	r3, [r2, #56]	; 0x38
  42d26a:	4613      	mov	r3, r2
  42d26c:	6854      	ldr	r4, [r2, #4]
  42d26e:	63d4      	str	r4, [r2, #60]	; 0x3c
  42d270:	f102 0040 	add.w	r0, r2, #64	; 0x40
  42d274:	2103      	movs	r1, #3
  42d276:	6310      	str	r0, [r2, #48]	; 0x30
  42d278:	6351      	str	r1, [r2, #52]	; 0x34
  42d27a:	f803 5f42 	strb.w	r5, [r3, #66]!
  42d27e:	2101      	movs	r1, #1
  42d280:	6013      	str	r3, [r2, #0]
  42d282:	6051      	str	r1, [r2, #4]
  42d284:	4628      	mov	r0, r5
  42d286:	bd38      	pop	{r3, r4, r5, pc}
  42d288:	6851      	ldr	r1, [r2, #4]
  42d28a:	3b01      	subs	r3, #1
  42d28c:	3101      	adds	r1, #1
  42d28e:	6013      	str	r3, [r2, #0]
  42d290:	6051      	str	r1, [r2, #4]
  42d292:	e7d6      	b.n	42d242 <_sungetc_r+0x2e>

0042d294 <__ssrefill_r>:
  42d294:	b510      	push	{r4, lr}
  42d296:	460c      	mov	r4, r1
  42d298:	6b09      	ldr	r1, [r1, #48]	; 0x30
  42d29a:	b169      	cbz	r1, 42d2b8 <__ssrefill_r+0x24>
  42d29c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  42d2a0:	4299      	cmp	r1, r3
  42d2a2:	d001      	beq.n	42d2a8 <__ssrefill_r+0x14>
  42d2a4:	f7fd feac 	bl	42b000 <_free_r>
  42d2a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  42d2aa:	6063      	str	r3, [r4, #4]
  42d2ac:	2000      	movs	r0, #0
  42d2ae:	6320      	str	r0, [r4, #48]	; 0x30
  42d2b0:	b113      	cbz	r3, 42d2b8 <__ssrefill_r+0x24>
  42d2b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  42d2b4:	6023      	str	r3, [r4, #0]
  42d2b6:	bd10      	pop	{r4, pc}
  42d2b8:	89a3      	ldrh	r3, [r4, #12]
  42d2ba:	6922      	ldr	r2, [r4, #16]
  42d2bc:	6022      	str	r2, [r4, #0]
  42d2be:	f043 0320 	orr.w	r3, r3, #32
  42d2c2:	2200      	movs	r2, #0
  42d2c4:	81a3      	strh	r3, [r4, #12]
  42d2c6:	6062      	str	r2, [r4, #4]
  42d2c8:	f04f 30ff 	mov.w	r0, #4294967295
  42d2cc:	bd10      	pop	{r4, pc}
  42d2ce:	bf00      	nop

0042d2d0 <_sfread_r>:
  42d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42d2d4:	b083      	sub	sp, #12
  42d2d6:	fb02 f903 	mul.w	r9, r2, r3
  42d2da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  42d2dc:	f1b9 0f00 	cmp.w	r9, #0
  42d2e0:	d028      	beq.n	42d334 <_sfread_r+0x64>
  42d2e2:	4607      	mov	r7, r0
  42d2e4:	469a      	mov	sl, r3
  42d2e6:	9201      	str	r2, [sp, #4]
  42d2e8:	460d      	mov	r5, r1
  42d2ea:	464e      	mov	r6, r9
  42d2ec:	f04f 0800 	mov.w	r8, #0
  42d2f0:	e00f      	b.n	42d312 <_sfread_r+0x42>
  42d2f2:	6821      	ldr	r1, [r4, #0]
  42d2f4:	f7f9 fbe4 	bl	426ac0 <memcpy>
  42d2f8:	6822      	ldr	r2, [r4, #0]
  42d2fa:	f8c4 8004 	str.w	r8, [r4, #4]
  42d2fe:	445a      	add	r2, fp
  42d300:	6022      	str	r2, [r4, #0]
  42d302:	4621      	mov	r1, r4
  42d304:	4638      	mov	r0, r7
  42d306:	445d      	add	r5, fp
  42d308:	eba6 060b 	sub.w	r6, r6, fp
  42d30c:	f7ff ffc2 	bl	42d294 <__ssrefill_r>
  42d310:	b9a0      	cbnz	r0, 42d33c <_sfread_r+0x6c>
  42d312:	f8d4 b004 	ldr.w	fp, [r4, #4]
  42d316:	455e      	cmp	r6, fp
  42d318:	4628      	mov	r0, r5
  42d31a:	465a      	mov	r2, fp
  42d31c:	d8e9      	bhi.n	42d2f2 <_sfread_r+0x22>
  42d31e:	4632      	mov	r2, r6
  42d320:	6821      	ldr	r1, [r4, #0]
  42d322:	f7f9 fbcd 	bl	426ac0 <memcpy>
  42d326:	6862      	ldr	r2, [r4, #4]
  42d328:	6823      	ldr	r3, [r4, #0]
  42d32a:	1b92      	subs	r2, r2, r6
  42d32c:	441e      	add	r6, r3
  42d32e:	46d1      	mov	r9, sl
  42d330:	6062      	str	r2, [r4, #4]
  42d332:	6026      	str	r6, [r4, #0]
  42d334:	4648      	mov	r0, r9
  42d336:	b003      	add	sp, #12
  42d338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42d33c:	9b01      	ldr	r3, [sp, #4]
  42d33e:	eba9 0906 	sub.w	r9, r9, r6
  42d342:	fbb9 f9f3 	udiv	r9, r9, r3
  42d346:	4648      	mov	r0, r9
  42d348:	b003      	add	sp, #12
  42d34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42d34e:	bf00      	nop

0042d350 <__ssvfiscanf_r>:
  42d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42d354:	468b      	mov	fp, r1
  42d356:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
  42d35a:	b0d9      	sub	sp, #356	; 0x164
  42d35c:	4607      	mov	r7, r0
  42d35e:	0488      	lsls	r0, r1, #18
  42d360:	9306      	str	r3, [sp, #24]
  42d362:	d409      	bmi.n	42d378 <__ssvfiscanf_r+0x28>
  42d364:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42d368:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  42d36c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  42d370:	f8ab 100c 	strh.w	r1, [fp, #12]
  42d374:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  42d378:	4614      	mov	r4, r2
  42d37a:	4626      	mov	r6, r4
  42d37c:	2300      	movs	r3, #0
  42d37e:	9307      	str	r3, [sp, #28]
  42d380:	9304      	str	r3, [sp, #16]
  42d382:	469a      	mov	sl, r3
  42d384:	9305      	str	r3, [sp, #20]
  42d386:	f816 3b01 	ldrb.w	r3, [r6], #1
  42d38a:	930b      	str	r3, [sp, #44]	; 0x2c
  42d38c:	b363      	cbz	r3, 42d3e8 <__ssvfiscanf_r+0x98>
  42d38e:	f7fe fa05 	bl	42b79c <__locale_ctype_ptr>
  42d392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  42d394:	4418      	add	r0, r3
  42d396:	7845      	ldrb	r5, [r0, #1]
  42d398:	f015 0508 	ands.w	r5, r5, #8
  42d39c:	d028      	beq.n	42d3f0 <__ssvfiscanf_r+0xa0>
  42d39e:	f8db 2004 	ldr.w	r2, [fp, #4]
  42d3a2:	e012      	b.n	42d3ca <__ssvfiscanf_r+0x7a>
  42d3a4:	f7fe f9fa 	bl	42b79c <__locale_ctype_ptr>
  42d3a8:	f8db 3000 	ldr.w	r3, [fp]
  42d3ac:	781a      	ldrb	r2, [r3, #0]
  42d3ae:	4410      	add	r0, r2
  42d3b0:	3301      	adds	r3, #1
  42d3b2:	7842      	ldrb	r2, [r0, #1]
  42d3b4:	0712      	lsls	r2, r2, #28
  42d3b6:	d510      	bpl.n	42d3da <__ssvfiscanf_r+0x8a>
  42d3b8:	f8db 2004 	ldr.w	r2, [fp, #4]
  42d3bc:	f8cb 3000 	str.w	r3, [fp]
  42d3c0:	3a01      	subs	r2, #1
  42d3c2:	f10a 0a01 	add.w	sl, sl, #1
  42d3c6:	f8cb 2004 	str.w	r2, [fp, #4]
  42d3ca:	2a00      	cmp	r2, #0
  42d3cc:	dcea      	bgt.n	42d3a4 <__ssvfiscanf_r+0x54>
  42d3ce:	4659      	mov	r1, fp
  42d3d0:	4638      	mov	r0, r7
  42d3d2:	f7ff ff5f 	bl	42d294 <__ssrefill_r>
  42d3d6:	2800      	cmp	r0, #0
  42d3d8:	d0e4      	beq.n	42d3a4 <__ssvfiscanf_r+0x54>
  42d3da:	4634      	mov	r4, r6
  42d3dc:	4626      	mov	r6, r4
  42d3de:	f816 3b01 	ldrb.w	r3, [r6], #1
  42d3e2:	930b      	str	r3, [sp, #44]	; 0x2c
  42d3e4:	2b00      	cmp	r3, #0
  42d3e6:	d1d2      	bne.n	42d38e <__ssvfiscanf_r+0x3e>
  42d3e8:	9805      	ldr	r0, [sp, #20]
  42d3ea:	b059      	add	sp, #356	; 0x164
  42d3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42d3f0:	2b25      	cmp	r3, #37	; 0x25
  42d3f2:	f040 8084 	bne.w	42d4fe <__ssvfiscanf_r+0x1ae>
  42d3f6:	f894 8001 	ldrb.w	r8, [r4, #1]
  42d3fa:	462c      	mov	r4, r5
  42d3fc:	1c73      	adds	r3, r6, #1
  42d3fe:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
  42d402:	f200 8187 	bhi.w	42d714 <__ssvfiscanf_r+0x3c4>
  42d406:	e8df f018 	tbh	[pc, r8, lsl #1]
  42d40a:	0093      	.short	0x0093
  42d40c:	01850185 	.word	0x01850185
  42d410:	01850185 	.word	0x01850185
  42d414:	01850185 	.word	0x01850185
  42d418:	01850185 	.word	0x01850185
  42d41c:	01850185 	.word	0x01850185
  42d420:	01850185 	.word	0x01850185
  42d424:	01850185 	.word	0x01850185
  42d428:	01850185 	.word	0x01850185
  42d42c:	01850185 	.word	0x01850185
  42d430:	01850185 	.word	0x01850185
  42d434:	01850185 	.word	0x01850185
  42d438:	01850185 	.word	0x01850185
  42d43c:	01850185 	.word	0x01850185
  42d440:	01850185 	.word	0x01850185
  42d444:	01850185 	.word	0x01850185
  42d448:	01850185 	.word	0x01850185
  42d44c:	01850185 	.word	0x01850185
  42d450:	01850185 	.word	0x01850185
  42d454:	01850079 	.word	0x01850079
  42d458:	01850185 	.word	0x01850185
  42d45c:	017f0185 	.word	0x017f0185
  42d460:	01850185 	.word	0x01850185
  42d464:	01850185 	.word	0x01850185
  42d468:	01760185 	.word	0x01760185
  42d46c:	01760176 	.word	0x01760176
  42d470:	01760176 	.word	0x01760176
  42d474:	01760176 	.word	0x01760176
  42d478:	01760176 	.word	0x01760176
  42d47c:	01850176 	.word	0x01850176
  42d480:	01850185 	.word	0x01850185
  42d484:	01850185 	.word	0x01850185
  42d488:	01850185 	.word	0x01850185
  42d48c:	01850185 	.word	0x01850185
  42d490:	01720185 	.word	0x01720185
  42d494:	01850185 	.word	0x01850185
  42d498:	01850185 	.word	0x01850185
  42d49c:	01850185 	.word	0x01850185
  42d4a0:	016c0185 	.word	0x016c0185
  42d4a4:	01850185 	.word	0x01850185
  42d4a8:	01850168 	.word	0x01850168
  42d4ac:	01850185 	.word	0x01850185
  42d4b0:	01850185 	.word	0x01850185
  42d4b4:	01850185 	.word	0x01850185
  42d4b8:	01640185 	.word	0x01640185
  42d4bc:	01850185 	.word	0x01850185
  42d4c0:	0185015b 	.word	0x0185015b
  42d4c4:	01850185 	.word	0x01850185
  42d4c8:	01850185 	.word	0x01850185
  42d4cc:	01850185 	.word	0x01850185
  42d4d0:	01030115 	.word	0x01030115
  42d4d4:	01850185 	.word	0x01850185
  42d4d8:	011a0185 	.word	0x011a0185
  42d4dc:	0185009a 	.word	0x0185009a
  42d4e0:	01510185 	.word	0x01510185
  42d4e4:	013a0185 	.word	0x013a0185
  42d4e8:	012a0133 	.word	0x012a0133
  42d4ec:	01850185 	.word	0x01850185
  42d4f0:	01850127 	.word	0x01850127
  42d4f4:	01850120 	.word	0x01850120
  42d4f8:	01640185 	.word	0x01640185
  42d4fc:	461e      	mov	r6, r3
  42d4fe:	f8db 3004 	ldr.w	r3, [fp, #4]
  42d502:	2b00      	cmp	r3, #0
  42d504:	f340 8375 	ble.w	42dbf2 <__ssvfiscanf_r+0x8a2>
  42d508:	f8db 3000 	ldr.w	r3, [fp]
  42d50c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
  42d510:	7819      	ldrb	r1, [r3, #0]
  42d512:	4291      	cmp	r1, r2
  42d514:	f47f af68 	bne.w	42d3e8 <__ssvfiscanf_r+0x98>
  42d518:	f8db 2004 	ldr.w	r2, [fp, #4]
  42d51c:	3301      	adds	r3, #1
  42d51e:	3a01      	subs	r2, #1
  42d520:	f8cb 3000 	str.w	r3, [fp]
  42d524:	f10a 0a01 	add.w	sl, sl, #1
  42d528:	f8cb 2004 	str.w	r2, [fp, #4]
  42d52c:	4634      	mov	r4, r6
  42d52e:	e755      	b.n	42d3dc <__ssvfiscanf_r+0x8c>
  42d530:	f04f 33ff 	mov.w	r3, #4294967295
  42d534:	9305      	str	r3, [sp, #20]
  42d536:	9805      	ldr	r0, [sp, #20]
  42d538:	b059      	add	sp, #356	; 0x164
  42d53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42d53e:	9303      	str	r3, [sp, #12]
  42d540:	4ba7      	ldr	r3, [pc, #668]	; (42d7e0 <__ssvfiscanf_r+0x490>)
  42d542:	9307      	str	r3, [sp, #28]
  42d544:	2300      	movs	r3, #0
  42d546:	9304      	str	r3, [sp, #16]
  42d548:	2603      	movs	r6, #3
  42d54a:	f8db 3004 	ldr.w	r3, [fp, #4]
  42d54e:	2b00      	cmp	r3, #0
  42d550:	dd69      	ble.n	42d626 <__ssvfiscanf_r+0x2d6>
  42d552:	0669      	lsls	r1, r5, #25
  42d554:	d533      	bpl.n	42d5be <__ssvfiscanf_r+0x26e>
  42d556:	2e02      	cmp	r6, #2
  42d558:	f000 81f7 	beq.w	42d94a <__ssvfiscanf_r+0x5fa>
  42d55c:	2e03      	cmp	r6, #3
  42d55e:	f000 8143 	beq.w	42d7e8 <__ssvfiscanf_r+0x498>
  42d562:	2e01      	cmp	r6, #1
  42d564:	f000 810a 	beq.w	42d77c <__ssvfiscanf_r+0x42c>
  42d568:	2c00      	cmp	r4, #0
  42d56a:	bf08      	it	eq
  42d56c:	2401      	moveq	r4, #1
  42d56e:	f015 0301 	ands.w	r3, r5, #1
  42d572:	f040 8247 	bne.w	42da04 <__ssvfiscanf_r+0x6b4>
  42d576:	06ed      	lsls	r5, r5, #27
  42d578:	f140 831c 	bpl.w	42dbb4 <__ssvfiscanf_r+0x864>
  42d57c:	461d      	mov	r5, r3
  42d57e:	e009      	b.n	42d594 <__ssvfiscanf_r+0x244>
  42d580:	4413      	add	r3, r2
  42d582:	f8cb 3000 	str.w	r3, [fp]
  42d586:	4415      	add	r5, r2
  42d588:	1aa4      	subs	r4, r4, r2
  42d58a:	f7ff fe83 	bl	42d294 <__ssrefill_r>
  42d58e:	2800      	cmp	r0, #0
  42d590:	f040 82d6 	bne.w	42db40 <__ssvfiscanf_r+0x7f0>
  42d594:	f8db 2004 	ldr.w	r2, [fp, #4]
  42d598:	f8db 3000 	ldr.w	r3, [fp]
  42d59c:	42a2      	cmp	r2, r4
  42d59e:	4659      	mov	r1, fp
  42d5a0:	4638      	mov	r0, r7
  42d5a2:	dbed      	blt.n	42d580 <__ssvfiscanf_r+0x230>
  42d5a4:	1b12      	subs	r2, r2, r4
  42d5a6:	4423      	add	r3, r4
  42d5a8:	f8cb 2004 	str.w	r2, [fp, #4]
  42d5ac:	4425      	add	r5, r4
  42d5ae:	f8cb 3000 	str.w	r3, [fp]
  42d5b2:	9e03      	ldr	r6, [sp, #12]
  42d5b4:	44aa      	add	sl, r5
  42d5b6:	4634      	mov	r4, r6
  42d5b8:	e710      	b.n	42d3dc <__ssvfiscanf_r+0x8c>
  42d5ba:	f8cb 3000 	str.w	r3, [fp]
  42d5be:	f7fe f8ed 	bl	42b79c <__locale_ctype_ptr>
  42d5c2:	f8db 3000 	ldr.w	r3, [fp]
  42d5c6:	781a      	ldrb	r2, [r3, #0]
  42d5c8:	4410      	add	r0, r2
  42d5ca:	3301      	adds	r3, #1
  42d5cc:	7842      	ldrb	r2, [r0, #1]
  42d5ce:	0712      	lsls	r2, r2, #28
  42d5d0:	d5c1      	bpl.n	42d556 <__ssvfiscanf_r+0x206>
  42d5d2:	f8db 2004 	ldr.w	r2, [fp, #4]
  42d5d6:	3a01      	subs	r2, #1
  42d5d8:	2a00      	cmp	r2, #0
  42d5da:	f10a 0a01 	add.w	sl, sl, #1
  42d5de:	f8cb 2004 	str.w	r2, [fp, #4]
  42d5e2:	dcea      	bgt.n	42d5ba <__ssvfiscanf_r+0x26a>
  42d5e4:	4659      	mov	r1, fp
  42d5e6:	4638      	mov	r0, r7
  42d5e8:	f7ff fe54 	bl	42d294 <__ssrefill_r>
  42d5ec:	2800      	cmp	r0, #0
  42d5ee:	d0e6      	beq.n	42d5be <__ssvfiscanf_r+0x26e>
  42d5f0:	9a05      	ldr	r2, [sp, #20]
  42d5f2:	2a00      	cmp	r2, #0
  42d5f4:	d09c      	beq.n	42d530 <__ssvfiscanf_r+0x1e0>
  42d5f6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  42d5fa:	f013 0f40 	tst.w	r3, #64	; 0x40
  42d5fe:	4613      	mov	r3, r2
  42d600:	bf18      	it	ne
  42d602:	f04f 33ff 	movne.w	r3, #4294967295
  42d606:	9305      	str	r3, [sp, #20]
  42d608:	9805      	ldr	r0, [sp, #20]
  42d60a:	b059      	add	sp, #356	; 0x164
  42d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42d610:	9303      	str	r3, [sp, #12]
  42d612:	4b73      	ldr	r3, [pc, #460]	; (42d7e0 <__ssvfiscanf_r+0x490>)
  42d614:	9307      	str	r3, [sp, #28]
  42d616:	230a      	movs	r3, #10
  42d618:	9304      	str	r3, [sp, #16]
  42d61a:	f8db 3004 	ldr.w	r3, [fp, #4]
  42d61e:	2b00      	cmp	r3, #0
  42d620:	f04f 0603 	mov.w	r6, #3
  42d624:	dc95      	bgt.n	42d552 <__ssvfiscanf_r+0x202>
  42d626:	4659      	mov	r1, fp
  42d628:	4638      	mov	r0, r7
  42d62a:	f7ff fe33 	bl	42d294 <__ssrefill_r>
  42d62e:	2800      	cmp	r0, #0
  42d630:	d08f      	beq.n	42d552 <__ssvfiscanf_r+0x202>
  42d632:	e7dd      	b.n	42d5f0 <__ssvfiscanf_r+0x2a0>
  42d634:	9303      	str	r3, [sp, #12]
  42d636:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  42d63a:	2600      	movs	r6, #0
  42d63c:	e785      	b.n	42d54a <__ssvfiscanf_r+0x1fa>
  42d63e:	f896 8001 	ldrb.w	r8, [r6, #1]
  42d642:	f045 0504 	orr.w	r5, r5, #4
  42d646:	461e      	mov	r6, r3
  42d648:	e6d8      	b.n	42d3fc <__ssvfiscanf_r+0xac>
  42d64a:	9303      	str	r3, [sp, #12]
  42d64c:	4b65      	ldr	r3, [pc, #404]	; (42d7e4 <__ssvfiscanf_r+0x494>)
  42d64e:	9307      	str	r3, [sp, #28]
  42d650:	230a      	movs	r3, #10
  42d652:	9304      	str	r3, [sp, #16]
  42d654:	2603      	movs	r6, #3
  42d656:	e778      	b.n	42d54a <__ssvfiscanf_r+0x1fa>
  42d658:	9303      	str	r3, [sp, #12]
  42d65a:	2602      	movs	r6, #2
  42d65c:	e775      	b.n	42d54a <__ssvfiscanf_r+0x1fa>
  42d65e:	9303      	str	r3, [sp, #12]
  42d660:	f445 7508 	orr.w	r5, r5, #544	; 0x220
  42d664:	4b5f      	ldr	r3, [pc, #380]	; (42d7e4 <__ssvfiscanf_r+0x494>)
  42d666:	9307      	str	r3, [sp, #28]
  42d668:	2310      	movs	r3, #16
  42d66a:	9304      	str	r3, [sp, #16]
  42d66c:	2603      	movs	r6, #3
  42d66e:	e76c      	b.n	42d54a <__ssvfiscanf_r+0x1fa>
  42d670:	9303      	str	r3, [sp, #12]
  42d672:	4b5c      	ldr	r3, [pc, #368]	; (42d7e4 <__ssvfiscanf_r+0x494>)
  42d674:	9307      	str	r3, [sp, #28]
  42d676:	2308      	movs	r3, #8
  42d678:	9304      	str	r3, [sp, #16]
  42d67a:	2603      	movs	r6, #3
  42d67c:	e765      	b.n	42d54a <__ssvfiscanf_r+0x1fa>
  42d67e:	9303      	str	r3, [sp, #12]
  42d680:	06eb      	lsls	r3, r5, #27
  42d682:	d478      	bmi.n	42d776 <__ssvfiscanf_r+0x426>
  42d684:	076e      	lsls	r6, r5, #29
  42d686:	f100 82d4 	bmi.w	42dc32 <__ssvfiscanf_r+0x8e2>
  42d68a:	07ec      	lsls	r4, r5, #31
  42d68c:	f100 82c0 	bmi.w	42dc10 <__ssvfiscanf_r+0x8c0>
  42d690:	07a8      	lsls	r0, r5, #30
  42d692:	f140 82bd 	bpl.w	42dc10 <__ssvfiscanf_r+0x8c0>
  42d696:	9a06      	ldr	r2, [sp, #24]
  42d698:	9e03      	ldr	r6, [sp, #12]
  42d69a:	6813      	ldr	r3, [r2, #0]
  42d69c:	4650      	mov	r0, sl
  42d69e:	17c1      	asrs	r1, r0, #31
  42d6a0:	3204      	adds	r2, #4
  42d6a2:	9206      	str	r2, [sp, #24]
  42d6a4:	e9c3 0100 	strd	r0, r1, [r3]
  42d6a8:	4634      	mov	r4, r6
  42d6aa:	e697      	b.n	42d3dc <__ssvfiscanf_r+0x8c>
  42d6ac:	f896 8001 	ldrb.w	r8, [r6, #1]
  42d6b0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  42d6b4:	f000 82a5 	beq.w	42dc02 <__ssvfiscanf_r+0x8b2>
  42d6b8:	f045 0501 	orr.w	r5, r5, #1
  42d6bc:	461e      	mov	r6, r3
  42d6be:	e69d      	b.n	42d3fc <__ssvfiscanf_r+0xac>
  42d6c0:	4619      	mov	r1, r3
  42d6c2:	a818      	add	r0, sp, #96	; 0x60
  42d6c4:	f000 fd96 	bl	42e1f4 <__sccl>
  42d6c8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  42d6cc:	9003      	str	r0, [sp, #12]
  42d6ce:	2601      	movs	r6, #1
  42d6d0:	e73b      	b.n	42d54a <__ssvfiscanf_r+0x1fa>
  42d6d2:	9303      	str	r3, [sp, #12]
  42d6d4:	f445 7500 	orr.w	r5, r5, #512	; 0x200
  42d6d8:	e7c4      	b.n	42d664 <__ssvfiscanf_r+0x314>
  42d6da:	9303      	str	r3, [sp, #12]
  42d6dc:	f045 0501 	orr.w	r5, r5, #1
  42d6e0:	e7c7      	b.n	42d672 <__ssvfiscanf_r+0x322>
  42d6e2:	f896 8001 	ldrb.w	r8, [r6, #1]
  42d6e6:	f045 0502 	orr.w	r5, r5, #2
  42d6ea:	461e      	mov	r6, r3
  42d6ec:	e686      	b.n	42d3fc <__ssvfiscanf_r+0xac>
  42d6ee:	9303      	str	r3, [sp, #12]
  42d6f0:	f045 0501 	orr.w	r5, r5, #1
  42d6f4:	e78d      	b.n	42d612 <__ssvfiscanf_r+0x2c2>
  42d6f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  42d6fa:	eb08 0444 	add.w	r4, r8, r4, lsl #1
  42d6fe:	3c30      	subs	r4, #48	; 0x30
  42d700:	f896 8001 	ldrb.w	r8, [r6, #1]
  42d704:	461e      	mov	r6, r3
  42d706:	e679      	b.n	42d3fc <__ssvfiscanf_r+0xac>
  42d708:	f896 8001 	ldrb.w	r8, [r6, #1]
  42d70c:	f045 0510 	orr.w	r5, r5, #16
  42d710:	461e      	mov	r6, r3
  42d712:	e673      	b.n	42d3fc <__ssvfiscanf_r+0xac>
  42d714:	9303      	str	r3, [sp, #12]
  42d716:	f7fe f841 	bl	42b79c <__locale_ctype_ptr>
  42d71a:	4440      	add	r0, r8
  42d71c:	7843      	ldrb	r3, [r0, #1]
  42d71e:	f003 0303 	and.w	r3, r3, #3
  42d722:	2b01      	cmp	r3, #1
  42d724:	f47f af75 	bne.w	42d612 <__ssvfiscanf_r+0x2c2>
  42d728:	f045 0501 	orr.w	r5, r5, #1
  42d72c:	e771      	b.n	42d612 <__ssvfiscanf_r+0x2c2>
  42d72e:	ab0c      	add	r3, sp, #48	; 0x30
  42d730:	4618      	mov	r0, r3
  42d732:	2208      	movs	r2, #8
  42d734:	2100      	movs	r1, #0
  42d736:	9308      	str	r3, [sp, #32]
  42d738:	f7f9 fa5c 	bl	426bf4 <memset>
  42d73c:	f015 0310 	ands.w	r3, r5, #16
  42d740:	9309      	str	r3, [sp, #36]	; 0x24
  42d742:	f000 81e1 	beq.w	42db08 <__ssvfiscanf_r+0x7b8>
  42d746:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  42d74a:	2600      	movs	r6, #0
  42d74c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  42d750:	f7fe f824 	bl	42b79c <__locale_ctype_ptr>
  42d754:	f8db 3000 	ldr.w	r3, [fp]
  42d758:	781b      	ldrb	r3, [r3, #0]
  42d75a:	4403      	add	r3, r0
  42d75c:	785b      	ldrb	r3, [r3, #1]
  42d75e:	071a      	lsls	r2, r3, #28
  42d760:	d402      	bmi.n	42d768 <__ssvfiscanf_r+0x418>
  42d762:	2c00      	cmp	r4, #0
  42d764:	f040 8270 	bne.w	42dc48 <__ssvfiscanf_r+0x8f8>
  42d768:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42d76a:	b923      	cbnz	r3, 42d776 <__ssvfiscanf_r+0x426>
  42d76c:	f8c9 3000 	str.w	r3, [r9]
  42d770:	9b05      	ldr	r3, [sp, #20]
  42d772:	3301      	adds	r3, #1
  42d774:	9305      	str	r3, [sp, #20]
  42d776:	9e03      	ldr	r6, [sp, #12]
  42d778:	4634      	mov	r4, r6
  42d77a:	e62f      	b.n	42d3dc <__ssvfiscanf_r+0x8c>
  42d77c:	2c00      	cmp	r4, #0
  42d77e:	bf08      	it	eq
  42d780:	f04f 34ff 	moveq.w	r4, #4294967295
  42d784:	06e8      	lsls	r0, r5, #27
  42d786:	f140 810b 	bpl.w	42d9a0 <__ssvfiscanf_r+0x650>
  42d78a:	f8db 2000 	ldr.w	r2, [fp]
  42d78e:	2500      	movs	r5, #0
  42d790:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  42d794:	7813      	ldrb	r3, [r2, #0]
  42d796:	f818 3003 	ldrb.w	r3, [r8, r3]
  42d79a:	3201      	adds	r2, #1
  42d79c:	b1db      	cbz	r3, 42d7d6 <__ssvfiscanf_r+0x486>
  42d79e:	f8db 3004 	ldr.w	r3, [fp, #4]
  42d7a2:	f8cb 2000 	str.w	r2, [fp]
  42d7a6:	3501      	adds	r5, #1
  42d7a8:	3b01      	subs	r3, #1
  42d7aa:	42ac      	cmp	r4, r5
  42d7ac:	f8cb 3004 	str.w	r3, [fp, #4]
  42d7b0:	f43f aeff 	beq.w	42d5b2 <__ssvfiscanf_r+0x262>
  42d7b4:	2b00      	cmp	r3, #0
  42d7b6:	dced      	bgt.n	42d794 <__ssvfiscanf_r+0x444>
  42d7b8:	4659      	mov	r1, fp
  42d7ba:	4638      	mov	r0, r7
  42d7bc:	f7ff fd6a 	bl	42d294 <__ssrefill_r>
  42d7c0:	2800      	cmp	r0, #0
  42d7c2:	f47f aef6 	bne.w	42d5b2 <__ssvfiscanf_r+0x262>
  42d7c6:	f8db 2000 	ldr.w	r2, [fp]
  42d7ca:	7813      	ldrb	r3, [r2, #0]
  42d7cc:	f818 3003 	ldrb.w	r3, [r8, r3]
  42d7d0:	3201      	adds	r2, #1
  42d7d2:	2b00      	cmp	r3, #0
  42d7d4:	d1e3      	bne.n	42d79e <__ssvfiscanf_r+0x44e>
  42d7d6:	2d00      	cmp	r5, #0
  42d7d8:	f47f aeeb 	bne.w	42d5b2 <__ssvfiscanf_r+0x262>
  42d7dc:	e604      	b.n	42d3e8 <__ssvfiscanf_r+0x98>
  42d7de:	bf00      	nop
  42d7e0:	0042e391 	.word	0x0042e391
  42d7e4:	0042d0c9 	.word	0x0042d0c9
  42d7e8:	1e63      	subs	r3, r4, #1
  42d7ea:	2b26      	cmp	r3, #38	; 0x26
  42d7ec:	bf8c      	ite	hi
  42d7ee:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
  42d7f2:	2200      	movls	r2, #0
  42d7f4:	f04f 0900 	mov.w	r9, #0
  42d7f8:	4611      	mov	r1, r2
  42d7fa:	ae0e      	add	r6, sp, #56	; 0x38
  42d7fc:	464b      	mov	r3, r9
  42d7fe:	46b9      	mov	r9, r7
  42d800:	9f04      	ldr	r7, [sp, #16]
  42d802:	4652      	mov	r2, sl
  42d804:	bf88      	it	hi
  42d806:	2427      	movhi	r4, #39	; 0x27
  42d808:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
  42d80c:	46b0      	mov	r8, r6
  42d80e:	468a      	mov	sl, r1
  42d810:	f8db 0000 	ldr.w	r0, [fp]
  42d814:	f890 e000 	ldrb.w	lr, [r0]
  42d818:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
  42d81c:	294d      	cmp	r1, #77	; 0x4d
  42d81e:	d842      	bhi.n	42d8a6 <__ssvfiscanf_r+0x556>
  42d820:	e8df f001 	tbb	[pc, r1]
  42d824:	418e418e 	.word	0x418e418e
  42d828:	5d5d6341 	.word	0x5d5d6341
  42d82c:	5d5d5d5d 	.word	0x5d5d5d5d
  42d830:	4188885d 	.word	0x4188885d
  42d834:	41414141 	.word	0x41414141
  42d838:	58584141 	.word	0x58584141
  42d83c:	58585858 	.word	0x58585858
  42d840:	41414141 	.word	0x41414141
  42d844:	41414141 	.word	0x41414141
  42d848:	41414141 	.word	0x41414141
  42d84c:	41414141 	.word	0x41414141
  42d850:	41412741 	.word	0x41412741
  42d854:	41414141 	.word	0x41414141
  42d858:	58584141 	.word	0x58584141
  42d85c:	58585858 	.word	0x58585858
  42d860:	41414141 	.word	0x41414141
  42d864:	41414141 	.word	0x41414141
  42d868:	41414141 	.word	0x41414141
  42d86c:	41414141 	.word	0x41414141
  42d870:	2741      	.short	0x2741
  42d872:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
  42d876:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  42d87a:	d114      	bne.n	42d8a6 <__ssvfiscanf_r+0x556>
  42d87c:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  42d880:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
  42d884:	2710      	movs	r7, #16
  42d886:	f8db 1004 	ldr.w	r1, [fp, #4]
  42d88a:	f888 e000 	strb.w	lr, [r8]
  42d88e:	3901      	subs	r1, #1
  42d890:	2900      	cmp	r1, #0
  42d892:	f108 0801 	add.w	r8, r8, #1
  42d896:	f8cb 1004 	str.w	r1, [fp, #4]
  42d89a:	dd40      	ble.n	42d91e <__ssvfiscanf_r+0x5ce>
  42d89c:	3001      	adds	r0, #1
  42d89e:	f8cb 0000 	str.w	r0, [fp]
  42d8a2:	3c01      	subs	r4, #1
  42d8a4:	d1b4      	bne.n	42d810 <__ssvfiscanf_r+0x4c0>
  42d8a6:	05e8      	lsls	r0, r5, #23
  42d8a8:	9704      	str	r7, [sp, #16]
  42d8aa:	4692      	mov	sl, r2
  42d8ac:	464f      	mov	r7, r9
  42d8ae:	4699      	mov	r9, r3
  42d8b0:	d505      	bpl.n	42d8be <__ssvfiscanf_r+0x56e>
  42d8b2:	45b0      	cmp	r8, r6
  42d8b4:	f200 8194 	bhi.w	42dbe0 <__ssvfiscanf_r+0x890>
  42d8b8:	45b0      	cmp	r8, r6
  42d8ba:	f43f ad95 	beq.w	42d3e8 <__ssvfiscanf_r+0x98>
  42d8be:	f015 0410 	ands.w	r4, r5, #16
  42d8c2:	f000 80e5 	beq.w	42da90 <__ssvfiscanf_r+0x740>
  42d8c6:	eba8 0606 	sub.w	r6, r8, r6
  42d8ca:	44b1      	add	r9, r6
  42d8cc:	9e03      	ldr	r6, [sp, #12]
  42d8ce:	44ca      	add	sl, r9
  42d8d0:	4634      	mov	r4, r6
  42d8d2:	e583      	b.n	42d3dc <__ssvfiscanf_r+0x8c>
  42d8d4:	2f0a      	cmp	r7, #10
  42d8d6:	dde6      	ble.n	42d8a6 <__ssvfiscanf_r+0x556>
  42d8d8:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
  42d8dc:	e7d3      	b.n	42d886 <__ssvfiscanf_r+0x536>
  42d8de:	49b3      	ldr	r1, [pc, #716]	; (42dbac <__ssvfiscanf_r+0x85c>)
  42d8e0:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
  42d8e4:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
  42d8e8:	e7cd      	b.n	42d886 <__ssvfiscanf_r+0x536>
  42d8ea:	0529      	lsls	r1, r5, #20
  42d8ec:	d5cb      	bpl.n	42d886 <__ssvfiscanf_r+0x536>
  42d8ee:	b917      	cbnz	r7, 42d8f6 <__ssvfiscanf_r+0x5a6>
  42d8f0:	f445 7500 	orr.w	r5, r5, #512	; 0x200
  42d8f4:	2708      	movs	r7, #8
  42d8f6:	0569      	lsls	r1, r5, #21
  42d8f8:	f100 80fa 	bmi.w	42daf0 <__ssvfiscanf_r+0x7a0>
  42d8fc:	f425 7560 	bic.w	r5, r5, #896	; 0x380
  42d900:	f1ba 0f00 	cmp.w	sl, #0
  42d904:	d002      	beq.n	42d90c <__ssvfiscanf_r+0x5bc>
  42d906:	f10a 3aff 	add.w	sl, sl, #4294967295
  42d90a:	3401      	adds	r4, #1
  42d90c:	f8db 1004 	ldr.w	r1, [fp, #4]
  42d910:	3901      	subs	r1, #1
  42d912:	2900      	cmp	r1, #0
  42d914:	f103 0301 	add.w	r3, r3, #1
  42d918:	f8cb 1004 	str.w	r1, [fp, #4]
  42d91c:	dcbe      	bgt.n	42d89c <__ssvfiscanf_r+0x54c>
  42d91e:	4659      	mov	r1, fp
  42d920:	4648      	mov	r0, r9
  42d922:	9308      	str	r3, [sp, #32]
  42d924:	9204      	str	r2, [sp, #16]
  42d926:	f7ff fcb5 	bl	42d294 <__ssrefill_r>
  42d92a:	9a04      	ldr	r2, [sp, #16]
  42d92c:	9b08      	ldr	r3, [sp, #32]
  42d92e:	2800      	cmp	r0, #0
  42d930:	d0b7      	beq.n	42d8a2 <__ssvfiscanf_r+0x552>
  42d932:	e7b8      	b.n	42d8a6 <__ssvfiscanf_r+0x556>
  42d934:	499d      	ldr	r1, [pc, #628]	; (42dbac <__ssvfiscanf_r+0x85c>)
  42d936:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
  42d93a:	2f08      	cmp	r7, #8
  42d93c:	dccc      	bgt.n	42d8d8 <__ssvfiscanf_r+0x588>
  42d93e:	e7b2      	b.n	42d8a6 <__ssvfiscanf_r+0x556>
  42d940:	0629      	lsls	r1, r5, #24
  42d942:	d5b0      	bpl.n	42d8a6 <__ssvfiscanf_r+0x556>
  42d944:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  42d948:	e79d      	b.n	42d886 <__ssvfiscanf_r+0x536>
  42d94a:	2c00      	cmp	r4, #0
  42d94c:	bf08      	it	eq
  42d94e:	f04f 34ff 	moveq.w	r4, #4294967295
  42d952:	f015 0601 	ands.w	r6, r5, #1
  42d956:	f47f aeea 	bne.w	42d72e <__ssvfiscanf_r+0x3de>
  42d95a:	06eb      	lsls	r3, r5, #27
  42d95c:	f140 80f4 	bpl.w	42db48 <__ssvfiscanf_r+0x7f8>
  42d960:	f7fd ff1c 	bl	42b79c <__locale_ctype_ptr>
  42d964:	f8db 3000 	ldr.w	r3, [fp]
  42d968:	781a      	ldrb	r2, [r3, #0]
  42d96a:	4410      	add	r0, r2
  42d96c:	3301      	adds	r3, #1
  42d96e:	7842      	ldrb	r2, [r0, #1]
  42d970:	0715      	lsls	r5, r2, #28
  42d972:	d411      	bmi.n	42d998 <__ssvfiscanf_r+0x648>
  42d974:	f8db 2004 	ldr.w	r2, [fp, #4]
  42d978:	f8cb 3000 	str.w	r3, [fp]
  42d97c:	3601      	adds	r6, #1
  42d97e:	3a01      	subs	r2, #1
  42d980:	42b4      	cmp	r4, r6
  42d982:	f8cb 2004 	str.w	r2, [fp, #4]
  42d986:	d007      	beq.n	42d998 <__ssvfiscanf_r+0x648>
  42d988:	2a00      	cmp	r2, #0
  42d98a:	dce9      	bgt.n	42d960 <__ssvfiscanf_r+0x610>
  42d98c:	4659      	mov	r1, fp
  42d98e:	4638      	mov	r0, r7
  42d990:	f7ff fc80 	bl	42d294 <__ssrefill_r>
  42d994:	2800      	cmp	r0, #0
  42d996:	d0e3      	beq.n	42d960 <__ssvfiscanf_r+0x610>
  42d998:	44b2      	add	sl, r6
  42d99a:	9e03      	ldr	r6, [sp, #12]
  42d99c:	4634      	mov	r4, r6
  42d99e:	e51d      	b.n	42d3dc <__ssvfiscanf_r+0x8c>
  42d9a0:	9a06      	ldr	r2, [sp, #24]
  42d9a2:	6815      	ldr	r5, [r2, #0]
  42d9a4:	1d16      	adds	r6, r2, #4
  42d9a6:	46a9      	mov	r9, r5
  42d9a8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  42d9ac:	f8db 3000 	ldr.w	r3, [fp]
  42d9b0:	781a      	ldrb	r2, [r3, #0]
  42d9b2:	f818 2002 	ldrb.w	r2, [r8, r2]
  42d9b6:	1c59      	adds	r1, r3, #1
  42d9b8:	b1c2      	cbz	r2, 42d9ec <__ssvfiscanf_r+0x69c>
  42d9ba:	f8db 2004 	ldr.w	r2, [fp, #4]
  42d9be:	f8cb 1000 	str.w	r1, [fp]
  42d9c2:	3a01      	subs	r2, #1
  42d9c4:	f8cb 2004 	str.w	r2, [fp, #4]
  42d9c8:	781b      	ldrb	r3, [r3, #0]
  42d9ca:	f809 3b01 	strb.w	r3, [r9], #1
  42d9ce:	3c01      	subs	r4, #1
  42d9d0:	d00c      	beq.n	42d9ec <__ssvfiscanf_r+0x69c>
  42d9d2:	f8db 3004 	ldr.w	r3, [fp, #4]
  42d9d6:	2b00      	cmp	r3, #0
  42d9d8:	dce8      	bgt.n	42d9ac <__ssvfiscanf_r+0x65c>
  42d9da:	4659      	mov	r1, fp
  42d9dc:	4638      	mov	r0, r7
  42d9de:	f7ff fc59 	bl	42d294 <__ssrefill_r>
  42d9e2:	2800      	cmp	r0, #0
  42d9e4:	d0e2      	beq.n	42d9ac <__ssvfiscanf_r+0x65c>
  42d9e6:	454d      	cmp	r5, r9
  42d9e8:	f43f ae02 	beq.w	42d5f0 <__ssvfiscanf_r+0x2a0>
  42d9ec:	ebb9 0505 	subs.w	r5, r9, r5
  42d9f0:	f43f acfa 	beq.w	42d3e8 <__ssvfiscanf_r+0x98>
  42d9f4:	9a05      	ldr	r2, [sp, #20]
  42d9f6:	9606      	str	r6, [sp, #24]
  42d9f8:	2300      	movs	r3, #0
  42d9fa:	3201      	adds	r2, #1
  42d9fc:	9205      	str	r2, [sp, #20]
  42d9fe:	f889 3000 	strb.w	r3, [r9]
  42da02:	e5d6      	b.n	42d5b2 <__ssvfiscanf_r+0x262>
  42da04:	ab0c      	add	r3, sp, #48	; 0x30
  42da06:	4618      	mov	r0, r3
  42da08:	2208      	movs	r2, #8
  42da0a:	2100      	movs	r1, #0
  42da0c:	9308      	str	r3, [sp, #32]
  42da0e:	f7f9 f8f1 	bl	426bf4 <memset>
  42da12:	f015 0310 	ands.w	r3, r5, #16
  42da16:	9309      	str	r3, [sp, #36]	; 0x24
  42da18:	d06d      	beq.n	42daf6 <__ssvfiscanf_r+0x7a6>
  42da1a:	f04f 0900 	mov.w	r9, #0
  42da1e:	2c00      	cmp	r4, #0
  42da20:	f43f aea9 	beq.w	42d776 <__ssvfiscanf_r+0x426>
  42da24:	2500      	movs	r5, #0
  42da26:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  42da2a:	f7fd fea5 	bl	42b778 <__locale_mb_cur_max>
  42da2e:	4285      	cmp	r5, r0
  42da30:	f43f adde 	beq.w	42d5f0 <__ssvfiscanf_r+0x2a0>
  42da34:	e89b 000c 	ldmia.w	fp, {r2, r3}
  42da38:	f812 0b01 	ldrb.w	r0, [r2], #1
  42da3c:	f8cb 2000 	str.w	r2, [fp]
  42da40:	3b01      	subs	r3, #1
  42da42:	9a08      	ldr	r2, [sp, #32]
  42da44:	9200      	str	r2, [sp, #0]
  42da46:	1c6e      	adds	r6, r5, #1
  42da48:	f8cb 3004 	str.w	r3, [fp, #4]
  42da4c:	f808 0005 	strb.w	r0, [r8, r5]
  42da50:	4633      	mov	r3, r6
  42da52:	4642      	mov	r2, r8
  42da54:	4649      	mov	r1, r9
  42da56:	4638      	mov	r0, r7
  42da58:	f000 fb88 	bl	42e16c <_mbrtowc_r>
  42da5c:	1c43      	adds	r3, r0, #1
  42da5e:	f43f adc7 	beq.w	42d5f0 <__ssvfiscanf_r+0x2a0>
  42da62:	2800      	cmp	r0, #0
  42da64:	d15d      	bne.n	42db22 <__ssvfiscanf_r+0x7d2>
  42da66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42da68:	2b00      	cmp	r3, #0
  42da6a:	d15e      	bne.n	42db2a <__ssvfiscanf_r+0x7da>
  42da6c:	f8c9 3000 	str.w	r3, [r9]
  42da70:	44b2      	add	sl, r6
  42da72:	3c01      	subs	r4, #1
  42da74:	f109 0904 	add.w	r9, r9, #4
  42da78:	2500      	movs	r5, #0
  42da7a:	f8db 3004 	ldr.w	r3, [fp, #4]
  42da7e:	2b00      	cmp	r3, #0
  42da80:	dd2d      	ble.n	42dade <__ssvfiscanf_r+0x78e>
  42da82:	2c00      	cmp	r4, #0
  42da84:	d1d1      	bne.n	42da2a <__ssvfiscanf_r+0x6da>
  42da86:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42da88:	2b00      	cmp	r3, #0
  42da8a:	f43f ae71 	beq.w	42d770 <__ssvfiscanf_r+0x420>
  42da8e:	e672      	b.n	42d776 <__ssvfiscanf_r+0x426>
  42da90:	4622      	mov	r2, r4
  42da92:	4631      	mov	r1, r6
  42da94:	f888 4000 	strb.w	r4, [r8]
  42da98:	9b04      	ldr	r3, [sp, #16]
  42da9a:	9c07      	ldr	r4, [sp, #28]
  42da9c:	4638      	mov	r0, r7
  42da9e:	47a0      	blx	r4
  42daa0:	06a9      	lsls	r1, r5, #26
  42daa2:	d438      	bmi.n	42db16 <__ssvfiscanf_r+0x7c6>
  42daa4:	076a      	lsls	r2, r5, #29
  42daa6:	f100 80be 	bmi.w	42dc26 <__ssvfiscanf_r+0x8d6>
  42daaa:	f015 0201 	ands.w	r2, r5, #1
  42daae:	d132      	bne.n	42db16 <__ssvfiscanf_r+0x7c6>
  42dab0:	07ab      	lsls	r3, r5, #30
  42dab2:	d530      	bpl.n	42db16 <__ssvfiscanf_r+0x7c6>
  42dab4:	9b07      	ldr	r3, [sp, #28]
  42dab6:	4619      	mov	r1, r3
  42dab8:	4b3d      	ldr	r3, [pc, #244]	; (42dbb0 <__ssvfiscanf_r+0x860>)
  42daba:	4299      	cmp	r1, r3
  42dabc:	4638      	mov	r0, r7
  42dabe:	9b04      	ldr	r3, [sp, #16]
  42dac0:	4631      	mov	r1, r6
  42dac2:	f000 8105 	beq.w	42dcd0 <__ssvfiscanf_r+0x980>
  42dac6:	f000 fd43 	bl	42e550 <_strtoll_r>
  42daca:	9a06      	ldr	r2, [sp, #24]
  42dacc:	6813      	ldr	r3, [r2, #0]
  42dace:	e9c3 0100 	strd	r0, r1, [r3]
  42dad2:	3204      	adds	r2, #4
  42dad4:	9206      	str	r2, [sp, #24]
  42dad6:	9b05      	ldr	r3, [sp, #20]
  42dad8:	3301      	adds	r3, #1
  42dada:	9305      	str	r3, [sp, #20]
  42dadc:	e6f3      	b.n	42d8c6 <__ssvfiscanf_r+0x576>
  42dade:	4659      	mov	r1, fp
  42dae0:	4638      	mov	r0, r7
  42dae2:	f7ff fbd7 	bl	42d294 <__ssrefill_r>
  42dae6:	2800      	cmp	r0, #0
  42dae8:	d0cb      	beq.n	42da82 <__ssvfiscanf_r+0x732>
  42daea:	2d00      	cmp	r5, #0
  42daec:	d0cb      	beq.n	42da86 <__ssvfiscanf_r+0x736>
  42daee:	e57f      	b.n	42d5f0 <__ssvfiscanf_r+0x2a0>
  42daf0:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
  42daf4:	e6c7      	b.n	42d886 <__ssvfiscanf_r+0x536>
  42daf6:	9a06      	ldr	r2, [sp, #24]
  42daf8:	4613      	mov	r3, r2
  42dafa:	3304      	adds	r3, #4
  42dafc:	f8d2 9000 	ldr.w	r9, [r2]
  42db00:	9306      	str	r3, [sp, #24]
  42db02:	2c00      	cmp	r4, #0
  42db04:	d18e      	bne.n	42da24 <__ssvfiscanf_r+0x6d4>
  42db06:	e633      	b.n	42d770 <__ssvfiscanf_r+0x420>
  42db08:	9a06      	ldr	r2, [sp, #24]
  42db0a:	4613      	mov	r3, r2
  42db0c:	3304      	adds	r3, #4
  42db0e:	f8d2 9000 	ldr.w	r9, [r2]
  42db12:	9306      	str	r3, [sp, #24]
  42db14:	e619      	b.n	42d74a <__ssvfiscanf_r+0x3fa>
  42db16:	9a06      	ldr	r2, [sp, #24]
  42db18:	6813      	ldr	r3, [r2, #0]
  42db1a:	3204      	adds	r2, #4
  42db1c:	9206      	str	r2, [sp, #24]
  42db1e:	6018      	str	r0, [r3, #0]
  42db20:	e7d9      	b.n	42dad6 <__ssvfiscanf_r+0x786>
  42db22:	3002      	adds	r0, #2
  42db24:	d105      	bne.n	42db32 <__ssvfiscanf_r+0x7e2>
  42db26:	4635      	mov	r5, r6
  42db28:	e7a7      	b.n	42da7a <__ssvfiscanf_r+0x72a>
  42db2a:	44b2      	add	sl, r6
  42db2c:	3c01      	subs	r4, #1
  42db2e:	4605      	mov	r5, r0
  42db30:	e7a3      	b.n	42da7a <__ssvfiscanf_r+0x72a>
  42db32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42db34:	44b2      	add	sl, r6
  42db36:	3c01      	subs	r4, #1
  42db38:	2b00      	cmp	r3, #0
  42db3a:	d09b      	beq.n	42da74 <__ssvfiscanf_r+0x724>
  42db3c:	2500      	movs	r5, #0
  42db3e:	e79c      	b.n	42da7a <__ssvfiscanf_r+0x72a>
  42db40:	2d00      	cmp	r5, #0
  42db42:	f47f ad36 	bne.w	42d5b2 <__ssvfiscanf_r+0x262>
  42db46:	e553      	b.n	42d5f0 <__ssvfiscanf_r+0x2a0>
  42db48:	9a06      	ldr	r2, [sp, #24]
  42db4a:	6816      	ldr	r6, [r2, #0]
  42db4c:	f102 0804 	add.w	r8, r2, #4
  42db50:	4635      	mov	r5, r6
  42db52:	f7fd fe23 	bl	42b79c <__locale_ctype_ptr>
  42db56:	f8db 2000 	ldr.w	r2, [fp]
  42db5a:	7813      	ldrb	r3, [r2, #0]
  42db5c:	4418      	add	r0, r3
  42db5e:	1c51      	adds	r1, r2, #1
  42db60:	7843      	ldrb	r3, [r0, #1]
  42db62:	0718      	lsls	r0, r3, #28
  42db64:	d415      	bmi.n	42db92 <__ssvfiscanf_r+0x842>
  42db66:	f8db 3004 	ldr.w	r3, [fp, #4]
  42db6a:	f8cb 1000 	str.w	r1, [fp]
  42db6e:	3b01      	subs	r3, #1
  42db70:	f8cb 3004 	str.w	r3, [fp, #4]
  42db74:	7813      	ldrb	r3, [r2, #0]
  42db76:	f805 3b01 	strb.w	r3, [r5], #1
  42db7a:	3c01      	subs	r4, #1
  42db7c:	d009      	beq.n	42db92 <__ssvfiscanf_r+0x842>
  42db7e:	f8db 3004 	ldr.w	r3, [fp, #4]
  42db82:	2b00      	cmp	r3, #0
  42db84:	dce5      	bgt.n	42db52 <__ssvfiscanf_r+0x802>
  42db86:	4659      	mov	r1, fp
  42db88:	4638      	mov	r0, r7
  42db8a:	f7ff fb83 	bl	42d294 <__ssrefill_r>
  42db8e:	2800      	cmp	r0, #0
  42db90:	d0df      	beq.n	42db52 <__ssvfiscanf_r+0x802>
  42db92:	1bae      	subs	r6, r5, r6
  42db94:	9a05      	ldr	r2, [sp, #20]
  42db96:	f8cd 8018 	str.w	r8, [sp, #24]
  42db9a:	44b2      	add	sl, r6
  42db9c:	9e03      	ldr	r6, [sp, #12]
  42db9e:	2300      	movs	r3, #0
  42dba0:	3201      	adds	r2, #1
  42dba2:	9205      	str	r2, [sp, #20]
  42dba4:	702b      	strb	r3, [r5, #0]
  42dba6:	4634      	mov	r4, r6
  42dba8:	e418      	b.n	42d3dc <__ssvfiscanf_r+0x8c>
  42dbaa:	bf00      	nop
  42dbac:	0042f8ec 	.word	0x0042f8ec
  42dbb0:	0042d0c9 	.word	0x0042d0c9
  42dbb4:	9d06      	ldr	r5, [sp, #24]
  42dbb6:	4623      	mov	r3, r4
  42dbb8:	6829      	ldr	r1, [r5, #0]
  42dbba:	f8cd b000 	str.w	fp, [sp]
  42dbbe:	2201      	movs	r2, #1
  42dbc0:	4638      	mov	r0, r7
  42dbc2:	f7ff fb85 	bl	42d2d0 <_sfread_r>
  42dbc6:	1d2e      	adds	r6, r5, #4
  42dbc8:	2800      	cmp	r0, #0
  42dbca:	f43f ad11 	beq.w	42d5f0 <__ssvfiscanf_r+0x2a0>
  42dbce:	9b05      	ldr	r3, [sp, #20]
  42dbd0:	9606      	str	r6, [sp, #24]
  42dbd2:	9e03      	ldr	r6, [sp, #12]
  42dbd4:	3301      	adds	r3, #1
  42dbd6:	4482      	add	sl, r0
  42dbd8:	9305      	str	r3, [sp, #20]
  42dbda:	4634      	mov	r4, r6
  42dbdc:	f7ff bbfe 	b.w	42d3dc <__ssvfiscanf_r+0x8c>
  42dbe0:	f818 1c01 	ldrb.w	r1, [r8, #-1]
  42dbe4:	465a      	mov	r2, fp
  42dbe6:	4638      	mov	r0, r7
  42dbe8:	f7ff fb14 	bl	42d214 <_sungetc_r>
  42dbec:	f108 38ff 	add.w	r8, r8, #4294967295
  42dbf0:	e662      	b.n	42d8b8 <__ssvfiscanf_r+0x568>
  42dbf2:	4659      	mov	r1, fp
  42dbf4:	4638      	mov	r0, r7
  42dbf6:	f7ff fb4d 	bl	42d294 <__ssrefill_r>
  42dbfa:	2800      	cmp	r0, #0
  42dbfc:	f43f ac84 	beq.w	42d508 <__ssvfiscanf_r+0x1b8>
  42dc00:	e4f6      	b.n	42d5f0 <__ssvfiscanf_r+0x2a0>
  42dc02:	f896 8002 	ldrb.w	r8, [r6, #2]
  42dc06:	f045 0502 	orr.w	r5, r5, #2
  42dc0a:	3602      	adds	r6, #2
  42dc0c:	f7ff bbf6 	b.w	42d3fc <__ssvfiscanf_r+0xac>
  42dc10:	9a06      	ldr	r2, [sp, #24]
  42dc12:	9e03      	ldr	r6, [sp, #12]
  42dc14:	6813      	ldr	r3, [r2, #0]
  42dc16:	f8c3 a000 	str.w	sl, [r3]
  42dc1a:	4613      	mov	r3, r2
  42dc1c:	3304      	adds	r3, #4
  42dc1e:	9306      	str	r3, [sp, #24]
  42dc20:	4634      	mov	r4, r6
  42dc22:	f7ff bbdb 	b.w	42d3dc <__ssvfiscanf_r+0x8c>
  42dc26:	9a06      	ldr	r2, [sp, #24]
  42dc28:	6813      	ldr	r3, [r2, #0]
  42dc2a:	3204      	adds	r2, #4
  42dc2c:	9206      	str	r2, [sp, #24]
  42dc2e:	8018      	strh	r0, [r3, #0]
  42dc30:	e751      	b.n	42dad6 <__ssvfiscanf_r+0x786>
  42dc32:	9a06      	ldr	r2, [sp, #24]
  42dc34:	9e03      	ldr	r6, [sp, #12]
  42dc36:	6813      	ldr	r3, [r2, #0]
  42dc38:	f8a3 a000 	strh.w	sl, [r3]
  42dc3c:	4613      	mov	r3, r2
  42dc3e:	3304      	adds	r3, #4
  42dc40:	9306      	str	r3, [sp, #24]
  42dc42:	4634      	mov	r4, r6
  42dc44:	f7ff bbca 	b.w	42d3dc <__ssvfiscanf_r+0x8c>
  42dc48:	f7fd fd96 	bl	42b778 <__locale_mb_cur_max>
  42dc4c:	4286      	cmp	r6, r0
  42dc4e:	f43f accf 	beq.w	42d5f0 <__ssvfiscanf_r+0x2a0>
  42dc52:	e89b 000c 	ldmia.w	fp, {r2, r3}
  42dc56:	f812 0b01 	ldrb.w	r0, [r2], #1
  42dc5a:	f8cb 2000 	str.w	r2, [fp]
  42dc5e:	3b01      	subs	r3, #1
  42dc60:	9a08      	ldr	r2, [sp, #32]
  42dc62:	9200      	str	r2, [sp, #0]
  42dc64:	1c75      	adds	r5, r6, #1
  42dc66:	f8cb 3004 	str.w	r3, [fp, #4]
  42dc6a:	4649      	mov	r1, r9
  42dc6c:	f808 0006 	strb.w	r0, [r8, r6]
  42dc70:	462b      	mov	r3, r5
  42dc72:	4642      	mov	r2, r8
  42dc74:	4638      	mov	r0, r7
  42dc76:	f000 fa79 	bl	42e16c <_mbrtowc_r>
  42dc7a:	1c41      	adds	r1, r0, #1
  42dc7c:	f43f acb8 	beq.w	42d5f0 <__ssvfiscanf_r+0x2a0>
  42dc80:	b198      	cbz	r0, 42dcaa <__ssvfiscanf_r+0x95a>
  42dc82:	3002      	adds	r0, #2
  42dc84:	bf08      	it	eq
  42dc86:	462e      	moveq	r6, r5
  42dc88:	d12e      	bne.n	42dce8 <__ssvfiscanf_r+0x998>
  42dc8a:	f8db 3004 	ldr.w	r3, [fp, #4]
  42dc8e:	2b00      	cmp	r3, #0
  42dc90:	f73f ad5e 	bgt.w	42d750 <__ssvfiscanf_r+0x400>
  42dc94:	4659      	mov	r1, fp
  42dc96:	4638      	mov	r0, r7
  42dc98:	f7ff fafc 	bl	42d294 <__ssrefill_r>
  42dc9c:	2800      	cmp	r0, #0
  42dc9e:	f43f ad57 	beq.w	42d750 <__ssvfiscanf_r+0x400>
  42dca2:	2e00      	cmp	r6, #0
  42dca4:	f47f aca4 	bne.w	42d5f0 <__ssvfiscanf_r+0x2a0>
  42dca8:	e55e      	b.n	42d768 <__ssvfiscanf_r+0x418>
  42dcaa:	f8c9 0000 	str.w	r0, [r9]
  42dcae:	f000 fa39 	bl	42e124 <iswspace>
  42dcb2:	4606      	mov	r6, r0
  42dcb4:	b178      	cbz	r0, 42dcd6 <__ssvfiscanf_r+0x986>
  42dcb6:	2d00      	cmp	r5, #0
  42dcb8:	f43f ad56 	beq.w	42d768 <__ssvfiscanf_r+0x418>
  42dcbc:	4445      	add	r5, r8
  42dcbe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
  42dcc2:	465a      	mov	r2, fp
  42dcc4:	4638      	mov	r0, r7
  42dcc6:	f7ff faa5 	bl	42d214 <_sungetc_r>
  42dcca:	4545      	cmp	r5, r8
  42dccc:	d1f7      	bne.n	42dcbe <__ssvfiscanf_r+0x96e>
  42dcce:	e54b      	b.n	42d768 <__ssvfiscanf_r+0x418>
  42dcd0:	f000 fd2e 	bl	42e730 <_strtoull_r>
  42dcd4:	e6f9      	b.n	42daca <__ssvfiscanf_r+0x77a>
  42dcd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42dcd8:	44aa      	add	sl, r5
  42dcda:	3c01      	subs	r4, #1
  42dcdc:	2b00      	cmp	r3, #0
  42dcde:	d1d4      	bne.n	42dc8a <__ssvfiscanf_r+0x93a>
  42dce0:	f109 0904 	add.w	r9, r9, #4
  42dce4:	461e      	mov	r6, r3
  42dce6:	e7d0      	b.n	42dc8a <__ssvfiscanf_r+0x93a>
  42dce8:	f8d9 0000 	ldr.w	r0, [r9]
  42dcec:	e7df      	b.n	42dcae <__ssvfiscanf_r+0x95e>
  42dcee:	bf00      	nop

0042dcf0 <__submore>:
  42dcf0:	f101 0340 	add.w	r3, r1, #64	; 0x40
  42dcf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42dcf8:	460c      	mov	r4, r1
  42dcfa:	6b09      	ldr	r1, [r1, #48]	; 0x30
  42dcfc:	4299      	cmp	r1, r3
  42dcfe:	d014      	beq.n	42dd2a <__submore+0x3a>
  42dd00:	6b66      	ldr	r6, [r4, #52]	; 0x34
  42dd02:	0077      	lsls	r7, r6, #1
  42dd04:	463a      	mov	r2, r7
  42dd06:	f7fe fc7d 	bl	42c604 <_realloc_r>
  42dd0a:	4605      	mov	r5, r0
  42dd0c:	b340      	cbz	r0, 42dd60 <__submore+0x70>
  42dd0e:	eb00 0806 	add.w	r8, r0, r6
  42dd12:	4632      	mov	r2, r6
  42dd14:	4640      	mov	r0, r8
  42dd16:	4629      	mov	r1, r5
  42dd18:	f7f8 fed2 	bl	426ac0 <memcpy>
  42dd1c:	f8c4 8000 	str.w	r8, [r4]
  42dd20:	6325      	str	r5, [r4, #48]	; 0x30
  42dd22:	6367      	str	r7, [r4, #52]	; 0x34
  42dd24:	2000      	movs	r0, #0
  42dd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42dd2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  42dd2e:	f7fd fde5 	bl	42b8fc <_malloc_r>
  42dd32:	b1a8      	cbz	r0, 42dd60 <__submore+0x70>
  42dd34:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  42dd38:	6320      	str	r0, [r4, #48]	; 0x30
  42dd3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  42dd3e:	6362      	str	r2, [r4, #52]	; 0x34
  42dd40:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  42dd44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  42dd48:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  42dd4c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  42dd50:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  42dd54:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  42dd58:	6020      	str	r0, [r4, #0]
  42dd5a:	2000      	movs	r0, #0
  42dd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42dd60:	f04f 30ff 	mov.w	r0, #4294967295
  42dd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0042dd68 <__swbuf_r>:
  42dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42dd6a:	460d      	mov	r5, r1
  42dd6c:	4614      	mov	r4, r2
  42dd6e:	4606      	mov	r6, r0
  42dd70:	b110      	cbz	r0, 42dd78 <__swbuf_r+0x10>
  42dd72:	6b83      	ldr	r3, [r0, #56]	; 0x38
  42dd74:	2b00      	cmp	r3, #0
  42dd76:	d04b      	beq.n	42de10 <__swbuf_r+0xa8>
  42dd78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42dd7c:	69a3      	ldr	r3, [r4, #24]
  42dd7e:	60a3      	str	r3, [r4, #8]
  42dd80:	b291      	uxth	r1, r2
  42dd82:	0708      	lsls	r0, r1, #28
  42dd84:	d539      	bpl.n	42ddfa <__swbuf_r+0x92>
  42dd86:	6923      	ldr	r3, [r4, #16]
  42dd88:	2b00      	cmp	r3, #0
  42dd8a:	d036      	beq.n	42ddfa <__swbuf_r+0x92>
  42dd8c:	b2ed      	uxtb	r5, r5
  42dd8e:	0489      	lsls	r1, r1, #18
  42dd90:	462f      	mov	r7, r5
  42dd92:	d515      	bpl.n	42ddc0 <__swbuf_r+0x58>
  42dd94:	6822      	ldr	r2, [r4, #0]
  42dd96:	6961      	ldr	r1, [r4, #20]
  42dd98:	1ad3      	subs	r3, r2, r3
  42dd9a:	428b      	cmp	r3, r1
  42dd9c:	da1c      	bge.n	42ddd8 <__swbuf_r+0x70>
  42dd9e:	3301      	adds	r3, #1
  42dda0:	68a1      	ldr	r1, [r4, #8]
  42dda2:	1c50      	adds	r0, r2, #1
  42dda4:	3901      	subs	r1, #1
  42dda6:	60a1      	str	r1, [r4, #8]
  42dda8:	6020      	str	r0, [r4, #0]
  42ddaa:	7015      	strb	r5, [r2, #0]
  42ddac:	6962      	ldr	r2, [r4, #20]
  42ddae:	429a      	cmp	r2, r3
  42ddb0:	d01a      	beq.n	42dde8 <__swbuf_r+0x80>
  42ddb2:	89a3      	ldrh	r3, [r4, #12]
  42ddb4:	07db      	lsls	r3, r3, #31
  42ddb6:	d501      	bpl.n	42ddbc <__swbuf_r+0x54>
  42ddb8:	2d0a      	cmp	r5, #10
  42ddba:	d015      	beq.n	42dde8 <__swbuf_r+0x80>
  42ddbc:	4638      	mov	r0, r7
  42ddbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42ddc0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  42ddc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  42ddc6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  42ddca:	81a2      	strh	r2, [r4, #12]
  42ddcc:	6822      	ldr	r2, [r4, #0]
  42ddce:	6661      	str	r1, [r4, #100]	; 0x64
  42ddd0:	6961      	ldr	r1, [r4, #20]
  42ddd2:	1ad3      	subs	r3, r2, r3
  42ddd4:	428b      	cmp	r3, r1
  42ddd6:	dbe2      	blt.n	42dd9e <__swbuf_r+0x36>
  42ddd8:	4621      	mov	r1, r4
  42ddda:	4630      	mov	r0, r6
  42dddc:	f7fc ff92 	bl	42ad04 <_fflush_r>
  42dde0:	b940      	cbnz	r0, 42ddf4 <__swbuf_r+0x8c>
  42dde2:	6822      	ldr	r2, [r4, #0]
  42dde4:	2301      	movs	r3, #1
  42dde6:	e7db      	b.n	42dda0 <__swbuf_r+0x38>
  42dde8:	4621      	mov	r1, r4
  42ddea:	4630      	mov	r0, r6
  42ddec:	f7fc ff8a 	bl	42ad04 <_fflush_r>
  42ddf0:	2800      	cmp	r0, #0
  42ddf2:	d0e3      	beq.n	42ddbc <__swbuf_r+0x54>
  42ddf4:	f04f 37ff 	mov.w	r7, #4294967295
  42ddf8:	e7e0      	b.n	42ddbc <__swbuf_r+0x54>
  42ddfa:	4621      	mov	r1, r4
  42ddfc:	4630      	mov	r0, r6
  42ddfe:	f7fb fe91 	bl	429b24 <__swsetup_r>
  42de02:	2800      	cmp	r0, #0
  42de04:	d1f6      	bne.n	42ddf4 <__swbuf_r+0x8c>
  42de06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42de0a:	6923      	ldr	r3, [r4, #16]
  42de0c:	b291      	uxth	r1, r2
  42de0e:	e7bd      	b.n	42dd8c <__swbuf_r+0x24>
  42de10:	f7fc ffd0 	bl	42adb4 <__sinit>
  42de14:	e7b0      	b.n	42dd78 <__swbuf_r+0x10>
  42de16:	bf00      	nop

0042de18 <_wcrtomb_r>:
  42de18:	b5f0      	push	{r4, r5, r6, r7, lr}
  42de1a:	4606      	mov	r6, r0
  42de1c:	b085      	sub	sp, #20
  42de1e:	461f      	mov	r7, r3
  42de20:	b189      	cbz	r1, 42de46 <_wcrtomb_r+0x2e>
  42de22:	4c10      	ldr	r4, [pc, #64]	; (42de64 <_wcrtomb_r+0x4c>)
  42de24:	4d10      	ldr	r5, [pc, #64]	; (42de68 <_wcrtomb_r+0x50>)
  42de26:	6824      	ldr	r4, [r4, #0]
  42de28:	6b64      	ldr	r4, [r4, #52]	; 0x34
  42de2a:	2c00      	cmp	r4, #0
  42de2c:	bf08      	it	eq
  42de2e:	462c      	moveq	r4, r5
  42de30:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  42de34:	47a0      	blx	r4
  42de36:	1c43      	adds	r3, r0, #1
  42de38:	d103      	bne.n	42de42 <_wcrtomb_r+0x2a>
  42de3a:	2200      	movs	r2, #0
  42de3c:	238a      	movs	r3, #138	; 0x8a
  42de3e:	603a      	str	r2, [r7, #0]
  42de40:	6033      	str	r3, [r6, #0]
  42de42:	b005      	add	sp, #20
  42de44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42de46:	460c      	mov	r4, r1
  42de48:	4906      	ldr	r1, [pc, #24]	; (42de64 <_wcrtomb_r+0x4c>)
  42de4a:	4a07      	ldr	r2, [pc, #28]	; (42de68 <_wcrtomb_r+0x50>)
  42de4c:	6809      	ldr	r1, [r1, #0]
  42de4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  42de50:	2900      	cmp	r1, #0
  42de52:	bf08      	it	eq
  42de54:	4611      	moveq	r1, r2
  42de56:	4622      	mov	r2, r4
  42de58:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  42de5c:	a901      	add	r1, sp, #4
  42de5e:	47a0      	blx	r4
  42de60:	e7e9      	b.n	42de36 <_wcrtomb_r+0x1e>
  42de62:	bf00      	nop
  42de64:	200000c8 	.word	0x200000c8
  42de68:	20000544 	.word	0x20000544

0042de6c <__ascii_wctomb>:
  42de6c:	b121      	cbz	r1, 42de78 <__ascii_wctomb+0xc>
  42de6e:	2aff      	cmp	r2, #255	; 0xff
  42de70:	d804      	bhi.n	42de7c <__ascii_wctomb+0x10>
  42de72:	700a      	strb	r2, [r1, #0]
  42de74:	2001      	movs	r0, #1
  42de76:	4770      	bx	lr
  42de78:	4608      	mov	r0, r1
  42de7a:	4770      	bx	lr
  42de7c:	238a      	movs	r3, #138	; 0x8a
  42de7e:	6003      	str	r3, [r0, #0]
  42de80:	f04f 30ff 	mov.w	r0, #4294967295
  42de84:	4770      	bx	lr
  42de86:	bf00      	nop

0042de88 <_write_r>:
  42de88:	b570      	push	{r4, r5, r6, lr}
  42de8a:	460d      	mov	r5, r1
  42de8c:	4c08      	ldr	r4, [pc, #32]	; (42deb0 <_write_r+0x28>)
  42de8e:	4611      	mov	r1, r2
  42de90:	4606      	mov	r6, r0
  42de92:	461a      	mov	r2, r3
  42de94:	4628      	mov	r0, r5
  42de96:	2300      	movs	r3, #0
  42de98:	6023      	str	r3, [r4, #0]
  42de9a:	f7f3 fa2f 	bl	4212fc <_write>
  42de9e:	1c43      	adds	r3, r0, #1
  42dea0:	d000      	beq.n	42dea4 <_write_r+0x1c>
  42dea2:	bd70      	pop	{r4, r5, r6, pc}
  42dea4:	6823      	ldr	r3, [r4, #0]
  42dea6:	2b00      	cmp	r3, #0
  42dea8:	d0fb      	beq.n	42dea2 <_write_r+0x1a>
  42deaa:	6033      	str	r3, [r6, #0]
  42deac:	bd70      	pop	{r4, r5, r6, pc}
  42deae:	bf00      	nop
  42deb0:	20001738 	.word	0x20001738

0042deb4 <__register_exitproc>:
  42deb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  42deb8:	4d2c      	ldr	r5, [pc, #176]	; (42df6c <__register_exitproc+0xb8>)
  42deba:	4606      	mov	r6, r0
  42debc:	6828      	ldr	r0, [r5, #0]
  42debe:	4698      	mov	r8, r3
  42dec0:	460f      	mov	r7, r1
  42dec2:	4691      	mov	r9, r2
  42dec4:	f7fd fc8c 	bl	42b7e0 <__retarget_lock_acquire_recursive>
  42dec8:	4b29      	ldr	r3, [pc, #164]	; (42df70 <__register_exitproc+0xbc>)
  42deca:	681c      	ldr	r4, [r3, #0]
  42decc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  42ded0:	2b00      	cmp	r3, #0
  42ded2:	d03e      	beq.n	42df52 <__register_exitproc+0x9e>
  42ded4:	685a      	ldr	r2, [r3, #4]
  42ded6:	2a1f      	cmp	r2, #31
  42ded8:	dc1c      	bgt.n	42df14 <__register_exitproc+0x60>
  42deda:	f102 0e01 	add.w	lr, r2, #1
  42dede:	b176      	cbz	r6, 42defe <__register_exitproc+0x4a>
  42dee0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  42dee4:	2401      	movs	r4, #1
  42dee6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  42deea:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  42deee:	4094      	lsls	r4, r2
  42def0:	4320      	orrs	r0, r4
  42def2:	2e02      	cmp	r6, #2
  42def4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  42def8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  42defc:	d023      	beq.n	42df46 <__register_exitproc+0x92>
  42defe:	3202      	adds	r2, #2
  42df00:	f8c3 e004 	str.w	lr, [r3, #4]
  42df04:	6828      	ldr	r0, [r5, #0]
  42df06:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  42df0a:	f7fd fc6d 	bl	42b7e8 <__retarget_lock_release_recursive>
  42df0e:	2000      	movs	r0, #0
  42df10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42df14:	4b17      	ldr	r3, [pc, #92]	; (42df74 <__register_exitproc+0xc0>)
  42df16:	b30b      	cbz	r3, 42df5c <__register_exitproc+0xa8>
  42df18:	f44f 70c8 	mov.w	r0, #400	; 0x190
  42df1c:	f7fd fcde 	bl	42b8dc <malloc>
  42df20:	4603      	mov	r3, r0
  42df22:	b1d8      	cbz	r0, 42df5c <__register_exitproc+0xa8>
  42df24:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  42df28:	6002      	str	r2, [r0, #0]
  42df2a:	2100      	movs	r1, #0
  42df2c:	6041      	str	r1, [r0, #4]
  42df2e:	460a      	mov	r2, r1
  42df30:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  42df34:	f04f 0e01 	mov.w	lr, #1
  42df38:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  42df3c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  42df40:	2e00      	cmp	r6, #0
  42df42:	d0dc      	beq.n	42defe <__register_exitproc+0x4a>
  42df44:	e7cc      	b.n	42dee0 <__register_exitproc+0x2c>
  42df46:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  42df4a:	430c      	orrs	r4, r1
  42df4c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  42df50:	e7d5      	b.n	42defe <__register_exitproc+0x4a>
  42df52:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  42df56:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  42df5a:	e7bb      	b.n	42ded4 <__register_exitproc+0x20>
  42df5c:	6828      	ldr	r0, [r5, #0]
  42df5e:	f7fd fc43 	bl	42b7e8 <__retarget_lock_release_recursive>
  42df62:	f04f 30ff 	mov.w	r0, #4294967295
  42df66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42df6a:	bf00      	nop
  42df6c:	20000500 	.word	0x20000500
  42df70:	0042f630 	.word	0x0042f630
  42df74:	0042b8dd 	.word	0x0042b8dd

0042df78 <_calloc_r>:
  42df78:	b510      	push	{r4, lr}
  42df7a:	fb02 f101 	mul.w	r1, r2, r1
  42df7e:	f7fd fcbd 	bl	42b8fc <_malloc_r>
  42df82:	4604      	mov	r4, r0
  42df84:	b1d8      	cbz	r0, 42dfbe <_calloc_r+0x46>
  42df86:	f850 2c04 	ldr.w	r2, [r0, #-4]
  42df8a:	f022 0203 	bic.w	r2, r2, #3
  42df8e:	3a04      	subs	r2, #4
  42df90:	2a24      	cmp	r2, #36	; 0x24
  42df92:	d818      	bhi.n	42dfc6 <_calloc_r+0x4e>
  42df94:	2a13      	cmp	r2, #19
  42df96:	d914      	bls.n	42dfc2 <_calloc_r+0x4a>
  42df98:	2300      	movs	r3, #0
  42df9a:	2a1b      	cmp	r2, #27
  42df9c:	6003      	str	r3, [r0, #0]
  42df9e:	6043      	str	r3, [r0, #4]
  42dfa0:	d916      	bls.n	42dfd0 <_calloc_r+0x58>
  42dfa2:	2a24      	cmp	r2, #36	; 0x24
  42dfa4:	6083      	str	r3, [r0, #8]
  42dfa6:	60c3      	str	r3, [r0, #12]
  42dfa8:	bf11      	iteee	ne
  42dfaa:	f100 0210 	addne.w	r2, r0, #16
  42dfae:	6103      	streq	r3, [r0, #16]
  42dfb0:	6143      	streq	r3, [r0, #20]
  42dfb2:	f100 0218 	addeq.w	r2, r0, #24
  42dfb6:	2300      	movs	r3, #0
  42dfb8:	6013      	str	r3, [r2, #0]
  42dfba:	6053      	str	r3, [r2, #4]
  42dfbc:	6093      	str	r3, [r2, #8]
  42dfbe:	4620      	mov	r0, r4
  42dfc0:	bd10      	pop	{r4, pc}
  42dfc2:	4602      	mov	r2, r0
  42dfc4:	e7f7      	b.n	42dfb6 <_calloc_r+0x3e>
  42dfc6:	2100      	movs	r1, #0
  42dfc8:	f7f8 fe14 	bl	426bf4 <memset>
  42dfcc:	4620      	mov	r0, r4
  42dfce:	bd10      	pop	{r4, pc}
  42dfd0:	f100 0208 	add.w	r2, r0, #8
  42dfd4:	e7ef      	b.n	42dfb6 <_calloc_r+0x3e>
  42dfd6:	bf00      	nop

0042dfd8 <_close_r>:
  42dfd8:	b538      	push	{r3, r4, r5, lr}
  42dfda:	4c07      	ldr	r4, [pc, #28]	; (42dff8 <_close_r+0x20>)
  42dfdc:	2300      	movs	r3, #0
  42dfde:	4605      	mov	r5, r0
  42dfe0:	4608      	mov	r0, r1
  42dfe2:	6023      	str	r3, [r4, #0]
  42dfe4:	f7f8 f8f2 	bl	4261cc <_close>
  42dfe8:	1c43      	adds	r3, r0, #1
  42dfea:	d000      	beq.n	42dfee <_close_r+0x16>
  42dfec:	bd38      	pop	{r3, r4, r5, pc}
  42dfee:	6823      	ldr	r3, [r4, #0]
  42dff0:	2b00      	cmp	r3, #0
  42dff2:	d0fb      	beq.n	42dfec <_close_r+0x14>
  42dff4:	602b      	str	r3, [r5, #0]
  42dff6:	bd38      	pop	{r3, r4, r5, pc}
  42dff8:	20001738 	.word	0x20001738

0042dffc <__env_lock>:
  42dffc:	4801      	ldr	r0, [pc, #4]	; (42e004 <__env_lock+0x8>)
  42dffe:	f7fd bbef 	b.w	42b7e0 <__retarget_lock_acquire_recursive>
  42e002:	bf00      	nop
  42e004:	2000171c 	.word	0x2000171c

0042e008 <__env_unlock>:
  42e008:	4801      	ldr	r0, [pc, #4]	; (42e010 <__env_unlock+0x8>)
  42e00a:	f7fd bbed 	b.w	42b7e8 <__retarget_lock_release_recursive>
  42e00e:	bf00      	nop
  42e010:	2000171c 	.word	0x2000171c

0042e014 <_fclose_r>:
  42e014:	b570      	push	{r4, r5, r6, lr}
  42e016:	b159      	cbz	r1, 42e030 <_fclose_r+0x1c>
  42e018:	4605      	mov	r5, r0
  42e01a:	460c      	mov	r4, r1
  42e01c:	b110      	cbz	r0, 42e024 <_fclose_r+0x10>
  42e01e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  42e020:	2b00      	cmp	r3, #0
  42e022:	d03c      	beq.n	42e09e <_fclose_r+0x8a>
  42e024:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42e026:	07d8      	lsls	r0, r3, #31
  42e028:	d505      	bpl.n	42e036 <_fclose_r+0x22>
  42e02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42e02e:	b92b      	cbnz	r3, 42e03c <_fclose_r+0x28>
  42e030:	2600      	movs	r6, #0
  42e032:	4630      	mov	r0, r6
  42e034:	bd70      	pop	{r4, r5, r6, pc}
  42e036:	89a3      	ldrh	r3, [r4, #12]
  42e038:	0599      	lsls	r1, r3, #22
  42e03a:	d53c      	bpl.n	42e0b6 <_fclose_r+0xa2>
  42e03c:	4621      	mov	r1, r4
  42e03e:	4628      	mov	r0, r5
  42e040:	f7fc fdc0 	bl	42abc4 <__sflush_r>
  42e044:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  42e046:	4606      	mov	r6, r0
  42e048:	b133      	cbz	r3, 42e058 <_fclose_r+0x44>
  42e04a:	69e1      	ldr	r1, [r4, #28]
  42e04c:	4628      	mov	r0, r5
  42e04e:	4798      	blx	r3
  42e050:	2800      	cmp	r0, #0
  42e052:	bfb8      	it	lt
  42e054:	f04f 36ff 	movlt.w	r6, #4294967295
  42e058:	89a3      	ldrh	r3, [r4, #12]
  42e05a:	061a      	lsls	r2, r3, #24
  42e05c:	d422      	bmi.n	42e0a4 <_fclose_r+0x90>
  42e05e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  42e060:	b141      	cbz	r1, 42e074 <_fclose_r+0x60>
  42e062:	f104 0340 	add.w	r3, r4, #64	; 0x40
  42e066:	4299      	cmp	r1, r3
  42e068:	d002      	beq.n	42e070 <_fclose_r+0x5c>
  42e06a:	4628      	mov	r0, r5
  42e06c:	f7fc ffc8 	bl	42b000 <_free_r>
  42e070:	2300      	movs	r3, #0
  42e072:	6323      	str	r3, [r4, #48]	; 0x30
  42e074:	6c61      	ldr	r1, [r4, #68]	; 0x44
  42e076:	b121      	cbz	r1, 42e082 <_fclose_r+0x6e>
  42e078:	4628      	mov	r0, r5
  42e07a:	f7fc ffc1 	bl	42b000 <_free_r>
  42e07e:	2300      	movs	r3, #0
  42e080:	6463      	str	r3, [r4, #68]	; 0x44
  42e082:	f7fc fec3 	bl	42ae0c <__sfp_lock_acquire>
  42e086:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42e088:	2200      	movs	r2, #0
  42e08a:	07db      	lsls	r3, r3, #31
  42e08c:	81a2      	strh	r2, [r4, #12]
  42e08e:	d50e      	bpl.n	42e0ae <_fclose_r+0x9a>
  42e090:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42e092:	f7fd fba1 	bl	42b7d8 <__retarget_lock_close_recursive>
  42e096:	f7fc febf 	bl	42ae18 <__sfp_lock_release>
  42e09a:	4630      	mov	r0, r6
  42e09c:	bd70      	pop	{r4, r5, r6, pc}
  42e09e:	f7fc fe89 	bl	42adb4 <__sinit>
  42e0a2:	e7bf      	b.n	42e024 <_fclose_r+0x10>
  42e0a4:	6921      	ldr	r1, [r4, #16]
  42e0a6:	4628      	mov	r0, r5
  42e0a8:	f7fc ffaa 	bl	42b000 <_free_r>
  42e0ac:	e7d7      	b.n	42e05e <_fclose_r+0x4a>
  42e0ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42e0b0:	f7fd fb9a 	bl	42b7e8 <__retarget_lock_release_recursive>
  42e0b4:	e7ec      	b.n	42e090 <_fclose_r+0x7c>
  42e0b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42e0b8:	f7fd fb92 	bl	42b7e0 <__retarget_lock_acquire_recursive>
  42e0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42e0c0:	2b00      	cmp	r3, #0
  42e0c2:	d1bb      	bne.n	42e03c <_fclose_r+0x28>
  42e0c4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  42e0c6:	f016 0601 	ands.w	r6, r6, #1
  42e0ca:	d1b1      	bne.n	42e030 <_fclose_r+0x1c>
  42e0cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42e0ce:	f7fd fb8b 	bl	42b7e8 <__retarget_lock_release_recursive>
  42e0d2:	4630      	mov	r0, r6
  42e0d4:	bd70      	pop	{r4, r5, r6, pc}
  42e0d6:	bf00      	nop

0042e0d8 <_fstat_r>:
  42e0d8:	b538      	push	{r3, r4, r5, lr}
  42e0da:	460b      	mov	r3, r1
  42e0dc:	4c07      	ldr	r4, [pc, #28]	; (42e0fc <_fstat_r+0x24>)
  42e0de:	4605      	mov	r5, r0
  42e0e0:	4611      	mov	r1, r2
  42e0e2:	4618      	mov	r0, r3
  42e0e4:	2300      	movs	r3, #0
  42e0e6:	6023      	str	r3, [r4, #0]
  42e0e8:	f7f8 f873 	bl	4261d2 <_fstat>
  42e0ec:	1c43      	adds	r3, r0, #1
  42e0ee:	d000      	beq.n	42e0f2 <_fstat_r+0x1a>
  42e0f0:	bd38      	pop	{r3, r4, r5, pc}
  42e0f2:	6823      	ldr	r3, [r4, #0]
  42e0f4:	2b00      	cmp	r3, #0
  42e0f6:	d0fb      	beq.n	42e0f0 <_fstat_r+0x18>
  42e0f8:	602b      	str	r3, [r5, #0]
  42e0fa:	bd38      	pop	{r3, r4, r5, pc}
  42e0fc:	20001738 	.word	0x20001738

0042e100 <_isatty_r>:
  42e100:	b538      	push	{r3, r4, r5, lr}
  42e102:	4c07      	ldr	r4, [pc, #28]	; (42e120 <_isatty_r+0x20>)
  42e104:	2300      	movs	r3, #0
  42e106:	4605      	mov	r5, r0
  42e108:	4608      	mov	r0, r1
  42e10a:	6023      	str	r3, [r4, #0]
  42e10c:	f7f8 f866 	bl	4261dc <_isatty>
  42e110:	1c43      	adds	r3, r0, #1
  42e112:	d000      	beq.n	42e116 <_isatty_r+0x16>
  42e114:	bd38      	pop	{r3, r4, r5, pc}
  42e116:	6823      	ldr	r3, [r4, #0]
  42e118:	2b00      	cmp	r3, #0
  42e11a:	d0fb      	beq.n	42e114 <_isatty_r+0x14>
  42e11c:	602b      	str	r3, [r5, #0]
  42e11e:	bd38      	pop	{r3, r4, r5, pc}
  42e120:	20001738 	.word	0x20001738

0042e124 <iswspace>:
  42e124:	28ff      	cmp	r0, #255	; 0xff
  42e126:	d901      	bls.n	42e12c <iswspace+0x8>
  42e128:	2000      	movs	r0, #0
  42e12a:	4770      	bx	lr
  42e12c:	b510      	push	{r4, lr}
  42e12e:	4604      	mov	r4, r0
  42e130:	f7fd fb34 	bl	42b79c <__locale_ctype_ptr>
  42e134:	4420      	add	r0, r4
  42e136:	7840      	ldrb	r0, [r0, #1]
  42e138:	f000 0008 	and.w	r0, r0, #8
  42e13c:	bd10      	pop	{r4, pc}
  42e13e:	bf00      	nop

0042e140 <_lseek_r>:
  42e140:	b570      	push	{r4, r5, r6, lr}
  42e142:	460d      	mov	r5, r1
  42e144:	4c08      	ldr	r4, [pc, #32]	; (42e168 <_lseek_r+0x28>)
  42e146:	4611      	mov	r1, r2
  42e148:	4606      	mov	r6, r0
  42e14a:	461a      	mov	r2, r3
  42e14c:	4628      	mov	r0, r5
  42e14e:	2300      	movs	r3, #0
  42e150:	6023      	str	r3, [r4, #0]
  42e152:	f7f8 f845 	bl	4261e0 <_lseek>
  42e156:	1c43      	adds	r3, r0, #1
  42e158:	d000      	beq.n	42e15c <_lseek_r+0x1c>
  42e15a:	bd70      	pop	{r4, r5, r6, pc}
  42e15c:	6823      	ldr	r3, [r4, #0]
  42e15e:	2b00      	cmp	r3, #0
  42e160:	d0fb      	beq.n	42e15a <_lseek_r+0x1a>
  42e162:	6033      	str	r3, [r6, #0]
  42e164:	bd70      	pop	{r4, r5, r6, pc}
  42e166:	bf00      	nop
  42e168:	20001738 	.word	0x20001738

0042e16c <_mbrtowc_r>:
  42e16c:	b5f0      	push	{r4, r5, r6, r7, lr}
  42e16e:	b083      	sub	sp, #12
  42e170:	4607      	mov	r7, r0
  42e172:	9d08      	ldr	r5, [sp, #32]
  42e174:	b192      	cbz	r2, 42e19c <_mbrtowc_r+0x30>
  42e176:	4c11      	ldr	r4, [pc, #68]	; (42e1bc <_mbrtowc_r+0x50>)
  42e178:	4e11      	ldr	r6, [pc, #68]	; (42e1c0 <_mbrtowc_r+0x54>)
  42e17a:	6824      	ldr	r4, [r4, #0]
  42e17c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  42e17e:	9500      	str	r5, [sp, #0]
  42e180:	2c00      	cmp	r4, #0
  42e182:	bf08      	it	eq
  42e184:	4634      	moveq	r4, r6
  42e186:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
  42e18a:	47a0      	blx	r4
  42e18c:	1c43      	adds	r3, r0, #1
  42e18e:	d103      	bne.n	42e198 <_mbrtowc_r+0x2c>
  42e190:	2200      	movs	r2, #0
  42e192:	238a      	movs	r3, #138	; 0x8a
  42e194:	602a      	str	r2, [r5, #0]
  42e196:	603b      	str	r3, [r7, #0]
  42e198:	b003      	add	sp, #12
  42e19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42e19c:	4b07      	ldr	r3, [pc, #28]	; (42e1bc <_mbrtowc_r+0x50>)
  42e19e:	4908      	ldr	r1, [pc, #32]	; (42e1c0 <_mbrtowc_r+0x54>)
  42e1a0:	681b      	ldr	r3, [r3, #0]
  42e1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  42e1a4:	9500      	str	r5, [sp, #0]
  42e1a6:	2b00      	cmp	r3, #0
  42e1a8:	bf08      	it	eq
  42e1aa:	460b      	moveq	r3, r1
  42e1ac:	4614      	mov	r4, r2
  42e1ae:	4621      	mov	r1, r4
  42e1b0:	4a04      	ldr	r2, [pc, #16]	; (42e1c4 <_mbrtowc_r+0x58>)
  42e1b2:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
  42e1b6:	2301      	movs	r3, #1
  42e1b8:	47a0      	blx	r4
  42e1ba:	e7e7      	b.n	42e18c <_mbrtowc_r+0x20>
  42e1bc:	200000c8 	.word	0x200000c8
  42e1c0:	20000544 	.word	0x20000544
  42e1c4:	0042f5ec 	.word	0x0042f5ec

0042e1c8 <_read_r>:
  42e1c8:	b570      	push	{r4, r5, r6, lr}
  42e1ca:	460d      	mov	r5, r1
  42e1cc:	4c08      	ldr	r4, [pc, #32]	; (42e1f0 <_read_r+0x28>)
  42e1ce:	4611      	mov	r1, r2
  42e1d0:	4606      	mov	r6, r0
  42e1d2:	461a      	mov	r2, r3
  42e1d4:	4628      	mov	r0, r5
  42e1d6:	2300      	movs	r3, #0
  42e1d8:	6023      	str	r3, [r4, #0]
  42e1da:	f7f3 f871 	bl	4212c0 <_read>
  42e1de:	1c43      	adds	r3, r0, #1
  42e1e0:	d000      	beq.n	42e1e4 <_read_r+0x1c>
  42e1e2:	bd70      	pop	{r4, r5, r6, pc}
  42e1e4:	6823      	ldr	r3, [r4, #0]
  42e1e6:	2b00      	cmp	r3, #0
  42e1e8:	d0fb      	beq.n	42e1e2 <_read_r+0x1a>
  42e1ea:	6033      	str	r3, [r6, #0]
  42e1ec:	bd70      	pop	{r4, r5, r6, pc}
  42e1ee:	bf00      	nop
  42e1f0:	20001738 	.word	0x20001738

0042e1f4 <__sccl>:
  42e1f4:	b470      	push	{r4, r5, r6}
  42e1f6:	780c      	ldrb	r4, [r1, #0]
  42e1f8:	2c5e      	cmp	r4, #94	; 0x5e
  42e1fa:	d02f      	beq.n	42e25c <__sccl+0x68>
  42e1fc:	2200      	movs	r2, #0
  42e1fe:	1c4d      	adds	r5, r1, #1
  42e200:	4616      	mov	r6, r2
  42e202:	1e43      	subs	r3, r0, #1
  42e204:	f100 01ff 	add.w	r1, r0, #255	; 0xff
  42e208:	f803 2f01 	strb.w	r2, [r3, #1]!
  42e20c:	428b      	cmp	r3, r1
  42e20e:	d1fb      	bne.n	42e208 <__sccl+0x14>
  42e210:	b174      	cbz	r4, 42e230 <__sccl+0x3c>
  42e212:	f086 0201 	eor.w	r2, r6, #1
  42e216:	5502      	strb	r2, [r0, r4]
  42e218:	1c6e      	adds	r6, r5, #1
  42e21a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  42e21e:	2b2d      	cmp	r3, #45	; 0x2d
  42e220:	4631      	mov	r1, r6
  42e222:	d00d      	beq.n	42e240 <__sccl+0x4c>
  42e224:	2b5d      	cmp	r3, #93	; 0x5d
  42e226:	d004      	beq.n	42e232 <__sccl+0x3e>
  42e228:	b133      	cbz	r3, 42e238 <__sccl+0x44>
  42e22a:	461c      	mov	r4, r3
  42e22c:	4635      	mov	r5, r6
  42e22e:	e7f2      	b.n	42e216 <__sccl+0x22>
  42e230:	1e69      	subs	r1, r5, #1
  42e232:	4608      	mov	r0, r1
  42e234:	bc70      	pop	{r4, r5, r6}
  42e236:	4770      	bx	lr
  42e238:	4629      	mov	r1, r5
  42e23a:	4608      	mov	r0, r1
  42e23c:	bc70      	pop	{r4, r5, r6}
  42e23e:	4770      	bx	lr
  42e240:	7869      	ldrb	r1, [r5, #1]
  42e242:	295d      	cmp	r1, #93	; 0x5d
  42e244:	d0f1      	beq.n	42e22a <__sccl+0x36>
  42e246:	428c      	cmp	r4, r1
  42e248:	dcef      	bgt.n	42e22a <__sccl+0x36>
  42e24a:	3502      	adds	r5, #2
  42e24c:	1903      	adds	r3, r0, r4
  42e24e:	3401      	adds	r4, #1
  42e250:	42a1      	cmp	r1, r4
  42e252:	f803 2f01 	strb.w	r2, [r3, #1]!
  42e256:	dcfa      	bgt.n	42e24e <__sccl+0x5a>
  42e258:	3602      	adds	r6, #2
  42e25a:	e7de      	b.n	42e21a <__sccl+0x26>
  42e25c:	2201      	movs	r2, #1
  42e25e:	784c      	ldrb	r4, [r1, #1]
  42e260:	4616      	mov	r6, r2
  42e262:	1c8d      	adds	r5, r1, #2
  42e264:	e7cd      	b.n	42e202 <__sccl+0xe>
  42e266:	bf00      	nop

0042e268 <_strtol_l.isra.0>:
  42e268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42e26c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  42e270:	460f      	mov	r7, r1
  42e272:	4680      	mov	r8, r0
  42e274:	4616      	mov	r6, r2
  42e276:	461d      	mov	r5, r3
  42e278:	468a      	mov	sl, r1
  42e27a:	e000      	b.n	42e27e <_strtol_l.isra.0+0x16>
  42e27c:	46a2      	mov	sl, r4
  42e27e:	4654      	mov	r4, sl
  42e280:	4648      	mov	r0, r9
  42e282:	f814 bb01 	ldrb.w	fp, [r4], #1
  42e286:	f7fd fa85 	bl	42b794 <__locale_ctype_ptr_l>
  42e28a:	4458      	add	r0, fp
  42e28c:	7842      	ldrb	r2, [r0, #1]
  42e28e:	f012 0208 	ands.w	r2, r2, #8
  42e292:	d1f3      	bne.n	42e27c <_strtol_l.isra.0+0x14>
  42e294:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  42e298:	d04f      	beq.n	42e33a <_strtol_l.isra.0+0xd2>
  42e29a:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  42e29e:	bf04      	itt	eq
  42e2a0:	f894 b000 	ldrbeq.w	fp, [r4]
  42e2a4:	f10a 0402 	addeq.w	r4, sl, #2
  42e2a8:	b11d      	cbz	r5, 42e2b2 <_strtol_l.isra.0+0x4a>
  42e2aa:	2d10      	cmp	r5, #16
  42e2ac:	d056      	beq.n	42e35c <_strtol_l.isra.0+0xf4>
  42e2ae:	46ac      	mov	ip, r5
  42e2b0:	e004      	b.n	42e2bc <_strtol_l.isra.0+0x54>
  42e2b2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  42e2b6:	d060      	beq.n	42e37a <_strtol_l.isra.0+0x112>
  42e2b8:	250a      	movs	r5, #10
  42e2ba:	46ac      	mov	ip, r5
  42e2bc:	2a00      	cmp	r2, #0
  42e2be:	bf0c      	ite	eq
  42e2c0:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  42e2c4:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  42e2c8:	2100      	movs	r1, #0
  42e2ca:	fbb9 fefc 	udiv	lr, r9, ip
  42e2ce:	4608      	mov	r0, r1
  42e2d0:	fb0c 9a1e 	mls	sl, ip, lr, r9
  42e2d4:	e005      	b.n	42e2e2 <_strtol_l.isra.0+0x7a>
  42e2d6:	d029      	beq.n	42e32c <_strtol_l.isra.0+0xc4>
  42e2d8:	fb0c 3000 	mla	r0, ip, r0, r3
  42e2dc:	2101      	movs	r1, #1
  42e2de:	f814 bb01 	ldrb.w	fp, [r4], #1
  42e2e2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  42e2e6:	2b09      	cmp	r3, #9
  42e2e8:	d905      	bls.n	42e2f6 <_strtol_l.isra.0+0x8e>
  42e2ea:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  42e2ee:	2b19      	cmp	r3, #25
  42e2f0:	d80b      	bhi.n	42e30a <_strtol_l.isra.0+0xa2>
  42e2f2:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  42e2f6:	429d      	cmp	r5, r3
  42e2f8:	dd0f      	ble.n	42e31a <_strtol_l.isra.0+0xb2>
  42e2fa:	f1b1 3fff 	cmp.w	r1, #4294967295
  42e2fe:	d0ee      	beq.n	42e2de <_strtol_l.isra.0+0x76>
  42e300:	4586      	cmp	lr, r0
  42e302:	d2e8      	bcs.n	42e2d6 <_strtol_l.isra.0+0x6e>
  42e304:	f04f 31ff 	mov.w	r1, #4294967295
  42e308:	e7e9      	b.n	42e2de <_strtol_l.isra.0+0x76>
  42e30a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  42e30e:	2b19      	cmp	r3, #25
  42e310:	d803      	bhi.n	42e31a <_strtol_l.isra.0+0xb2>
  42e312:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  42e316:	429d      	cmp	r5, r3
  42e318:	dcef      	bgt.n	42e2fa <_strtol_l.isra.0+0x92>
  42e31a:	1c4b      	adds	r3, r1, #1
  42e31c:	d013      	beq.n	42e346 <_strtol_l.isra.0+0xde>
  42e31e:	b102      	cbz	r2, 42e322 <_strtol_l.isra.0+0xba>
  42e320:	4240      	negs	r0, r0
  42e322:	b146      	cbz	r6, 42e336 <_strtol_l.isra.0+0xce>
  42e324:	b9c1      	cbnz	r1, 42e358 <_strtol_l.isra.0+0xf0>
  42e326:	6037      	str	r7, [r6, #0]
  42e328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42e32c:	459a      	cmp	sl, r3
  42e32e:	dad3      	bge.n	42e2d8 <_strtol_l.isra.0+0x70>
  42e330:	f04f 31ff 	mov.w	r1, #4294967295
  42e334:	e7d3      	b.n	42e2de <_strtol_l.isra.0+0x76>
  42e336:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42e33a:	f894 b000 	ldrb.w	fp, [r4]
  42e33e:	2201      	movs	r2, #1
  42e340:	f10a 0402 	add.w	r4, sl, #2
  42e344:	e7b0      	b.n	42e2a8 <_strtol_l.isra.0+0x40>
  42e346:	2322      	movs	r3, #34	; 0x22
  42e348:	f8c8 3000 	str.w	r3, [r8]
  42e34c:	b1ee      	cbz	r6, 42e38a <_strtol_l.isra.0+0x122>
  42e34e:	1e67      	subs	r7, r4, #1
  42e350:	4648      	mov	r0, r9
  42e352:	6037      	str	r7, [r6, #0]
  42e354:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42e358:	4681      	mov	r9, r0
  42e35a:	e7f8      	b.n	42e34e <_strtol_l.isra.0+0xe6>
  42e35c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  42e360:	d1a5      	bne.n	42e2ae <_strtol_l.isra.0+0x46>
  42e362:	7823      	ldrb	r3, [r4, #0]
  42e364:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  42e368:	2b58      	cmp	r3, #88	; 0x58
  42e36a:	d1a0      	bne.n	42e2ae <_strtol_l.isra.0+0x46>
  42e36c:	f04f 0c10 	mov.w	ip, #16
  42e370:	f894 b001 	ldrb.w	fp, [r4, #1]
  42e374:	4665      	mov	r5, ip
  42e376:	3402      	adds	r4, #2
  42e378:	e7a0      	b.n	42e2bc <_strtol_l.isra.0+0x54>
  42e37a:	7823      	ldrb	r3, [r4, #0]
  42e37c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  42e380:	2b58      	cmp	r3, #88	; 0x58
  42e382:	d0f3      	beq.n	42e36c <_strtol_l.isra.0+0x104>
  42e384:	2508      	movs	r5, #8
  42e386:	46ac      	mov	ip, r5
  42e388:	e798      	b.n	42e2bc <_strtol_l.isra.0+0x54>
  42e38a:	4648      	mov	r0, r9
  42e38c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0042e390 <_strtol_r>:
  42e390:	b530      	push	{r4, r5, lr}
  42e392:	4c06      	ldr	r4, [pc, #24]	; (42e3ac <_strtol_r+0x1c>)
  42e394:	4d06      	ldr	r5, [pc, #24]	; (42e3b0 <_strtol_r+0x20>)
  42e396:	6824      	ldr	r4, [r4, #0]
  42e398:	6b64      	ldr	r4, [r4, #52]	; 0x34
  42e39a:	b083      	sub	sp, #12
  42e39c:	2c00      	cmp	r4, #0
  42e39e:	bf08      	it	eq
  42e3a0:	462c      	moveq	r4, r5
  42e3a2:	9400      	str	r4, [sp, #0]
  42e3a4:	f7ff ff60 	bl	42e268 <_strtol_l.isra.0>
  42e3a8:	b003      	add	sp, #12
  42e3aa:	bd30      	pop	{r4, r5, pc}
  42e3ac:	200000c8 	.word	0x200000c8
  42e3b0:	20000544 	.word	0x20000544

0042e3b4 <_strtoll_l.isra.0>:
  42e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42e3b8:	b085      	sub	sp, #20
  42e3ba:	461e      	mov	r6, r3
  42e3bc:	9102      	str	r1, [sp, #8]
  42e3be:	9003      	str	r0, [sp, #12]
  42e3c0:	9200      	str	r2, [sp, #0]
  42e3c2:	4688      	mov	r8, r1
  42e3c4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  42e3c6:	e000      	b.n	42e3ca <_strtoll_l.isra.0+0x16>
  42e3c8:	46a8      	mov	r8, r5
  42e3ca:	4645      	mov	r5, r8
  42e3cc:	4638      	mov	r0, r7
  42e3ce:	f815 4b01 	ldrb.w	r4, [r5], #1
  42e3d2:	f7fd f9df 	bl	42b794 <__locale_ctype_ptr_l>
  42e3d6:	4420      	add	r0, r4
  42e3d8:	7843      	ldrb	r3, [r0, #1]
  42e3da:	f013 0308 	ands.w	r3, r3, #8
  42e3de:	d1f3      	bne.n	42e3c8 <_strtoll_l.isra.0+0x14>
  42e3e0:	2c2d      	cmp	r4, #45	; 0x2d
  42e3e2:	f000 8081 	beq.w	42e4e8 <_strtoll_l.isra.0+0x134>
  42e3e6:	2c2b      	cmp	r4, #43	; 0x2b
  42e3e8:	bf03      	ittte	eq
  42e3ea:	782c      	ldrbeq	r4, [r5, #0]
  42e3ec:	9301      	streq	r3, [sp, #4]
  42e3ee:	f108 0502 	addeq.w	r5, r8, #2
  42e3f2:	9301      	strne	r3, [sp, #4]
  42e3f4:	b166      	cbz	r6, 42e410 <_strtoll_l.isra.0+0x5c>
  42e3f6:	2e10      	cmp	r6, #16
  42e3f8:	f000 8088 	beq.w	42e50c <_strtoll_l.isra.0+0x158>
  42e3fc:	9b01      	ldr	r3, [sp, #4]
  42e3fe:	46b0      	mov	r8, r6
  42e400:	ea4f 79e6 	mov.w	r9, r6, asr #31
  42e404:	b97b      	cbnz	r3, 42e426 <_strtoll_l.isra.0+0x72>
  42e406:	f04f 3aff 	mov.w	sl, #4294967295
  42e40a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
  42e40e:	e00e      	b.n	42e42e <_strtoll_l.isra.0+0x7a>
  42e410:	2c30      	cmp	r4, #48	; 0x30
  42e412:	f000 808a 	beq.w	42e52a <_strtoll_l.isra.0+0x176>
  42e416:	f04f 080a 	mov.w	r8, #10
  42e41a:	f04f 0900 	mov.w	r9, #0
  42e41e:	260a      	movs	r6, #10
  42e420:	9b01      	ldr	r3, [sp, #4]
  42e422:	2b00      	cmp	r3, #0
  42e424:	d0ef      	beq.n	42e406 <_strtoll_l.isra.0+0x52>
  42e426:	f04f 0a00 	mov.w	sl, #0
  42e42a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  42e42e:	4642      	mov	r2, r8
  42e430:	464b      	mov	r3, r9
  42e432:	4650      	mov	r0, sl
  42e434:	4639      	mov	r1, r7
  42e436:	f000 fe1d 	bl	42f074 <__aeabi_uldivmod>
  42e43a:	464b      	mov	r3, r9
  42e43c:	4693      	mov	fp, r2
  42e43e:	4650      	mov	r0, sl
  42e440:	4642      	mov	r2, r8
  42e442:	4639      	mov	r1, r7
  42e444:	f000 fe16 	bl	42f074 <__aeabi_uldivmod>
  42e448:	f04f 0e00 	mov.w	lr, #0
  42e44c:	2200      	movs	r2, #0
  42e44e:	2300      	movs	r3, #0
  42e450:	e00f      	b.n	42e472 <_strtoll_l.isra.0+0xbe>
  42e452:	d044      	beq.n	42e4de <_strtoll_l.isra.0+0x12a>
  42e454:	fb02 f409 	mul.w	r4, r2, r9
  42e458:	fb08 4403 	mla	r4, r8, r3, r4
  42e45c:	fba2 2308 	umull	r2, r3, r2, r8
  42e460:	4423      	add	r3, r4
  42e462:	eb12 020c 	adds.w	r2, r2, ip
  42e466:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
  42e46a:	f04f 0e01 	mov.w	lr, #1
  42e46e:	f815 4b01 	ldrb.w	r4, [r5], #1
  42e472:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  42e476:	f1bc 0f09 	cmp.w	ip, #9
  42e47a:	d906      	bls.n	42e48a <_strtoll_l.isra.0+0xd6>
  42e47c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
  42e480:	f1bc 0f19 	cmp.w	ip, #25
  42e484:	d80d      	bhi.n	42e4a2 <_strtoll_l.isra.0+0xee>
  42e486:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
  42e48a:	4566      	cmp	r6, ip
  42e48c:	dd12      	ble.n	42e4b4 <_strtoll_l.isra.0+0x100>
  42e48e:	f1be 3fff 	cmp.w	lr, #4294967295
  42e492:	d0ec      	beq.n	42e46e <_strtoll_l.isra.0+0xba>
  42e494:	4299      	cmp	r1, r3
  42e496:	bf08      	it	eq
  42e498:	4290      	cmpeq	r0, r2
  42e49a:	d2da      	bcs.n	42e452 <_strtoll_l.isra.0+0x9e>
  42e49c:	f04f 3eff 	mov.w	lr, #4294967295
  42e4a0:	e7e5      	b.n	42e46e <_strtoll_l.isra.0+0xba>
  42e4a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
  42e4a6:	f1bc 0f19 	cmp.w	ip, #25
  42e4aa:	d803      	bhi.n	42e4b4 <_strtoll_l.isra.0+0x100>
  42e4ac:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
  42e4b0:	4566      	cmp	r6, ip
  42e4b2:	dcec      	bgt.n	42e48e <_strtoll_l.isra.0+0xda>
  42e4b4:	f1be 3fff 	cmp.w	lr, #4294967295
  42e4b8:	d01c      	beq.n	42e4f4 <_strtoll_l.isra.0+0x140>
  42e4ba:	9901      	ldr	r1, [sp, #4]
  42e4bc:	b111      	cbz	r1, 42e4c4 <_strtoll_l.isra.0+0x110>
  42e4be:	4252      	negs	r2, r2
  42e4c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  42e4c4:	9900      	ldr	r1, [sp, #0]
  42e4c6:	b129      	cbz	r1, 42e4d4 <_strtoll_l.isra.0+0x120>
  42e4c8:	f1be 0f00 	cmp.w	lr, #0
  42e4cc:	d11b      	bne.n	42e506 <_strtoll_l.isra.0+0x152>
  42e4ce:	9d02      	ldr	r5, [sp, #8]
  42e4d0:	9900      	ldr	r1, [sp, #0]
  42e4d2:	600d      	str	r5, [r1, #0]
  42e4d4:	4610      	mov	r0, r2
  42e4d6:	4619      	mov	r1, r3
  42e4d8:	b005      	add	sp, #20
  42e4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42e4de:	45e3      	cmp	fp, ip
  42e4e0:	dab8      	bge.n	42e454 <_strtoll_l.isra.0+0xa0>
  42e4e2:	f04f 3eff 	mov.w	lr, #4294967295
  42e4e6:	e7c2      	b.n	42e46e <_strtoll_l.isra.0+0xba>
  42e4e8:	2301      	movs	r3, #1
  42e4ea:	782c      	ldrb	r4, [r5, #0]
  42e4ec:	9301      	str	r3, [sp, #4]
  42e4ee:	f108 0502 	add.w	r5, r8, #2
  42e4f2:	e77f      	b.n	42e3f4 <_strtoll_l.isra.0+0x40>
  42e4f4:	9a03      	ldr	r2, [sp, #12]
  42e4f6:	2322      	movs	r3, #34	; 0x22
  42e4f8:	6013      	str	r3, [r2, #0]
  42e4fa:	9b00      	ldr	r3, [sp, #0]
  42e4fc:	b32b      	cbz	r3, 42e54a <_strtoll_l.isra.0+0x196>
  42e4fe:	4652      	mov	r2, sl
  42e500:	463b      	mov	r3, r7
  42e502:	3d01      	subs	r5, #1
  42e504:	e7e4      	b.n	42e4d0 <_strtoll_l.isra.0+0x11c>
  42e506:	4692      	mov	sl, r2
  42e508:	461f      	mov	r7, r3
  42e50a:	e7f8      	b.n	42e4fe <_strtoll_l.isra.0+0x14a>
  42e50c:	2c30      	cmp	r4, #48	; 0x30
  42e50e:	d117      	bne.n	42e540 <_strtoll_l.isra.0+0x18c>
  42e510:	782b      	ldrb	r3, [r5, #0]
  42e512:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  42e516:	2b58      	cmp	r3, #88	; 0x58
  42e518:	d112      	bne.n	42e540 <_strtoll_l.isra.0+0x18c>
  42e51a:	786c      	ldrb	r4, [r5, #1]
  42e51c:	f04f 0810 	mov.w	r8, #16
  42e520:	f04f 0900 	mov.w	r9, #0
  42e524:	3502      	adds	r5, #2
  42e526:	2610      	movs	r6, #16
  42e528:	e77a      	b.n	42e420 <_strtoll_l.isra.0+0x6c>
  42e52a:	782b      	ldrb	r3, [r5, #0]
  42e52c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  42e530:	2b58      	cmp	r3, #88	; 0x58
  42e532:	d0f2      	beq.n	42e51a <_strtoll_l.isra.0+0x166>
  42e534:	f04f 0808 	mov.w	r8, #8
  42e538:	f04f 0900 	mov.w	r9, #0
  42e53c:	2608      	movs	r6, #8
  42e53e:	e76f      	b.n	42e420 <_strtoll_l.isra.0+0x6c>
  42e540:	f04f 0810 	mov.w	r8, #16
  42e544:	f04f 0900 	mov.w	r9, #0
  42e548:	e76a      	b.n	42e420 <_strtoll_l.isra.0+0x6c>
  42e54a:	4652      	mov	r2, sl
  42e54c:	463b      	mov	r3, r7
  42e54e:	e7c1      	b.n	42e4d4 <_strtoll_l.isra.0+0x120>

0042e550 <_strtoll_r>:
  42e550:	b530      	push	{r4, r5, lr}
  42e552:	4c06      	ldr	r4, [pc, #24]	; (42e56c <_strtoll_r+0x1c>)
  42e554:	4d06      	ldr	r5, [pc, #24]	; (42e570 <_strtoll_r+0x20>)
  42e556:	6824      	ldr	r4, [r4, #0]
  42e558:	6b64      	ldr	r4, [r4, #52]	; 0x34
  42e55a:	b083      	sub	sp, #12
  42e55c:	2c00      	cmp	r4, #0
  42e55e:	bf08      	it	eq
  42e560:	462c      	moveq	r4, r5
  42e562:	9400      	str	r4, [sp, #0]
  42e564:	f7ff ff26 	bl	42e3b4 <_strtoll_l.isra.0>
  42e568:	b003      	add	sp, #12
  42e56a:	bd30      	pop	{r4, r5, pc}
  42e56c:	200000c8 	.word	0x200000c8
  42e570:	20000544 	.word	0x20000544

0042e574 <_strtoull_l.isra.0>:
  42e574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42e578:	b085      	sub	sp, #20
  42e57a:	4693      	mov	fp, r2
  42e57c:	9102      	str	r1, [sp, #8]
  42e57e:	9003      	str	r0, [sp, #12]
  42e580:	469a      	mov	sl, r3
  42e582:	460f      	mov	r7, r1
  42e584:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  42e586:	e000      	b.n	42e58a <_strtoull_l.isra.0+0x16>
  42e588:	462f      	mov	r7, r5
  42e58a:	463d      	mov	r5, r7
  42e58c:	4630      	mov	r0, r6
  42e58e:	f815 4b01 	ldrb.w	r4, [r5], #1
  42e592:	f7fd f8ff 	bl	42b794 <__locale_ctype_ptr_l>
  42e596:	4420      	add	r0, r4
  42e598:	7843      	ldrb	r3, [r0, #1]
  42e59a:	f013 0308 	ands.w	r3, r3, #8
  42e59e:	d1f3      	bne.n	42e588 <_strtoull_l.isra.0+0x14>
  42e5a0:	2c2d      	cmp	r4, #45	; 0x2d
  42e5a2:	f000 8089 	beq.w	42e6b8 <_strtoull_l.isra.0+0x144>
  42e5a6:	2c2b      	cmp	r4, #43	; 0x2b
  42e5a8:	bf03      	ittte	eq
  42e5aa:	782c      	ldrbeq	r4, [r5, #0]
  42e5ac:	9301      	streq	r3, [sp, #4]
  42e5ae:	1cbd      	addeq	r5, r7, #2
  42e5b0:	9301      	strne	r3, [sp, #4]
  42e5b2:	f1ba 0f00 	cmp.w	sl, #0
  42e5b6:	d019      	beq.n	42e5ec <_strtoull_l.isra.0+0x78>
  42e5b8:	f1ba 0f10 	cmp.w	sl, #16
  42e5bc:	f000 8081 	beq.w	42e6c2 <_strtoull_l.isra.0+0x14e>
  42e5c0:	46d0      	mov	r8, sl
  42e5c2:	ea4f 79ea 	mov.w	r9, sl, asr #31
  42e5c6:	4642      	mov	r2, r8
  42e5c8:	464b      	mov	r3, r9
  42e5ca:	f04f 30ff 	mov.w	r0, #4294967295
  42e5ce:	f04f 31ff 	mov.w	r1, #4294967295
  42e5d2:	f000 fd4f 	bl	42f074 <__aeabi_uldivmod>
  42e5d6:	4642      	mov	r2, r8
  42e5d8:	4606      	mov	r6, r0
  42e5da:	460f      	mov	r7, r1
  42e5dc:	464b      	mov	r3, r9
  42e5de:	f04f 30ff 	mov.w	r0, #4294967295
  42e5e2:	f04f 31ff 	mov.w	r1, #4294967295
  42e5e6:	f000 fd45 	bl	42f074 <__aeabi_uldivmod>
  42e5ea:	e00b      	b.n	42e604 <_strtoull_l.isra.0+0x90>
  42e5ec:	2c30      	cmp	r4, #48	; 0x30
  42e5ee:	d07d      	beq.n	42e6ec <_strtoull_l.isra.0+0x178>
  42e5f0:	4f4e      	ldr	r7, [pc, #312]	; (42e72c <_strtoull_l.isra.0+0x1b8>)
  42e5f2:	2205      	movs	r2, #5
  42e5f4:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
  42e5f8:	f04f 080a 	mov.w	r8, #10
  42e5fc:	f04f 0900 	mov.w	r9, #0
  42e600:	f04f 0a0a 	mov.w	sl, #10
  42e604:	f04f 0e00 	mov.w	lr, #0
  42e608:	2000      	movs	r0, #0
  42e60a:	2100      	movs	r1, #0
  42e60c:	e011      	b.n	42e632 <_strtoull_l.isra.0+0xbe>
  42e60e:	42b9      	cmp	r1, r7
  42e610:	bf08      	it	eq
  42e612:	42b0      	cmpeq	r0, r6
  42e614:	d03f      	beq.n	42e696 <_strtoull_l.isra.0+0x122>
  42e616:	fb00 f409 	mul.w	r4, r0, r9
  42e61a:	fb08 4401 	mla	r4, r8, r1, r4
  42e61e:	fba0 0108 	umull	r0, r1, r0, r8
  42e622:	4421      	add	r1, r4
  42e624:	18c0      	adds	r0, r0, r3
  42e626:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
  42e62a:	f04f 0e01 	mov.w	lr, #1
  42e62e:	f815 4b01 	ldrb.w	r4, [r5], #1
  42e632:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  42e636:	2b09      	cmp	r3, #9
  42e638:	d905      	bls.n	42e646 <_strtoull_l.isra.0+0xd2>
  42e63a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  42e63e:	2b19      	cmp	r3, #25
  42e640:	d80d      	bhi.n	42e65e <_strtoull_l.isra.0+0xea>
  42e642:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
  42e646:	459a      	cmp	sl, r3
  42e648:	dd11      	ble.n	42e66e <_strtoull_l.isra.0+0xfa>
  42e64a:	f1be 0f00 	cmp.w	lr, #0
  42e64e:	db03      	blt.n	42e658 <_strtoull_l.isra.0+0xe4>
  42e650:	428f      	cmp	r7, r1
  42e652:	bf08      	it	eq
  42e654:	4286      	cmpeq	r6, r0
  42e656:	d2da      	bcs.n	42e60e <_strtoull_l.isra.0+0x9a>
  42e658:	f04f 3eff 	mov.w	lr, #4294967295
  42e65c:	e7e7      	b.n	42e62e <_strtoull_l.isra.0+0xba>
  42e65e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
  42e662:	2b19      	cmp	r3, #25
  42e664:	d803      	bhi.n	42e66e <_strtoull_l.isra.0+0xfa>
  42e666:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
  42e66a:	459a      	cmp	sl, r3
  42e66c:	dced      	bgt.n	42e64a <_strtoull_l.isra.0+0xd6>
  42e66e:	f1be 0f00 	cmp.w	lr, #0
  42e672:	db15      	blt.n	42e6a0 <_strtoull_l.isra.0+0x12c>
  42e674:	9b01      	ldr	r3, [sp, #4]
  42e676:	b113      	cbz	r3, 42e67e <_strtoull_l.isra.0+0x10a>
  42e678:	4240      	negs	r0, r0
  42e67a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  42e67e:	f1bb 0f00 	cmp.w	fp, #0
  42e682:	d005      	beq.n	42e690 <_strtoull_l.isra.0+0x11c>
  42e684:	f1be 0f00 	cmp.w	lr, #0
  42e688:	d114      	bne.n	42e6b4 <_strtoull_l.isra.0+0x140>
  42e68a:	9d02      	ldr	r5, [sp, #8]
  42e68c:	f8cb 5000 	str.w	r5, [fp]
  42e690:	b005      	add	sp, #20
  42e692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42e696:	4293      	cmp	r3, r2
  42e698:	ddbd      	ble.n	42e616 <_strtoull_l.isra.0+0xa2>
  42e69a:	f04f 3eff 	mov.w	lr, #4294967295
  42e69e:	e7c6      	b.n	42e62e <_strtoull_l.isra.0+0xba>
  42e6a0:	9a03      	ldr	r2, [sp, #12]
  42e6a2:	2322      	movs	r3, #34	; 0x22
  42e6a4:	6013      	str	r3, [r2, #0]
  42e6a6:	f04f 30ff 	mov.w	r0, #4294967295
  42e6aa:	f04f 31ff 	mov.w	r1, #4294967295
  42e6ae:	f1bb 0f00 	cmp.w	fp, #0
  42e6b2:	d0ed      	beq.n	42e690 <_strtoull_l.isra.0+0x11c>
  42e6b4:	3d01      	subs	r5, #1
  42e6b6:	e7e9      	b.n	42e68c <_strtoull_l.isra.0+0x118>
  42e6b8:	2301      	movs	r3, #1
  42e6ba:	782c      	ldrb	r4, [r5, #0]
  42e6bc:	9301      	str	r3, [sp, #4]
  42e6be:	1cbd      	adds	r5, r7, #2
  42e6c0:	e777      	b.n	42e5b2 <_strtoull_l.isra.0+0x3e>
  42e6c2:	2c30      	cmp	r4, #48	; 0x30
  42e6c4:	d123      	bne.n	42e70e <_strtoull_l.isra.0+0x19a>
  42e6c6:	782b      	ldrb	r3, [r5, #0]
  42e6c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  42e6cc:	2b58      	cmp	r3, #88	; 0x58
  42e6ce:	d128      	bne.n	42e722 <_strtoull_l.isra.0+0x1ae>
  42e6d0:	786c      	ldrb	r4, [r5, #1]
  42e6d2:	220f      	movs	r2, #15
  42e6d4:	3502      	adds	r5, #2
  42e6d6:	f04f 36ff 	mov.w	r6, #4294967295
  42e6da:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  42e6de:	f04f 0810 	mov.w	r8, #16
  42e6e2:	f04f 0900 	mov.w	r9, #0
  42e6e6:	f04f 0a10 	mov.w	sl, #16
  42e6ea:	e78b      	b.n	42e604 <_strtoull_l.isra.0+0x90>
  42e6ec:	782b      	ldrb	r3, [r5, #0]
  42e6ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  42e6f2:	2b58      	cmp	r3, #88	; 0x58
  42e6f4:	d0ec      	beq.n	42e6d0 <_strtoull_l.isra.0+0x15c>
  42e6f6:	2207      	movs	r2, #7
  42e6f8:	f04f 36ff 	mov.w	r6, #4294967295
  42e6fc:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
  42e700:	f04f 0808 	mov.w	r8, #8
  42e704:	f04f 0900 	mov.w	r9, #0
  42e708:	f04f 0a08 	mov.w	sl, #8
  42e70c:	e77a      	b.n	42e604 <_strtoull_l.isra.0+0x90>
  42e70e:	220f      	movs	r2, #15
  42e710:	f04f 36ff 	mov.w	r6, #4294967295
  42e714:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
  42e718:	f04f 0810 	mov.w	r8, #16
  42e71c:	f04f 0900 	mov.w	r9, #0
  42e720:	e770      	b.n	42e604 <_strtoull_l.isra.0+0x90>
  42e722:	f04f 0810 	mov.w	r8, #16
  42e726:	f04f 0900 	mov.w	r9, #0
  42e72a:	e74c      	b.n	42e5c6 <_strtoull_l.isra.0+0x52>
  42e72c:	19999999 	.word	0x19999999

0042e730 <_strtoull_r>:
  42e730:	b530      	push	{r4, r5, lr}
  42e732:	4c06      	ldr	r4, [pc, #24]	; (42e74c <_strtoull_r+0x1c>)
  42e734:	4d06      	ldr	r5, [pc, #24]	; (42e750 <_strtoull_r+0x20>)
  42e736:	6824      	ldr	r4, [r4, #0]
  42e738:	6b64      	ldr	r4, [r4, #52]	; 0x34
  42e73a:	b083      	sub	sp, #12
  42e73c:	2c00      	cmp	r4, #0
  42e73e:	bf08      	it	eq
  42e740:	462c      	moveq	r4, r5
  42e742:	9400      	str	r4, [sp, #0]
  42e744:	f7ff ff16 	bl	42e574 <_strtoull_l.isra.0>
  42e748:	b003      	add	sp, #12
  42e74a:	bd30      	pop	{r4, r5, pc}
  42e74c:	200000c8 	.word	0x200000c8
  42e750:	20000544 	.word	0x20000544

0042e754 <__aeabi_drsub>:
  42e754:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  42e758:	e002      	b.n	42e760 <__adddf3>
  42e75a:	bf00      	nop

0042e75c <__aeabi_dsub>:
  42e75c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0042e760 <__adddf3>:
  42e760:	b530      	push	{r4, r5, lr}
  42e762:	ea4f 0441 	mov.w	r4, r1, lsl #1
  42e766:	ea4f 0543 	mov.w	r5, r3, lsl #1
  42e76a:	ea94 0f05 	teq	r4, r5
  42e76e:	bf08      	it	eq
  42e770:	ea90 0f02 	teqeq	r0, r2
  42e774:	bf1f      	itttt	ne
  42e776:	ea54 0c00 	orrsne.w	ip, r4, r0
  42e77a:	ea55 0c02 	orrsne.w	ip, r5, r2
  42e77e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  42e782:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  42e786:	f000 80e2 	beq.w	42e94e <__adddf3+0x1ee>
  42e78a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  42e78e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  42e792:	bfb8      	it	lt
  42e794:	426d      	neglt	r5, r5
  42e796:	dd0c      	ble.n	42e7b2 <__adddf3+0x52>
  42e798:	442c      	add	r4, r5
  42e79a:	ea80 0202 	eor.w	r2, r0, r2
  42e79e:	ea81 0303 	eor.w	r3, r1, r3
  42e7a2:	ea82 0000 	eor.w	r0, r2, r0
  42e7a6:	ea83 0101 	eor.w	r1, r3, r1
  42e7aa:	ea80 0202 	eor.w	r2, r0, r2
  42e7ae:	ea81 0303 	eor.w	r3, r1, r3
  42e7b2:	2d36      	cmp	r5, #54	; 0x36
  42e7b4:	bf88      	it	hi
  42e7b6:	bd30      	pophi	{r4, r5, pc}
  42e7b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  42e7bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  42e7c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  42e7c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  42e7c8:	d002      	beq.n	42e7d0 <__adddf3+0x70>
  42e7ca:	4240      	negs	r0, r0
  42e7cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  42e7d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  42e7d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  42e7d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  42e7dc:	d002      	beq.n	42e7e4 <__adddf3+0x84>
  42e7de:	4252      	negs	r2, r2
  42e7e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  42e7e4:	ea94 0f05 	teq	r4, r5
  42e7e8:	f000 80a7 	beq.w	42e93a <__adddf3+0x1da>
  42e7ec:	f1a4 0401 	sub.w	r4, r4, #1
  42e7f0:	f1d5 0e20 	rsbs	lr, r5, #32
  42e7f4:	db0d      	blt.n	42e812 <__adddf3+0xb2>
  42e7f6:	fa02 fc0e 	lsl.w	ip, r2, lr
  42e7fa:	fa22 f205 	lsr.w	r2, r2, r5
  42e7fe:	1880      	adds	r0, r0, r2
  42e800:	f141 0100 	adc.w	r1, r1, #0
  42e804:	fa03 f20e 	lsl.w	r2, r3, lr
  42e808:	1880      	adds	r0, r0, r2
  42e80a:	fa43 f305 	asr.w	r3, r3, r5
  42e80e:	4159      	adcs	r1, r3
  42e810:	e00e      	b.n	42e830 <__adddf3+0xd0>
  42e812:	f1a5 0520 	sub.w	r5, r5, #32
  42e816:	f10e 0e20 	add.w	lr, lr, #32
  42e81a:	2a01      	cmp	r2, #1
  42e81c:	fa03 fc0e 	lsl.w	ip, r3, lr
  42e820:	bf28      	it	cs
  42e822:	f04c 0c02 	orrcs.w	ip, ip, #2
  42e826:	fa43 f305 	asr.w	r3, r3, r5
  42e82a:	18c0      	adds	r0, r0, r3
  42e82c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  42e830:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  42e834:	d507      	bpl.n	42e846 <__adddf3+0xe6>
  42e836:	f04f 0e00 	mov.w	lr, #0
  42e83a:	f1dc 0c00 	rsbs	ip, ip, #0
  42e83e:	eb7e 0000 	sbcs.w	r0, lr, r0
  42e842:	eb6e 0101 	sbc.w	r1, lr, r1
  42e846:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  42e84a:	d31b      	bcc.n	42e884 <__adddf3+0x124>
  42e84c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  42e850:	d30c      	bcc.n	42e86c <__adddf3+0x10c>
  42e852:	0849      	lsrs	r1, r1, #1
  42e854:	ea5f 0030 	movs.w	r0, r0, rrx
  42e858:	ea4f 0c3c 	mov.w	ip, ip, rrx
  42e85c:	f104 0401 	add.w	r4, r4, #1
  42e860:	ea4f 5244 	mov.w	r2, r4, lsl #21
  42e864:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  42e868:	f080 809a 	bcs.w	42e9a0 <__adddf3+0x240>
  42e86c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  42e870:	bf08      	it	eq
  42e872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  42e876:	f150 0000 	adcs.w	r0, r0, #0
  42e87a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  42e87e:	ea41 0105 	orr.w	r1, r1, r5
  42e882:	bd30      	pop	{r4, r5, pc}
  42e884:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  42e888:	4140      	adcs	r0, r0
  42e88a:	eb41 0101 	adc.w	r1, r1, r1
  42e88e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  42e892:	f1a4 0401 	sub.w	r4, r4, #1
  42e896:	d1e9      	bne.n	42e86c <__adddf3+0x10c>
  42e898:	f091 0f00 	teq	r1, #0
  42e89c:	bf04      	itt	eq
  42e89e:	4601      	moveq	r1, r0
  42e8a0:	2000      	moveq	r0, #0
  42e8a2:	fab1 f381 	clz	r3, r1
  42e8a6:	bf08      	it	eq
  42e8a8:	3320      	addeq	r3, #32
  42e8aa:	f1a3 030b 	sub.w	r3, r3, #11
  42e8ae:	f1b3 0220 	subs.w	r2, r3, #32
  42e8b2:	da0c      	bge.n	42e8ce <__adddf3+0x16e>
  42e8b4:	320c      	adds	r2, #12
  42e8b6:	dd08      	ble.n	42e8ca <__adddf3+0x16a>
  42e8b8:	f102 0c14 	add.w	ip, r2, #20
  42e8bc:	f1c2 020c 	rsb	r2, r2, #12
  42e8c0:	fa01 f00c 	lsl.w	r0, r1, ip
  42e8c4:	fa21 f102 	lsr.w	r1, r1, r2
  42e8c8:	e00c      	b.n	42e8e4 <__adddf3+0x184>
  42e8ca:	f102 0214 	add.w	r2, r2, #20
  42e8ce:	bfd8      	it	le
  42e8d0:	f1c2 0c20 	rsble	ip, r2, #32
  42e8d4:	fa01 f102 	lsl.w	r1, r1, r2
  42e8d8:	fa20 fc0c 	lsr.w	ip, r0, ip
  42e8dc:	bfdc      	itt	le
  42e8de:	ea41 010c 	orrle.w	r1, r1, ip
  42e8e2:	4090      	lslle	r0, r2
  42e8e4:	1ae4      	subs	r4, r4, r3
  42e8e6:	bfa2      	ittt	ge
  42e8e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  42e8ec:	4329      	orrge	r1, r5
  42e8ee:	bd30      	popge	{r4, r5, pc}
  42e8f0:	ea6f 0404 	mvn.w	r4, r4
  42e8f4:	3c1f      	subs	r4, #31
  42e8f6:	da1c      	bge.n	42e932 <__adddf3+0x1d2>
  42e8f8:	340c      	adds	r4, #12
  42e8fa:	dc0e      	bgt.n	42e91a <__adddf3+0x1ba>
  42e8fc:	f104 0414 	add.w	r4, r4, #20
  42e900:	f1c4 0220 	rsb	r2, r4, #32
  42e904:	fa20 f004 	lsr.w	r0, r0, r4
  42e908:	fa01 f302 	lsl.w	r3, r1, r2
  42e90c:	ea40 0003 	orr.w	r0, r0, r3
  42e910:	fa21 f304 	lsr.w	r3, r1, r4
  42e914:	ea45 0103 	orr.w	r1, r5, r3
  42e918:	bd30      	pop	{r4, r5, pc}
  42e91a:	f1c4 040c 	rsb	r4, r4, #12
  42e91e:	f1c4 0220 	rsb	r2, r4, #32
  42e922:	fa20 f002 	lsr.w	r0, r0, r2
  42e926:	fa01 f304 	lsl.w	r3, r1, r4
  42e92a:	ea40 0003 	orr.w	r0, r0, r3
  42e92e:	4629      	mov	r1, r5
  42e930:	bd30      	pop	{r4, r5, pc}
  42e932:	fa21 f004 	lsr.w	r0, r1, r4
  42e936:	4629      	mov	r1, r5
  42e938:	bd30      	pop	{r4, r5, pc}
  42e93a:	f094 0f00 	teq	r4, #0
  42e93e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  42e942:	bf06      	itte	eq
  42e944:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  42e948:	3401      	addeq	r4, #1
  42e94a:	3d01      	subne	r5, #1
  42e94c:	e74e      	b.n	42e7ec <__adddf3+0x8c>
  42e94e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  42e952:	bf18      	it	ne
  42e954:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  42e958:	d029      	beq.n	42e9ae <__adddf3+0x24e>
  42e95a:	ea94 0f05 	teq	r4, r5
  42e95e:	bf08      	it	eq
  42e960:	ea90 0f02 	teqeq	r0, r2
  42e964:	d005      	beq.n	42e972 <__adddf3+0x212>
  42e966:	ea54 0c00 	orrs.w	ip, r4, r0
  42e96a:	bf04      	itt	eq
  42e96c:	4619      	moveq	r1, r3
  42e96e:	4610      	moveq	r0, r2
  42e970:	bd30      	pop	{r4, r5, pc}
  42e972:	ea91 0f03 	teq	r1, r3
  42e976:	bf1e      	ittt	ne
  42e978:	2100      	movne	r1, #0
  42e97a:	2000      	movne	r0, #0
  42e97c:	bd30      	popne	{r4, r5, pc}
  42e97e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  42e982:	d105      	bne.n	42e990 <__adddf3+0x230>
  42e984:	0040      	lsls	r0, r0, #1
  42e986:	4149      	adcs	r1, r1
  42e988:	bf28      	it	cs
  42e98a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  42e98e:	bd30      	pop	{r4, r5, pc}
  42e990:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  42e994:	bf3c      	itt	cc
  42e996:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  42e99a:	bd30      	popcc	{r4, r5, pc}
  42e99c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  42e9a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  42e9a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  42e9a8:	f04f 0000 	mov.w	r0, #0
  42e9ac:	bd30      	pop	{r4, r5, pc}
  42e9ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  42e9b2:	bf1a      	itte	ne
  42e9b4:	4619      	movne	r1, r3
  42e9b6:	4610      	movne	r0, r2
  42e9b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  42e9bc:	bf1c      	itt	ne
  42e9be:	460b      	movne	r3, r1
  42e9c0:	4602      	movne	r2, r0
  42e9c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  42e9c6:	bf06      	itte	eq
  42e9c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  42e9cc:	ea91 0f03 	teqeq	r1, r3
  42e9d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  42e9d4:	bd30      	pop	{r4, r5, pc}
  42e9d6:	bf00      	nop

0042e9d8 <__aeabi_ui2d>:
  42e9d8:	f090 0f00 	teq	r0, #0
  42e9dc:	bf04      	itt	eq
  42e9de:	2100      	moveq	r1, #0
  42e9e0:	4770      	bxeq	lr
  42e9e2:	b530      	push	{r4, r5, lr}
  42e9e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  42e9e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  42e9ec:	f04f 0500 	mov.w	r5, #0
  42e9f0:	f04f 0100 	mov.w	r1, #0
  42e9f4:	e750      	b.n	42e898 <__adddf3+0x138>
  42e9f6:	bf00      	nop

0042e9f8 <__aeabi_i2d>:
  42e9f8:	f090 0f00 	teq	r0, #0
  42e9fc:	bf04      	itt	eq
  42e9fe:	2100      	moveq	r1, #0
  42ea00:	4770      	bxeq	lr
  42ea02:	b530      	push	{r4, r5, lr}
  42ea04:	f44f 6480 	mov.w	r4, #1024	; 0x400
  42ea08:	f104 0432 	add.w	r4, r4, #50	; 0x32
  42ea0c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  42ea10:	bf48      	it	mi
  42ea12:	4240      	negmi	r0, r0
  42ea14:	f04f 0100 	mov.w	r1, #0
  42ea18:	e73e      	b.n	42e898 <__adddf3+0x138>
  42ea1a:	bf00      	nop

0042ea1c <__aeabi_f2d>:
  42ea1c:	0042      	lsls	r2, r0, #1
  42ea1e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  42ea22:	ea4f 0131 	mov.w	r1, r1, rrx
  42ea26:	ea4f 7002 	mov.w	r0, r2, lsl #28
  42ea2a:	bf1f      	itttt	ne
  42ea2c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  42ea30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  42ea34:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  42ea38:	4770      	bxne	lr
  42ea3a:	f092 0f00 	teq	r2, #0
  42ea3e:	bf14      	ite	ne
  42ea40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  42ea44:	4770      	bxeq	lr
  42ea46:	b530      	push	{r4, r5, lr}
  42ea48:	f44f 7460 	mov.w	r4, #896	; 0x380
  42ea4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  42ea50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  42ea54:	e720      	b.n	42e898 <__adddf3+0x138>
  42ea56:	bf00      	nop

0042ea58 <__aeabi_ul2d>:
  42ea58:	ea50 0201 	orrs.w	r2, r0, r1
  42ea5c:	bf08      	it	eq
  42ea5e:	4770      	bxeq	lr
  42ea60:	b530      	push	{r4, r5, lr}
  42ea62:	f04f 0500 	mov.w	r5, #0
  42ea66:	e00a      	b.n	42ea7e <__aeabi_l2d+0x16>

0042ea68 <__aeabi_l2d>:
  42ea68:	ea50 0201 	orrs.w	r2, r0, r1
  42ea6c:	bf08      	it	eq
  42ea6e:	4770      	bxeq	lr
  42ea70:	b530      	push	{r4, r5, lr}
  42ea72:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  42ea76:	d502      	bpl.n	42ea7e <__aeabi_l2d+0x16>
  42ea78:	4240      	negs	r0, r0
  42ea7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  42ea7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  42ea82:	f104 0432 	add.w	r4, r4, #50	; 0x32
  42ea86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  42ea8a:	f43f aedc 	beq.w	42e846 <__adddf3+0xe6>
  42ea8e:	f04f 0203 	mov.w	r2, #3
  42ea92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  42ea96:	bf18      	it	ne
  42ea98:	3203      	addne	r2, #3
  42ea9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  42ea9e:	bf18      	it	ne
  42eaa0:	3203      	addne	r2, #3
  42eaa2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  42eaa6:	f1c2 0320 	rsb	r3, r2, #32
  42eaaa:	fa00 fc03 	lsl.w	ip, r0, r3
  42eaae:	fa20 f002 	lsr.w	r0, r0, r2
  42eab2:	fa01 fe03 	lsl.w	lr, r1, r3
  42eab6:	ea40 000e 	orr.w	r0, r0, lr
  42eaba:	fa21 f102 	lsr.w	r1, r1, r2
  42eabe:	4414      	add	r4, r2
  42eac0:	e6c1      	b.n	42e846 <__adddf3+0xe6>
  42eac2:	bf00      	nop

0042eac4 <__aeabi_dmul>:
  42eac4:	b570      	push	{r4, r5, r6, lr}
  42eac6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  42eaca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  42eace:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  42ead2:	bf1d      	ittte	ne
  42ead4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  42ead8:	ea94 0f0c 	teqne	r4, ip
  42eadc:	ea95 0f0c 	teqne	r5, ip
  42eae0:	f000 f8de 	bleq	42eca0 <__aeabi_dmul+0x1dc>
  42eae4:	442c      	add	r4, r5
  42eae6:	ea81 0603 	eor.w	r6, r1, r3
  42eaea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  42eaee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  42eaf2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  42eaf6:	bf18      	it	ne
  42eaf8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  42eafc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  42eb00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  42eb04:	d038      	beq.n	42eb78 <__aeabi_dmul+0xb4>
  42eb06:	fba0 ce02 	umull	ip, lr, r0, r2
  42eb0a:	f04f 0500 	mov.w	r5, #0
  42eb0e:	fbe1 e502 	umlal	lr, r5, r1, r2
  42eb12:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  42eb16:	fbe0 e503 	umlal	lr, r5, r0, r3
  42eb1a:	f04f 0600 	mov.w	r6, #0
  42eb1e:	fbe1 5603 	umlal	r5, r6, r1, r3
  42eb22:	f09c 0f00 	teq	ip, #0
  42eb26:	bf18      	it	ne
  42eb28:	f04e 0e01 	orrne.w	lr, lr, #1
  42eb2c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  42eb30:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  42eb34:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  42eb38:	d204      	bcs.n	42eb44 <__aeabi_dmul+0x80>
  42eb3a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  42eb3e:	416d      	adcs	r5, r5
  42eb40:	eb46 0606 	adc.w	r6, r6, r6
  42eb44:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  42eb48:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  42eb4c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  42eb50:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  42eb54:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  42eb58:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  42eb5c:	bf88      	it	hi
  42eb5e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  42eb62:	d81e      	bhi.n	42eba2 <__aeabi_dmul+0xde>
  42eb64:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  42eb68:	bf08      	it	eq
  42eb6a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  42eb6e:	f150 0000 	adcs.w	r0, r0, #0
  42eb72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  42eb76:	bd70      	pop	{r4, r5, r6, pc}
  42eb78:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  42eb7c:	ea46 0101 	orr.w	r1, r6, r1
  42eb80:	ea40 0002 	orr.w	r0, r0, r2
  42eb84:	ea81 0103 	eor.w	r1, r1, r3
  42eb88:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  42eb8c:	bfc2      	ittt	gt
  42eb8e:	ebd4 050c 	rsbsgt	r5, r4, ip
  42eb92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  42eb96:	bd70      	popgt	{r4, r5, r6, pc}
  42eb98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  42eb9c:	f04f 0e00 	mov.w	lr, #0
  42eba0:	3c01      	subs	r4, #1
  42eba2:	f300 80ab 	bgt.w	42ecfc <__aeabi_dmul+0x238>
  42eba6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  42ebaa:	bfde      	ittt	le
  42ebac:	2000      	movle	r0, #0
  42ebae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  42ebb2:	bd70      	pople	{r4, r5, r6, pc}
  42ebb4:	f1c4 0400 	rsb	r4, r4, #0
  42ebb8:	3c20      	subs	r4, #32
  42ebba:	da35      	bge.n	42ec28 <__aeabi_dmul+0x164>
  42ebbc:	340c      	adds	r4, #12
  42ebbe:	dc1b      	bgt.n	42ebf8 <__aeabi_dmul+0x134>
  42ebc0:	f104 0414 	add.w	r4, r4, #20
  42ebc4:	f1c4 0520 	rsb	r5, r4, #32
  42ebc8:	fa00 f305 	lsl.w	r3, r0, r5
  42ebcc:	fa20 f004 	lsr.w	r0, r0, r4
  42ebd0:	fa01 f205 	lsl.w	r2, r1, r5
  42ebd4:	ea40 0002 	orr.w	r0, r0, r2
  42ebd8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  42ebdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  42ebe0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  42ebe4:	fa21 f604 	lsr.w	r6, r1, r4
  42ebe8:	eb42 0106 	adc.w	r1, r2, r6
  42ebec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  42ebf0:	bf08      	it	eq
  42ebf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  42ebf6:	bd70      	pop	{r4, r5, r6, pc}
  42ebf8:	f1c4 040c 	rsb	r4, r4, #12
  42ebfc:	f1c4 0520 	rsb	r5, r4, #32
  42ec00:	fa00 f304 	lsl.w	r3, r0, r4
  42ec04:	fa20 f005 	lsr.w	r0, r0, r5
  42ec08:	fa01 f204 	lsl.w	r2, r1, r4
  42ec0c:	ea40 0002 	orr.w	r0, r0, r2
  42ec10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  42ec14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  42ec18:	f141 0100 	adc.w	r1, r1, #0
  42ec1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  42ec20:	bf08      	it	eq
  42ec22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  42ec26:	bd70      	pop	{r4, r5, r6, pc}
  42ec28:	f1c4 0520 	rsb	r5, r4, #32
  42ec2c:	fa00 f205 	lsl.w	r2, r0, r5
  42ec30:	ea4e 0e02 	orr.w	lr, lr, r2
  42ec34:	fa20 f304 	lsr.w	r3, r0, r4
  42ec38:	fa01 f205 	lsl.w	r2, r1, r5
  42ec3c:	ea43 0302 	orr.w	r3, r3, r2
  42ec40:	fa21 f004 	lsr.w	r0, r1, r4
  42ec44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  42ec48:	fa21 f204 	lsr.w	r2, r1, r4
  42ec4c:	ea20 0002 	bic.w	r0, r0, r2
  42ec50:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  42ec54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  42ec58:	bf08      	it	eq
  42ec5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  42ec5e:	bd70      	pop	{r4, r5, r6, pc}
  42ec60:	f094 0f00 	teq	r4, #0
  42ec64:	d10f      	bne.n	42ec86 <__aeabi_dmul+0x1c2>
  42ec66:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  42ec6a:	0040      	lsls	r0, r0, #1
  42ec6c:	eb41 0101 	adc.w	r1, r1, r1
  42ec70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  42ec74:	bf08      	it	eq
  42ec76:	3c01      	subeq	r4, #1
  42ec78:	d0f7      	beq.n	42ec6a <__aeabi_dmul+0x1a6>
  42ec7a:	ea41 0106 	orr.w	r1, r1, r6
  42ec7e:	f095 0f00 	teq	r5, #0
  42ec82:	bf18      	it	ne
  42ec84:	4770      	bxne	lr
  42ec86:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  42ec8a:	0052      	lsls	r2, r2, #1
  42ec8c:	eb43 0303 	adc.w	r3, r3, r3
  42ec90:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  42ec94:	bf08      	it	eq
  42ec96:	3d01      	subeq	r5, #1
  42ec98:	d0f7      	beq.n	42ec8a <__aeabi_dmul+0x1c6>
  42ec9a:	ea43 0306 	orr.w	r3, r3, r6
  42ec9e:	4770      	bx	lr
  42eca0:	ea94 0f0c 	teq	r4, ip
  42eca4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  42eca8:	bf18      	it	ne
  42ecaa:	ea95 0f0c 	teqne	r5, ip
  42ecae:	d00c      	beq.n	42ecca <__aeabi_dmul+0x206>
  42ecb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  42ecb4:	bf18      	it	ne
  42ecb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  42ecba:	d1d1      	bne.n	42ec60 <__aeabi_dmul+0x19c>
  42ecbc:	ea81 0103 	eor.w	r1, r1, r3
  42ecc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  42ecc4:	f04f 0000 	mov.w	r0, #0
  42ecc8:	bd70      	pop	{r4, r5, r6, pc}
  42ecca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  42ecce:	bf06      	itte	eq
  42ecd0:	4610      	moveq	r0, r2
  42ecd2:	4619      	moveq	r1, r3
  42ecd4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  42ecd8:	d019      	beq.n	42ed0e <__aeabi_dmul+0x24a>
  42ecda:	ea94 0f0c 	teq	r4, ip
  42ecde:	d102      	bne.n	42ece6 <__aeabi_dmul+0x222>
  42ece0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  42ece4:	d113      	bne.n	42ed0e <__aeabi_dmul+0x24a>
  42ece6:	ea95 0f0c 	teq	r5, ip
  42ecea:	d105      	bne.n	42ecf8 <__aeabi_dmul+0x234>
  42ecec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  42ecf0:	bf1c      	itt	ne
  42ecf2:	4610      	movne	r0, r2
  42ecf4:	4619      	movne	r1, r3
  42ecf6:	d10a      	bne.n	42ed0e <__aeabi_dmul+0x24a>
  42ecf8:	ea81 0103 	eor.w	r1, r1, r3
  42ecfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  42ed00:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  42ed04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  42ed08:	f04f 0000 	mov.w	r0, #0
  42ed0c:	bd70      	pop	{r4, r5, r6, pc}
  42ed0e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  42ed12:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  42ed16:	bd70      	pop	{r4, r5, r6, pc}

0042ed18 <__aeabi_ddiv>:
  42ed18:	b570      	push	{r4, r5, r6, lr}
  42ed1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  42ed1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  42ed22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  42ed26:	bf1d      	ittte	ne
  42ed28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  42ed2c:	ea94 0f0c 	teqne	r4, ip
  42ed30:	ea95 0f0c 	teqne	r5, ip
  42ed34:	f000 f8a7 	bleq	42ee86 <__aeabi_ddiv+0x16e>
  42ed38:	eba4 0405 	sub.w	r4, r4, r5
  42ed3c:	ea81 0e03 	eor.w	lr, r1, r3
  42ed40:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  42ed44:	ea4f 3101 	mov.w	r1, r1, lsl #12
  42ed48:	f000 8088 	beq.w	42ee5c <__aeabi_ddiv+0x144>
  42ed4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  42ed50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  42ed54:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  42ed58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  42ed5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  42ed60:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  42ed64:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  42ed68:	ea4f 2600 	mov.w	r6, r0, lsl #8
  42ed6c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  42ed70:	429d      	cmp	r5, r3
  42ed72:	bf08      	it	eq
  42ed74:	4296      	cmpeq	r6, r2
  42ed76:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  42ed7a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  42ed7e:	d202      	bcs.n	42ed86 <__aeabi_ddiv+0x6e>
  42ed80:	085b      	lsrs	r3, r3, #1
  42ed82:	ea4f 0232 	mov.w	r2, r2, rrx
  42ed86:	1ab6      	subs	r6, r6, r2
  42ed88:	eb65 0503 	sbc.w	r5, r5, r3
  42ed8c:	085b      	lsrs	r3, r3, #1
  42ed8e:	ea4f 0232 	mov.w	r2, r2, rrx
  42ed92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  42ed96:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  42ed9a:	ebb6 0e02 	subs.w	lr, r6, r2
  42ed9e:	eb75 0e03 	sbcs.w	lr, r5, r3
  42eda2:	bf22      	ittt	cs
  42eda4:	1ab6      	subcs	r6, r6, r2
  42eda6:	4675      	movcs	r5, lr
  42eda8:	ea40 000c 	orrcs.w	r0, r0, ip
  42edac:	085b      	lsrs	r3, r3, #1
  42edae:	ea4f 0232 	mov.w	r2, r2, rrx
  42edb2:	ebb6 0e02 	subs.w	lr, r6, r2
  42edb6:	eb75 0e03 	sbcs.w	lr, r5, r3
  42edba:	bf22      	ittt	cs
  42edbc:	1ab6      	subcs	r6, r6, r2
  42edbe:	4675      	movcs	r5, lr
  42edc0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  42edc4:	085b      	lsrs	r3, r3, #1
  42edc6:	ea4f 0232 	mov.w	r2, r2, rrx
  42edca:	ebb6 0e02 	subs.w	lr, r6, r2
  42edce:	eb75 0e03 	sbcs.w	lr, r5, r3
  42edd2:	bf22      	ittt	cs
  42edd4:	1ab6      	subcs	r6, r6, r2
  42edd6:	4675      	movcs	r5, lr
  42edd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  42eddc:	085b      	lsrs	r3, r3, #1
  42edde:	ea4f 0232 	mov.w	r2, r2, rrx
  42ede2:	ebb6 0e02 	subs.w	lr, r6, r2
  42ede6:	eb75 0e03 	sbcs.w	lr, r5, r3
  42edea:	bf22      	ittt	cs
  42edec:	1ab6      	subcs	r6, r6, r2
  42edee:	4675      	movcs	r5, lr
  42edf0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  42edf4:	ea55 0e06 	orrs.w	lr, r5, r6
  42edf8:	d018      	beq.n	42ee2c <__aeabi_ddiv+0x114>
  42edfa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  42edfe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  42ee02:	ea4f 1606 	mov.w	r6, r6, lsl #4
  42ee06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  42ee0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  42ee0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  42ee12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  42ee16:	d1c0      	bne.n	42ed9a <__aeabi_ddiv+0x82>
  42ee18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  42ee1c:	d10b      	bne.n	42ee36 <__aeabi_ddiv+0x11e>
  42ee1e:	ea41 0100 	orr.w	r1, r1, r0
  42ee22:	f04f 0000 	mov.w	r0, #0
  42ee26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  42ee2a:	e7b6      	b.n	42ed9a <__aeabi_ddiv+0x82>
  42ee2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  42ee30:	bf04      	itt	eq
  42ee32:	4301      	orreq	r1, r0
  42ee34:	2000      	moveq	r0, #0
  42ee36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  42ee3a:	bf88      	it	hi
  42ee3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  42ee40:	f63f aeaf 	bhi.w	42eba2 <__aeabi_dmul+0xde>
  42ee44:	ebb5 0c03 	subs.w	ip, r5, r3
  42ee48:	bf04      	itt	eq
  42ee4a:	ebb6 0c02 	subseq.w	ip, r6, r2
  42ee4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  42ee52:	f150 0000 	adcs.w	r0, r0, #0
  42ee56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  42ee5a:	bd70      	pop	{r4, r5, r6, pc}
  42ee5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  42ee60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  42ee64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  42ee68:	bfc2      	ittt	gt
  42ee6a:	ebd4 050c 	rsbsgt	r5, r4, ip
  42ee6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  42ee72:	bd70      	popgt	{r4, r5, r6, pc}
  42ee74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  42ee78:	f04f 0e00 	mov.w	lr, #0
  42ee7c:	3c01      	subs	r4, #1
  42ee7e:	e690      	b.n	42eba2 <__aeabi_dmul+0xde>
  42ee80:	ea45 0e06 	orr.w	lr, r5, r6
  42ee84:	e68d      	b.n	42eba2 <__aeabi_dmul+0xde>
  42ee86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  42ee8a:	ea94 0f0c 	teq	r4, ip
  42ee8e:	bf08      	it	eq
  42ee90:	ea95 0f0c 	teqeq	r5, ip
  42ee94:	f43f af3b 	beq.w	42ed0e <__aeabi_dmul+0x24a>
  42ee98:	ea94 0f0c 	teq	r4, ip
  42ee9c:	d10a      	bne.n	42eeb4 <__aeabi_ddiv+0x19c>
  42ee9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  42eea2:	f47f af34 	bne.w	42ed0e <__aeabi_dmul+0x24a>
  42eea6:	ea95 0f0c 	teq	r5, ip
  42eeaa:	f47f af25 	bne.w	42ecf8 <__aeabi_dmul+0x234>
  42eeae:	4610      	mov	r0, r2
  42eeb0:	4619      	mov	r1, r3
  42eeb2:	e72c      	b.n	42ed0e <__aeabi_dmul+0x24a>
  42eeb4:	ea95 0f0c 	teq	r5, ip
  42eeb8:	d106      	bne.n	42eec8 <__aeabi_ddiv+0x1b0>
  42eeba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  42eebe:	f43f aefd 	beq.w	42ecbc <__aeabi_dmul+0x1f8>
  42eec2:	4610      	mov	r0, r2
  42eec4:	4619      	mov	r1, r3
  42eec6:	e722      	b.n	42ed0e <__aeabi_dmul+0x24a>
  42eec8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  42eecc:	bf18      	it	ne
  42eece:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  42eed2:	f47f aec5 	bne.w	42ec60 <__aeabi_dmul+0x19c>
  42eed6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  42eeda:	f47f af0d 	bne.w	42ecf8 <__aeabi_dmul+0x234>
  42eede:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  42eee2:	f47f aeeb 	bne.w	42ecbc <__aeabi_dmul+0x1f8>
  42eee6:	e712      	b.n	42ed0e <__aeabi_dmul+0x24a>

0042eee8 <__gedf2>:
  42eee8:	f04f 3cff 	mov.w	ip, #4294967295
  42eeec:	e006      	b.n	42eefc <__cmpdf2+0x4>
  42eeee:	bf00      	nop

0042eef0 <__ledf2>:
  42eef0:	f04f 0c01 	mov.w	ip, #1
  42eef4:	e002      	b.n	42eefc <__cmpdf2+0x4>
  42eef6:	bf00      	nop

0042eef8 <__cmpdf2>:
  42eef8:	f04f 0c01 	mov.w	ip, #1
  42eefc:	f84d cd04 	str.w	ip, [sp, #-4]!
  42ef00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  42ef04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  42ef08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  42ef0c:	bf18      	it	ne
  42ef0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  42ef12:	d01b      	beq.n	42ef4c <__cmpdf2+0x54>
  42ef14:	b001      	add	sp, #4
  42ef16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  42ef1a:	bf0c      	ite	eq
  42ef1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  42ef20:	ea91 0f03 	teqne	r1, r3
  42ef24:	bf02      	ittt	eq
  42ef26:	ea90 0f02 	teqeq	r0, r2
  42ef2a:	2000      	moveq	r0, #0
  42ef2c:	4770      	bxeq	lr
  42ef2e:	f110 0f00 	cmn.w	r0, #0
  42ef32:	ea91 0f03 	teq	r1, r3
  42ef36:	bf58      	it	pl
  42ef38:	4299      	cmppl	r1, r3
  42ef3a:	bf08      	it	eq
  42ef3c:	4290      	cmpeq	r0, r2
  42ef3e:	bf2c      	ite	cs
  42ef40:	17d8      	asrcs	r0, r3, #31
  42ef42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  42ef46:	f040 0001 	orr.w	r0, r0, #1
  42ef4a:	4770      	bx	lr
  42ef4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  42ef50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  42ef54:	d102      	bne.n	42ef5c <__cmpdf2+0x64>
  42ef56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  42ef5a:	d107      	bne.n	42ef6c <__cmpdf2+0x74>
  42ef5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  42ef60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  42ef64:	d1d6      	bne.n	42ef14 <__cmpdf2+0x1c>
  42ef66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  42ef6a:	d0d3      	beq.n	42ef14 <__cmpdf2+0x1c>
  42ef6c:	f85d 0b04 	ldr.w	r0, [sp], #4
  42ef70:	4770      	bx	lr
  42ef72:	bf00      	nop

0042ef74 <__aeabi_cdrcmple>:
  42ef74:	4684      	mov	ip, r0
  42ef76:	4610      	mov	r0, r2
  42ef78:	4662      	mov	r2, ip
  42ef7a:	468c      	mov	ip, r1
  42ef7c:	4619      	mov	r1, r3
  42ef7e:	4663      	mov	r3, ip
  42ef80:	e000      	b.n	42ef84 <__aeabi_cdcmpeq>
  42ef82:	bf00      	nop

0042ef84 <__aeabi_cdcmpeq>:
  42ef84:	b501      	push	{r0, lr}
  42ef86:	f7ff ffb7 	bl	42eef8 <__cmpdf2>
  42ef8a:	2800      	cmp	r0, #0
  42ef8c:	bf48      	it	mi
  42ef8e:	f110 0f00 	cmnmi.w	r0, #0
  42ef92:	bd01      	pop	{r0, pc}

0042ef94 <__aeabi_dcmpeq>:
  42ef94:	f84d ed08 	str.w	lr, [sp, #-8]!
  42ef98:	f7ff fff4 	bl	42ef84 <__aeabi_cdcmpeq>
  42ef9c:	bf0c      	ite	eq
  42ef9e:	2001      	moveq	r0, #1
  42efa0:	2000      	movne	r0, #0
  42efa2:	f85d fb08 	ldr.w	pc, [sp], #8
  42efa6:	bf00      	nop

0042efa8 <__aeabi_dcmplt>:
  42efa8:	f84d ed08 	str.w	lr, [sp, #-8]!
  42efac:	f7ff ffea 	bl	42ef84 <__aeabi_cdcmpeq>
  42efb0:	bf34      	ite	cc
  42efb2:	2001      	movcc	r0, #1
  42efb4:	2000      	movcs	r0, #0
  42efb6:	f85d fb08 	ldr.w	pc, [sp], #8
  42efba:	bf00      	nop

0042efbc <__aeabi_dcmple>:
  42efbc:	f84d ed08 	str.w	lr, [sp, #-8]!
  42efc0:	f7ff ffe0 	bl	42ef84 <__aeabi_cdcmpeq>
  42efc4:	bf94      	ite	ls
  42efc6:	2001      	movls	r0, #1
  42efc8:	2000      	movhi	r0, #0
  42efca:	f85d fb08 	ldr.w	pc, [sp], #8
  42efce:	bf00      	nop

0042efd0 <__aeabi_dcmpge>:
  42efd0:	f84d ed08 	str.w	lr, [sp, #-8]!
  42efd4:	f7ff ffce 	bl	42ef74 <__aeabi_cdrcmple>
  42efd8:	bf94      	ite	ls
  42efda:	2001      	movls	r0, #1
  42efdc:	2000      	movhi	r0, #0
  42efde:	f85d fb08 	ldr.w	pc, [sp], #8
  42efe2:	bf00      	nop

0042efe4 <__aeabi_dcmpgt>:
  42efe4:	f84d ed08 	str.w	lr, [sp, #-8]!
  42efe8:	f7ff ffc4 	bl	42ef74 <__aeabi_cdrcmple>
  42efec:	bf34      	ite	cc
  42efee:	2001      	movcc	r0, #1
  42eff0:	2000      	movcs	r0, #0
  42eff2:	f85d fb08 	ldr.w	pc, [sp], #8
  42eff6:	bf00      	nop

0042eff8 <__aeabi_dcmpun>:
  42eff8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  42effc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  42f000:	d102      	bne.n	42f008 <__aeabi_dcmpun+0x10>
  42f002:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  42f006:	d10a      	bne.n	42f01e <__aeabi_dcmpun+0x26>
  42f008:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  42f00c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  42f010:	d102      	bne.n	42f018 <__aeabi_dcmpun+0x20>
  42f012:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  42f016:	d102      	bne.n	42f01e <__aeabi_dcmpun+0x26>
  42f018:	f04f 0000 	mov.w	r0, #0
  42f01c:	4770      	bx	lr
  42f01e:	f04f 0001 	mov.w	r0, #1
  42f022:	4770      	bx	lr

0042f024 <__aeabi_d2iz>:
  42f024:	ea4f 0241 	mov.w	r2, r1, lsl #1
  42f028:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  42f02c:	d215      	bcs.n	42f05a <__aeabi_d2iz+0x36>
  42f02e:	d511      	bpl.n	42f054 <__aeabi_d2iz+0x30>
  42f030:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  42f034:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  42f038:	d912      	bls.n	42f060 <__aeabi_d2iz+0x3c>
  42f03a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  42f03e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  42f042:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  42f046:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  42f04a:	fa23 f002 	lsr.w	r0, r3, r2
  42f04e:	bf18      	it	ne
  42f050:	4240      	negne	r0, r0
  42f052:	4770      	bx	lr
  42f054:	f04f 0000 	mov.w	r0, #0
  42f058:	4770      	bx	lr
  42f05a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  42f05e:	d105      	bne.n	42f06c <__aeabi_d2iz+0x48>
  42f060:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  42f064:	bf08      	it	eq
  42f066:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  42f06a:	4770      	bx	lr
  42f06c:	f04f 0000 	mov.w	r0, #0
  42f070:	4770      	bx	lr
  42f072:	bf00      	nop

0042f074 <__aeabi_uldivmod>:
  42f074:	b953      	cbnz	r3, 42f08c <__aeabi_uldivmod+0x18>
  42f076:	b94a      	cbnz	r2, 42f08c <__aeabi_uldivmod+0x18>
  42f078:	2900      	cmp	r1, #0
  42f07a:	bf08      	it	eq
  42f07c:	2800      	cmpeq	r0, #0
  42f07e:	bf1c      	itt	ne
  42f080:	f04f 31ff 	movne.w	r1, #4294967295
  42f084:	f04f 30ff 	movne.w	r0, #4294967295
  42f088:	f000 b97a 	b.w	42f380 <__aeabi_idiv0>
  42f08c:	f1ad 0c08 	sub.w	ip, sp, #8
  42f090:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  42f094:	f000 f806 	bl	42f0a4 <__udivmoddi4>
  42f098:	f8dd e004 	ldr.w	lr, [sp, #4]
  42f09c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  42f0a0:	b004      	add	sp, #16
  42f0a2:	4770      	bx	lr

0042f0a4 <__udivmoddi4>:
  42f0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  42f0a8:	468c      	mov	ip, r1
  42f0aa:	460d      	mov	r5, r1
  42f0ac:	4604      	mov	r4, r0
  42f0ae:	9e08      	ldr	r6, [sp, #32]
  42f0b0:	2b00      	cmp	r3, #0
  42f0b2:	d151      	bne.n	42f158 <__udivmoddi4+0xb4>
  42f0b4:	428a      	cmp	r2, r1
  42f0b6:	4617      	mov	r7, r2
  42f0b8:	d96d      	bls.n	42f196 <__udivmoddi4+0xf2>
  42f0ba:	fab2 fe82 	clz	lr, r2
  42f0be:	f1be 0f00 	cmp.w	lr, #0
  42f0c2:	d00b      	beq.n	42f0dc <__udivmoddi4+0x38>
  42f0c4:	f1ce 0c20 	rsb	ip, lr, #32
  42f0c8:	fa01 f50e 	lsl.w	r5, r1, lr
  42f0cc:	fa20 fc0c 	lsr.w	ip, r0, ip
  42f0d0:	fa02 f70e 	lsl.w	r7, r2, lr
  42f0d4:	ea4c 0c05 	orr.w	ip, ip, r5
  42f0d8:	fa00 f40e 	lsl.w	r4, r0, lr
  42f0dc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  42f0e0:	0c25      	lsrs	r5, r4, #16
  42f0e2:	fbbc f8fa 	udiv	r8, ip, sl
  42f0e6:	fa1f f987 	uxth.w	r9, r7
  42f0ea:	fb0a cc18 	mls	ip, sl, r8, ip
  42f0ee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  42f0f2:	fb08 f309 	mul.w	r3, r8, r9
  42f0f6:	42ab      	cmp	r3, r5
  42f0f8:	d90a      	bls.n	42f110 <__udivmoddi4+0x6c>
  42f0fa:	19ed      	adds	r5, r5, r7
  42f0fc:	f108 32ff 	add.w	r2, r8, #4294967295
  42f100:	f080 8123 	bcs.w	42f34a <__udivmoddi4+0x2a6>
  42f104:	42ab      	cmp	r3, r5
  42f106:	f240 8120 	bls.w	42f34a <__udivmoddi4+0x2a6>
  42f10a:	f1a8 0802 	sub.w	r8, r8, #2
  42f10e:	443d      	add	r5, r7
  42f110:	1aed      	subs	r5, r5, r3
  42f112:	b2a4      	uxth	r4, r4
  42f114:	fbb5 f0fa 	udiv	r0, r5, sl
  42f118:	fb0a 5510 	mls	r5, sl, r0, r5
  42f11c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  42f120:	fb00 f909 	mul.w	r9, r0, r9
  42f124:	45a1      	cmp	r9, r4
  42f126:	d909      	bls.n	42f13c <__udivmoddi4+0x98>
  42f128:	19e4      	adds	r4, r4, r7
  42f12a:	f100 33ff 	add.w	r3, r0, #4294967295
  42f12e:	f080 810a 	bcs.w	42f346 <__udivmoddi4+0x2a2>
  42f132:	45a1      	cmp	r9, r4
  42f134:	f240 8107 	bls.w	42f346 <__udivmoddi4+0x2a2>
  42f138:	3802      	subs	r0, #2
  42f13a:	443c      	add	r4, r7
  42f13c:	eba4 0409 	sub.w	r4, r4, r9
  42f140:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  42f144:	2100      	movs	r1, #0
  42f146:	2e00      	cmp	r6, #0
  42f148:	d061      	beq.n	42f20e <__udivmoddi4+0x16a>
  42f14a:	fa24 f40e 	lsr.w	r4, r4, lr
  42f14e:	2300      	movs	r3, #0
  42f150:	6034      	str	r4, [r6, #0]
  42f152:	6073      	str	r3, [r6, #4]
  42f154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42f158:	428b      	cmp	r3, r1
  42f15a:	d907      	bls.n	42f16c <__udivmoddi4+0xc8>
  42f15c:	2e00      	cmp	r6, #0
  42f15e:	d054      	beq.n	42f20a <__udivmoddi4+0x166>
  42f160:	2100      	movs	r1, #0
  42f162:	e886 0021 	stmia.w	r6, {r0, r5}
  42f166:	4608      	mov	r0, r1
  42f168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42f16c:	fab3 f183 	clz	r1, r3
  42f170:	2900      	cmp	r1, #0
  42f172:	f040 808e 	bne.w	42f292 <__udivmoddi4+0x1ee>
  42f176:	42ab      	cmp	r3, r5
  42f178:	d302      	bcc.n	42f180 <__udivmoddi4+0xdc>
  42f17a:	4282      	cmp	r2, r0
  42f17c:	f200 80fa 	bhi.w	42f374 <__udivmoddi4+0x2d0>
  42f180:	1a84      	subs	r4, r0, r2
  42f182:	eb65 0503 	sbc.w	r5, r5, r3
  42f186:	2001      	movs	r0, #1
  42f188:	46ac      	mov	ip, r5
  42f18a:	2e00      	cmp	r6, #0
  42f18c:	d03f      	beq.n	42f20e <__udivmoddi4+0x16a>
  42f18e:	e886 1010 	stmia.w	r6, {r4, ip}
  42f192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42f196:	b912      	cbnz	r2, 42f19e <__udivmoddi4+0xfa>
  42f198:	2701      	movs	r7, #1
  42f19a:	fbb7 f7f2 	udiv	r7, r7, r2
  42f19e:	fab7 fe87 	clz	lr, r7
  42f1a2:	f1be 0f00 	cmp.w	lr, #0
  42f1a6:	d134      	bne.n	42f212 <__udivmoddi4+0x16e>
  42f1a8:	1beb      	subs	r3, r5, r7
  42f1aa:	0c3a      	lsrs	r2, r7, #16
  42f1ac:	fa1f fc87 	uxth.w	ip, r7
  42f1b0:	2101      	movs	r1, #1
  42f1b2:	fbb3 f8f2 	udiv	r8, r3, r2
  42f1b6:	0c25      	lsrs	r5, r4, #16
  42f1b8:	fb02 3318 	mls	r3, r2, r8, r3
  42f1bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  42f1c0:	fb0c f308 	mul.w	r3, ip, r8
  42f1c4:	42ab      	cmp	r3, r5
  42f1c6:	d907      	bls.n	42f1d8 <__udivmoddi4+0x134>
  42f1c8:	19ed      	adds	r5, r5, r7
  42f1ca:	f108 30ff 	add.w	r0, r8, #4294967295
  42f1ce:	d202      	bcs.n	42f1d6 <__udivmoddi4+0x132>
  42f1d0:	42ab      	cmp	r3, r5
  42f1d2:	f200 80d1 	bhi.w	42f378 <__udivmoddi4+0x2d4>
  42f1d6:	4680      	mov	r8, r0
  42f1d8:	1aed      	subs	r5, r5, r3
  42f1da:	b2a3      	uxth	r3, r4
  42f1dc:	fbb5 f0f2 	udiv	r0, r5, r2
  42f1e0:	fb02 5510 	mls	r5, r2, r0, r5
  42f1e4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  42f1e8:	fb0c fc00 	mul.w	ip, ip, r0
  42f1ec:	45a4      	cmp	ip, r4
  42f1ee:	d907      	bls.n	42f200 <__udivmoddi4+0x15c>
  42f1f0:	19e4      	adds	r4, r4, r7
  42f1f2:	f100 33ff 	add.w	r3, r0, #4294967295
  42f1f6:	d202      	bcs.n	42f1fe <__udivmoddi4+0x15a>
  42f1f8:	45a4      	cmp	ip, r4
  42f1fa:	f200 80b8 	bhi.w	42f36e <__udivmoddi4+0x2ca>
  42f1fe:	4618      	mov	r0, r3
  42f200:	eba4 040c 	sub.w	r4, r4, ip
  42f204:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  42f208:	e79d      	b.n	42f146 <__udivmoddi4+0xa2>
  42f20a:	4631      	mov	r1, r6
  42f20c:	4630      	mov	r0, r6
  42f20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42f212:	f1ce 0420 	rsb	r4, lr, #32
  42f216:	fa05 f30e 	lsl.w	r3, r5, lr
  42f21a:	fa07 f70e 	lsl.w	r7, r7, lr
  42f21e:	fa20 f804 	lsr.w	r8, r0, r4
  42f222:	0c3a      	lsrs	r2, r7, #16
  42f224:	fa25 f404 	lsr.w	r4, r5, r4
  42f228:	ea48 0803 	orr.w	r8, r8, r3
  42f22c:	fbb4 f1f2 	udiv	r1, r4, r2
  42f230:	ea4f 4518 	mov.w	r5, r8, lsr #16
  42f234:	fb02 4411 	mls	r4, r2, r1, r4
  42f238:	fa1f fc87 	uxth.w	ip, r7
  42f23c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  42f240:	fb01 f30c 	mul.w	r3, r1, ip
  42f244:	42ab      	cmp	r3, r5
  42f246:	fa00 f40e 	lsl.w	r4, r0, lr
  42f24a:	d909      	bls.n	42f260 <__udivmoddi4+0x1bc>
  42f24c:	19ed      	adds	r5, r5, r7
  42f24e:	f101 30ff 	add.w	r0, r1, #4294967295
  42f252:	f080 808a 	bcs.w	42f36a <__udivmoddi4+0x2c6>
  42f256:	42ab      	cmp	r3, r5
  42f258:	f240 8087 	bls.w	42f36a <__udivmoddi4+0x2c6>
  42f25c:	3902      	subs	r1, #2
  42f25e:	443d      	add	r5, r7
  42f260:	1aeb      	subs	r3, r5, r3
  42f262:	fa1f f588 	uxth.w	r5, r8
  42f266:	fbb3 f0f2 	udiv	r0, r3, r2
  42f26a:	fb02 3310 	mls	r3, r2, r0, r3
  42f26e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  42f272:	fb00 f30c 	mul.w	r3, r0, ip
  42f276:	42ab      	cmp	r3, r5
  42f278:	d907      	bls.n	42f28a <__udivmoddi4+0x1e6>
  42f27a:	19ed      	adds	r5, r5, r7
  42f27c:	f100 38ff 	add.w	r8, r0, #4294967295
  42f280:	d26f      	bcs.n	42f362 <__udivmoddi4+0x2be>
  42f282:	42ab      	cmp	r3, r5
  42f284:	d96d      	bls.n	42f362 <__udivmoddi4+0x2be>
  42f286:	3802      	subs	r0, #2
  42f288:	443d      	add	r5, r7
  42f28a:	1aeb      	subs	r3, r5, r3
  42f28c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  42f290:	e78f      	b.n	42f1b2 <__udivmoddi4+0x10e>
  42f292:	f1c1 0720 	rsb	r7, r1, #32
  42f296:	fa22 f807 	lsr.w	r8, r2, r7
  42f29a:	408b      	lsls	r3, r1
  42f29c:	fa05 f401 	lsl.w	r4, r5, r1
  42f2a0:	ea48 0303 	orr.w	r3, r8, r3
  42f2a4:	fa20 fe07 	lsr.w	lr, r0, r7
  42f2a8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  42f2ac:	40fd      	lsrs	r5, r7
  42f2ae:	ea4e 0e04 	orr.w	lr, lr, r4
  42f2b2:	fbb5 f9fc 	udiv	r9, r5, ip
  42f2b6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  42f2ba:	fb0c 5519 	mls	r5, ip, r9, r5
  42f2be:	fa1f f883 	uxth.w	r8, r3
  42f2c2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  42f2c6:	fb09 f408 	mul.w	r4, r9, r8
  42f2ca:	42ac      	cmp	r4, r5
  42f2cc:	fa02 f201 	lsl.w	r2, r2, r1
  42f2d0:	fa00 fa01 	lsl.w	sl, r0, r1
  42f2d4:	d908      	bls.n	42f2e8 <__udivmoddi4+0x244>
  42f2d6:	18ed      	adds	r5, r5, r3
  42f2d8:	f109 30ff 	add.w	r0, r9, #4294967295
  42f2dc:	d243      	bcs.n	42f366 <__udivmoddi4+0x2c2>
  42f2de:	42ac      	cmp	r4, r5
  42f2e0:	d941      	bls.n	42f366 <__udivmoddi4+0x2c2>
  42f2e2:	f1a9 0902 	sub.w	r9, r9, #2
  42f2e6:	441d      	add	r5, r3
  42f2e8:	1b2d      	subs	r5, r5, r4
  42f2ea:	fa1f fe8e 	uxth.w	lr, lr
  42f2ee:	fbb5 f0fc 	udiv	r0, r5, ip
  42f2f2:	fb0c 5510 	mls	r5, ip, r0, r5
  42f2f6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  42f2fa:	fb00 f808 	mul.w	r8, r0, r8
  42f2fe:	45a0      	cmp	r8, r4
  42f300:	d907      	bls.n	42f312 <__udivmoddi4+0x26e>
  42f302:	18e4      	adds	r4, r4, r3
  42f304:	f100 35ff 	add.w	r5, r0, #4294967295
  42f308:	d229      	bcs.n	42f35e <__udivmoddi4+0x2ba>
  42f30a:	45a0      	cmp	r8, r4
  42f30c:	d927      	bls.n	42f35e <__udivmoddi4+0x2ba>
  42f30e:	3802      	subs	r0, #2
  42f310:	441c      	add	r4, r3
  42f312:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  42f316:	eba4 0408 	sub.w	r4, r4, r8
  42f31a:	fba0 8902 	umull	r8, r9, r0, r2
  42f31e:	454c      	cmp	r4, r9
  42f320:	46c6      	mov	lr, r8
  42f322:	464d      	mov	r5, r9
  42f324:	d315      	bcc.n	42f352 <__udivmoddi4+0x2ae>
  42f326:	d012      	beq.n	42f34e <__udivmoddi4+0x2aa>
  42f328:	b156      	cbz	r6, 42f340 <__udivmoddi4+0x29c>
  42f32a:	ebba 030e 	subs.w	r3, sl, lr
  42f32e:	eb64 0405 	sbc.w	r4, r4, r5
  42f332:	fa04 f707 	lsl.w	r7, r4, r7
  42f336:	40cb      	lsrs	r3, r1
  42f338:	431f      	orrs	r7, r3
  42f33a:	40cc      	lsrs	r4, r1
  42f33c:	6037      	str	r7, [r6, #0]
  42f33e:	6074      	str	r4, [r6, #4]
  42f340:	2100      	movs	r1, #0
  42f342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42f346:	4618      	mov	r0, r3
  42f348:	e6f8      	b.n	42f13c <__udivmoddi4+0x98>
  42f34a:	4690      	mov	r8, r2
  42f34c:	e6e0      	b.n	42f110 <__udivmoddi4+0x6c>
  42f34e:	45c2      	cmp	sl, r8
  42f350:	d2ea      	bcs.n	42f328 <__udivmoddi4+0x284>
  42f352:	ebb8 0e02 	subs.w	lr, r8, r2
  42f356:	eb69 0503 	sbc.w	r5, r9, r3
  42f35a:	3801      	subs	r0, #1
  42f35c:	e7e4      	b.n	42f328 <__udivmoddi4+0x284>
  42f35e:	4628      	mov	r0, r5
  42f360:	e7d7      	b.n	42f312 <__udivmoddi4+0x26e>
  42f362:	4640      	mov	r0, r8
  42f364:	e791      	b.n	42f28a <__udivmoddi4+0x1e6>
  42f366:	4681      	mov	r9, r0
  42f368:	e7be      	b.n	42f2e8 <__udivmoddi4+0x244>
  42f36a:	4601      	mov	r1, r0
  42f36c:	e778      	b.n	42f260 <__udivmoddi4+0x1bc>
  42f36e:	3802      	subs	r0, #2
  42f370:	443c      	add	r4, r7
  42f372:	e745      	b.n	42f200 <__udivmoddi4+0x15c>
  42f374:	4608      	mov	r0, r1
  42f376:	e708      	b.n	42f18a <__udivmoddi4+0xe6>
  42f378:	f1a8 0802 	sub.w	r8, r8, #2
  42f37c:	443d      	add	r5, r7
  42f37e:	e72b      	b.n	42f1d8 <__udivmoddi4+0x134>

0042f380 <__aeabi_idiv0>:
  42f380:	4770      	bx	lr
  42f382:	bf00      	nop
  42f384:	74666f73 	.word	0x74666f73
  42f388:	65726177 	.word	0x65726177
  42f38c:	6e695720 	.word	0x6e695720
  42f390:	0d707564 	.word	0x0d707564
  42f394:	0000000a 	.word	0x0000000a

0042f398 <can_bit_time>:
  42f398:	02020308 02094b03 43020303 0303030a     .....K.....C....
  42f3a8:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
  42f3b8:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
  42f3c8:	05050510 06114504 47040505 06060512     .....E.....G....
  42f3d8:	06134304 44040606 06060714 08154604     .C.....D.....F..
  42f3e8:	47040606 07070716 08174404 46040708     ...G.....D.....F
  42f3f8:	08080718 08194304 44040808 656c6946     .....C.....DFile
  42f408:	7a69735f 6c252065 00000a75 695f5852     _size %lu...RX_i
  42f418:	6567616d 20435243 000a7825 746f4e20     mageCRC %x.. Not
  42f428:	6d615320 43524365 00000a0d 616e6946      SameCRC....Fina
  42f438:	6d69206c 43656761 25204352 200a2078     l imageCRC %x . 
  42f448:	695f5852 6567616d 20435243 0a0d7825     RX_imageCRC %x..
  42f458:	00000000 706f7453 69745f20 3072656d     ....Stop _timer0
  42f468:	0000000a 72656d41 725f7865 735f6374     ....Amerex_rtc_s
  42f478:	25207465 0a0d646c 00000000 656d6954     et %ld......Time
  42f488:	20746120 746f6f42 3a207075 756c2520      at Bootup : %lu
  42f498:	00000a0d 72656d41 475f7865 4c5f7465     ....Amerex_Get_L
  42f4a8:	0a0d676f 00000000 72656d41 535f7865     og......Amerex_S
  42f4b8:	7774666f 5f657261 0d545352 2710000a              oftware_RST...

0042f4c6 <OFF_delay_10s>:
  42f4c6:	01f42710                                         .'

0042f4c8 <ON_delay_500ms>:
  42f4c8:	000001f4 73616c66 65203a68 65736172     ....flash: erase
  42f4d8:	64646120 73736572 73756d20 65622074      address must be
  42f4e8:	70203820 20656761 67696c61 0d64656e      8 page aligned.
  42f4f8:	0000000a 73616c66 65203a68 65736172     ....flash: erase
  42f508:	6f726620 7825206d 00000a0d 73616c66      from %x....flas
  42f518:	25203a68 72652078 20657361 6f727265     h: %x erase erro
  42f528:	000a0d72 61636f6c 6e6f6974 756c2520     r...location %lu
  42f538:	64696d20 6c253a20 000a0d75 53414c46      mid :%lu...FLAS
  42f548:	4c432048 6c252052 0a0d2064 00000000     H CLR %ld ......
  42f558:	20525746 0a0d6425 43524320 0d642520     FWR %d.. CRC %d.
  42f568:	0000000a 61636f6c 6e6f6974 646c2520     ....location %ld
  42f578:	64696d20 64253a20 00000a0d 2c646c25      mid :%d....%ld,
  42f588:	252c6425 64252c64 0064252c 0a0d7325     %d,%d,%d,%d.%s..
  42f598:	00000000 64616552 79617020 64616f6c     ....Read payload
  42f5a8:	746e6320 646c2520 00000a0d 003d0900      cnt %ld......=.
  42f5b8:	00004b00 00000800 03938700 0001c200     .K..............
  42f5c8:	00000800 72617453 745f2074 72656d69     ....Start _timer
  42f5d8:	00000a30 65746e65 41432072 46445f4e     0...enter CAN_DF
  42f5e8:	0a0d2055 00000000 5f554644 6f747561     U ......DFU_auto
  42f5f8:	6978655f 0a0d2074 00000000 00000001     _exit ..........
  42f608:	00000002 00000004 00000008 00000010     ................
  42f618:	00000020 00000040 00000080 00000100      ...@...........
  42f628:	00000200 00000400                       ........

0042f630 <_global_impure_ptr>:
  42f630:	200000d0                                ... 

0042f634 <DAYS_IN_MONTH>:
  42f634:	0000001f 0000001c 0000001f 0000001e     ................
  42f644:	0000001f 0000001e 0000001f 0000001f     ................
  42f654:	0000001e 0000001f 0000001e 0000001f     ................

0042f664 <_DAYS_BEFORE_MONTH>:
  42f664:	00000000 0000001f 0000003b 0000005a     ........;...Z...
  42f674:	00000078 00000097 000000b5 000000d4     x...............
  42f684:	000000f3 00000111 00000130 0000014e     ........0...N...

0042f694 <__month_lengths>:
  42f694:	0000001f 0000001c 0000001f 0000001e     ................
  42f6a4:	0000001f 0000001e 0000001f 0000001f     ................
  42f6b4:	0000001e 0000001f 0000001e 0000001f     ................
  42f6c4:	0000001f 0000001d 0000001f 0000001e     ................
  42f6d4:	0000001f 0000001e 0000001f 0000001f     ................
  42f6e4:	0000001e 0000001f 0000001e 0000001f     ................
  42f6f4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  42f704:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  42f714:	00000000 33323130 37363534 62613938     ....0123456789ab
  42f724:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  42f734:	00000030                                0...

0042f738 <blanks.7223>:
  42f738:	20202020 20202020 20202020 20202020                     

0042f748 <zeroes.7224>:
  42f748:	30303030 30303030 30303030 30303030     0000000000000000
  42f758:	00005a54 00544d47 5b303125 392d305e     TZ..GMT.%10[^0-9
  42f768:	5d2d2b2c 00006e25 25756825 68253a6e     ,+-]%n..%hu%n:%h
  42f778:	3a6e2575 25756825 0000006e 7568254d     u%n:%hu%n...M%hu
  42f788:	252e6e25 6e257568 7568252e 00006e25     %n.%hu%n.%hu%n..
  42f798:	7568252f 253a6e25 6e257568 7568253a     /%hu%n:%hu%n:%hu
  42f7a8:	00006e25                                %n..

0042f7ac <blanks.7217>:
  42f7ac:	20202020 20202020 20202020 20202020                     

0042f7bc <zeroes.7218>:
  42f7bc:	30303030 30303030 30303030 30303030     0000000000000000
  42f7cc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  42f7dc:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  42f7ec:	00000000                                ....

0042f7f0 <__mprec_bigtens>:
  42f7f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  42f800:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  42f810:	7f73bf3c 75154fdd                       <.s..O.u

0042f818 <__mprec_tens>:
  42f818:	00000000 3ff00000 00000000 40240000     .......?......$@
  42f828:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  42f838:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  42f848:	00000000 412e8480 00000000 416312d0     .......A......cA
  42f858:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  42f868:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  42f878:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  42f888:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  42f898:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  42f8a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  42f8b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  42f8c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  42f8d8:	79d99db4 44ea7843                       ...yCx.D

0042f8e0 <p05.6055>:
  42f8e0:	00000005 00000019 0000007d              ........}...

0042f8ec <basefix.6796>:
  42f8ec:	0001000a 00030002 00050004 00070006     ................
  42f8fc:	00090008 000b000a 000d000c 000f000e     ................
  42f90c:	00000010                                ....

0042f910 <_ctype_>:
  42f910:	20202000 20202020 28282020 20282828     .         ((((( 
  42f920:	20202020 20202020 20202020 20202020                     
  42f930:	10108820 10101010 10101010 10101010      ...............
  42f940:	04040410 04040404 10040404 10101010     ................
  42f950:	41411010 41414141 01010101 01010101     ..AAAAAA........
  42f960:	01010101 01010101 01010101 10101010     ................
  42f970:	42421010 42424242 02020202 02020202     ..BBBBBB........
  42f980:	02020202 02020202 02020202 10101010     ................
  42f990:	00000020 00000000 00000000 00000000      ...............
	...

0042fa14 <_init>:
  42fa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42fa16:	bf00      	nop
  42fa18:	bcf8      	pop	{r3, r4, r5, r6, r7}
  42fa1a:	bc08      	pop	{r3}
  42fa1c:	469e      	mov	lr, r3
  42fa1e:	4770      	bx	lr

0042fa20 <__init_array_start>:
  42fa20:	00429bed 	.word	0x00429bed

0042fa24 <__frame_dummy_init_array_entry>:
  42fa24:	0042011d                                ..B.

0042fa28 <_fini>:
  42fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42fa2a:	bf00      	nop
  42fa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  42fa2e:	bc08      	pop	{r3}
  42fa30:	469e      	mov	lr, r3
  42fa32:	4770      	bx	lr

0042fa34 <__fini_array_start>:
  42fa34:	004200f9 	.word	0x004200f9

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	003ffffc 	.word	0x003ffffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 000e 	and.w	r0, r0, #14
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <SCAP_ReadCnt.11953>:
20000088:	001e 0000                                   ....

2000008c <vref>:
2000008c:	3333 4053                                   33S@

20000090 <active_sf_cs>:
20000090:	0001                                        ..

20000092 <buzzer_interval_g_u16>:
20000092:	0064                                        d.

20000094 <ALEDS_bit>:
20000094:	010a                                             .

20000095 <blink_g_b>:
20000095:	0001 0100                                        ...

20000098 <log_data>:
20000098:	0001 0000 0403 0702 0000 0000               ............

200000a4 <state.11874>:
200000a4:	0001                                        ..

200000a6 <config_LED_interval_g_u16>:
200000a6:	01f4                                        ..

200000a8 <fire_LED_duty_max_g_u8>:
200000a8:	02c7                                             .

200000a9 <fire_LED_fading_count_g_u8>:
200000a9:	f402                                             .

200000aa <sec_pwr_interval_g_u32>:
200000aa:	01f4                                        ..

200000ac <trouble_LED_interval_g_u16>:
200000ac:	01f4 0000                                   ....

200000b0 <temp_data>:
200000b0:	0050 0050 001e 03e8 03e8 0000 0001 0000     P.P.............

200000c0 <system_reset_sl_b.11914>:
200000c0:	0101                                             .

200000c1 <g_interrupt_enabled>:
200000c1:	0001 0000                                        ...

200000c4 <SystemCoreClock>:
200000c4:	0900 003d                                   ..=.

200000c8 <_impure_ptr>:
200000c8:	00d0 2000 0000 0000                         ... ....

200000d0 <impure_data>:
200000d0:	0000 0000 03bc 2000 0424 2000 048c 2000     ....... $.. ... 
	...
20000178:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000188:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004f8 <_tzname>:
200004f8:	f75c 0042 f75c 0042                         \.B.\.B.

20000500 <__atexit_recursive_mutex>:
20000500:	1714 2000                                   ... 

20000504 <tzinfo>:
20000504:	0001 0000 0000 0000 004a 0000 0000 0000     ........J.......
	...
20000528:	004a 0000 0000 0000 0000 0000 0000 0000     J...............
	...

20000544 <__global_locale>:
20000544:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000564:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000584:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000604:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000624:	de6d 0042 be5d 0042 0000 0000 f910 0042     m.B.].B.......B.
20000634:	f7e8 0042 f5ec 0042 f5ec 0042 f5ec 0042     ..B...B...B...B.
20000644:	f5ec 0042 f5ec 0042 f5ec 0042 f5ec 0042     ..B...B...B...B.
20000654:	f5ec 0042 f5ec 0042 ffff ffff ffff ffff     ..B...B.........
20000664:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000068c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200006b0 <__malloc_av_>:
	...
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 
20000928:	0920 2000 0920 2000 0928 2000 0928 2000      ..  .. (.. (.. 
20000938:	0930 2000 0930 2000 0938 2000 0938 2000     0.. 0.. 8.. 8.. 
20000948:	0940 2000 0940 2000 0948 2000 0948 2000     @.. @.. H.. H.. 
20000958:	0950 2000 0950 2000 0958 2000 0958 2000     P.. P.. X.. X.. 
20000968:	0960 2000 0960 2000 0968 2000 0968 2000     `.. `.. h.. h.. 
20000978:	0970 2000 0970 2000 0978 2000 0978 2000     p.. p.. x.. x.. 
20000988:	0980 2000 0980 2000 0988 2000 0988 2000     ... ... ... ... 
20000998:	0990 2000 0990 2000 0998 2000 0998 2000     ... ... ... ... 
200009a8:	09a0 2000 09a0 2000 09a8 2000 09a8 2000     ... ... ... ... 
200009b8:	09b0 2000 09b0 2000 09b8 2000 09b8 2000     ... ... ... ... 
200009c8:	09c0 2000 09c0 2000 09c8 2000 09c8 2000     ... ... ... ... 
200009d8:	09d0 2000 09d0 2000 09d8 2000 09d8 2000     ... ... ... ... 
200009e8:	09e0 2000 09e0 2000 09e8 2000 09e8 2000     ... ... ... ... 
200009f8:	09f0 2000 09f0 2000 09f8 2000 09f8 2000     ... ... ... ... 
20000a08:	0a00 2000 0a00 2000 0a08 2000 0a08 2000     ... ... ... ... 
20000a18:	0a10 2000 0a10 2000 0a18 2000 0a18 2000     ... ... ... ... 
20000a28:	0a20 2000 0a20 2000 0a28 2000 0a28 2000      ..  .. (.. (.. 
20000a38:	0a30 2000 0a30 2000 0a38 2000 0a38 2000     0.. 0.. 8.. 8.. 
20000a48:	0a40 2000 0a40 2000 0a48 2000 0a48 2000     @.. @.. H.. H.. 
20000a58:	0a50 2000 0a50 2000 0a58 2000 0a58 2000     P.. P.. X.. X.. 
20000a68:	0a60 2000 0a60 2000 0a68 2000 0a68 2000     `.. `.. h.. h.. 
20000a78:	0a70 2000 0a70 2000 0a78 2000 0a78 2000     p.. p.. x.. x.. 
20000a88:	0a80 2000 0a80 2000 0a88 2000 0a88 2000     ... ... ... ... 
20000a98:	0a90 2000 0a90 2000 0a98 2000 0a98 2000     ... ... ... ... 
20000aa8:	0aa0 2000 0aa0 2000 0aa8 2000 0aa8 2000     ... ... ... ... 

20000ab8 <__malloc_sbrk_base>:
20000ab8:	ffff ffff                                   ....

20000abc <__malloc_trim_threshold>:
20000abc:	0000 0002                                   ....

20000ac0 <environ>:
20000ac0:	1470 2000                                   p.. 
